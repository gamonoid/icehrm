{"version":3,"sources":["node_modules/browser-pack/_prelude.js","extensions/kudos/admin/web/js/controller.js","extensions/kudos/admin/web/js/index.js","extensions/kudos/admin/web/js/module.js","extensions/kudos/admin/web/js/view.js","node_modules/process/browser.js","web/api-common/RequestCache.js","web/api/AdapterBase.js","web/api/ExtensionController.js","web/api/ExtensionModuleBase.js","web/api/FormValidation.js","web/api/IceApiClient.js","web/api/IceResponse.js","web/api/MasterDataReader.js","web/api/ModuleBase.js","web/api/ReactModalAdapterBase.js","web/components/IceColorPick.js","web/components/IceDataGroup.js","web/components/IceEditor.js","web/components/IceForm.js","web/components/IceFormModal.js","web/components/IceLabel.js","web/components/IceSelect.js","web/components/IceSignature.js","web/components/IceStepForm.js","web/components/IceStepFromModal.js","web/components/IceTable.js","web/components/IceUpload.js","web/node_modules/@editorjs/checklist/dist/bundle.js","web/node_modules/@editorjs/code/dist/bundle.js","web/node_modules/@editorjs/editorjs/dist/editor.js","web/node_modules/@editorjs/embed/dist/bundle.js","web/node_modules/@editorjs/header/dist/bundle.js","web/node_modules/@editorjs/inline-code/dist/bundle.js","web/node_modules/@editorjs/list/dist/bundle.js","web/node_modules/@editorjs/marker/dist/bundle.js","web/node_modules/@editorjs/paragraph/dist/bundle.js","web/node_modules/@editorjs/quote/dist/bundle.js","web/node_modules/@editorjs/raw/dist/bundle.js","web/node_modules/@editorjs/table/dist/bundle.js","web/node_modules/@icons/material/CheckIcon.js","web/node_modules/@icons/material/UnfoldMoreHorizontalIcon.js","web/node_modules/axios/index.js","web/node_modules/axios/lib/adapters/xhr.js","web/node_modules/axios/lib/axios.js","web/node_modules/axios/lib/cancel/Cancel.js","web/node_modules/axios/lib/cancel/CancelToken.js","web/node_modules/axios/lib/cancel/isCancel.js","web/node_modules/axios/lib/core/Axios.js","web/node_modules/axios/lib/core/InterceptorManager.js","web/node_modules/axios/lib/core/buildFullPath.js","web/node_modules/axios/lib/core/createError.js","web/node_modules/axios/lib/core/dispatchRequest.js","web/node_modules/axios/lib/core/enhanceError.js","web/node_modules/axios/lib/core/mergeConfig.js","web/node_modules/axios/lib/core/settle.js","web/node_modules/axios/lib/core/transformData.js","web/node_modules/axios/lib/defaults.js","web/node_modules/axios/lib/helpers/bind.js","web/node_modules/axios/lib/helpers/buildURL.js","web/node_modules/axios/lib/helpers/combineURLs.js","web/node_modules/axios/lib/helpers/cookies.js","web/node_modules/axios/lib/helpers/isAbsoluteURL.js","web/node_modules/axios/lib/helpers/isURLSameOrigin.js","web/node_modules/axios/lib/helpers/normalizeHeaderName.js","web/node_modules/axios/lib/helpers/parseHeaders.js","web/node_modules/axios/lib/helpers/spread.js","web/node_modules/axios/lib/utils.js","web/node_modules/lodash/_DataView.js","web/node_modules/lodash/_Hash.js","web/node_modules/lodash/_ListCache.js","web/node_modules/lodash/_Map.js","web/node_modules/lodash/_MapCache.js","web/node_modules/lodash/_Promise.js","web/node_modules/lodash/_Set.js","web/node_modules/lodash/_SetCache.js","web/node_modules/lodash/_Stack.js","web/node_modules/lodash/_Symbol.js","web/node_modules/lodash/_Uint8Array.js","web/node_modules/lodash/_WeakMap.js","web/node_modules/lodash/_apply.js","web/node_modules/lodash/_arrayEach.js","web/node_modules/lodash/_arrayFilter.js","web/node_modules/lodash/_arrayLikeKeys.js","web/node_modules/lodash/_arrayMap.js","web/node_modules/lodash/_arrayPush.js","web/node_modules/lodash/_arraySome.js","web/node_modules/lodash/_assignMergeValue.js","web/node_modules/lodash/_assignValue.js","web/node_modules/lodash/_assocIndexOf.js","web/node_modules/lodash/_baseAssign.js","web/node_modules/lodash/_baseAssignIn.js","web/node_modules/lodash/_baseAssignValue.js","web/node_modules/lodash/_baseClone.js","web/node_modules/lodash/_baseCreate.js","web/node_modules/lodash/_baseEach.js","web/node_modules/lodash/_baseFor.js","web/node_modules/lodash/_baseForOwn.js","web/node_modules/lodash/_baseGet.js","web/node_modules/lodash/_baseGetAllKeys.js","web/node_modules/lodash/_baseGetTag.js","web/node_modules/lodash/_baseHasIn.js","web/node_modules/lodash/_baseIsArguments.js","web/node_modules/lodash/_baseIsEqual.js","web/node_modules/lodash/_baseIsEqualDeep.js","web/node_modules/lodash/_baseIsMap.js","web/node_modules/lodash/_baseIsMatch.js","web/node_modules/lodash/_baseIsNative.js","web/node_modules/lodash/_baseIsSet.js","web/node_modules/lodash/_baseIsTypedArray.js","web/node_modules/lodash/_baseIteratee.js","web/node_modules/lodash/_baseKeys.js","web/node_modules/lodash/_baseKeysIn.js","web/node_modules/lodash/_baseMap.js","web/node_modules/lodash/_baseMatches.js","web/node_modules/lodash/_baseMatchesProperty.js","web/node_modules/lodash/_baseMerge.js","web/node_modules/lodash/_baseMergeDeep.js","web/node_modules/lodash/_baseProperty.js","web/node_modules/lodash/_basePropertyDeep.js","web/node_modules/lodash/_baseRest.js","web/node_modules/lodash/_baseSetToString.js","web/node_modules/lodash/_baseTimes.js","web/node_modules/lodash/_baseToString.js","web/node_modules/lodash/_baseUnary.js","web/node_modules/lodash/_cacheHas.js","web/node_modules/lodash/_castFunction.js","web/node_modules/lodash/_castPath.js","web/node_modules/lodash/_cloneArrayBuffer.js","web/node_modules/lodash/_cloneBuffer.js","web/node_modules/lodash/_cloneDataView.js","web/node_modules/lodash/_cloneRegExp.js","web/node_modules/lodash/_cloneSymbol.js","web/node_modules/lodash/_cloneTypedArray.js","web/node_modules/lodash/_copyArray.js","web/node_modules/lodash/_copyObject.js","web/node_modules/lodash/_copySymbols.js","web/node_modules/lodash/_copySymbolsIn.js","web/node_modules/lodash/_coreJsData.js","web/node_modules/lodash/_createAssigner.js","web/node_modules/lodash/_createBaseEach.js","web/node_modules/lodash/_createBaseFor.js","web/node_modules/lodash/_defineProperty.js","web/node_modules/lodash/_equalArrays.js","web/node_modules/lodash/_equalByTag.js","web/node_modules/lodash/_equalObjects.js","web/node_modules/lodash/_freeGlobal.js","web/node_modules/lodash/_getAllKeys.js","web/node_modules/lodash/_getAllKeysIn.js","web/node_modules/lodash/_getMapData.js","web/node_modules/lodash/_getMatchData.js","web/node_modules/lodash/_getNative.js","web/node_modules/lodash/_getPrototype.js","web/node_modules/lodash/_getRawTag.js","web/node_modules/lodash/_getSymbols.js","web/node_modules/lodash/_getSymbolsIn.js","web/node_modules/lodash/_getTag.js","web/node_modules/lodash/_getValue.js","web/node_modules/lodash/_hasPath.js","web/node_modules/lodash/_hashClear.js","web/node_modules/lodash/_hashDelete.js","web/node_modules/lodash/_hashGet.js","web/node_modules/lodash/_hashHas.js","web/node_modules/lodash/_hashSet.js","web/node_modules/lodash/_initCloneArray.js","web/node_modules/lodash/_initCloneByTag.js","web/node_modules/lodash/_initCloneObject.js","web/node_modules/lodash/_isIndex.js","web/node_modules/lodash/_isIterateeCall.js","web/node_modules/lodash/_isKey.js","web/node_modules/lodash/_isKeyable.js","web/node_modules/lodash/_isMasked.js","web/node_modules/lodash/_isPrototype.js","web/node_modules/lodash/_isStrictComparable.js","web/node_modules/lodash/_listCacheClear.js","web/node_modules/lodash/_listCacheDelete.js","web/node_modules/lodash/_listCacheGet.js","web/node_modules/lodash/_listCacheHas.js","web/node_modules/lodash/_listCacheSet.js","web/node_modules/lodash/_mapCacheClear.js","web/node_modules/lodash/_mapCacheDelete.js","web/node_modules/lodash/_mapCacheGet.js","web/node_modules/lodash/_mapCacheHas.js","web/node_modules/lodash/_mapCacheSet.js","web/node_modules/lodash/_mapToArray.js","web/node_modules/lodash/_matchesStrictComparable.js","web/node_modules/lodash/_memoizeCapped.js","web/node_modules/lodash/_nativeCreate.js","web/node_modules/lodash/_nativeKeys.js","web/node_modules/lodash/_nativeKeysIn.js","web/node_modules/lodash/_nodeUtil.js","web/node_modules/lodash/_objectToString.js","web/node_modules/lodash/_overArg.js","web/node_modules/lodash/_overRest.js","web/node_modules/lodash/_root.js","web/node_modules/lodash/_safeGet.js","web/node_modules/lodash/_setCacheAdd.js","web/node_modules/lodash/_setCacheHas.js","web/node_modules/lodash/_setToArray.js","web/node_modules/lodash/_setToString.js","web/node_modules/lodash/_shortOut.js","web/node_modules/lodash/_stackClear.js","web/node_modules/lodash/_stackDelete.js","web/node_modules/lodash/_stackGet.js","web/node_modules/lodash/_stackHas.js","web/node_modules/lodash/_stackSet.js","web/node_modules/lodash/_stringToPath.js","web/node_modules/lodash/_toKey.js","web/node_modules/lodash/_toSource.js","web/node_modules/lodash/cloneDeep.js","web/node_modules/lodash/constant.js","web/node_modules/lodash/debounce.js","web/node_modules/lodash/each.js","web/node_modules/lodash/eq.js","web/node_modules/lodash/forEach.js","web/node_modules/lodash/forOwn.js","web/node_modules/lodash/get.js","web/node_modules/lodash/hasIn.js","web/node_modules/lodash/identity.js","web/node_modules/lodash/isArguments.js","web/node_modules/lodash/isArray.js","web/node_modules/lodash/isArrayLike.js","web/node_modules/lodash/isArrayLikeObject.js","web/node_modules/lodash/isBuffer.js","web/node_modules/lodash/isFunction.js","web/node_modules/lodash/isLength.js","web/node_modules/lodash/isMap.js","web/node_modules/lodash/isObject.js","web/node_modules/lodash/isObjectLike.js","web/node_modules/lodash/isPlainObject.js","web/node_modules/lodash/isSet.js","web/node_modules/lodash/isString.js","web/node_modules/lodash/isSymbol.js","web/node_modules/lodash/isTypedArray.js","web/node_modules/lodash/isUndefined.js","web/node_modules/lodash/keys.js","web/node_modules/lodash/keysIn.js","web/node_modules/lodash/map.js","web/node_modules/lodash/memoize.js","web/node_modules/lodash/merge.js","web/node_modules/lodash/now.js","web/node_modules/lodash/property.js","web/node_modules/lodash/stubArray.js","web/node_modules/lodash/stubFalse.js","web/node_modules/lodash/throttle.js","web/node_modules/lodash/toNumber.js","web/node_modules/lodash/toPlainObject.js","web/node_modules/lodash/toString.js","web/node_modules/material-colors/dist/colors.js","web/node_modules/object-assign/index.js","web/node_modules/prop-types/checkPropTypes.js","web/node_modules/prop-types/factoryWithThrowingShims.js","web/node_modules/prop-types/factoryWithTypeCheckers.js","web/node_modules/prop-types/index.js","web/node_modules/prop-types/lib/ReactPropTypesSecret.js","web/node_modules/react-color/lib/components/alpha/Alpha.js","web/node_modules/react-color/lib/components/alpha/AlphaPointer.js","web/node_modules/react-color/lib/components/block/Block.js","web/node_modules/react-color/lib/components/block/BlockSwatches.js","web/node_modules/react-color/lib/components/chrome/Chrome.js","web/node_modules/react-color/lib/components/chrome/ChromeFields.js","web/node_modules/react-color/lib/components/chrome/ChromePointer.js","web/node_modules/react-color/lib/components/chrome/ChromePointerCircle.js","web/node_modules/react-color/lib/components/circle/Circle.js","web/node_modules/react-color/lib/components/circle/CircleSwatch.js","web/node_modules/react-color/lib/components/common/Alpha.js","web/node_modules/react-color/lib/components/common/Checkboard.js","web/node_modules/react-color/lib/components/common/ColorWrap.js","web/node_modules/react-color/lib/components/common/EditableInput.js","web/node_modules/react-color/lib/components/common/Hue.js","web/node_modules/react-color/lib/components/common/Raised.js","web/node_modules/react-color/lib/components/common/Saturation.js","web/node_modules/react-color/lib/components/common/Swatch.js","web/node_modules/react-color/lib/components/common/index.js","web/node_modules/react-color/lib/components/compact/Compact.js","web/node_modules/react-color/lib/components/compact/CompactColor.js","web/node_modules/react-color/lib/components/compact/CompactFields.js","web/node_modules/react-color/lib/components/github/Github.js","web/node_modules/react-color/lib/components/github/GithubSwatch.js","web/node_modules/react-color/lib/components/google/Google.js","web/node_modules/react-color/lib/components/google/GoogleFields.js","web/node_modules/react-color/lib/components/google/GooglePointer.js","web/node_modules/react-color/lib/components/google/GooglePointerCircle.js","web/node_modules/react-color/lib/components/hue/Hue.js","web/node_modules/react-color/lib/components/hue/HuePointer.js","web/node_modules/react-color/lib/components/material/Material.js","web/node_modules/react-color/lib/components/photoshop/Photoshop.js","web/node_modules/react-color/lib/components/photoshop/PhotoshopButton.js","web/node_modules/react-color/lib/components/photoshop/PhotoshopFields.js","web/node_modules/react-color/lib/components/photoshop/PhotoshopPointer.js","web/node_modules/react-color/lib/components/photoshop/PhotoshopPointerCircle.js","web/node_modules/react-color/lib/components/photoshop/PhotoshopPreviews.js","web/node_modules/react-color/lib/components/sketch/Sketch.js","web/node_modules/react-color/lib/components/sketch/SketchFields.js","web/node_modules/react-color/lib/components/sketch/SketchPresetColors.js","web/node_modules/react-color/lib/components/slider/Slider.js","web/node_modules/react-color/lib/components/slider/SliderPointer.js","web/node_modules/react-color/lib/components/slider/SliderSwatch.js","web/node_modules/react-color/lib/components/slider/SliderSwatches.js","web/node_modules/react-color/lib/components/swatches/Swatches.js","web/node_modules/react-color/lib/components/swatches/SwatchesColor.js","web/node_modules/react-color/lib/components/swatches/SwatchesGroup.js","web/node_modules/react-color/lib/components/twitter/Twitter.js","web/node_modules/react-color/lib/helpers/alpha.js","web/node_modules/react-color/lib/helpers/checkboard.js","web/node_modules/react-color/lib/helpers/color.js","web/node_modules/react-color/lib/helpers/hue.js","web/node_modules/react-color/lib/helpers/interaction.js","web/node_modules/react-color/lib/helpers/saturation.js","web/node_modules/react-color/lib/index.js","web/node_modules/react-is/cjs/react-is.development.js","web/node_modules/react-is/cjs/react-is.production.min.js","web/node_modules/react-is/index.js","web/node_modules/react-signature-canvas/build/index.js","web/node_modules/reactcss/lib/autoprefix.js","web/node_modules/reactcss/lib/components/active.js","web/node_modules/reactcss/lib/components/hover.js","web/node_modules/reactcss/lib/flattenNames.js","web/node_modules/reactcss/lib/index.js","web/node_modules/reactcss/lib/loop.js","web/node_modules/reactcss/lib/mergeClasses.js","web/node_modules/signature_pad/dist/signature_pad.js","web/node_modules/tinycolor2/tinycolor.js","web/node_modules/trim-canvas/build/index.js"],"names":[],"mappings":"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,KAAqB,EAA5G,KAAoH,CAAC,KAAK,KAAL,CAAW,QAAjI,iBACF,gCAAC,YAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,QAAQ,EAAC,QAA7B;AAAsC,QAAA,OAAO,EAAE,KAAK;AAApD,sBACE,gCAAC,uBAAD,OADF,eAFF,EAMK,CAAE,KAAK,KAAL,CAAW,KAAX,IAAoB,IAApB,IAA4B,KAAK,KAAL,CAAW,KAAX,KAAqB,EAAlD,IAA0D,KAAK,KAAL,CAAW,KAAX,IAAoB,IAApB,IAA4B,KAAK,KAAL,CAAW,KAAX,KAAqB,EAA5G,KAAoH,CAAC,KAAK,KAAL,CAAW,QAAhI,IAA4I,CAAC,KAAK,KAAL,CAAW,QAAzJ,iBACF,gCAAC,YAAD;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,QAAQ,EAAC,QAA7B;AAAsC,QAAA,MAAM,MAA5C;AAA6C,QAAA,OAAO,EAAE,KAAK;AAA3D,sBACE,gCAAC,qBAAD,OADF,YAPF,CAZF,CADF;AA4BD;;;;EArJqB,kBAAM,S;;eAwJf,S;;;;AC5Jf;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;;ACDA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;;ACAA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACztKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC1FA;AACA;AACA;AACA;AACA;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/LA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzlzlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtxvjttxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpppKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACznDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzpNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxtjNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACPA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxlmqCA","file":"kudos.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import ExtensionController from '../../../../../web/api/ExtensionController';\n\nclass KudosAdminExtensionController extends ExtensionController {\n  handleTestAction() {\n    /**\n     * The `testAction` should be defined in the `Controller.php` class\n     */\n    this.handleRequest(\n      'testAction',\n      { data: 'message from client' },\n    ).then((response) => {\n      console.log(response);\n    });\n  }\n\n  makeSomeTestApiRequests() {\n    /**\n     * The endpoints are defined in ApiController.php\n     */\n\n    // Making a simple GET request\n    this.getApiClient().get('kudos/echo').then((response) => {\n      console.log('Response to kudos/echo GET request:');\n      console.log(response);\n    });\n\n    // Making a simple POST request\n    this.getApiClient().post('kudos/echo', { browserTime: (new Date()).getTime() }).then((response) => {\n      console.log('Response to kudos/echo POST request:');\n      console.log(response);\n    });\n  }\n}\nexport default KudosAdminExtensionController;\n","import React from 'react';\nimport KudosAdminExtensionController from './controller';\nimport KudosAdminModule from './module';\n\nfunction init(data) {\n  // Exposing modJsList and modJs is required to make sure IceHrm core features\n  // are working as expected\n  window.modJsList = [];\n  window.modJs = new KudosAdminModule('KudosAdmin');\n  window.modJsList.push(window.modJs);\n\n  // Defining a controller to handle requests from the extension\n  window.kudosExtensionController = new KudosAdminExtensionController(\n    'admin=kudos',\n    data.controller_url,\n  );\n}\n\nwindow.initKudosAdmin = init;\n","/**\n * Each extension should define and expose a module class extending `ExtensionModuleBase`.\n * This is to make sure that the extension is compatible with the core features of IceHrm.\n */\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport ExtensionModuleBase from \"../../../../../web/api/ExtensionModuleBase\";\nimport KudosAdminExtensionView from \"./view\";\n\nclass KudosAdminModule extends ExtensionModuleBase {\n  /**\n   * This method should be used to mount the React component responsible for the extension view.\n   * This method will be called after IceHrm core and frontend is loaded.\n   */\n  showExtensionView() {\n    // Mounting your extension\n    // The DOM element with id `content` is defined in the `index.php` file of the extension\n    ReactDOM.render(<KudosAdminExtensionView />, document.getElementById('content'));\n\n    // Calling a method in the controller (just to show how it works)\n    window.kudosExtensionController.handleTestAction();\n\n    // Sending some test api requests to endpoints defined in ApiController.php\n    window.kudosExtensionController.makeSomeTestApiRequests();\n  }\n}\n\nexport default KudosAdminModule;\n","import React from 'react';\nimport { Empty } from 'antd';\n\nclass KudosAdminExtensionView extends React.Component {\n  render() {\n    return (\n      <Empty\n        description={(\n          <span>\n            Stating point to build an awesome IceHrm extension.\n          </span>\n        )}\n      />\n    );\n  }\n}\n\nexport default KudosAdminExtensionView;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\n Copyright (c) 2018 [Glacies UG, Berlin, Germany] (http://glacies.de)\n Developer: Thilina Hasantha (http://lk.linkedin.com/in/thilinah | https://github.com/thilinah)\n */\n\n/**\n * RequestCache\n */\n\nclass MemoryStorage {\n  constructor() {\n    this.data = {};\n  }\n\n  getItem(key) {\n    return this.data[key];\n  }\n\n  setItem(key, data) {\n    this.data[key] = data;\n  }\n\n  removeAllByPrefix(prefix) {\n    const keys = Object.keys(this.data);\n    for (let i = 0; i < keys.length; i++) {\n      if (keys[i].indexOf(prefix) > 0) {\n        delete this.data[keys[i]];\n      }\n    }\n  }\n}\n\n\nclass RequestCache {\n  constructor(storage) {\n    if (!storage) {\n      this.storage = new MemoryStorage();\n    } else {\n      this.storage = storage;\n    }\n  }\n\n  getKey(url, params) {\n    let key = `${url}|`;\n    for (const index in params) {\n      key += `${index}=${params[index]}|`;\n    }\n    return key;\n  }\n\n  /*\n  invalidateTable(table) {\n    let key;\n    for (let i = 0; i < this.storage.length; i++) {\n      key = this.storage.key(i);\n      if (key.indexOf(`t=${table}`) > 0) {\n        this.storage.removeItem(key);\n      }\n    }\n  }\n  */\n\n  invalidateTable(table) {\n    this.storage.removeAllByPrefix(`t=${table}`);\n  }\n\n\n  getData(key) {\n    const data = this.storage.getItem(key);\n    if (!data) {\n      return null;\n    }\n\n    return data;\n  }\n\n  setData(key, data) {\n\n    if (data.status !== undefined && data.status != null && data.status !== 'SUCCESS') {\n      return null;\n    }\n    this.storage.setItem(key, data);\n    return data;\n  }\n}\n\nexport default RequestCache;\n","/* global baseUrl, clientUrl */\n/*\n   Copyright (c) 2018 [Glacies UG, Berlin, Germany] (http://glacies.de)\n Developer: Thilina Hasantha (http://lk.linkedin.com/in/thilinah | https://github.com/thilinah)\n */\n\nimport IceApiClient from './IceApiClient';\nimport ModuleBase from './ModuleBase';\nimport RequestCache from '../api-common/RequestCache';\nimport MasterDataReader from './MasterDataReader';\n\nclass AdapterBase extends ModuleBase {\n  constructor(endPoint, tab, filter, orderBy) {\n    super();\n    this.moduleRelativeURL = null;\n    this.tableData = [];\n    this.sourceData = [];\n    this.filter = null;\n    this.origFilter = null;\n    this.orderBy = null;\n    this.currentElement = null;\n    this.title = null;\n    this.initAdapter(endPoint, tab, filter, orderBy);\n  }\n\n  initAdapter(endPoint, tab, filter, orderBy) {\n    this.moduleRelativeURL = baseUrl;\n    this.table = endPoint;\n    if (tab === undefined || tab === null) {\n      this.tab = endPoint;\n    } else {\n      this.tab = tab;\n    }\n\n    if (filter === undefined || filter === null) {\n      this.filter = null;\n    } else {\n      this.filter = filter;\n    }\n\n    this.origFilter = this.filter;\n\n    if (orderBy === undefined || orderBy === null) {\n      this.orderBy = null;\n    } else {\n      this.orderBy = orderBy;\n    }\n\n    this.trackEvent('initAdapter', tab);\n\n    this.requestCache = new RequestCache();\n  }\n\n  initMasterDataReader() {\n    this.masterDataReader = new MasterDataReader(this);\n  }\n\n  setupApiClient(token) {\n    this.apiClient = new IceApiClient(this.apiUrl, token, window.CLIENT_BASE_URL, true);\n  }\n\n  setApiUrl(apiUrl) {\n    this.apiUrl = apiUrl;\n  }\n\n  setFilter(filter) {\n    this.filter = filter;\n  }\n\n  preSetFilterExternal(filter) {\n    this.initialFilter = filter;\n  }\n\n  setFilterExternal(_filter) {\n    let filter = _filter;\n    if (filter === undefined || filter === null) {\n      filter = this.initialFilter;\n    }\n\n    if (filter === undefined || filter === null) {\n      return;\n    }\n\n    this.setFilter(filter);\n    this.filtersAlreadySet = true;\n    $(`#${this.getTableName()}_resetFilters`).show();\n    this.currentFilterString = this.getFilterString(filter);\n  }\n\n  setTitle(title) {\n    this.title = title;\n  }\n\n  getFilter() {\n    return this.filter;\n  }\n\n  setOrderBy(orderBy) {\n    this.orderBy = orderBy;\n  }\n\n  getOrderBy() {\n    return this.orderBy;\n  }\n\n  getFile(name) {\n    this.trackEvent('file', name);\n    return new Promise((resolve, reject) => {\n      $.getJSON(this.moduleRelativeURL, { a: 'file', name }, (data) => {\n        if (data.status === 'SUCCESS') {\n          resolve(data.data);\n        } else {\n          reject();\n        }\n      }).fail(() => reject());\n    });\n  }\n\n  /**\n     * @method add\n     * @param object {Array} object data to be added to database\n     * @param getFunctionCallBackData {Array} once a success is returned call get() function for this module with these parameters\n     * @param _callGetFunction {Boolean} if false the get function of the module will not be called (default: true)\n     * @param successCallback {Function} this will get called after success response\n     */\n\n  add(object, getFunctionCallBackData, callGetFunction, successCallback) {\n    const that = this;\n    if (callGetFunction === undefined || callGetFunction === null) {\n      // eslint-disable-next-line no-param-reassign\n      callGetFunction = true;\n    }\n    $(object).attr('a', 'add');\n    $(object).attr('t', this.table);\n    that.showLoader();\n    this.requestCache.invalidateTable(this.table);\n    $.post(this.moduleRelativeURL, object, (data) => {\n      if (data.status === 'SUCCESS') {\n        that.addSuccessCallBack(getFunctionCallBackData, data.object, callGetFunction, successCallback, that);\n      } else {\n        that.addFailCallBack(getFunctionCallBackData, data.object);\n      }\n    }, 'json')\n      .fail((e) => {\n        if (e.status === 403) {\n          that.showMessage('Access Forbidden', e.responseJSON.message);\n        }\n      })\n      .always(() => { that.hideLoader(); });\n    this.trackEvent('add', this.tab, this.table);\n  }\n\n  addSuccessCallBack(callBackData, serverData, callGetFunction, successCallback, thisObject) {\n    if (callGetFunction) {\n      this.get(callBackData);\n    }\n    this.initFieldMasterData();\n    if (successCallback !== undefined && successCallback !== null) {\n      successCallback.apply(thisObject, [serverData]);\n    }\n    this.trackEvent('addSuccess', this.tab, this.table);\n  }\n\n  addFailCallBack(callBackData, serverData) {\n    try {\n      this.closePlainMessage();\n    } catch (e) {\n      // No need to report\n    }\n    this.showMessage('Error saving', serverData);\n    this.trackEvent('addFailed', this.tab, this.table);\n  }\n\n  deleteObj(id, callBackData) {\n    const that = this;\n    that.showLoader();\n    this.requestCache.invalidateTable(this.table);\n    $.post(this.moduleRelativeURL, { t: this.table, a: 'delete', id }, (data) => {\n      if (data.status === 'SUCCESS') {\n        that.deleteSuccessCallBack(callBackData, data.object);\n      } else {\n        that.deleteFailCallBack(callBackData, data.object);\n      }\n    }, 'json')\n      .fail((e) => {\n        if (e.status === 403) {\n          that.showMessage('Access Forbidden', e.responseJSON.message);\n        }\n      })\n      .always(() => { that.hideLoader(); });\n    this.trackEvent('delete', this.tab, this.table);\n  }\n\n  cleanDelete(id, callBack) {\n    $.post(this.moduleRelativeURL, { t: this.table, a: 'delete', id }, (data) => {\n      callBack(200, data.status);\n    }, 'json')\n      .fail((e) => {\n        callBack(e.status);\n      });\n    this.trackEvent('delete', this.tab, this.table);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  deleteSuccessCallBack(callBackData, serverData) {\n    this.get(callBackData);\n    this.clearDeleteParams();\n  }\n\n  deleteFailCallBack(callBackData, serverData) {\n    this.clearDeleteParams();\n    this.showMessage('Error Occurred while Deleting Item', serverData);\n  }\n\n  get(callBackData) {\n    const that = this;\n\n    if (this.getRemoteTable()) {\n      this.createTableServer(this.getTableName());\n      $(`#${this.getTableName()}Form`).hide();\n      $(`#${this.getTableName()}`).show();\n      return;\n    }\n\n    let sourceMappingJson = JSON.stringify(this.getSourceMapping());\n\n    let filterJson = '';\n    if (this.getFilter() !== null) {\n      filterJson = JSON.stringify(this.getFilter());\n    }\n\n    let orderBy = '';\n    if (this.getOrderBy() !== null) {\n      orderBy = this.getOrderBy();\n    }\n\n    sourceMappingJson = this.fixJSON(sourceMappingJson);\n    filterJson = this.fixJSON(filterJson);\n\n    that.showLoader();\n    $.post(this.moduleRelativeURL, {\n      t: this.table, a: 'get', sm: sourceMappingJson, ft: filterJson, ob: orderBy,\n    }, (data) => {\n      if (data.status === 'SUCCESS') {\n        that.getSuccessCallBack(callBackData, data.object);\n      } else {\n        that.checkSessionClose(data);\n        that.getFailCallBack(callBackData, data.object);\n      }\n    }, 'json')\n      .fail((e) => {\n        if (e.status === 403) {\n          that.showMessage('Access Forbidden', e.responseJSON.message);\n        }\n      })\n      .always(() => { that.hideLoader(); });\n\n    that.initFieldMasterData();\n\n    this.trackEvent('get', this.tab, this.table);\n    // var url = this.getDataUrl();\n    // console.log(url);\n  }\n\n\n  getDataUrl(_columns) {\n    const sourceMappingJson = JSON.stringify(this.getSourceMapping());\n\n    const columns = JSON.stringify(_columns);\n\n    let filterJson = '';\n    if (this.getFilter() !== null) {\n      filterJson = JSON.stringify(this.getFilter());\n    }\n\n    let orderBy = '';\n    if (this.getOrderBy() !== null) {\n      orderBy = this.getOrderBy();\n    }\n\n    let url = this.moduleRelativeURL.replace('service.php', 'data.php');\n    url = `${url}?t=${this.table}`;\n    url = `${url}&sm=${this.fixJSON(sourceMappingJson)}`;\n    url = `${url}&cl=${this.fixJSON(columns)}`;\n    url = `${url}&ft=${this.fixJSON(filterJson)}`;\n    url = `${url}&ob=${orderBy}`;\n\n    if (this.isSubProfileTable()) {\n      url = `${url}&type=sub`;\n    }\n\n    if (this.remoteTableSkipProfileRestriction()) {\n      url = `${url}&skip=1`;\n    }\n\n    return url;\n  }\n\n  isSubProfileTable() {\n    return false;\n  }\n\n  isAdminUser() {\n    return this.user.user_level === 'Admin';\n  }\n\n  remoteTableSkipProfileRestriction() {\n    return false;\n  }\n\n  preProcessTableData(row) {\n    return row;\n  }\n\n  getSuccessCallBack(callBackData, serverData) {\n    const data = [];\n    const mapping = this.getDataMapping();\n    for (let i = 0; i < serverData.length; i++) {\n      const row = [];\n      for (let j = 0; j < mapping.length; j++) {\n        row[j] = serverData[i][mapping[j]];\n      }\n      data.push(this.preProcessTableData(row));\n    }\n    this.sourceData = serverData;\n    if (callBackData.callBack !== undefined && callBackData.callBack !== null) {\n      if (callBackData.callBackData === undefined || callBackData.callBackData === null) {\n        callBackData.callBackData = [];\n      }\n      callBackData.callBackData.push(serverData);\n      callBackData.callBackData.push(data);\n      this.callFunction(callBackData.callBack, callBackData.callBackData);\n    }\n\n    this.tableData = data;\n\n    if (!(callBackData.noRender !== undefined && callBackData.noRender !== null && callBackData.noRender === true)) {\n      this.createTable(this.getTableName());\n      $(`#${this.getTableName()}Form`).hide();\n      $(`#${this.getTableName()}`).show();\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getFailCallBack(callBackData, serverData) {\n\n  }\n\n  modifyClone(object) {\n    return object;\n  }\n\n  getElement(id, callBackData, clone) {\n    const that = this;\n    let sourceMappingJson = JSON.stringify(this.getSourceMapping());\n    sourceMappingJson = this.fixJSON(sourceMappingJson);\n    that.showLoader();\n    $.post(this.moduleRelativeURL, {\n      t: this.table, a: 'getElement', id, sm: sourceMappingJson,\n    }, function (data) {\n      if (data.status === 'SUCCESS') {\n        if (clone) {\n          delete data.object.id;\n          data.object = that.modifyClone(data.object);\n        }\n        this.currentElement = data.object;\n        that.getElementSuccessCallBack.apply(that, [callBackData, data.object]);\n      } else {\n        that.getElementFailCallBack.apply(that, [callBackData, data.object]);\n      }\n    }, 'json')\n      .fail((e) => {\n        if (e.status === 403) {\n          that.showMessage('Access Forbidden', e.responseJSON.message);\n        }\n      })\n      .always(() => { that.hideLoader(); });\n    this.trackEvent('getElement', this.tab, this.table);\n  }\n\n  getElementSuccessCallBack(callBackData, serverData) {\n    if (callBackData.callBack !== undefined && callBackData.callBack !== null) {\n      if (callBackData.callBackData === undefined || callBackData.callBackData === null) {\n        callBackData.callBackData = [];\n      }\n      callBackData.callBackData.push(serverData);\n      this.callFunction(callBackData.callBack, callBackData.callBackData, this);\n    }\n    this.currentElement = serverData;\n    if (!(callBackData.noRender !== undefined && callBackData.noRender !== null && callBackData.noRender === true)) {\n      this.renderForm(serverData);\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  getElementFailCallBack(callBackData, serverData) {\n\n  }\n\n\n  getTableData() {\n    return this.tableData;\n  }\n\n  getTableName() {\n    return this.tab;\n  }\n\n  getFieldValues(fieldMaster, callBackData) {\n    const that = this;\n    let method = '';\n    let methodParams = '';\n    if (fieldMaster[3] !== undefined && fieldMaster[3] !== null) {\n      // eslint-disable-next-line prefer-destructuring\n      method = fieldMaster[3];\n    }\n\n    if (fieldMaster[4] !== undefined && fieldMaster[4] !== null) {\n      methodParams = JSON.stringify(fieldMaster[4]);\n    }\n\n    const key = this.requestCache.getKey(this.moduleRelativeURL, {\n      t: fieldMaster[0], key: fieldMaster[1], value: fieldMaster[2], method, methodParams, a: 'getFieldValues',\n    });\n    const cacheData = this.requestCache.getData(key);\n\n    if (cacheData !== null && cacheData !== undefined) {\n      if (cacheData.status === 'SUCCESS') {\n        callBackData.callBackData.push(cacheData.data);\n        if (callBackData.callBackSuccess !== null && callBackData.callBackSuccess !== undefined) {\n          callBackData.callBackData.push(callBackData.callBackSuccess);\n        }\n        that.callFunction(callBackData.callBack, callBackData.callBackData);\n      }\n    } else {\n      const callbackWraper = function (data) {\n        if (data.status === 'SUCCESS') {\n          that.requestCache.setData(this.success.key, data);\n          const localCallBackData = callBackData;\n          localCallBackData.callBackData = [callBackData.callBackData[0]];\n          localCallBackData.callBackData.push(data.data);\n          if (localCallBackData.callBackSuccess !== null && localCallBackData.callBackSuccess !== undefined) {\n            localCallBackData.callBackData.push(callBackData.callBackSuccess);\n          }\n          that.callFunction(localCallBackData.callBack, localCallBackData.callBackData);\n        } else if (data.message === 'Access violation') {\n          alert(`Error : ${callbackWraper.table} ${data.message}`);\n        }\n      };\n\n      callbackWraper.key = key;\n      // eslint-disable-next-line prefer-destructuring\n      callbackWraper.table = fieldMaster[0];\n\n      $.post(this.moduleRelativeURL, {\n        t: fieldMaster[0], key: fieldMaster[1], value: fieldMaster[2], method, methodParams, a: 'getFieldValues',\n      }, callbackWraper, 'json');\n    }\n  }\n\n  setAdminProfile(empId) {\n    try {\n      localStorage.clear();\n    } catch (e) {\n      // No need to report\n    }\n    $.post(this.moduleRelativeURL, { a: 'setAdminEmp', empid: empId }, () => {\n      // eslint-disable-next-line no-restricted-globals\n      top.location.href = clientUrl;\n    }, 'json');\n  }\n\n  customAction(subAction, module, request, callBackData, isPost) {\n    const that = this;\n    request = this.fixJSON(request);\n    if (!isPost) {\n      $.getJSON(this.moduleRelativeURL, {\n        t: this.table, a: 'ca', sa: subAction, mod: module, req: request,\n      }, (data) => {\n        if (data.status === 'SUCCESS') {\n          callBackData.callBackData.push(data.data);\n          that.callFunction(callBackData.callBackSuccess, callBackData.callBackData);\n        } else {\n          callBackData.callBackData.push(data.data);\n          that.callFunction(callBackData.callBackFail, callBackData.callBackData);\n        }\n      });\n    } else {\n      $.post(this.moduleRelativeURL, {\n        t: this.table, a: 'ca', sa: subAction, mod: module, req: request,\n      }, (data) => {\n        if (data.status === 'SUCCESS') {\n          callBackData.callBackData.push(data.data);\n          that.callFunction(callBackData.callBackSuccess, callBackData.callBackData);\n        } else {\n          callBackData.callBackData.push(data.data);\n          that.callFunction(callBackData.callBackFail, callBackData.callBackData);\n        }\n      }, 'json');\n    }\n  }\n\n\n  sendCustomRequest(action, params, successCallback, failCallback) {\n    params.a = action;\n    $.post(this.moduleRelativeURL, params, (data) => {\n      if (data.status === 'SUCCESS') {\n        successCallback(data.data);\n      } else {\n        failCallback(data.data);\n      }\n    }, 'json');\n  }\n\n\n  getCustomActionUrl(action, params) {\n    params.a = action;\n    let str = '';\n    for (const key in params) {\n      if (params.hasOwnProperty(key)) {\n        if (str !== '') {\n          str += '&';\n        }\n        str += `${key}=${params[key]}`;\n      }\n    }\n    return `${this.moduleRelativeURL}?${str}`;\n  }\n\n\n  getClientDataUrl() {\n    return `${this.moduleRelativeURL.replace('service.php', '')}data/`;\n  }\n\n  getCustomUrl(str) {\n    return this.moduleRelativeURL.replace('service.php', str);\n  }\n\n  checkSessionClose(error) {\n    if (error.code === 'NO_USER_FOUND') {\n      location.reload();\n    }\n  }\n}\n\nexport default AdapterBase;\n","import axios from 'axios';\nimport IceResponse from './IceResponse';\n\nclass ExtensionController {\n  constructor(extension, url) {\n    this.extension = extension;\n    this.url = url;\n  }\n\n  handleRequest(action, requestData) {\n    const dataUrl = `${this.url}?a=ca&sa=${action}&mod=${encodeURIComponent(this.extension)}&req=${JSON.stringify(requestData)}`;\n    return axios.post(dataUrl, {})\n      .then((response) => new IceResponse(response.data.status, response.data.data))\n      .catch((error) => new IceResponse('ERROR', error));\n  }\n\n  getApiClient() {\n    return window.modJs.apiClient;\n  }\n}\n\nexport default ExtensionController;\n","import ReactModalAdapterBase from './ReactModalAdapterBase';\n\nclass ExtensionModuleBase extends ReactModalAdapterBase {\n  showExtensionView() {\n\n  }\n  get() {\n    this.showExtensionView();\n  }\n\n  getDataMapping() {\n    return [\n      'id',\n      'name',\n    ];\n  }\n\n  getHeaders() {\n    return [\n      { sTitle: 'ID', bVisible: false },\n      { sTitle: 'Name' },\n    ];\n  }\n\n  getFormFields() {\n    return [\n      ['id', { label: 'ID', type: 'hidden' }],\n      ['name', { label: 'Name', type: 'text', validation: '' }],\n    ];\n  }\n\n  getTableColumns() {\n    return [\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        sorter: true,\n      },\n    ];\n  }\n}\n\nexport default ExtensionModuleBase;\n","/*\n   Copyright (c) 2018 [Glacies UG, Berlin, Germany] (http://glacies.de)\n Developer: Thilina Hasantha (http://lk.linkedin.com/in/thilinah | https://github.com/thilinah)\n */\n/* global tinyMCE */\nconst ValidationRules = {\n\n  float(str) {\n    const floatstr = /^[-+]?[0-9]+(\\.[0-9]+)?$/;\n    if (str != null && str.match(floatstr)) {\n      return true;\n    }\n    return false;\n  },\n\n  number(str) {\n    const numstr = /^[0-9]+$/;\n    if (str != null && str.match(numstr)) {\n      return true;\n    }\n    return false;\n  },\n\n  numberOrEmpty(str) {\n    if (str === '') {\n      return true;\n    }\n    const numstr = /^[0-9]+$/;\n    if (str != null && str.match(numstr)) {\n      return true;\n    }\n    return false;\n  },\n\n  email(str) {\n    const emailPattern = /^\\s*[\\w\\-+_]+(\\.[\\w\\-+_]+)*@[\\w\\-+_]+\\.[\\w\\-+_]+(\\.[\\w\\-+_]+)*\\s*$/;\n    return str != null && emailPattern.test(str);\n  },\n\n  emailOrEmpty(str) {\n    if (str === '') {\n      return true;\n    }\n    const emailPattern = /^\\s*[\\w\\-+_]+(\\.[\\w\\-+_]+)*@[\\w\\-+_]+\\.[\\w\\-+_]+(\\.[\\w\\-+_]+)*\\s*$/;\n    return str != null && emailPattern.test(str);\n  },\n\n  username(str) {\n    const username = /^[a-zA-Z0-9.-]+$/;\n    return str != null && username.test(str);\n  },\n\n  input(str) {\n    if (str != null && str.length > 0) {\n      return true;\n    }\n    return false;\n  },\n};\n\nclass FormValidation {\n  constructor(formId, validateAll, options) {\n    this.tempOptions = {};\n    this.formId = formId;\n    this.formError = false;\n    this.formObject = null;\n    this.errorMessages = '';\n    this.popupDialog = null;\n    this.validateAll = validateAll;\n    this.errorMap = [];\n\n    this.settings = { thirdPartyPopup: null, LabelErrorClass: false, ShowPopup: true };\n\n    this.settings = jQuery.extend(this.settings, options);\n\n    this.inputTypes = ['text', 'radio', 'checkbox', 'file', 'password', 'select-one', 'select-multi', 'textarea', 'fileupload', 'signature'];\n\n    this.validator = ValidationRules;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  clearError(formInput, overrideMessage) {\n    const id = formInput.attr('id');\n    $(`#${this.formId} #field_${id}`).removeClass('error');\n    $(`#${this.formId} #help_${id}`).html('');\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  addError(formInput, overrideMessage) {\n    this.formError = true;\n    if (formInput.attr('message') != null) {\n      this.errorMessages += (`${formInput.attr('message')}\\n`);\n      this.errorMap[formInput.attr('name')] = formInput.attr('message');\n    } else {\n      this.errorMap[formInput.attr('name')] = '';\n    }\n\n    const id = formInput.attr('id');\n    const validation = formInput.attr('validation');\n    const message = formInput.attr('validation');\n    $(`#${this.formId} #field_${id}`).addClass('error');\n    if (message === undefined || message == null || message === '') {\n      $(`#${this.formId} #help_err_${id}`).html(message);\n    } else if (validation === undefined || validation == null || validation === '') {\n      $(`#${this.formId} #help_err_${id}`).html('Required');\n    } else if (validation === 'float' || validation === 'number') {\n      $(`#${this.formId} #help_err_${id}`).html('Number required');\n    } else if (validation === 'email') {\n      $(`#${this.formId} #help_err_${id}`).html('Email required');\n    } else {\n      $(`#${this.formId} #help_err_${id}`).html('Required');\n    }\n  }\n\n\n  showErrors() {\n    if (this.formError) {\n      if (this.settings.thirdPartyPopup !== undefined && this.settings.thirdPartyPopup != null) {\n        this.settings.thirdPartyPopup.alert();\n      } else if (this.settings.ShowPopup === true) {\n        if (this.tempOptions.popupTop !== undefined && this.tempOptions.popupTop != null) {\n          this.alert('Errors Found', this.errorMessages, this.tempOptions.popupTop);\n        } else {\n          this.alert('Errors Found', this.errorMessages, -1);\n        }\n      }\n    }\n  }\n\n\n  checkValues(options) {\n    this.tempOptions = options;\n    const that = this;\n    this.formError = false;\n    this.errorMessages = '';\n    this.formObject = {};\n    // eslint-disable-next-line consistent-return\n    const validate = function (inputObject) {\n      let inputValue = null;\n      const name = inputObject.attr('name');\n      if (that.settings.LabelErrorClass !== false) {\n        $(`label[for='${name}']`).removeClass(that.settings.LabelErrorClass);\n      }\n      const id = inputObject.attr('id');\n      const type = inputObject.attr('type');\n\n      if (inputObject.hasClass('select2-focusser') || inputObject.hasClass('select2-input')) {\n        return true;\n      }\n\n      if (jQuery.inArray(type, that.inputTypes) >= 0) {\n        if (inputObject.hasClass('uploadInput')) {\n          inputValue = inputObject.attr('val');\n        } else if (type === 'radio' || type === 'checkbox') {\n          inputValue = $(`input[name='${name}']:checked`).val();\n        } else if (inputObject.hasClass('select2Field')) {\n          if ($(`#${that.formId} #${id}`).select2('data') != null && $(`#${that.formId} #${id}`).select2('data') !== undefined) {\n            inputValue = $(`#${that.formId} #${id}`).select2('data').id;\n          } else {\n            inputValue = '';\n          }\n        } else if (inputObject.hasClass('select2Multi')) {\n          if ($(`#${that.formId} #${id}`).select2('data') != null && $(`#${that.formId} #${id}`).select2('data') !== undefined) {\n            const inputValueObjects = $(`#${that.formId} #${id}`).select2('data');\n            inputValue = [];\n            for (let i = 0; i < inputValueObjects.length; i++) {\n              inputValue.push(inputValueObjects[i].id);\n            }\n            inputValue = JSON.stringify(inputValue);\n          } else {\n            inputValue = '';\n          }\n        } else if (inputObject.hasClass('signatureField')) {\n          if ($(`#${that.formId} #${id}`).data('signaturePad').isEmpty()) {\n            inputValue = '';\n          } else {\n            inputValue = $(`#${id}`).data('signaturePad').toDataURL();\n          }\n        } else if (inputObject.hasClass('simplemde')) {\n          inputValue = $(`#${that.formId} #${id}`).data('simplemde').value();\n        } else if (inputObject.hasClass('code')) {\n          inputValue = $(`#${that.formId} #${id}`).data('codemirror').getValue();\n        } else if (inputObject.hasClass('tinymce')) {\n          inputValue = tinyMCE.get(id).getContent({ format: 'raw' });\n        } else {\n          inputValue = inputObject.val();\n        }\n\n        const validation = inputObject.attr('validation');\n        let valid = false;\n\n        if (validation !== undefined && validation != null && that.validator[validation] !== undefined && that.validator[validation] != null) {\n          valid = that.validator[validation](inputValue);\n        } else {\n          if (that.validateAll) {\n            if (validation !== undefined && validation != null && validation === 'none') {\n              valid = true;\n            } else {\n              valid = that.validator.input(inputValue);\n            }\n          } else {\n            valid = true;\n          }\n          that.formObject[id] = inputValue;\n        }\n\n        if (!valid) {\n          that.addError(inputObject, null);\n        } else {\n          that.clearError(inputObject, null);\n          that.formObject[id] = inputValue;\n        }\n      }\n    };\n\n    let inputs = $(`#${this.formId} :input`);\n    inputs.each(function () {\n      validate($(this));\n    });\n\n    inputs = $(`#${this.formId} .uploadInput`);\n    inputs.each(function () {\n      validate($(this));\n    });\n\n    this.showErrors();\n    this.tempOptions = {};\n    return !this.formError;\n  }\n\n  getFormParameters() {\n    return this.formObject;\n  }\n\n\n  alert(title, text) {\n    alert(text);\n  }\n\n  static getValidationRules() {\n    return ValidationRules;\n  }\n}\n\n\nexport default FormValidation;\n","const axios = require('axios');\n\nclass IceApiClient {\n  constructor(baseUrl, token, clientBaseUrl, legacyApiWrapper = true) {\n    this.baseUrl = baseUrl;\n    this.token = token;\n    this.clientBaseUrl = clientBaseUrl;\n    this.legacyApiWrapper = legacyApiWrapper;\n  }\n\n  get(endpoint) {\n    if (this.legacyApiWrapper) {\n      const url = `${this.clientBaseUrl}api/index.php?token=${this.token}&method=get&url=/${endpoint}`;\n      return axios.get(url);\n    }\n\n    return axios.get(this.baseUrl + endpoint, {\n      headers: {\n        Authorization: `Bearer ${this.token}`,\n      },\n    });\n  }\n\n  post(endpoint, data) {\n    if (this.legacyApiWrapper) {\n      const url = `${this.clientBaseUrl}api/index.php?token=${this.token}&method=post&url=/${endpoint}`;\n      return axios.post(url, data);\n    }\n\n    return axios.post(this.baseUrl + endpoint, {\n      headers: {\n        Authorization: `Bearer ${this.token}`,\n      },\n      data,\n    });\n  }\n}\n\nexport default IceApiClient;\n","class IceResponse {\n  constructor(status, data) {\n    this.status = status;\n    this.data = data;\n  }\n}\n\nexport default IceResponse;\n","const axios = require('axios');\n\nclass MasterDataReader {\n  constructor(adapter) {\n    this.adapter = adapter;\n    this.requestCache = this.adapter.requestCache;\n  }\n\n  fetchMasterData(fieldMaster) {\n    let method = '';\n    let methodParams = '';\n    if (fieldMaster[3] != null) {\n      method = fieldMaster[3];\n    }\n\n    if (fieldMaster[4] != null) {\n      methodParams = JSON.stringify(fieldMaster[4]);\n    }\n\n    const key = this.requestCache.getKey(this.adapter.moduleRelativeURL, {\n      t: fieldMaster[0], key: fieldMaster[1], value: fieldMaster[2], method, methodParams, a: 'getFieldValues',\n    });\n\n    const cacheData = this.requestCache.getData(key);\n    if (cacheData != null && cacheData.status === 'SUCCESS') {\n      return new Promise((resolve, reject) => resolve(cacheData.data));\n    }\n\n    const urlData = {\n      t: fieldMaster[0],\n      key: fieldMaster[1],\n      value: fieldMaster[2],\n      method,\n      methodParams,\n      a: 'getFieldValues',\n    };\n    let url = `${this.adapter.moduleRelativeURL}?_url=1`;\n    for (const index in urlData) {\n      url = `${url}&${index}=${encodeURIComponent(urlData[index])}`;\n    }\n    // TODO - Should be a get request\n    return axios.post(url, {})\n      .then((response) => {\n        if (response.data.status !== 'SUCCESS') {\n          throw Error(`Response for ${key} failed`);\n        }\n        this.requestCache.setData(key, response.data);\n\n        return response.data.data;\n      });\n  }\n\n  updateAllMasterData() {\n    const remoteSourceFields = this.adapter.getRemoteSourceFields();\n    const promiseList = [];\n    for (let i = 0; i < remoteSourceFields.length; i++) {\n      const fieldRemote = remoteSourceFields[i];\n      if (fieldRemote[1]['remote-source'] !== undefined && fieldRemote[1]['remote-source'] != null) {\n        let key = `${fieldRemote[1]['remote-source'][0]}_${fieldRemote[1]['remote-source'][1]}_${fieldRemote[1]['remote-source'][2]}`;\n        if (fieldRemote[1]['remote-source'].length === 4) {\n          key = `${key}_${fieldRemote[1]['remote-source'][3]}`;\n        }\n        const masterDataPromise = this.fetchMasterData(fieldRemote[1]['remote-source'])\n          .then((data) => {\n            this.adapter.fieldMasterData[key] = data;\n          });\n        promiseList.push(masterDataPromise);\n      }\n    }\n\n    return Promise.all(promiseList);\n  }\n}\n\nexport default MasterDataReader;\n","/* global tinymce, SimpleMDE, modJs, SignaturePad, modulesInstalled */\n/* eslint-disable prefer-destructuring */\n/*\n   Copyright (c) 2018 [Glacies UG, Berlin, Germany] (http://glacies.de)\n Developer: Thilina Hasantha (http://lk.linkedin.com/in/thilinah | https://github.com/thilinah)\n */\nimport FormValidation from './FormValidation';\n/**\n * The base class for providing core functions to all module classes.\n * @class Base.js\n */\n\nclass ModuleBase {\n  constructor() {\n    this.deleteParams = {};\n    this.createRemoteTable = false;\n    this.instanceId = 'None';\n    this.ga = [];\n    this.showAddNew = true;\n    this.showEdit = true;\n    this.showDelete = true;\n    this.showSave = true;\n    this.showCancel = true;\n    this.showFormOnPopup = false;\n    this.filtersAlreadySet = false;\n    this.currentFilterString = '';\n    this.sorting = 0;\n    this.settings = {};\n    this.translations = {};\n    this.customFields = [];\n    this.csrfRequired = false;\n\n    this.fieldTemplates = null;\n    this.templates = null;\n    this.customTemplates = null;\n    this.emailTemplates = null;\n    this.fieldMasterData = {};\n    this.fieldMasterDataKeys = {};\n    this.fieldMasterDataCallback = null;\n    this.sourceMapping = null;\n    this.currentId = null;\n    this.currentElement = null;\n    this.user = null;\n    this.currentProfile = null;\n    this.permissions = {};\n    this.baseUrl = null;\n    this.clientUrl = null;\n    this.that = this;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  init(appName, currentView, dataUrl, permissions) {\n\n  }\n\n  initForm() {\n\n  }\n\n  setObjectTypeName(objectTypeName) {\n    this.objectTypeName = objectTypeName;\n  }\n\n  /**\n     * Some browsers do not support sending JSON in get parameters. Set this to true to avoid sending JSON\n     * @method setNoJSONRequests\n     * @param val {Boolean}\n     */\n  setNoJSONRequests(val) {\n    this.noJSONRequests = val;\n  }\n\n\n  setPermissions(permissions) {\n    this.permissions = permissions;\n  }\n\n  sortingStarted(val) {\n    this.sorting = val;\n  }\n\n  /**\n     * Check if the current user has a permission\n     * @method checkPermission\n     * @param permission {String}\n     * @example\n     * this.checkPermission(\"Upload/Delete Profile Image\")\n     */\n  checkPermission(permission) {\n    if (this.permissions[permission] === undefined || this.permissions[permission] == null || this.permissions[permission] === 'Yes') {\n      return 'Yes';\n    }\n    return this.permissions[permission];\n  }\n\n  setBaseUrl(url) {\n    this.baseUrl = url;\n  }\n\n  setClientUrl(url) {\n    this.clientUrl = url;\n  }\n\n  setUser(user) {\n    this.user = user;\n  }\n\n  getUser() {\n    return this.user;\n  }\n\n  setInstanceId(id) {\n    this.instanceId = id;\n  }\n\n  setCSRFRequired(val) {\n    this.csrfRequired = val;\n  }\n\n  scrollToTop() {\n    $('html, body').animate({ scrollTop: 0 }, 'fast');\n  }\n\n  scrollToBottom() {\n    $('html, body').animate({ scrollTop: $(document).height() }, 'slow');\n  }\n\n  scrollToElement(element) {\n    if ($(window).height() <= element.offset().top) {\n      $('html, body').animate({ scrollTop: element.offset().top }, 'slow');\n    }\n  }\n\n  scrollToElementBottom(element) {\n    if ($(window).height() <= element.offset().top + element.height()) {\n      $('html, body').animate({ scrollTop: element.offset().top + element.height() }, 'slow');\n    }\n  }\n\n\n  setTranslations(txt) {\n    this.translations = txt.messages[''];\n  }\n\n  setTranslationsSubModules(translations) {\n    this.translations = translations;\n  }\n\n  gt(key) {\n    if (this.translations[key] === undefined || this.translations[key] === null) {\n      console.log(`Tr:${key}`);\n      return key;\n    }\n    return this.translations[key][0];\n  }\n\n  addToLangTerms(key) {\n    let termsArr;\n    const terms = localStorage.getItem('terms');\n    if (terms === undefined) {\n      termsArr = {};\n    } else {\n      try {\n        termsArr = JSON.parse(terms);\n      } catch (e) {\n        termsArr = {};\n      }\n    }\n\n    if (this.translations[key] === undefined) {\n      termsArr[key] = key;\n      localStorage.setItem('terms', JSON.stringify(termsArr));\n    }\n  }\n\n  /**\n     * If this method returned false the action buttons in data table for modules will not be displayed.\n     * Override this method in module lib.js to hide action buttons\n     * @method showActionButtons\n     * @param permission {String}\n     * @example\n     * EmployeeLeaveEntitlementAdapter.method('showActionButtons() {\n     *  return false;\n     * }\n     */\n  showActionButtons() {\n    return true;\n  }\n\n  trackEvent(action, label, value) {\n    try {\n      if (label === undefined || label == null) {\n        this.ga.push(['_trackEvent', this.instanceId, action]);\n      } else if (value === undefined || value == null) {\n        this.ga.push(['_trackEvent', this.instanceId, action, label]);\n      } else {\n        this.ga.push(['_trackEvent', this.instanceId, action, label, value]);\n      }\n    } catch (e) {\n      // Do nothing\n    }\n  }\n\n\n  setCurrentProfile(currentProfile) {\n    this.currentProfile = currentProfile;\n  }\n\n  /**\n     * Get the current profile\n     * @method getCurrentProfile\n     * @returns Profile of the current user if the profile is not switched if not switched profile\n     */\n\n  getCurrentProfile() {\n    return this.currentProfile;\n  }\n\n  /**\n     * Retrive data required to create select boxes for add new /edit forms for a given module. This is called when loading the module\n     * @method initFieldMasterData\n     * @param callback {Function} call this once loading completed\n     * @param callback {Function} call this once all field loading completed. This indicate that the form can be displayed saftly\n     * @example\n     *   ReportAdapter.method('renderForm(object) {\n     *    var that = this;\n     *    this.processFormFieldsWithObject(object);\n     *    var cb = function(){\n     *      that.super.renderForm(object);\n     *    };\n     *    this.initFieldMasterData(cb);\n     *  }\n     */\n  initFieldMasterData(callback, loadAllCallback, loadAllCallbackData) {\n    this.fieldMasterData = {};\n    this.fieldMasterDataKeys = {};\n    this.fieldMasterDataCallback = loadAllCallback;\n    this.fieldMasterDataCallbackData = loadAllCallbackData;\n\n    const remoteSourceFields = this.getRemoteSourceFields();\n\n    for (let i = 0; i < remoteSourceFields.length; i++) {\n      const fieldRemote = remoteSourceFields[i];\n      if (fieldRemote[1]['remote-source'] !== undefined && fieldRemote[1]['remote-source'] != null) {\n        // let key = `${fieldRemote[1]['remote-source'][0]}_${fieldRemote[1]['remote-source'][1]}_${fieldRemote[1]['remote-source'][2]}`;\n        // if (fieldRemote[1]['remote-source'].length === 4) {\n        //   key = `${key}_${fieldRemote[1]['remote-source'][3]}`;\n        // }\n        const key = this.getRemoteSourceKey(fieldRemote);\n        this.fieldMasterDataKeys[key] = false;\n\n        const callBackData = {};\n        callBackData.callBack = 'initFieldMasterDataResponse';\n        callBackData.callBackData = [key];\n        if (callback !== null && callback !== undefined) {\n          callBackData.callBackSuccess = callback;\n        }\n        this.getFieldValues(fieldRemote[1]['remote-source'], callBackData);\n      }\n    }\n  }\n\n\n  initSourceMappings() {\n    this.sourceMapping = {};\n\n    const remoteSourceFields = this.getRemoteSourceFields();\n\n    for (let i = 0; i < remoteSourceFields.length; i++) {\n      const fieldRemote = remoteSourceFields[i];\n      if (fieldRemote[1]['remote-source'] !== undefined && fieldRemote[1]['remote-source'] != null) {\n        this.sourceMapping[fieldRemote[0]] = fieldRemote[1]['remote-source'];\n      }\n    }\n  }\n\n  getRemoteSourceKey(field) {\n    let key = `${field[1]['remote-source'][0]}_${field[1]['remote-source'][1]}_${field[1]['remote-source'][2]}`;\n    if (field[1]['remote-source'].length > 3) {\n      key = `${key}_${field[1]['remote-source'][3]}`;\n    }\n\n    return key;\n  }\n\n  getRemoteSourceFields() {\n    let values;\n    const fields = this.getFormFields();\n    const filterFields = this.getFilters();\n    const additionalFields = this.getAdditionalRemoteFields();\n\n    if (filterFields != null) {\n      for (let j = 0; j < filterFields.length; j++) {\n        values = filterFields[j][1];\n        if (values.type === 'select' || values.type === 'select2' || values.type === 'select2multi') {\n          fields.push(filterFields[j]);\n        }\n      }\n    }\n\n    if (additionalFields != null) {\n      for (let j = 0; j < additionalFields.length; j++) {\n        values = additionalFields[j][1];\n        if (values.type === 'select' || values.type === 'select2' || values.type === 'select2multi') {\n          fields.push(additionalFields[j]);\n        }\n      }\n    }\n\n    const remoteSourceFields = [];\n    const remoteSourceFieldKeys = [];\n    let field = null;\n    let fieldSub = null;\n    for (let i = 0; i < fields.length; i++) {\n      field = fields[i];\n      if (field[1]['remote-source'] !== undefined && field[1]['remote-source'] !== null) {\n        const key = this.getRemoteSourceKey(field);\n        if (remoteSourceFieldKeys.indexOf(key) < 0) {\n          remoteSourceFields.push(field);\n          remoteSourceFieldKeys.push(key);\n        }\n      } else if (field[1].form !== undefined && field[1].form !== null) {\n        for (let j = 0; j < field[1].form.length; j++) {\n          fieldSub = field[1].form[j];\n          if (fieldSub[1]['remote-source'] !== undefined && fieldSub[1]['remote-source'] !== null) {\n            const key = this.getRemoteSourceKey(fieldSub);\n            if (remoteSourceFieldKeys.indexOf(key) < 0) {\n              remoteSourceFields.push(fieldSub);\n              remoteSourceFieldKeys.push(key);\n            }\n          }\n        }\n      }\n    }\n\n    return remoteSourceFields;\n  }\n\n  /**\n     * Pass true to this method after creating module JS object to open new/edit entry form for the module on a popup.\n     * @method setShowFormOnPopup\n     * @param val {Boolean}\n     * @example\n     *   modJs.subModJsList['tabCandidateApplication'] = new CandidateApplicationAdapter('Application','CandidateApplication',{\"candidate\":data.id}\n     *  modJs.subModJsList['tabCandidateApplication'].setShowFormOnPopup(true);\n     */\n\n  setShowFormOnPopup(val) {\n    this.showFormOnPopup = val;\n  }\n\n  /**\n     * Set this to true to if you need the datatable to load data page by page instead of loading all data at once.\n     * @method setRemoteTable\n     * @param val {Boolean}\n     * @example\n     *   modJs.subModJsList['tabCandidateApplication'] = new CandidateApplicationAdapter('Application','CandidateApplication',{\"candidate\":data.id}\n     *  modJs.subModJsList['tabCandidateApplication'].setRemoteTable(true);\n     */\n\n  setRemoteTable(val) {\n    this.createRemoteTable = val;\n  }\n\n  setSettings(val) {\n    this.settings = val;\n  }\n\n  getRemoteTable() {\n    return this.createRemoteTable;\n  }\n\n  isAllLoaded(fieldMasterDataKeys) {\n    for (const key in fieldMasterDataKeys) {\n      if (fieldMasterDataKeys[key] === false) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  initFieldMasterDataResponse(key, data, callback, loadAllCallbackData) {\n    this.fieldMasterData[key] = data;\n    this.fieldMasterDataKeys[key] = true;\n\n    if (callback !== undefined && callback !== null) {\n      callback();\n    }\n\n    if (this.fieldMasterDataCallback !== null\n            && this.fieldMasterDataCallback !== undefined\n            && this.isAllLoaded(this.fieldMasterDataKeys)\n            && (this.fieldMasterDataCallbackData !== null && this.fieldMasterDataCallbackData !== undefined)\n    ) {\n      this.fieldMasterDataCallback(this.fieldMasterDataCallbackData);\n    } else if (this.fieldMasterDataCallback !== null\n            && this.fieldMasterDataCallback !== undefined\n            && this.isAllLoaded(this.fieldMasterDataKeys)\n    ) {\n      this.fieldMasterDataCallback();\n    }\n  }\n\n  getMetaFieldValues(key, fields) {\n    for (let i = 0; i < fields.length; i++) {\n      if (key === fields[i][0]) {\n        return fields[i][1];\n      }\n    }\n    return null;\n  }\n\n  getThemeColors() {\n    const colors = ['red', 'yellow', 'aqua', 'blue',\n      'light-blue', 'green', 'navy', 'teal', 'olive', 'orange',\n      'fuchsia', 'purple'];\n\n    return colors;\n  }\n\n  getColorByRandomString(string) {\n    const colors = this.getThemeColors();\n    const k = string.charCodeAt(0);\n    return colors[k % colors.length];\n  }\n\n  getColorByFileType(type) {\n    type = type.toLowerCase();\n\n    const colorMap = {};\n    colorMap.pdf = 'red';\n    colorMap.csv = 'yellow';\n    colorMap.xls = 'green';\n    colorMap.xlsx = 'green';\n    colorMap.doc = 'light-blue';\n    colorMap.docx = 'light-blue';\n    colorMap.docx = 'blue';\n    colorMap.ppt = 'orange';\n    colorMap.pptx = 'orange';\n    colorMap.jpg = 'teal';\n    colorMap.jpeg = 'teal';\n    colorMap.gif = 'green';\n    colorMap.png = 'yellow';\n    colorMap.bmp = 'fuchsia';\n\n\n    if (colorMap[type] !== undefined || colorMap[type] != null) {\n      return colorMap[type];\n    }\n    return this.getColorByRandomString(type);\n  }\n\n  getIconByFileType(type) {\n    type = type.toLowerCase();\n\n    const iconMap = {};\n    iconMap.pdf = 'far fa-file-pdf';\n    iconMap.csv = 'fa far fa-file-code';\n    iconMap.xls = 'far fa-file-excel';\n    iconMap.xlsx = 'far fa-file-excel';\n    iconMap.doc = 'far fa-file-word';\n    iconMap.docx = 'far fa-file-word';\n    iconMap.ppt = 'far fa-file-powerpoint';\n    iconMap.pptx = 'far fa-file-powerpoint';\n    iconMap.jpg = 'far fa-file-image';\n    iconMap.jpeg = 'far fa-file-image';\n    iconMap.gif = 'far fa-file-image';\n    iconMap.png = 'far fa-file-image';\n    iconMap.bmp = 'far fa-file-image';\n    iconMap.txt = 'far fa-file-text';\n    iconMap.rtf = 'far fa-file-text';\n\n\n    if (iconMap[type] !== undefined || iconMap[type] != null) {\n      return iconMap[type];\n    }\n    return 'far fa-file';\n  }\n\n  getSourceMapping() {\n    return this.sourceMapping;\n  }\n\n  setTesting(testing) {\n    this.testing = testing;\n  }\n\n  consoleLog(message) {\n    if (this.testing) {\n      console.log(message);\n    }\n  }\n\n  setClientMessages(msgList) {\n    this.msgList = msgList;\n  }\n\n  setTemplates(templates) {\n    this.templates = templates;\n  }\n\n\n  getWSProperty(array, key) {\n    if (array.hasOwnProperty(key)) {\n      return array[key];\n    }\n    return null;\n  }\n\n\n  getClientMessage(key) {\n    return this.getWSProperty(this.msgList, key);\n  }\n\n\n  getTemplate(key) {\n    return this.getWSProperty(this.templates, key);\n  }\n\n  setGoogleAnalytics(gaq) {\n    this.gaq = gaq;\n  }\n\n\n  showView(view) {\n    if (this.currentView != null) {\n      this.previousView = this.currentView;\n      $(`#${this.currentView}`).hide();\n    }\n    $(`#${view}`).show();\n    this.currentView = view;\n    this.moveToTop();\n  }\n\n  showPreviousView() {\n    this.showView(this.previousView);\n  }\n\n\n  moveToTop() {\n\n  }\n\n\n  callFunction(callback, cbParams, thisParam) {\n    if ($.isFunction(callback)) {\n      try {\n        if (thisParam === undefined || thisParam === null) {\n          callback.apply(document, cbParams);\n        } else {\n          callback.apply(thisParam, cbParams);\n        }\n      } catch (e) {\n        console.log(e.message);\n      }\n    } else {\n      const f = this[callback];\n      if ($.isFunction(f)) {\n        try {\n          f.apply(this, cbParams);\n        } catch (e) {\n          console.log(e.message);\n        }\n      }\n    }\n  }\n\n  getTableTopButtonHtml() {\n    let html = '';\n    if (this.getShowAddNew()) {\n      html = `<button onclick=\"modJs.renderForm();return false;\" class=\"btn btn-small btn-primary\">${this.gt(this.getAddNewLabel())} <i class=\"fa fa-plus\"></i></button>`;\n    }\n\n    if (this.getFilters() != null) {\n      if (html !== '') {\n        html += '&nbsp;&nbsp;';\n      }\n      html += `<button onclick=\"modJs.showFilters();return false;\" class=\"btn btn-small btn-primary\">${this.gt('Filter')} <i class=\"fa fa-filter\"></i></button>`;\n      html += '&nbsp;&nbsp;';\n      if (this.filtersAlreadySet) {\n        html += '<button id=\"__id___resetFilters\" onclick=\"modJs.resetFilters();return false;\" class=\"btn btn-small btn-default\">__filterString__ <i class=\"fa fa-times\"></i></button>';\n      } else {\n        html += '<button id=\"__id___resetFilters\" onclick=\"modJs.resetFilters();return false;\" class=\"btn btn-small btn-default\" style=\"display:none;\">__filterString__ <i class=\"fa fa-times\"></i></button>';\n      }\n    }\n\n    html = html.replace(/__id__/g, this.getTableName());\n\n    if (this.currentFilterString !== '' && this.currentFilterString != null) {\n      html = html.replace(/__filterString__/g, this.currentFilterString);\n    } else {\n      html = html.replace(/__filterString__/g, 'Reset Filters');\n    }\n\n    if (html !== '') {\n      html = `<div class=\"row\"><div class=\"col-xs-12\">${html}</div></div>`;\n    }\n\n    return html;\n  }\n\n\n  getActionButtonHeader() {\n    return { sTitle: '', sClass: 'center' };\n  }\n\n  getTableHTMLTemplate() {\n    return '<div class=\"box-body table-responsive\"><table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"table table-bordered table-striped\" id=\"grid\"></table></div>';\n  }\n\n  isSortable() {\n    return true;\n  }\n\n  /**\n     * Create the data table on provided element id\n     * @method createTable\n     * @param val {Boolean}\n     */\n\n  createTable(elementId) {\n    const that = this;\n\n    if (this.getRemoteTable()) {\n      this.createTableServer(elementId);\n      return;\n    }\n\n\n    const headers = this.getHeaders();\n\n    // add translations\n    for (const index in headers) {\n      headers[index].sTitle = this.gt(headers[index].sTitle);\n    }\n\n    const data = this.getTableData();\n\n    if (this.showActionButtons()) {\n      headers.push(this.getActionButtonHeader());\n    }\n\n\n    if (this.showActionButtons()) {\n      for (let i = 0; i < data.length; i++) {\n        data[i].push(this.getActionButtonsHtml(data[i][0], data[i]));\n      }\n    }\n\n    let html = '';\n    html = this.getTableTopButtonHtml() + this.getTableHTMLTemplate();\n    /*\n         if(this.getShowAddNew()){\n         html = this.getTableTopButtonHtml()+'<div class=\"box-body table-responsive\"><table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"table table-bordered table-striped\" id=\"grid\"></table></div>';\n         }else{\n         html = '<div class=\"box-body table-responsive\"><table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"table table-bordered table-striped\" id=\"grid\"></table></div>';\n         }\n         */\n    // Find current page\n    const activePage = $(`#${elementId} .dataTables_paginate .active a`).html();\n    let start = 0;\n    if (activePage !== undefined && activePage != null) {\n      start = parseInt(activePage, 10) * 15 - 15;\n    }\n\n    $(`#${elementId}`).html(html);\n\n    const dataTableParams = {\n      oLanguage: {\n        sLengthMenu: '_MENU_ records per page',\n      },\n      aaData: data,\n      aoColumns: headers,\n      bSort: that.isSortable(),\n      iDisplayLength: 15,\n      iDisplayStart: start,\n    };\n\n\n    const customTableParams = this.getCustomTableParams();\n\n    $.extend(dataTableParams, customTableParams);\n\n    $(`#${elementId} #grid`).dataTable(dataTableParams);\n\n    $('.dataTables_paginate ul').addClass('pagination');\n    $('.dataTables_length').hide();\n    $('.dataTables_filter input').addClass('form-control');\n    $('.dataTables_filter input').attr('placeholder', 'Search');\n    $('.dataTables_filter label').contents().filter(function () {\n      return (this.nodeType === 3);\n    }).remove();\n    $('.tableActionButton').tooltip();\n  }\n\n  /**\n     * Create a data table on provided element id which loads data page by page\n     * @method createTableServer\n     * @param val {Boolean}\n     */\n\n  createTableServer(elementId) {\n    const that = this;\n    const headers = this.getHeaders();\n\n    headers.push({ sTitle: '', sClass: 'center' });\n\n    // add translations\n    for (const index in headers) {\n      headers[index].sTitle = this.gt(headers[index].sTitle);\n    }\n\n    let html = '';\n    html = this.getTableTopButtonHtml() + this.getTableHTMLTemplate();\n\n    // Find current page\n    const activePage = $(`#${elementId} .dataTables_paginate .active a`).html();\n    let start = 0;\n    if (activePage !== undefined && activePage != null) {\n      start = parseInt(activePage, 10) * 15 - 15;\n    }\n\n\n    $(`#${elementId}`).html(html);\n\n    const dataTableParams = {\n      oLanguage: {\n        sLengthMenu: '_MENU_ records per page',\n      },\n      bProcessing: true,\n      bServerSide: true,\n      sAjaxSource: that.getDataUrl(that.getDataMapping()),\n      aoColumns: headers,\n      bSort: that.isSortable(),\n      parent: that,\n      iDisplayLength: 15,\n      iDisplayStart: start,\n    };\n\n    if (this.showActionButtons()) {\n      dataTableParams.aoColumnDefs = [\n        {\n          fnRender: that.getActionButtons,\n          aTargets: [that.getDataMapping().length],\n        },\n      ];\n    }\n\n    const customTableParams = this.getCustomTableParams();\n\n    $.extend(dataTableParams, customTableParams);\n\n    $(`#${elementId} #grid`).dataTable(dataTableParams);\n\n    $('.dataTables_paginate ul').addClass('pagination');\n    $('.dataTables_length').hide();\n    $('.dataTables_filter input').addClass('form-control');\n    $('.dataTables_filter input').attr('placeholder', 'Search');\n    $('.dataTables_filter label').contents().filter(function () {\n      return (this.nodeType === 3);\n    }).remove();\n\n    $('.tableActionButton').tooltip();\n  }\n\n  /**\n     * This should be overridden in module lib.js classes to return module headers which are used to create the data table.\n     * @method getHeaders\n     * @example\n     SettingAdapter.method('getHeaders() {\n      return [\n      { \"sTitle\": \"ID\" ,\"bVisible\":false},\n      { \"sTitle\": \"Name\" },\n      { \"sTitle\": \"Value\"},\n      { \"sTitle\": \"Details\"}\n    ];\n    }\n     */\n  getHeaders() {\n\n  }\n\n\n  /**\n     * This should be overridden in module lib.js classes to return module field values which are used to create the data table.\n     * @method getDataMapping\n     * @example\n     SettingAdapter.method('getDataMapping() {\n  return [\n          \"id\",\n          \"name\",\n          \"value\",\n          \"description\"\n  ];\n  }\n     */\n\n  getDataMapping() {\n\n  }\n\n  /**\n     * This should be overridden in module lib.js classes to return module from fields which are used to create the add/edit form and also used for initializing select box values in form.\n     * @method getFormFields\n     * @example\n     SettingAdapter.method('getFormFields() {\n  return [\n          [ \"id\", {\"label\":\"ID\",\"type\":\"hidden\"}],\n          [ \"value\", {\"label\":\"Value\",\"type\":\"text\",\"validation\":\"none\"}]\n  ];\n  }\n     */\n  getFormFields() {\n\n  }\n\n  getTableColumns() {\n    return [];\n  }\n\n  getTableData() {\n\n  }\n\n  /**\n     * This can be overridden in module lib.js classes inorder to show a filter form\n     * @method getFilters\n     * @example\n     EmployeeAdapter.method('getFilters() {\n    return [\n            [ \"job_title\", {\"label\":\"Job Title\",\"type\":\"select2\",\"allow-null\":true,\"null-label\":\"All Job Titles\",\"remote-source\":[\"JobTitle\",\"id\",\"name\"]}],\n            [ \"department\", {\"label\":\"Department\",\"type\":\"select2\",\"allow-null\":true,\"null-label\":\"All Departments\",\"remote-source\":[\"CompanyStructure\",\"id\",\"title\"]}],\n            [ \"supervisor\", {\"label\":\"Supervisor\",\"type\":\"select2\",\"allow-null\":true,\"null-label\":\"Anyone\",\"remote-source\":[\"Employee\",\"id\",\"first_name+last_name\"]}]\n    ];\n  }\n     */\n  getFilters() {\n    return null;\n  }\n\n  getAdditionalRemoteFields() {\n    return null;\n  }\n\n  /**\n     * Show the edit form for an item\n     * @method edit\n     * @param id {int} id of the item to edit\n     */\n  edit(id) {\n    this.currentId = id;\n    this.getElement(id, []);\n  }\n\n  copyRow(id) {\n    this.getElement(id, [], true);\n  }\n\n  renderModel(id, header, body) {\n    $(`#${id}ModelBody`).html('');\n\n    if (body === undefined || body == null) {\n      body = '';\n    }\n\n    $(`#${id}ModelLabel`).html(header);\n    $(`#${id}ModelBody`).html(body);\n  }\n\n\n  renderYesNoModel(header, body, yesBtnName, noBtnName, callback, callbackParams) {\n    const that = this;\n    const modelId = '#yesnoModel';\n\n    if (body === undefined || body == null) {\n      body = '';\n    }\n\n    $(`${modelId}Label`).html(header);\n    $(`${modelId}Body`).html(body);\n    if (yesBtnName != null) {\n      $(`${modelId}YesBtn`).html(yesBtnName);\n    }\n    if (noBtnName != null) {\n      $(`${modelId}NoBtn`).html(noBtnName);\n    }\n\n    $(`${modelId}YesBtn`).off().on('click', () => {\n      if (callback !== undefined && callback != null) {\n        callback.apply(that, callbackParams);\n        that.cancelYesno();\n      }\n    });\n\n    $(modelId).modal({\n      backdrop: 'static',\n    });\n  }\n\n  renderModelFromDom(id, header, element) {\n    $(`#${id}ModelBody`).html('');\n\n    if (element === undefined || element == null) {\n      element = $('<div></div>');\n    }\n\n    $(`#${id}ModelLabel`).html(header);\n    $(`#${id}ModelBody`).html('');\n    $(`#${id}ModelBody`).append(element);\n  }\n\n  /**\n     * Delete an item\n     * @method deleteRow\n     * @param id {int} id of the item to edit\n     */\n\n  deleteRow(id) {\n    this.deleteParams.id = id;\n    this.renderModel('delete', 'Confirm Deletion', 'Are you sure you want to delete this item ?');\n    $('#deleteModel').modal('show');\n  }\n\n  /**\n     * Show a popup with message\n     * @method showMessage\n     * @param title {String} title of the message box\n     * @param message {String} message\n     * @param closeCallback {Function} this will be called once the dialog is closed (optional)\n     * @param closeCallback {Function} data to pass to close callback (optional)\n     * @param closeCallbackData\n     * @param isPlain {Boolean} if true buttons are not shown (optional / default = true)\n     * @example\n     *   this.showMessage(\"Error Occured while Applying Leave\", callBackData);\n     */\n  showMessage(title, message, closeCallback = null, closeCallbackData = null, isPlain = false) {\n    const that = this;\n    let modelId = '';\n    if (isPlain) {\n      modelId = '#plainMessageModel';\n    } else {\n      modelId = '#messageModel';\n    }\n\n    $(modelId).off();\n\n    if (isPlain) {\n      this.renderModel('plainMessage', title, message);\n    } else {\n      this.renderModel('message', title, message);\n    }\n\n    if (closeCallback !== null && closeCallback !== undefined) {\n      $(modelId).modal({ show: true });\n      $(modelId).on('hidden.bs.modal', () => {\n        closeCallback.apply(that, closeCallbackData);\n        $('.modal-backdrop').remove();\n      });\n    } else {\n      $(modelId).modal({\n        backdrop: 'static',\n      });\n    }\n  }\n\n  showDomElement(title, element, closeCallback, closeCallbackData, isPlain) {\n    const that = this;\n    let modelId = '';\n    if (isPlain) {\n      modelId = '#dataMessageModel';\n    } else {\n      modelId = '#messageModel';\n    }\n\n    $(modelId).unbind('hide');\n\n    if (isPlain) {\n      this.renderModelFromDom('dataMessage', title, element);\n    } else {\n      this.renderModelFromDom('message', title, element);\n    }\n\n\n    if (closeCallback !== null && closeCallback !== undefined) {\n      $(modelId).modal({ show: true });\n      $(modelId).on('hidden.bs.modal', () => {\n        closeCallback.apply(that, closeCallbackData);\n        $('.modal-backdrop').remove();\n      });\n    } else {\n      $(modelId).modal({\n        backdrop: 'static',\n      });\n    }\n  }\n\n  confirmDelete() {\n    if (this.deleteParams.id !== undefined || this.deleteParams.id != null) {\n      this.deleteObj(this.deleteParams.id, []);\n    }\n    $('#deleteModel').modal('hide');\n  }\n\n  cancelDelete() {\n    $('#deleteModel').modal('hide');\n    this.deleteParams.id = null;\n  }\n\n  closeMessage() {\n    $('#messageModel').modal('hide');\n  }\n\n  cancelYesno() {\n    $('#yesnoModel').modal('hide');\n  }\n\n  closeModal(id) {\n    $(id).modal('hide');\n  }\n\n  closePlainMessage() {\n    $('#plainMessageModel').modal('hide');\n    $('#dataMessageModel').modal('hide');\n  }\n\n  closeDataMessage() {\n    $('#dataMessageModel').modal('hide');\n  }\n\n\n  /**\n     * Create or edit an element\n     * @method save\n     * @param getFunctionCallBackData {Array} once a success is returned call get() function for this module with these parameters\n     * @param successCallback {Function} this will get called after success response\n     */\n\n  save(callGetFunction, successCallback) {\n    const validator = new FormValidation(`${this.getTableName()}_submit`, true, { ShowPopup: false, LabelErrorClass: 'error' });\n    if (validator.checkValues()) {\n      let params = validator.getFormParameters();\n      params = this.forceInjectValuesBeforeSave(params);\n      const msg = this.doCustomValidation(params);\n      if (msg == null) {\n        if (this.csrfRequired) {\n          params.csrf = $(`#${this.getTableName()}Form`).data('csrf');\n        }\n        const id = $(`#${this.getTableName()}_submit #id`).val();\n        if (id != null && id !== undefined && id !== '') {\n          params.id = id;\n        }\n        params = this.makeEmptyDateFieldsNull(params);\n        this.add(params, [], callGetFunction, successCallback);\n      } else {\n        $(`#${this.getTableName()}Form .label`).html(msg);\n        $(`#${this.getTableName()}Form .label`).show();\n        this.scrollToTop();\n      }\n    }\n  }\n\n\n  makeEmptyDateFieldsNull(params) {\n    const fields = this.getFormFields();\n    fields.forEach((field) => {\n      if ((field[1].type === 'date' || field[1].type === 'datetime')\n                && (params[field[0]] === '' || params[field[0]] === '0000-00-00' || params[field[0]] === '0000-00-00 00:00:00')) {\n        if (field[1].validation === 'none') {\n          params[field[0]] = 'NULL';\n        } else {\n          delete params[field[0]];\n        }\n      }\n    });\n    return params;\n  }\n\n  validatePassword(password) {\n    if (password.length < 8) {\n      return this.gt('Password too short');\n    }\n\n    if (password.length > 30) {\n      return this.gt('Password too long');\n    }\n\n    const numberTester = /.*[0-9]+.*$/;\n    if (!password.match(numberTester)) {\n      return this.gt('Password must include at least one number');\n    }\n\n    const lowerTester = /.*[a-z]+.*$/;\n    if (!password.match(lowerTester)) {\n      return this.gt('Password must include at least one lowercase letter');\n    }\n\n    const upperTester = /.*[A-Z]+.*$/;\n    if (!password.match(upperTester)) {\n      return this.gt('Password must include at least one uppercase letter');\n    }\n\n    const symbolTester = /.*[\\W]+.*$/;\n    if (!password.match(symbolTester)) {\n      return this.gt('Password must include at least one symbol');\n    }\n\n    return null;\n  }\n\n  /**\n     * Override this method to inject attitional parameters or modify existing parameters retrived from\n     * add/edit form before sending to the server\n     * @method forceInjectValuesBeforeSave\n     * @param params {Array} keys and values in form\n     * @returns {Array} modified parameters\n     */\n  forceInjectValuesBeforeSave(params) {\n    return params;\n  }\n\n  /**\n     * Override this method to do custom validations at client side\n     * @method doCustomValidation\n     * @param params {Array} keys and values in form\n     * @returns {Null or String} return null if validation success, returns error message if unsuccessful\n     * @example\n     EmployeeLeaveAdapter.method('doCustomValidation(params) {\n    try{\n      if(params['date_start'] != params['date_end']){\n        var ds = new Date(params['date_start']);\n        var de = new Date(params['date_end']);\n        if(de < ds){\n          return \"Start date should be earlier than end date of the leave period\";\n        }\n      }\n    }catch(e){\n\n    }\n  return null;\n}\n     */\n  // eslint-disable-next-line no-unused-vars\n  doCustomValidation(params) {\n    return null;\n  }\n\n  filterQuery() {\n    const validator = new FormValidation(`${this.getTableName()}_filter`, true, { ShowPopup: false, LabelErrorClass: 'error' });\n    if (validator.checkValues()) {\n      const params = validator.getFormParameters();\n      if (this.doCustomFilterValidation(params)) {\n        // remove null params\n        for (const prop in params) {\n          if (params.hasOwnProperty(prop)) {\n            if (params[prop] === 'NULL') {\n              delete (params[prop]);\n            }\n          }\n        }\n\n        this.setFilter(params);\n        this.filtersAlreadySet = true;\n        $(`#${this.getTableName()}_resetFilters`).show();\n        this.currentFilterString = this.getFilterString(params);\n\n        this.get([]);\n        this.closePlainMessage();\n      }\n    }\n  }\n\n\n  getFilterString(filters) {\n    let str = '';\n    let rmf; let source; let values; let select2MVal; let value; let\n      valueOrig;\n\n    const filterFields = this.getFilters();\n\n\n    if (values == null) {\n      values = [];\n    }\n\n    for (const prop in filters) {\n      if (filters.hasOwnProperty(prop)) {\n        values = this.getMetaFieldValues(prop, filterFields);\n        if (!values) {\n          continue;\n        }\n        value = '';\n        valueOrig = null;\n\n        if ((values.type === 'select' || values.type === 'select2')) {\n          if (values['remote-source'] !== undefined && values['remote-source'] != null) {\n            rmf = values['remote-source'];\n            if (filters[prop] === 'NULL') {\n              if (values['null-label'] !== undefined && values['null-label'] != null) {\n                value = values['null-label'];\n              } else {\n                value = 'Not Selected';\n              }\n            } else {\n              let key = `${rmf[0]}_${rmf[1]}_${rmf[2]}`;\n              if (rmf.length > 3) {\n                key = `${key}_${rmf[3]}`;\n              }\n              // value = this.fieldMasterData[`${rmf[0]}_${rmf[1]}_${rmf[2]}`][filters[prop]];\n              value = this.fieldMasterData[key][filters[prop]];\n              valueOrig = value;\n            }\n          } else {\n            source = values.source[0];\n            if (filters[prop] === 'NULL') {\n              if (values['null-label'] !== undefined && values['null-label'] != null) {\n                value = values['null-label'];\n              } else {\n                value = 'Not Selected';\n              }\n            } else {\n              for (let i = 0; i < source.length; i++) {\n                if (filters[prop] === values.source[i][0]) {\n                  value = values.source[i][1];\n                  valueOrig = value;\n                  break;\n                }\n              }\n            }\n          }\n        } else if (values.type === 'select2multi') {\n          select2MVal = [];\n          try {\n            select2MVal = JSON.parse(filters[prop]);\n          } catch (e) {\n            // Do nothing\n          }\n\n          value = select2MVal.join(',');\n          if (value !== '') {\n            valueOrig = value;\n          }\n        } else {\n          value = filters[prop];\n          if (value !== '') {\n            valueOrig = value;\n          }\n        }\n\n        if (valueOrig != null) {\n          if (str !== '') {\n            str += ' | ';\n          }\n\n          str += `${values.label} = ${value}`;\n        }\n      }\n    }\n\n    return str;\n  }\n\n  /**\n     * Override this method to do custom validations at client side for values selected in filters\n     * @method doCustomFilterValidation\n     * @param params {Array} keys and values in form\n     * @returns {Null or String} return null if validation success, returns error message if unsuccessful\n     */\n  doCustomFilterValidation(params) {\n    return true;\n  }\n\n\n  /**\n     * Reset selected filters\n     * @method resetFilters\n     */\n\n  resetFilters() {\n    this.filter = this.origFilter;\n    this.filtersAlreadySet = false;\n    $(`#${this.getTableName()}_resetFilters`).hide();\n    this.currentFilterString = '';\n    this.get([]);\n  }\n\n  redirectToUrl(url) {\n    top.location.href = url;\n  }\n\n\n  showFilters(object) {\n    let formHtml = this.templates.filterTemplate;\n    let html = '';\n    const fields = this.getFilters();\n\n    for (let i = 0; i < fields.length; i++) {\n      const metaField = this.getMetaFieldForRendering(fields[i][0]);\n      if (metaField === '' || metaField === undefined) {\n        html += this.renderFormField(fields[i]);\n      } else {\n        const metaVal = object[metaField];\n        if (metaVal !== '' && metaVal != null && metaVal !== undefined && metaVal.trim() !== '') {\n          html += this.renderFormField(JSON.parse(metaVal));\n        } else {\n          html += this.renderFormField(fields[i]);\n        }\n      }\n    }\n    formHtml = formHtml.replace(/_id_/g, `${this.getTableName()}_filter`);\n    formHtml = formHtml.replace(/_fields_/g, html);\n\n    const randomFormId = this.generateRandom(14);\n    const $tempDomObj = $('<div class=\"reviewBlock popupForm\" data-content=\"Form\"></div>');\n    $tempDomObj.attr('id', randomFormId);\n\n    $tempDomObj.html(formHtml);\n\n\n    $tempDomObj.find('.datefield').datepicker({ viewMode: 2 });\n    $tempDomObj.find('.timefield').datetimepicker({\n      language: 'en',\n      pickDate: false,\n    });\n    $tempDomObj.find('.datetimefield').datetimepicker({\n      language: 'en',\n    });\n\n    $tempDomObj.find('.colorpick').colorpicker();\n    tinymce.init({\n      selector: `#${$tempDomObj.attr('id')} .tinymce`,\n      height: '400',\n    });\n\n    $tempDomObj.find('.simplemde').each(function () {\n      const simplemde = new SimpleMDE({ element: $(this)[0] });\n      $(this).data('simplemde', simplemde);\n      // simplemde.value($(this).val());\n    });\n\n    // $tempDomObj.find('.select2Field').select2();\n    $tempDomObj.find('.select2Field').each(function () {\n      $(this).select2().select2('val', $(this).find('option:eq(0)').val());\n    });\n\n    $tempDomObj.find('.select2Multi').each(function () {\n      $(this).select2().on('change', function (e) {\n        const parentRow = $(this).parents('.row');\n        const height = parentRow.find('.select2-choices').height();\n        parentRow.height(parseInt(height, 10));\n      });\n    });\n\n    /*\n         $tempDomObj.find('.signatureField').each(function() {\n         $(this).data('signaturePad',new SignaturePad($(this)));\n         });\n         */\n\n    // var tHtml = $tempDomObj.wrap('<div>').parent().html();\n    this.showDomElement('Edit', $tempDomObj, null, null, true);\n    $('.filterBtn').off();\n    $('.filterBtn').on('click', (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      try {\n        modJs.filterQuery();\n      } catch (err) {\n        console.log(err);\n        console.log(err.message);\n      }\n      return false;\n    });\n\n    if (this.filter !== undefined && this.filter != null && this.filter !== '') {\n      this.fillForm(this.filter, `#${this.getTableName()}_filter`, this.getFilters());\n    }\n  }\n\n\n  /**\n     * Override this method in your module class to make changes to data fo the form before showing the form\n     * @method preRenderForm\n     * @param object {Array} keys value list for populating form\n     */\n\n  preRenderForm(object) {\n\n  }\n\n  /**\n     * Create the form\n     * @method renderForm\n     * @param object {Array} keys value list for populating form\n     */\n\n  renderForm(object) {\n    const signatureIds = [];\n    if (object == null || object === undefined) {\n      this.currentId = null;\n    }\n\n    this.preRenderForm(object);\n\n    let formHtml = this.templates.formTemplate;\n    let html = '';\n    const fields = this.getFormFields();\n\n    for (let i = 0; i < fields.length; i++) {\n      const metaField = this.getMetaFieldForRendering(fields[i][0]);\n      if (metaField === '' || metaField === undefined) {\n        html += this.renderFormField(fields[i]);\n      } else {\n        const metaVal = object[metaField];\n        if (metaVal !== '' && metaVal != null && metaVal !== undefined && metaVal.trim() !== '') {\n          html += this.renderFormField(JSON.parse(metaVal));\n        } else {\n          html += this.renderFormField(fields[i]);\n        }\n      }\n    }\n    formHtml = formHtml.replace(/_id_/g, `${this.getTableName()}_submit`);\n    formHtml = formHtml.replace(/_fields_/g, html);\n\n\n    let $tempDomObj;\n    const randomFormId = this.generateRandom(14);\n    if (!this.showFormOnPopup) {\n      $tempDomObj = $(`#${this.getTableName()}Form`);\n    } else {\n      $tempDomObj = $('<div class=\"reviewBlock popupForm\" data-content=\"Form\"></div>');\n      $tempDomObj.attr('id', randomFormId);\n    }\n\n    $tempDomObj.html(formHtml);\n\n\n    $tempDomObj.find('.datefield').datepicker({ viewMode: 2 });\n    $tempDomObj.find('.timefield').datetimepicker({\n      language: 'en',\n      pickDate: false,\n    });\n    $tempDomObj.find('.datetimefield').datetimepicker({\n      language: 'en',\n    });\n\n    $tempDomObj.find('.colorpick').colorpicker();\n\n    tinymce.init({\n      selector: `#${$tempDomObj.attr('id')} .tinymce`,\n      height: '400',\n    });\n\n    $tempDomObj.find('.simplemde').each(function () {\n      const simplemde = new SimpleMDE({ element: $(this)[0] });\n      $(this).data('simplemde', simplemde);\n      // simplemde.value($(this).val());\n    });\n\n    const codeMirror = this.codeMirror;\n    if (codeMirror) {\n      $tempDomObj.find('.code').each(function () {\n        const editor = codeMirror.fromTextArea($(this)[0], {\n          lineNumbers: false,\n          matchBrackets: true,\n          continueComments: 'Enter',\n          extraKeys: { 'Ctrl-Q': 'toggleComment' },\n        });\n        $(this).data('codemirror', editor);\n      });\n    }\n\n\n    // $tempDomObj.find('.select2Field').select2();\n    $tempDomObj.find('.select2Field').each(function () {\n      $(this).select2().select2('val', $(this).find('option:eq(0)').val());\n    });\n\n    $tempDomObj.find('.select2Multi').each(function () {\n      $(this).select2().on('change', function (e) {\n        const parentRow = $(this).parents('.row');\n        const height = parentRow.find('.select2-choices').height();\n        parentRow.height(parseInt(height, 10));\n      });\n    });\n\n\n    $tempDomObj.find('.signatureField').each(function () {\n      // $(this).data('signaturePad',new SignaturePad($(this)));\n      signatureIds.push($(this).attr('id'));\n    });\n\n    for (let i = 0; i < fields.length; i++) {\n      if (fields[i][1].type === 'datagroup') {\n        $tempDomObj.find(`#${fields[i][0]}`).data('field', fields[i]);\n      }\n    }\n\n    if (this.showSave === false) {\n      $tempDomObj.find('.saveBtn').remove();\n    } else {\n      $tempDomObj.find('.saveBtn').off();\n      $tempDomObj.find('.saveBtn').data('modJs', this);\n      $tempDomObj.find('.saveBtn').on('click', function () {\n        if ($(this).data('modJs').saveSuccessItemCallback != null && $(this).data('modJs').saveSuccessItemCallback !== undefined) {\n          $(this).data('modJs').save($(this).data('modJs').retriveItemsAfterSave(), $(this).data('modJs').saveSuccessItemCallback);\n        } else {\n          $(this).data('modJs').save();\n        }\n\n        return false;\n      });\n    }\n\n    if (this.showCancel === false) {\n      $tempDomObj.find('.cancelBtn').remove();\n    } else {\n      $tempDomObj.find('.cancelBtn').off();\n      $tempDomObj.find('.cancelBtn').data('modJs', this);\n      $tempDomObj.find('.cancelBtn').on('click', function () {\n        $(this).data('modJs').cancel();\n        return false;\n      });\n    }\n\n    // Input mask\n    $tempDomObj.find('[mask]').each(function () {\n      $(this).inputmask($(this).attr('mask'));\n    });\n\n    $tempDomObj.find('[datemask]').each(function () {\n      $(this).inputmask({\n        mask: 'y-1-2',\n        placeholder: 'YYYY-MM-DD',\n        leapday: '-02-29',\n        separator: '-',\n        alias: 'yyyy/mm/dd',\n      });\n    });\n\n    $tempDomObj.find('[datetimemask]').each(function () {\n      $(this).inputmask('datetime', {\n        mask: 'y-2-1 h:s:00',\n        placeholder: 'YYYY-MM-DD hh:mm:ss',\n        leapday: '-02-29',\n        separator: '-',\n        alias: 'yyyy/mm/dd',\n      });\n    });\n\n    if (!this.showFormOnPopup) {\n      $(`#${this.getTableName()}Form`).show();\n      $(`#${this.getTableName()}`).hide();\n\n      for (let i = 0; i < signatureIds.length; i++) {\n        $(`#${signatureIds[i]}`)\n          .data('signaturePad',\n            new SignaturePad(document.getElementById(signatureIds[i])));\n      }\n\n      if (object !== undefined && object != null) {\n        this.fillForm(object);\n      } else {\n        this.setDefaultValues();\n      }\n\n      this.scrollToTop();\n    } else {\n      // var tHtml = $tempDomObj.wrap('<div>').parent().html();\n      // this.showMessage(\"Edit\",tHtml,null,null,true);\n      this.showMessage('Edit', '', null, null, true);\n\n      $('#plainMessageModel .modal-body').html('');\n      $('#plainMessageModel .modal-body').append($tempDomObj);\n\n\n      for (let i = 0; i < signatureIds.length; i++) {\n        $(`#${signatureIds[i]}`)\n          .data('signaturePad',\n            new SignaturePad(document.getElementById(signatureIds[i])));\n      }\n\n      if (object !== undefined && object != null) {\n        this.fillForm(object, `#${randomFormId}`);\n      } else {\n        this.setDefaultValues(`#${randomFormId}`);\n      }\n    }\n\n    this.postRenderForm(object, $tempDomObj);\n  }\n\n  setDefaultValues(formId, fields) {\n    if (fields == null || fields === undefined) {\n      fields = this.getFormFields();\n    }\n\n    if (formId == null || formId === undefined || formId === '') {\n      formId = `#${this.getTableName()}Form`;\n    }\n\n\n    for (let i = 0; i < fields.length; i++) {\n      if (fields[i][1].type !== 'text' && fields[i][1].type !== 'textarea') {\n        continue;\n      }\n\n      if (fields[i][1].default !== undefined && fields[i][1].default !== null) {\n        $(`${formId} #${fields[i][0]}`).val(fields[i][1].default);\n      }\n    }\n  }\n\n  retriveItemsAfterSave() {\n    return true;\n  }\n\n  /**\n     * Override this method in your module class to make changes to data fo the form after showing it\n     * @method postRenderForm\n     * @param object {Array} keys value list for populating form\n     * @param $tempDomObj {DOM} a DOM element for the form\n     * @example\n     *   UserAdapter.method('postRenderForm(object, $tempDomObj) {\n    if(object == null || object == undefined){\n      $tempDomObj.find(\"#changePasswordBtn\").remove();\n    }\n  }\n     */\n\n  postRenderForm(object, $tempDomObj) {\n\n  }\n\n  /**\n     * Convert data group field to HTML\n     * @method dataGroupToHtml\n     * @param val {String} value in the field\n     * @param field {Array} field meta data\n     */\n\n  dataGroupToHtml(val, field) {\n    const data = JSON.parse(val);\n\n\n    let t; let sortFunction; let item; let itemHtml; let itemVal;\n\n    const deleteButton = '<a id=\"#_id_#_delete\" onclick=\"modJs.deleteDataGroupItem(\\'#_id_#\\');return false;\" type=\"button\" style=\"float:right;margin-right:3px;\" tooltip=\"Delete\"><li class=\"fa fa-times\"></li></a>';\n    const editButton = '<a id=\"#_id_#_edit\" onclick=\"modJs.editDataGroupItem(\\'#_id_#\\');return false;\" type=\"button\" style=\"float:right;margin-right:5px;\" tooltip=\"Edit\"><li class=\"fa fa-edit\"></li></a>';\n\n    const template = field[1].html;\n\n    if (data != null && data !== undefined && field[1]['sort-function'] !== undefined && field[1]['sort-function'] != null) {\n      data.sort(field[1]['sort-function']);\n    }\n\n\n    const html = $(`<div id=\"${field[0]}_div_inner\"></div>`);\n\n\n    for (let i = 0; i < data.length; i++) {\n      item = data[i];\n\n      if (field[1]['pre-format-function'] !== undefined && field[1]['pre-format-function'] != null) {\n        item = field[1]['pre-format-function'].apply(this, [item]);\n      }\n\n      t = template;\n      t = t.replace('#_delete_#', deleteButton);\n      t = t.replace('#_edit_#', editButton);\n      t = t.replace(/#_id_#/g, item.id);\n\n      for (const key in item) {\n        itemVal = item[key];\n        if (itemVal !== undefined && itemVal != null && typeof itemVal === 'string') {\n          itemVal = itemVal.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n        }\n        t = t.replace(`#_${key}_#`, itemVal);\n      }\n\n      if (field[1].render !== undefined && field[1].render != null) {\n        t = t.replace('#_renderFunction_#', field[1].render(item));\n      }\n\n      itemHtml = $(t);\n      itemHtml.attr('fieldId', `${field[0]}_div`);\n      html.append(itemHtml);\n    }\n\n\n    return html;\n  }\n\n  /**\n     * Reset the DataGroup for a given field\n     * @method resetDataGroup\n     * @param field {Array} field meta data\n     */\n  resetDataGroup(field) {\n    $(`#${field[0]}`).val('');\n    $(`#${field[0]}_div`).html('');\n  }\n\n  showDataGroup(field, object, callback) {\n    let formHtml = this.templates.datagroupTemplate;\n    let html = '';\n    const fields = field[1].form;\n\n    if (object !== undefined && object != null && object.id !== undefined) {\n      this.currentDataGroupItemId = object.id;\n    } else {\n      this.currentDataGroupItemId = null;\n    }\n\n    for (let i = 0; i < fields.length; i++) {\n      html += this.renderFormField(fields[i]);\n    }\n    formHtml = formHtml.replace(/_id_/g, `${this.getTableName()}_field_${field[0]}`);\n    formHtml = formHtml.replace(/_fields_/g, html);\n\n    const randomFormId = this.generateRandom(14);\n    const $tempDomObj = $('<div class=\"reviewBlock popupForm\" data-content=\"Form\"></div>');\n    $tempDomObj.attr('id', randomFormId);\n\n    $tempDomObj.html(formHtml);\n\n\n    $tempDomObj.find('.datefield').datepicker({ viewMode: 2 });\n    $tempDomObj.find('.timefield').datetimepicker({\n      language: 'en',\n      pickDate: false,\n    });\n    $tempDomObj.find('.datetimefield').datetimepicker({\n      language: 'en',\n    });\n\n    $tempDomObj.find('.colorpick').colorpicker();\n\n    tinymce.init({\n      selector: `#${$tempDomObj.attr('id')} .tinymce`,\n      height: '400',\n    });\n\n    $tempDomObj.find('.simplemde').each(function () {\n      const simplemde = new SimpleMDE({ element: $(this)[0] });\n      $(this).data('simplemde', simplemde);\n      // simplemde.value($(this).val());\n    });\n\n    $tempDomObj.find('.select2Field').each(function () {\n      $(this).select2().select2('val', $(this).find('option:eq(0)').val());\n    });\n\n\n    $tempDomObj.find('.select2Multi').each(function () {\n      $(this).select2().on('change', function (e) {\n        const parentRow = $(this).parents('.row');\n        const height = parentRow.find('.select2-choices').height();\n        parentRow.height(parseInt(height, 10));\n      });\n    });\n\n\n    this.currentDataGroupField = field;\n    this.showDomElement(`Add ${field[1].label}`, $tempDomObj, null, null, true);\n\n    if (object !== undefined && object != null) {\n      this.fillForm(object, `#${this.getTableName()}_field_${field[0]}`, field[1].form);\n    } else {\n      this.setDefaultValues(`#${this.getTableName()}_field_${field[0]}`, field[1].form);\n    }\n\n\n    $('.groupAddBtn').off();\n    if (object !== undefined && object != null && object.id !== undefined) {\n      $('.groupAddBtn').on('click', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        try {\n          modJs.editDataGroup(callback);\n        } catch (err) {\n          console.log(`Error editing data group: ${err.message}`);\n        }\n        return false;\n      });\n    } else {\n      $('.groupAddBtn').on('click', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        try {\n          modJs.addDataGroup(callback);\n        } catch (err) {\n          console.log(`Error adding data group: ${err.message}`);\n        }\n        return false;\n      });\n    }\n  }\n\n  addDataGroup(callback, existingData) {\n    const field = this.currentDataGroupField;\n    let tempParams;\n    $(`#${this.getTableName()}_field_${field[0]}_error`).html('');\n    $(`#${this.getTableName()}_field_${field[0]}_error`).hide();\n    const validator = new FormValidation(`${this.getTableName()}_field_${field[0]}`, true, { ShowPopup: false, LabelErrorClass: 'error' });\n    if (validator.checkValues()) {\n      let params = validator.getFormParameters();\n      if (field[1]['custom-validate-function'] !== undefined && field[1]['custom-validate-function'] != null) {\n        tempParams = field[1]['custom-validate-function'].apply(this, [params]);\n        if (tempParams.valid) {\n          params = tempParams.params;\n        } else {\n          $(`#${this.getTableName()}_field_${field[0]}_error`).html(tempParams.message);\n          $(`#${this.getTableName()}_field_${field[0]}_error`).show();\n          return false;\n        }\n      }\n      let val = '[]';\n      if (existingData) {\n        val = existingData;\n      } else {\n        val = $(`#${field[0]}`).val();\n        if (val === '' || val == null) {\n          val = '[]';\n        }\n      }\n      const data = JSON.parse(val);\n\n      params.id = `${field[0]}_${this.dataGroupGetNextAutoIncrementId(data)}`;\n      data.push(params);\n\n\n      if (field[1]['sort-function'] !== undefined && field[1]['sort-function'] != null) {\n        data.sort(field[1]['sort-function']);\n      }\n\n      val = JSON.stringify(data);\n\n      const html = this.dataGroupToHtml(val, field);\n      if (callback) {\n        callback(val);\n      }\n\n      $(`#${field[0]}_div`).html('');\n      $(`#${field[0]}_div`).append(html);\n\n      this.makeDataGroupSortable(field, $(`#${field[0]}_div_inner`));\n\n\n      $(`#${field[0]}`).val(val);\n      this.orderDataGroup(field);\n\n      this.closeDataMessage();\n\n      this.showMessage('Item Added', 'This change will be effective only when you save the form');\n    }\n    return true;\n  }\n\n  nl2br(str, len) {\n    let t = '';\n    try {\n      const arr = str.split(' ');\n      let count = 0;\n      for (let i = 0; i < arr.length; i++) {\n        count += arr[i].length + 1;\n        if (count > len) {\n          t += `${arr[i]}<br/>`;\n          count = 0;\n        } else {\n          t += `${arr[i]} `;\n        }\n      }\n    } catch (e) {\n      // Do nothing\n    }\n    return t;\n  }\n\n  makeDataGroupSortable(field, obj) {\n    obj.data('field', field);\n    obj.data('firstSort', true);\n    obj.sortable({\n\n      create() {\n        $(this).height($(this).height());\n      },\n\n      'ui-floating': false,\n      start(e, uiStart) {\n        $('#sortable-ul-selector-id').sortable({\n          sort(event, ui) {\n            const $target = $(event.target);\n            if (!/html|body/i.test($target.offsetParent()[0].tagName)) {\n              const top = event.pageY - $target.offsetParent().offset().top - (ui.helper.outerHeight(true) / 2);\n              ui.helper.css({ top: `${top}px` });\n            }\n          },\n        });\n      },\n      revert: true,\n      stop() {\n        modJs.orderDataGroup($(this).data('field'));\n      },\n      axis: 'y',\n      scroll: false,\n      placeholder: 'sortable-placeholder',\n      cursor: 'move',\n    });\n  }\n\n  orderDataGroup(field, callback) {\n    const newArr = []; let\n      id;\n    const list = $(`#${field[0]}_div_inner [fieldid='${field[0]}_div']`);\n    let val = $(`#${field[0]}`).val();\n    if (val === '' || val == null) {\n      val = '[]';\n    }\n    const data = JSON.parse(val);\n    list.each(function () {\n      id = $(this).attr('id');\n      for (const index in data) {\n        if (data[index].id === id) {\n          newArr.push(data[index]);\n          break;\n        }\n      }\n    });\n\n    $(`#${field[0]}`).val(JSON.stringify(newArr));\n\n    if (callback != null) {\n      callback(newArr);\n    }\n  }\n\n\n  editDataGroup(callback, existingData) {\n    const field = this.currentDataGroupField;\n    const id = this.currentDataGroupItemId;\n    const validator = new FormValidation(`${this.getTableName()}_field_${field[0]}`, true, { ShowPopup: false, LabelErrorClass: 'error' });\n    if (validator.checkValues()) {\n      let params = validator.getFormParameters();\n\n      if (field[1]['custom-validate-function'] !== undefined && field[1]['custom-validate-function'] != null) {\n        const tempParams = field[1]['custom-validate-function'].apply(this, [params]);\n        if (tempParams.valid) {\n          params = tempParams.params;\n        } else {\n          $(`#${this.getTableName()}_field_${field[0]}_error`).html(tempParams.message);\n          $(`#${this.getTableName()}_field_${field[0]}_error`).show();\n          return false;\n        }\n      }\n\n\n      if (this.doCustomFilterValidation(params)) {\n        let val = '[]';\n        if (existingData) {\n          val = existingData;\n        } else {\n          val = $(`#${field[0]}`).val();\n          if (val === '' || val == null) {\n            val = '[]';\n          }\n        }\n        const data = JSON.parse(val);\n\n        let editVal = {};\n        let editValIndex = -1;\n        const newVals = [];\n        for (let i = 0; i < data.length; i++) {\n          const item = data[i];\n          if (item.id === id) {\n            editVal = item;\n            editValIndex = i;\n          }\n          newVals.push(item);\n        }\n\n\n        params.id = editVal.id;\n        newVals[editValIndex] = params;\n\n        if (field[1]['sort-function'] !== undefined && field[1]['sort-function'] != null) {\n          newVals.sort(field[1]['sort-function']);\n        }\n\n        val = JSON.stringify(newVals);\n        $(`#${field[0]}`).val(val);\n\n        const html = this.dataGroupToHtml(val, field);\n\n        if (callback) {\n          callback(newVals);\n        }\n\n        this.orderDataGroup(field);\n\n        $(`#${field[0]}_div`).html('');\n        $(`#${field[0]}_div`).append(html);\n\n        this.makeDataGroupSortable(field, $(`#${field[0]}_div_inner`));\n\n\n        this.closeDataMessage();\n\n        this.showMessage('Item Edited', 'This change will be effective only when you save the form');\n      }\n    }\n\n    return true;\n  }\n\n  editDataGroupItem(id, existingData, field) {\n    const fieldId = id.substring(0, id.lastIndexOf('_'));\n\n    let val;\n    if (existingData) {\n      val = decodeURI(existingData);\n    } else {\n      val = $(`#${fieldId}`).val();\n    }\n    const data = JSON.parse(val);\n\n    let editVal = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const item = data[i];\n      if (item.id === id) {\n        editVal = item;\n      }\n    }\n\n    if (field) {\n      field = JSON.parse(decodeURI(field));\n    } else {\n      field = $(`#${fieldId}`).data('field');\n    }\n\n    this.showDataGroup(field, editVal);\n  }\n\n  dataGroupGetNextAutoIncrementId(data) {\n    let autoId = 1; let\n      id;\n    for (let i = 0; i < data.length; i++) {\n      const item = data[i];\n      if (item.id === undefined || item.id == null) {\n        item.id = 1;\n      }\n      id = item.id.substring(item.id.lastIndexOf('_') + 1, item.id.length);\n      if (id >= autoId) {\n        autoId = parseInt(id, 10) + 1;\n      }\n    }\n\n    return autoId;\n  }\n\n\n  deleteDataGroupItem(id, existingData) {\n    const fieldId = id.substring(0, id.lastIndexOf('_'));\n\n    let val;\n    if (existingData) {\n      val = decodeURI(existingData);\n    } else {\n      val = $(`#${fieldId}`).val();\n    }\n    const data = JSON.parse(val);\n\n    const newVal = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const item = data[i];\n      if (item.id !== id) {\n        newVal.push(item);\n      }\n    }\n\n    $(`#${fieldId}`).val(JSON.stringify(newVal));\n\n    $(`#${id}`).remove();\n\n    this.showMessage('Item Removed', 'Item removed. This change will be effective only when you save the form');\n  }\n\n\n  /**\n     * Fill a form with required values after showing it\n     * @method fillForm\n     * @param object {Array} form data\n     * @param formId {String} id of the form\n     * @param formId {Array} field meta data\n     */\n\n  fillForm(object, formId, fields) {\n    let placeHolderVal;\n    if (fields == null || fields === undefined) {\n      fields = this.getFormFields();\n    }\n\n    if (formId == null || formId === undefined || formId === '') {\n      formId = `#${this.getTableName()}Form`;\n    }\n\n\n    for (let i = 0; i < fields.length; i++) {\n      if (fields[i][1].type === 'date') {\n        if (object[fields[i][0]] !== '0000-00-00' && object[fields[i][0]] !== '' && object[fields[i][0]] != null && object[fields[i][0]] !== undefined) {\n          $(`${formId} #${fields[i][0]}_date`).datepicker('setValue', object[fields[i][0]]);\n        }\n      } else if (fields[i][1].type === 'colorpick') {\n        if (object[fields[i][0]] != null && object[fields[i][0]] !== undefined) {\n          $(`${formId} #${fields[i][0]}_colorpick`).colorpicker('setValue', object[fields[i][0]]);\n          $(`${formId} #${fields[i][0]}`).val(object[fields[i][0]]);\n        }\n      } else if (fields[i][1].type === 'datetime' || fields[i][1].type === 'time') {\n        if (object[fields[i][0]] !== '0000-00-00 00:00:00' && object[fields[i][0]] !== '' && object[fields[i][0]] != null && object[fields[i][0]] !== undefined) {\n          const tempDate = object[fields[i][0]];\n          const arr = tempDate.split(' ');\n          const dateArr = arr[0].split('-');\n          const timeArr = arr[1].split(':');\n          $(`${formId} #${fields[i][0]}_datetime`).data('datetimepicker').setLocalDate(new Date(dateArr[0], parseInt(dateArr[1], 10) - 1, dateArr[2], timeArr[0], timeArr[1], timeArr[2]));\n        }\n      } else if (fields[i][1].type === 'label') {\n        $(`${formId} #${fields[i][0]}`).html(object[fields[i][0]]);\n      } else if (fields[i][1].type === 'placeholder') {\n        if (fields[i][1]['remote-source'] !== undefined && fields[i][1]['remote-source'] != null) {\n          // const key = `${fields[i][1]['remote-source'][0]}_${fields[i][1]['remote-source'][1]}_${fields[i][1]['remote-source'][2]}`;\n          const key = this.getRemoteSourceKey(fields[i]);\n          placeHolderVal = this.fieldMasterData[key][object[fields[i][0]]];\n        } else {\n          placeHolderVal = object[fields[i][0]];\n        }\n\n        if (placeHolderVal === undefined || placeHolderVal == null) {\n          placeHolderVal = '';\n        } else {\n          try {\n            placeHolderVal = placeHolderVal.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n          } catch (e) {\n            // Do nothing\n          }\n        }\n\n        if (fields[i][1].formatter !== undefined && fields[i][1].formatter && $.isFunction(fields[i][1].formatter)) {\n          try {\n            placeHolderVal = fields[i][1].formatter(placeHolderVal);\n          } catch (e) {\n            // Do nothing\n          }\n        }\n\n        $(`${formId} #${fields[i][0]}`).html(placeHolderVal);\n      } else if (fields[i][1].type === 'fileupload') {\n        if (object[fields[i][0]] != null && object[fields[i][0]] !== undefined && object[fields[i][0]] !== '') {\n          $(`${formId} #${fields[i][0]}`).html(object[fields[i][0]]);\n          $(`${formId} #${fields[i][0]}`).attr('val', object[fields[i][0]]);\n          $(`${formId} #${fields[i][0]}`).show();\n          $(`${formId} #${fields[i][0]}_download`).show();\n          $(`${formId} #${fields[i][0]}_remove`).show();\n        }\n        if (fields[i][1].readonly === true) {\n          $(`${formId} #${fields[i][0]}_upload`).remove();\n        }\n      } else if (fields[i][1].type === 'select') {\n        if (object[fields[i][0]] === undefined || object[fields[i][0]] == null || object[fields[i][0]] === '') {\n          object[fields[i][0]] = 'NULL';\n        }\n        $(`${formId} #${fields[i][0]}`).val(object[fields[i][0]]);\n      } else if (fields[i][1].type === 'select2') {\n        if (object[fields[i][0]] === undefined || object[fields[i][0]] == null || object[fields[i][0]] === '') {\n          object[fields[i][0]] = 'NULL';\n        }\n        $(`${formId} #${fields[i][0]}`).select2('val', object[fields[i][0]]);\n      } else if (fields[i][1].type === 'select2multi') {\n        // TODO - SM\n        if (object[fields[i][0]] === undefined || object[fields[i][0]] == null || object[fields[i][0]] === '') {\n          object[fields[i][0]] = 'NULL';\n        }\n\n        let msVal = [];\n        if (object[fields[i][0]] !== undefined && object[fields[i][0]] != null && object[fields[i][0]] !== '') {\n          try {\n            msVal = JSON.parse(object[fields[i][0]]);\n          } catch (e) {\n            // Do nothing\n          }\n        }\n\n        $(`${formId} #${fields[i][0]}`).select2('val', msVal);\n        const select2Height = $(`${formId} #${fields[i][0]}`).find('.select2-choices').height();\n        $(`${formId} #${fields[i][0]}`).find('.controls').css('min-height', `${select2Height}px`);\n        $(`${formId} #${fields[i][0]}`).css('min-height', `${select2Height}px`);\n      } else if (fields[i][1].type === 'datagroup') {\n        try {\n          const html = this.dataGroupToHtml(object[fields[i][0]], fields[i]);\n          $(`${formId} #${fields[i][0]}`).val(object[fields[i][0]]);\n          $(`${formId} #${fields[i][0]}_div`).html('');\n          $(`${formId} #${fields[i][0]}_div`).append(html);\n\n          this.makeDataGroupSortable(fields[i], $(`${formId} #${fields[i][0]}_div_inner`));\n        } catch (e) {\n          // Do nothing\n        }\n      } else if (fields[i][1].type === 'signature') {\n        if (object[fields[i][0]] !== '' || object[fields[i][0]] !== undefined\n                    || object[fields[i][0]] != null) {\n          $(`${formId} #${fields[i][0]}`).data('signaturePad').fromDataURL(object[fields[i][0]]);\n        }\n      } else if (fields[i][1].type === 'simplemde') {\n        $(`${formId} #${fields[i][0]}`).data('simplemde').value(object[fields[i][0]]);\n      } else if (fields[i][1].type === 'code') {\n        const cm = $(`${formId} #${fields[i][0]}`).data('codemirror');\n        if (cm) {\n          cm.getDoc().setValue(object[fields[i][0]]);\n        }\n      } else {\n        $(`${formId} #${fields[i][0]}`).val(object[fields[i][0]]);\n      }\n    }\n  }\n\n  /**\n     * Cancel edit or add new on modules\n     * @method cancel\n     */\n\n  cancel() {\n    $(`#${this.getTableName()}Form`).hide();\n    $(`#${this.getTableName()}`).show();\n  }\n\n  renderFormField(field) {\n    let userId = 0;\n    if (this.fieldTemplates[field[1].type] === undefined || this.fieldTemplates[field[1].type] == null) {\n      return '';\n    }\n    let t = this.fieldTemplates[field[1].type];\n    field[1].label = this.gt(field[1].label);\n    if (field[1].validation !== 'none' && field[1].validation !== 'emailOrEmpty' && field[1].validation !== 'numberOrEmpty' && field[1].type !== 'placeholder' && field[1].label.indexOf('*') < 0) {\n      const tempSelectBoxes = ['select', 'select2'];\n      if (!(tempSelectBoxes.indexOf(field[1].type) >= 0 && field[1]['allow-null'] === true)) {\n        field[1].label = `${field[1].label}<font class=\"redFont\">*</font>`;\n      }\n    }\n\n    if (field[1].type === 'select' || field[1].type === 'select2' || field[1].type === 'select2multi') {\n      t = t.replace(/_id_/g, field[0]);\n      t = t.replace(/_label_/g, field[1].label);\n      if (field[1].source !== undefined && field[1].source != null) {\n        t = t.replace('_options_', this.renderFormSelectOptions(field[1].source, field));\n      } else if (field[1]['remote-source'] !== undefined && field[1]['remote-source'] != null) {\n        // let key = `${field[1]['remote-source'][0]}_${field[1]['remote-source'][1]}_${field[1]['remote-source'][2]}`;\n        // if (field[1]['remote-source'].length === 4) {\n        //   key = `${key}_${field[1]['remote-source'][3]}`;\n        // }\n        const key = this.getRemoteSourceKey(field);\n        t = t.replace('_options_', this.renderFormSelectOptionsRemote(this.fieldMasterData[key], field));\n      }\n    } else if (field[1].type === 'colorpick') {\n      t = t.replace(/_id_/g, field[0]);\n      t = t.replace(/_label_/g, field[1].label);\n    } else if (field[1].type === 'date') {\n      t = t.replace(/_id_/g, field[0]);\n      t = t.replace(/_label_/g, field[1].label);\n    } else if (field[1].type === 'datetime') {\n      t = t.replace(/_id_/g, field[0]);\n      t = t.replace(/_label_/g, field[1].label);\n    } else if (field[1].type === 'time') {\n      t = t.replace(/_id_/g, field[0]);\n      t = t.replace(/_label_/g, field[1].label);\n    } else if (field[1].type === 'fileupload') {\n      t = t.replace(/_id_/g, field[0]);\n      t = t.replace(/_label_/g, field[1].label);\n      const ce = this.getCurrentProfile();\n      if (ce != null && ce !== undefined) {\n        userId = ce.id;\n      } else {\n        userId = this.getUser().id * -1;\n      }\n      t = t.replace(/_userId_/g, userId);\n      t = t.replace(/_group_/g, this.tab);\n\n      if (field[1].filetypes !== undefined && field[1].filetypes != null) {\n        t = t.replace(/_filetypes_/g, field[1].filetypes);\n      } else {\n        t = t.replace(/_filetypes_/g, 'all');\n      }\n\n      t = t.replace(/_rand_/g, this.generateRandom(14));\n    } else if (field[1].type === 'datagroup') {\n      t = t.replace(/_id_/g, field[0]);\n      t = t.replace(/_label_/g, field[1].label);\n    } else if (field[1].type === 'signature') {\n      t = t.replace(/_id_/g, field[0]);\n      t = t.replace(/_label_/g, field[1].label);\n    } else if (field[1].type === 'tinymce' || field[1].type === 'simplemde') {\n      t = t.replace(/_id_/g, field[0]);\n      t = t.replace(/_label_/g, field[1].label);\n    } else {\n      t = t.replace(/_id_/g, field[0]);\n      t = t.replace(/_label_/g, field[1].label);\n    }\n\n\n    if (field[1].validation !== undefined && field[1].validation != null && field[1].validation !== '') {\n      t = t.replace(/_validation_/g, `validation=\"${field[1].validation}\"`);\n    } else {\n      t = t.replace(/_validation_/g, '');\n    }\n\n    if (field[1].help !== undefined && field[1].help !== null) {\n      t = t.replace(/_helpline_/g, field[1].help);\n      t = t.replace(/_hidden_class_help_/g, '');\n    } else {\n      t = t.replace(/_helpline_/g, '');\n      t = t.replace(/_hidden_class_help_/g, 'hide');\n    }\n\n    if (field[1].placeholder !== undefined && field[1].placeholder !== null) {\n      t = t.replace(/_placeholder_/g, `placeholder=\"${field[1].placeholder}\"`);\n    } else {\n      t = t.replace(/_placeholder_/g, '');\n    }\n\n    if (field[1].mask !== undefined && field[1].mask !== null) {\n      t = t.replace(/_mask_/g, `mask=\"${field[1].mask}\"`);\n    } else {\n      t = t.replace(/_mask_/g, '');\n    }\n\n    return t;\n  }\n\n  renderFormSelectOptions(options, field) {\n    let html = '';\n\n    if (field != null && field !== undefined) {\n      if (field[1]['allow-null'] === true) {\n        if (field[1]['null-label'] !== undefined && field[1]['null-label'] != null) {\n          html += `<option value=\"NULL\">${this.gt(field[1]['null-label'])}</option>`;\n        } else {\n          html += '<option value=\"NULL\">Select</option>';\n        }\n      }\n    }\n\n\n    // Sort options\n\n    const tuples = [];\n\n    for (const key in options) {\n      tuples.push(options[key]);\n    }\n    if (field[1].sort === true) {\n      tuples.sort((a, b) => {\n        a = a[1];\n        b = b[1];\n\n        // eslint-disable-next-line no-nested-ternary\n        return a < b ? -1 : (a > b ? 1 : 0);\n      });\n    }\n\n\n    for (let i = 0; i < tuples.length; i++) {\n      const prop = tuples[i][0];\n      const value = tuples[i][1];\n      let t = '<option value=\"_id_\">_val_</option>';\n      t = t.replace('_id_', prop);\n      t = t.replace('_val_', this.gt(value));\n      html += t;\n    }\n    return html;\n  }\n\n  renderFormSelectOptionsRemote(options, field) {\n    let html = '';\n    if (field[1]['allow-null'] === true) {\n      if (field[1]['null-label'] !== undefined && field[1]['null-label'] != null) {\n        html += `<option value=\"NULL\">${this.gt(field[1]['null-label'])}</option>`;\n      } else {\n        html += '<option value=\"NULL\">Select</option>';\n      }\n    }\n\n    // Sort options\n\n    const tuples = [];\n\n    for (const key in options) {\n      tuples.push([key, options[key]]);\n    }\n    if (field[1].sort === 'true') {\n      tuples.sort((a, b) => {\n        a = a[1];\n        b = b[1];\n\n        // eslint-disable-next-line no-nested-ternary\n        return a < b ? -1 : (a > b ? 1 : 0);\n      });\n    }\n\n    for (let i = 0; i < tuples.length; i++) {\n      const prop = tuples[i][0];\n      const value = tuples[i][1];\n\n      let t = '<option value=\"_id_\">_val_</option>';\n      t = t.replace('_id_', prop);\n      t = t.replace('_val_', this.gt(value));\n      html += t;\n    }\n\n\n    return html;\n  }\n\n  setCustomTemplates(templates) {\n    this.customTemplates = templates;\n  }\n\n  setEmailTemplates(templates) {\n    this.emailTemplates = templates;\n  }\n\n  getCustomTemplate(file) {\n    return this.customTemplates[file];\n  }\n\n  setFieldTemplates(templates) {\n    this.fieldTemplates = templates;\n  }\n\n\n  getMetaFieldForRendering(fieldName) {\n    return '';\n  }\n\n  clearDeleteParams() {\n    this.deleteParams = {};\n  }\n\n  getShowAddNew() {\n    return this.showAddNew;\n  }\n\n  /**\n     * Override this method to change add new button label\n     * @method getAddNewLabel\n     */\n\n  getAddNewLabel() {\n    return 'Add New';\n  }\n\n  /**\n     * Used to set whether to show the add new button for a module\n     * @method setShowAddNew\n     * @param showAddNew {Boolean} value\n     */\n\n  setShowAddNew(showAddNew) {\n    this.showAddNew = showAddNew;\n  }\n\n  /**\n     * Used to set whether to show delete button for each entry in module\n     * @method setShowDelete\n     * @param val {Boolean} value\n     */\n  setShowDelete(val) {\n    this.showDelete = val;\n  }\n\n\n  /**\n     * Used to set whether to show edit button for each entry in module\n     * @method setShowEdit\n     * @param val {Boolean} value\n     */\n\n  setShowEdit(val) {\n    this.showEdit = val;\n  }\n\n  /**\n     * Used to set whether to show save button in form\n     * @method setShowSave\n     * @param val {Boolean} value\n     */\n\n\n  setShowSave(val) {\n    this.showSave = val;\n  }\n\n\n  /**\n     * Used to set whether to show cancel button in form\n     * @method setShowCancel\n     * @param val {Boolean} value\n     */\n\n  setShowCancel(val) {\n    this.showCancel = val;\n  }\n\n  /**\n     * Datatable option array will be extended with associative array provided here\n     * @method getCustomTableParams\n     * @param val {Boolean} value\n     */\n\n\n  getCustomTableParams() {\n    return {};\n  }\n\n  getActionButtons(obj) {\n    return modJs.getActionButtonsHtml(obj.aData[0], obj.aData);\n  }\n\n\n  /**\n     * This return html for action buttons in each row. Override this method if you need to make changes to action buttons.\n     * @method getActionButtonsHtml\n     * @param id {int} id of the row\n     * @param data {Array} data for the row\n     * @returns {String} html for action buttons\n     */\n\n  getActionButtonsHtml(id, data) {\n    const editButton = '<img class=\"tableActionButton\" src=\"_BASE_images/edit.png\" style=\"cursor:pointer;\" rel=\"tooltip\" title=\"Edit\" onclick=\"modJs.edit(_id_);return false;\"></img>';\n    const deleteButton = '<img class=\"tableActionButton\" src=\"_BASE_images/delete.png\" style=\"margin-left:15px;cursor:pointer;\" rel=\"tooltip\" title=\"Delete\" onclick=\"modJs.deleteRow(_id_);return false;\"></img>';\n    const cloneButton = '<img class=\"tableActionButton\" src=\"_BASE_images/clone.png\" style=\"margin-left:15px;cursor:pointer;\" rel=\"tooltip\" title=\"Copy\" onclick=\"modJs.copyRow(_id_);return false;\"></img>';\n    let html = '<div style=\"width:80px;\">_edit__delete__clone_</div>';\n\n    if (this.showAddNew) {\n      html = html.replace('_clone_', cloneButton);\n    } else {\n      html = html.replace('_clone_', '');\n    }\n\n    if (this.showDelete) {\n      html = html.replace('_delete_', deleteButton);\n    } else {\n      html = html.replace('_delete_', '');\n    }\n\n    if (this.showEdit) {\n      html = html.replace('_edit_', editButton);\n    } else {\n      html = html.replace('_edit_', '');\n    }\n\n    html = html.replace(/_id_/g, id);\n    html = html.replace(/_BASE_/g, this.baseUrl);\n    return html;\n  }\n\n\n  /**\n     * Generates a random string\n     * @method generateRandom\n     * @param length {int} required length of the string\n     * @returns {String} random string\n     */\n\n  generateRandom(length) {\n    const d = new Date();\n    const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let result = '';\n    for (let i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];\n    return result + d.getTime();\n  }\n\n\n  checkFileType(elementName, fileTypes) {\n    const fileElement = document.getElementById(elementName);\n    let fileExtension = '';\n    if (fileElement.value.lastIndexOf('.') > 0) {\n      fileExtension = fileElement.value.substring(fileElement.value.lastIndexOf('.') + 1, fileElement.value.length);\n    }\n\n    fileExtension = fileExtension.toLowerCase();\n\n    const allowed = fileTypes.split(',');\n\n    if (allowed.indexOf(fileExtension) < 0) {\n      fileElement.value = '';\n      this.showMessage('File Type Error', 'Selected file type is not supported');\n      this.clearFileElement(elementName);\n      return false;\n    }\n\n    return true;\n  }\n\n  clearFileElement(elementName) {\n    let control = $(`#${elementName}`);\n    control.replaceWith(control = control.val('').clone(true));\n  }\n\n\n  fixJSON(json) {\n    if (this.noJSONRequests === '1') {\n      json = window.btoa(json);\n    }\n    return json;\n  }\n\n\n  getClientDate(date) {\n    const offset = this.getClientGMTOffset();\n    const tzDate = date.addMinutes(offset * 60);\n    return tzDate;\n  }\n\n  getClientGMTOffset() {\n    const rightNow = new Date();\n    const jan1 = new Date(rightNow.getFullYear(), 0, 1, 0, 0, 0, 0);\n    const temp = jan1.toGMTString();\n    const jan2 = new Date(temp.substring(0, temp.lastIndexOf(' ') - 1));\n    return (jan1 - jan2) / (1000 * 60 * 60);\n  }\n\n  /**\n     * Override this method in a module to provide the help link for the module. Help link of the module on frontend will get updated with this.\n     * @method getHelpLink\n     * @returns {String} help link\n     */\n\n  getHelpLink() {\n    return null;\n  }\n\n  showLoader() {\n    $('#iceloader').show();\n  }\n\n  hideLoader() {\n    $('#iceloader').hide();\n  }\n\n  generateOptions(data) {\n    const template = '<option value=\"__val__\">__text__</option>';\n    let options = '';\n    for (const index in data) {\n      options += template.replace('__val__', index).replace('__text__', data[index]);\n    }\n\n    return options;\n  }\n\n  isModuleInstalled(type, name) {\n    if (modulesInstalled === undefined || modulesInstalled === null) {\n      return false;\n    }\n\n    return (modulesInstalled[`${type}_${name}`] === 1);\n  }\n\n\n  setCustomFields(fields) {\n    let field; let\n      parsed;\n    for (let i = 0; i < fields.length; i++) {\n      field = fields[i];\n      if (field.display !== 'Hidden' && field.data !== '' && field.data !== undefined) {\n        try {\n          parsed = JSON.parse(field.data);\n          if (parsed === undefined || parsed == null) {\n            continue;\n          } else if (parsed.length !== 2) {\n            continue;\n          } else if (parsed[1].type === undefined || parsed[1].type == null) {\n            continue;\n          }\n          this.customFields.push(parsed);\n        } catch (e) {\n          // Do nothing\n        }\n      }\n    }\n  }\n\n  addCustomFields(fields) {\n    for (let i = 0; i < this.customFields.length; i++) {\n      fields.push(this.customFields[i]);\n    }\n\n    return fields;\n  }\n\n  getImageUrlFromName(firstName, lastName) {\n    let seed = firstName.substring(0, 1);\n    if (!lastName && lastName.length > 0) {\n      seed += firstName.substring(firstName.length - 1, 1);\n    } else {\n      seed += lastName.substring(0, 1);\n    }\n\n    const arr = `${firstName}${lastName}`.split('');\n    seed += arr.reduce((acc, item) => parseInt(item.charCodeAt(0), 10) + acc, 0);\n\n    return `https://avatars.dicebear.com/api/initials/:${seed}.svg`;\n  }\n\n  downloadPdf(type, data) {\n    const url = `${this.clientUrl}service.php?a=pdf&h=${type}&data=${data}`;\n    window.open(url,'_blank');\n  }\n\n  checkIfUserEmailIsGoogleDomain(domain) {\n    let url = `https://dns.google.com/resolve?name=${domain}&type=MX`\n    $.get(url, (data) => {\n      if (data == null || data.Answer == null ) {\n        return;\n      }\n      let hasGoogle = data.Answer.filter((item) => item.data != null && item.data.includes('google.com'));\n      if (hasGoogle.length > 0) {\n        $(\"#googleConnectModel\").modal({\n          backdrop: 'static'\n        });\n      }\n\n    });\n  }\n}\n\nexport default ModuleBase;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Space, Tag } from 'antd';\nimport {\n  EditOutlined, DeleteOutlined, CopyOutlined, MonitorOutlined,\n} from '@ant-design/icons';\nimport AdapterBase from './AdapterBase';\nimport IceFormModal from '../components/IceFormModal';\nimport IceStepFormModal from '../components/IceStepFromModal';\nimport IceTable from '../components/IceTable';\nimport MasterDataReader from './MasterDataReader';\n\n\nclass ReactModalAdapterBase extends AdapterBase {\n  static get MODAL_TYPE_NORMAL() { return 'Normal'; }\n\n  static get MODAL_TYPE_STEPS() { return 'Steps'; }\n\n  constructor(endPoint, tab, filter, orderBy) {\n    super(endPoint, tab, filter, orderBy);\n    this.modalType = this.MODAL_TYPE_NORMAL;\n    this.dataPipe = null;\n    this.formInitialized = false;\n    this.tableInitialized = false;\n    this.access = [];\n    this.localStorageEnabled = false;\n    this.isV2 = true;\n    this.masterDataReader = new MasterDataReader(this);\n  }\n\n  enableLocalStorage() {\n    this.localStorageEnabled = true;\n  }\n\n  setModalType(type) {\n    this.modalType = type;\n  }\n\n  setDataPipe(dataPipe) {\n    this.dataPipe = dataPipe;\n  }\n\n  setAccess(access) {\n    const tmp = [];\n    for ( const index in access ){\n      tmp.push( access[ index ] );\n    }\n    this.access = tmp;\n  }\n\n  hasAccess(type) {\n    return this.access.indexOf(type) >= 0;\n  }\n\n  hasCustomButtons() {\n    return false;\n  }\n\n  initTable() {\n    if (this.tableInitialized) {\n      return false;\n    }\n    const tableDom = document.getElementById(`${this.tab}Table`);\n    if (tableDom) {\n      this.tableContainer = React.createRef();\n      let columns = this.getTableColumns();\n      if (this.hasAccess('save')\n        || this.hasAccess('delete')\n        || this.hasAccess('element')\n        || this.hasCustomButtons()\n      ) {\n        columns.push({\n          title: 'Actions',\n          key: 'actions',\n          render: this.getTableActionButtonJsx(this),\n        });\n      }\n\n      columns = columns.map((item) => {\n        item.title = this.gt(item.title);\n        return item;\n      });\n\n      ReactDOM.render(\n        <IceTable\n          ref={this.tableContainer}\n          reader={this.dataPipe}\n          columns={columns}\n          adapter={this}\n        >\n          {this.getTableChildComponents()}\n        </IceTable>,\n        tableDom,\n      );\n    }\n\n    this.tableInitialized = true;\n\n    return true;\n  }\n\n  keepTableVisibleWhileShowingCustomView() {\n    return false;\n  }\n\n  getFormLayout(viewOnly) {\n    return 'horizontal';\n  }\n\n  initForm() {\n    if (this.formInitialized) {\n      return false;\n    }\n    this.formContainer = React.createRef();\n    if (this.modalType === this.MODAL_TYPE_NORMAL) {\n      ReactDOM.render(\n        <IceFormModal\n          title={this.title || undefined}\n          ref={this.formContainer}\n          fields={this.getFormFields()}\n          adapter={this}\n          formReference={this.formReference}\n        />,\n        document.getElementById(`${this.tab}Form`),\n      );\n    } else {\n      ReactDOM.render(\n        <IceStepFormModal\n          ref={this.formContainer}\n          fields={this.getMappedFields()}\n          adapter={this}\n          formReference={this.formReference}\n        />,\n        document.getElementById(`${this.tab}Form`),\n      );\n    }\n\n    const filterDom = document.getElementById(`${this.tab}FilterForm`);\n    if (filterDom && this.getFilters()) {\n      this.filtersContainer = React.createRef();\n      ReactDOM.render(\n        <IceFormModal\n          title={this.title || undefined}\n          ref={this.filtersContainer}\n          fields={this.getFilters()}\n          adapter={this}\n          saveCallback={(values, showError, closeModal) => {\n            this.setFilter(values);\n            this.filtersAlreadySet = true;\n            this.get([]);\n            this.tableContainer.current.setFilterData(values);\n            closeModal();\n          }}\n        />,\n        filterDom,\n      );\n    }\n\n    this.formInitialized = true;\n    return true;\n  }\n\n  getTableChildComponents() {\n    return false;\n  }\n\n  reloadCurrentElement() {\n    this.viewElement(this.currentId);\n  }\n\n  getTableActionButtonJsx(adapter) {\n    return (text, record) => (\n      <Space size=\"middle\">\n        {adapter.hasAccess('save') && adapter.showEdit\n          && (\n          <Tag color=\"green\" onClick={() => modJs.edit(record.id)} style={{ cursor: 'pointer' }}>\n            <EditOutlined />\n            {` ${adapter.gt('Edit')}`}\n          </Tag>\n          )}\n        {adapter.hasAccess('element')\n        && (\n          <Tag color=\"blue\" onClick={() => modJs.viewElement(record.id)} style={{ cursor: 'pointer' }}>\n            <MonitorOutlined />\n            {` ${adapter.gt('View')}`}\n          </Tag>\n        )}\n        {adapter.hasAccess('delete') && adapter.showDelete\n        && (\n        <Tag color=\"volcano\" onClick={() => modJs.deleteRow(record.id)} style={{ cursor: 'pointer' }}>\n          <DeleteOutlined />\n          {` ${adapter.gt('Delete')}`}\n        </Tag>\n        )}\n        {adapter.hasAccess('save') && adapter.showAddNew\n        && (\n        <Tag color=\"cyan\" onClick={() => modJs.copyRow(record.id)} style={{ cursor: 'pointer' }}>\n          <CopyOutlined />\n          {` ${adapter.gt('Copy')}`}\n        </Tag>\n        )}\n      </Space>\n    );\n  }\n\n  setTableLoading(value) {\n    this.tableContainer.current.setLoading(value);\n  }\n\n  /**\n   * Show the view form for an item\n   * @method viewElement\n   * @param id {int} id of the item to view\n   */\n  viewElement(id) {\n    this.setTableLoading(true);\n    this.currentId = id;\n    this.getElement(id, {\n      noRender: true,\n      callBack: (element) => {\n        this.showElement(element);\n        this.setTableLoading(false);\n      },\n    });\n  }\n\n  showElement(element) {\n    this.renderForm(element, true);\n  }\n\n  hideElement() {\n    this.tableContainer.current.setCurrentElement(false);\n  }\n\n  /**\n   * Show the edit form for an item\n   * @method edit\n   * @param id {int} id of the item to edit\n   */\n  edit(id) {\n    this.setTableLoading(true);\n    this.currentId = id;\n    this.getElement(id, []);\n  }\n\n  getDefaultValues() {\n    return null;\n  }\n\n  renderForm(object = null, viewOnly = false) {\n    if (object == null) {\n      this.currentId = null;\n      this.currentElement = null;\n      object = this.getDefaultValues();\n    }\n    this.setTableLoading(false);\n    this.initForm();\n    this.formContainer.current.setViewOnly(viewOnly);\n    this.formContainer.current.show(object);\n  }\n\n  showFilters() {\n    this.initForm();\n    this.filtersContainer.current.show(this.filter);\n  }\n\n  resetFilters() {\n    this.filter = this.origFilter;\n    this.filtersAlreadySet = false;\n    this.currentFilterString = '';\n    this.get([]);\n    this.tableContainer.current.setFilterData(this.filter);\n  }\n\n  get() {\n    if (this.tableContainer && this.tableContainer.current) {\n      this.tableContainer.current.setCurrentElement(null);\n    }\n    this.initTable();\n    this.masterDataReader.updateAllMasterData()\n      .then(() => {\n        if (this.tableContainer) {\n          this.tableContainer.current.reload();\n        }\n      });\n\n    this.trackEvent('get', this.tab, this.table);\n  }\n\n  showLoader() {\n    // $('#iceloader').show();\n  }\n\n  addActualFieldsForStepModal(steps, fields) {\n    return steps.map((item) => {\n      item.fields = item.fields.reduce((acc, fieldName) => {\n        const field = fields.find(([name]) => name === fieldName);\n        if (field) {\n          acc.push(field);\n        }\n        return acc;\n      }, []);\n\n      return item;\n    });\n  }\n\n  hasCustomTopButtons() {\n    return false;\n  }\n\n  getCustomTopButtons() {\n    return (<></>);\n  }\n\n  getFormOptions() {\n    return {\n      width: 1024,\n      twoColumnLayout: false,\n    };\n  }\n\n  getWidth() {\n    return 800;\n  }\n}\n\nexport default ReactModalAdapterBase;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { SketchPicker } from 'react-color';\n\nfunction useComponentVisible(initialIsVisible) {\n  const [isComponentVisible, setIsComponentVisible] = useState(initialIsVisible);\n  const ref = useRef(null);\n\n  const handleClickOutside = (event) => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setIsComponentVisible(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true);\n    return () => {\n      document.removeEventListener('click', handleClickOutside, true);\n    };\n  });\n\n  return { ref, isComponentVisible, setIsComponentVisible };\n}\n\nfunction IceColorPick(props) {\n  const { value, onChange, readOnly } = props;\n\n  const { ref, isComponentVisible, setIsComponentVisible } = useComponentVisible(true);\n\n  const [color, setColor] = useState(value || '#FFF');\n  const [showPicker, setShowPicker] = useState(false);\n\n  useEffect(() => {\n    if (!isComponentVisible) {\n      setShowPicker(false);\n    }\n  }, [isComponentVisible])\n\n  useEffect(() => {\n    if (value) {\n      setColor(value);\n    }\n    \n  }, [value]);\n\n  return <div className=\"colorpicker-container\">\n    <div\n      className=\"colorpicker-preview\"\n      onClick={() => {\n        if (!showPicker) {\n          setIsComponentVisible(true);\n        }\n        setShowPicker(!showPicker);\n      }}\n      style={ { backgroundColor: color} }\n    />\n    <div ref={ref} className={`colorpicker-component ${(readOnly || !showPicker) ? 'hidden': ''}` }>\n      <SketchPicker\n        color={color}\n        disableAlpha\n        presetColors={[]}\n        onChangeComplete={({ hex }) => {\n          onChange(hex);\n          setColor(hex);\n        }}\n      />\n    </div>\n  </div>;\n} \n\nexport default IceColorPick;\n","import React from \"react\";\nimport { Button, Select, Space, Card, Table } from \"antd\";\n// import IceDataGroupModal from \"./IceDataGroupModal\";\nimport IceFormModal from \"./IceFormModal\";\nimport ReactDOM from \"react-dom\";\nconst { Option } = Select;\n\nclass IceDataGroup extends React.Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    this.onChange = props.onChange;\n    this.formReference = React.createRef();\n  }\n\n  render() {\n    const { field, adapter } = this.props;\n    let { value } = this.props;\n\n    value = this.parseValue(value);\n    value = value.map(item => ({ ...item, key: item.id }));\n    const columns = JSON.parse(JSON.stringify(field[1].columns));\n\n    if (!this.props.readOnly) {\n      columns.push({\n        title: 'Action',\n        key: 'action',\n        render: (text, record) => (\n          this.getDefaultButtons(record.id)\n        ),\n      });\n    }\n\n    return (\n      <>\n        <div id=\"dataGroupContainer\"></div>\n        {!this.props.readOnly &&\n          <Space direction=\"horizontal\">\n            <Button type=\"link\" htmlType=\"button\" onClick={() => {\n              this.createForm(field, adapter, {})\n            }}>\n              Add\n          </Button>\n            <Button type=\"link\" htmlType=\"button\" danger onClick={() => {\n              this.resetDataGroup()\n            }}>\n              Reset\n          </Button>\n          </Space>\n        }\n        <Table columns={columns} dataSource={value} />\n      </>\n    );\n  }\n\n  createForm(field, adapter, object) {\n    this.formContainer = React.createRef();\n    const formFields = field[1].form;\n    formFields.unshift(['id', { label: 'ID', type: 'hidden' }]);\n    ReactDOM.render(\n      <IceFormModal\n        ref={this.formContainer}\n        fields={formFields}\n        title={this.props.title}\n        adapter={adapter}\n        formReference={this.formReference}\n        saveCallback={this.save.bind(this)}\n        cancelCallback={this.unmountForm.bind(this)}\n      />,\n      document.getElementById('dataGroupContainer'),\n    );\n    this.formContainer.current.show(object);\n  }\n\n  unmountForm() {\n    ReactDOM.unmountComponentAtNode(document.getElementById('dataGroupContainer'));\n  }\n\n  show(data) {\n    if (!data) {\n      this.setState({ visible: true });\n      this.updateFields(data);\n    } else {\n      this.setState({ visible: true });\n      if (this.formReference.current) {\n        this.updateFields(data);\n      } else {\n        this.waitForIt(\n          () => this.formReference.current != null,\n          () => { this.updateFields(data); },\n          100,\n        );\n      }\n    }\n  }\n\n  parseValue(value) {\n    try {\n      value = JSON.parse(value);\n    } catch (e) {\n      value = [];\n    }\n    if (value == null) {\n      value = [];\n    }\n    return value;\n  }\n\n  save(params, errorCallback, closeCallback) {\n    const { field, value } = this.props;\n\n    if (field[1]['custom-validate-function'] != null) {\n      let tempParams = field[1]['custom-validate-function'].apply(this, [params]);\n      if (tempParams.valid) {\n        params = tempParams.params;\n      } else {\n        errorCallback(tempParams.message);\n        return false;\n      }\n    }\n\n    const data = this.parseValue(value);\n\n    let newData = [];\n    if (!params.id) {\n      params.id = `${field[0]}_${this.dataGroupGetNextAutoIncrementId(data)}`;\n      data.push(params);\n      newData = data;\n    } else {\n      for (let i = 0; i < data.length; i++) {\n        const item = data[i];\n        if (item.id !== params.id) {\n          newData.push(item);\n        } else {\n          newData.push(params);\n        }\n      }\n    }\n\n    if (field[1]['sort-function'] != null) {\n      newData.sort(field[1]['sort-function']);\n    }\n\n    const val = JSON.stringify(newData);\n\n    this.onChange(val);\n\n    this.unmountForm();\n  }\n\n  createCard(item) {\n    const { field } = this.props;\n    if (field[1]['pre-format-function'] != null) {\n      item = field[1]['pre-format-function'].apply(this, [item]);\n    }\n\n    const template = field[1].html;\n    let t = template.replace('#_delete_#', '');\n    t = t.replace('#_edit_#', '');\n    t = t.replace(/#_id_#/g, item.id);\n\n    for (const key in item) {\n      let itemVal = item[key];\n      if (itemVal !== undefined && itemVal != null && typeof itemVal === 'string') {\n        itemVal = itemVal.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\n      }\n      t = t.replace(`#_${key}_#`, itemVal);\n    }\n\n    if (field[1].render !== undefined && field[1].render != null) {\n      t = t.replace('#_renderFunction_#', field[1].render(item));\n    }\n\n    return (\n      <Card key={item.id} title=\"\" extra={this.getDefaultButtons(item.id)}>\n        <div dangerouslySetInnerHTML={{ __html: t }}></div>\n      </Card>\n    );\n  }\n\n  getDefaultButtons(id) {\n    return (\n      <Space>\n        <a href=\"#\" onClick={() => { this.editDataGroupItem(id) }}><li className=\"fa fa-edit\" /></a>\n        <a href=\"#\" onClick={() => { this.deleteDataGroupItem(id) }}><li className=\"fa fa-times\" /></a>\n      </Space>\n    );\n  }\n\n  deleteDataGroupItem(id) {\n    const { value } = this.props;\n    const data = this.parseValue(value);\n\n    const newVal = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const item = data[i];\n      if (item.id !== id) {\n        newVal.push(item);\n      }\n    }\n\n    const val = JSON.stringify(newVal);\n\n    this.onChange(val);\n  }\n\n  editDataGroupItem(id) {\n    const { field, adapter, value } = this.props;\n    const data = this.parseValue(value);\n\n    let editVal = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const item = data[i];\n      if (item.id === id) {\n        editVal = item;\n      }\n    }\n\n    this.createForm(field, adapter, editVal);\n  }\n\n  resetDataGroup() {\n    this.onChange('[]');\n  }\n\n  dataGroupGetNextAutoIncrementId(data) {\n    let autoId = 1; let id;\n    for (let i = 0; i < data.length; i++) {\n      const item = data[i];\n      if (item.id === undefined || item.id == null) {\n        item.id = 1;\n      }\n      id = item.id.substring(item.id.lastIndexOf('_') + 1, item.id.length);\n      if (id >= autoId) {\n        autoId = parseInt(id, 10) + 1;\n      }\n    }\n\n    return autoId;\n  }\n\n}\n\nexport default IceDataGroup;\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport EditorJS from '@editorjs/editorjs';\nimport Embed from '@editorjs/embed';\nimport Table from '@editorjs/table';\nimport Paragraph from '@editorjs/paragraph';\nimport List from '@editorjs/list';\n// import Warning from '@editorjs/warning';\nimport Code from '@editorjs/code';\n// import LinkTool from '@editorjs/link';\nimport Raw from '@editorjs/raw';\nimport Header from '@editorjs/header';\nimport Quote from '@editorjs/quote';\nimport Marker from '@editorjs/marker';\nimport CheckList from '@editorjs/checklist';\n// import Delimiter from '@editorjs/delimiter';\nimport InlineCode from '@editorjs/inline-code';\n\nexport const EDITOR_JS_TOOLS = {\n  embed: Embed,\n  table: {\n    class: Table,\n    inlineToolbar: true,\n  },\n  paragraph: {\n    class: Paragraph,\n    inlineToolbar: true,\n  },\n  list: {\n    class: List,\n    inlineToolbar: true,\n  },\n  // warning: {\n  //   class: Warning,\n  //   inlineToolbar: true\n  // },\n  code: {\n    class: Code,\n    inlineToolbar: true,\n  },\n  // linkTool: {\n  //   class: LinkTool,\n  //   inlineToolbar: true\n  // },\n  raw: {\n    class: Raw,\n    inlineToolbar: true,\n  },\n  header: {\n    class: Header,\n    inlineToolbar: true,\n  },\n  quote: {\n    class: Quote,\n    inlineToolbar: true,\n  },\n  marker: {\n    class: Marker,\n    inlineToolbar: true,\n  },\n  checklist: {\n    class: CheckList,\n    inlineToolbar: true,\n  },\n  // delimiter: {\n  //   class: Delimiter,\n  //   inlineToolbar: true,\n  // },\n  inlineCode: {\n    class: InlineCode,\n    inlineToolbar: true,\n  },\n};\n\nconst parseValue = (value) => {\n  let checkValue = {\n    // time: (new Date()).getTime(),\n    version: '2.19.3',\n    blocks: [\n      {\n        type: 'paragraph',\n        data: {\n          text: value,\n        },\n      },\n    ],\n  };\n\n  try {\n    if (value && typeof value === 'object' && value.time) {\n      checkValue = value;\n    } else if (value && typeof value === 'string') {\n      const jsonValue = JSON.parse(value);\n      if (jsonValue.blocks) {\n        checkValue = jsonValue;\n\n        if (checkValue.blocks.length === 0) {\n          checkValue.blocks = [\n            {\n              type: 'paragraph',\n              data: {\n                text: '',\n              },\n            },\n          ];\n        }\n      }\n    }\n  } catch (e) {\n  }\n\n  return checkValue;\n};\n\nfunction IceEditor(props) {\n  const { value, onChange, readOnly = false } = props;\n  const [keepValue, setKeepValue] = useState(value || '');\n  const [editor, setEditor] = useState(null);\n  const [editorLoading, setEditorLoading] = useState(true);\n  const editorBlock = useRef(null);\n\n  useEffect(() => {\n    const editorJs = new EditorJS({\n      holder: editorBlock.current,\n      tools: EDITOR_JS_TOOLS,\n      onChange: (value) => value.saver.save().then((value) => {\n        onChange(JSON.stringify(value));\n      }),\n      onReady: () => {\n        setEditor(editorJs);\n        setEditorLoading(false);\n      },\n      data: {},\n      readOnly,\n    });\n\n    return () => {\n      if (editor && typeof editor.destroy === 'function') {\n        editor.destroy();\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (value && !keepValue) {\n      setKeepValue(value);\n    }\n  }, [value]);\n\n  useEffect(() => {\n    if (!editorLoading && keepValue) {\n      editor.render(parseValue(keepValue));\n    }\n  }, [editorLoading, keepValue]);\n\n  return <div ref={editorBlock} />;\n}\n\nexport default IceEditor;\n","import React from 'react';\nimport {\n  Alert, Col, DatePicker, TimePicker, Form, Input, Row, Tooltip, Slider,\n} from 'antd';\nimport {\n  InfoCircleOutlined,\n} from '@ant-design/icons';\nimport moment from 'moment';\nimport IceUpload from './IceUpload';\nimport IceDataGroup from './IceDataGroup';\nimport IceSelect from './IceSelect';\nimport IceLabel from './IceLabel';\nimport IceColorPick from './IceColorPick';\nimport IceSignature from './IceSignature';\nimport IceEditor from './IceEditor';\n\n\nconst ValidationRules = {\n\n  float(str) {\n    const floatstr = /^[-+]?[0-9]+(\\.[0-9]+)?$/;\n    if (str != null && str.match(floatstr)) {\n      return true;\n    }\n    return false;\n  },\n\n  number(str) {\n    const numstr = /^[0-9]+$/;\n    if (str != null && str.match(numstr)) {\n      return true;\n    }\n    return false;\n  },\n\n  numberOrEmpty(str) {\n    if (str === '') {\n      return true;\n    }\n    const numstr = /^[0-9]+$/;\n    if (str != null && str.match(numstr)) {\n      return true;\n    }\n    return false;\n  },\n\n  email(str) {\n    const emailPattern = /^\\s*[\\w\\-+_]+(\\.[\\w\\-+_]+)*@[\\w\\-+_]+\\.[\\w\\-+_]+(\\.[\\w\\-+_]+)*\\s*$/;\n    return str != null && emailPattern.test(str);\n  },\n\n  emailOrEmpty(str) {\n    if (str === '') {\n      return true;\n    }\n    const emailPattern = /^\\s*[\\w\\-+_]+(\\.[\\w\\-+_]+)*@[\\w\\-+_]+\\.[\\w\\-+_]+(\\.[\\w\\-+_]+)*\\s*$/;\n    return str != null && emailPattern.test(str);\n  },\n\n  username(str) {\n    const username = /^[a-zA-Z0-9.-]+$/;\n    return str != null && username.test(str);\n  },\n};\n\n\nclass IceForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.validationRules = {};\n    this.state = {\n      validations: {},\n      errorMsg: false,\n    };\n    this.formReference = React.createRef();\n  }\n\n  showError(errorMsg) {\n    this.setState({ errorMsg });\n  }\n\n  hideError() {\n    this.setState({ errorMsg: false });\n  }\n\n  isReady() {\n    return this.formReference.current != null;\n  }\n\n  validateFields() {\n    return this.formReference.current.validateFields();\n  }\n\n  render() {\n    const { fields, twoColumnLayout, adapter } = this.props;\n    let formInputs = [];\n    const formInputs1 = [];\n    const formInputs2 = [];\n    const columns = !twoColumnLayout ? 1 : 2;\n    for (let i = 0; i < fields.length; i++) {\n      formInputs.push(\n        adapter.beforeRenderFieldHook(\n          fields[i][0],\n          this.createFromField(fields[i], this.props.viewOnly),\n          fields[i][1],\n        ),\n      );\n    }\n    formInputs = formInputs.filter((input) => !!input);\n\n    for (let i = 0; i < formInputs.length; i++) {\n      if (formInputs[i] != null) {\n        if (columns === 1) {\n          formInputs1.push(formInputs[i]);\n        } else if (i % 2 === 0) {\n          formInputs1.push(formInputs[i]);\n        } else {\n          formInputs2.push(formInputs[i]);\n        }\n      }\n    }\n\n    const onFormLayoutChange = () => { };\n\n    let layout = this.props.layout || 'horizontal';\n    if ( !this.props.layout ) {\n      layout = adapter.getFormLayout(this.props.viewOnly);\n    }\n\n    return (\n      <Form\n        ref={this.formReference}\n        labelCol={{ span: 6 }}\n        wrapperCol={{ span: 16 }}\n        layout={ layout }\n        initialValues={{ size: 'middle' }}\n        onValuesChange={onFormLayoutChange}\n        size=\"middle\"\n      >\n        {this.state.errorMsg\n          && (\n            <>\n              <Alert message={this.state.errorMsg} type=\"error\" showIcon />\n              <br />\n            </>\n          )}\n        {columns === 1 && formInputs1}\n        {columns === 2 && (\n          <Row gutter={16}>\n            <Col className=\"gutter-row\" span={12}>\n              {formInputs1}\n            </Col>\n            <Col className=\"gutter-row\" span={12}>\n              {formInputs2}\n            </Col>\n          </Row>\n        )}\n      </Form>\n    );\n  }\n\n  isValid() {\n    return Object.keys(this.validationRules).reduce((acc, fieldName) => acc && (this.state[fieldName] === 'success' || this.state[fieldName] == null), true);\n  }\n\n  validateOnChange(event) {\n    const validationRule = this.validationRules[event.target.id];\n    const { validations } = this.state;\n\n    if (validationRule) {\n      if (validationRule.rule(event.target.value)) {\n        this.state[event.target.id] = 'success';\n        this.state[`${event.target.id}_message`] = null;\n      } else {\n        this.state[event.target.id] = 'error';\n        this.state[`${event.target.id}_message`] = validationRule.message;\n      }\n    }\n    this.setState({ validations });\n  }\n\n  createFromField(field, viewOnly = false) {\n    let userId = 0;\n    const rules = [];\n    const requiredRule = { required: true };\n    const [name, data] = field;\n    const { adapter } = this.props;\n    let { layout } = this.props;\n    let validationRule = null;\n    data.label = adapter.gt(data.label);\n\n    viewOnly = viewOnly || (data.readonly === true);\n\n    if ( !layout ) {\n      layout = adapter.getFormLayout(this.props.viewOnly);\n    }\n\n    const labelSpan = layout === 'vertical' ? { span: 24 } : { span: 6 };\n\n    const tempSelectBoxes = ['select', 'select2', 'select2multi'];\n    if (tempSelectBoxes.indexOf(data.type) >= 0 && data['allow-null'] === true) {\n      requiredRule.required = false;\n    } else if (data.validation === 'none'\n      || data.validation === 'emailOrEmpty'\n      || data.validation === 'numberOrEmpty'\n    ) {\n      requiredRule.required = false;\n    } else {\n      requiredRule.required = true;\n      requiredRule.message = this.generateFieldMessage(data.label);\n    }\n\n    rules.push(requiredRule);\n\n    const label = (\n      <div>\n        {' '}\n        {data.label}\n        {' '}\n        { data.help\n        && (<Tooltip title={data.help}><InfoCircleOutlined style={{ fontSize: '16px', color: '#1890ff' }} /></Tooltip>)}\n      </div>\n    );\n\n    if (data.type === 'hidden') {\n      requiredRule.required = false;\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          style={{ display: 'none' }}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n        >\n          <Input />\n        </Form.Item>\n      );\n    } if (data.type === 'text') {\n      if (data.validation) {\n        // TODO - not sure why following line was there. This stop correct validations for rules like numberOrEmpty\n        //data.validation = data.validation.replace('OrEmpty', '');\n        validationRule = this.getValidationRule(data);\n        if (validationRule) {\n          this.validationRules[name] = {\n            rule: validationRule,\n            message: `Invalid value for ${data.label}`,\n          };\n        }\n      }\n      if (validationRule != null) {\n        return (\n          <Form.Item\n            labelCol={labelSpan}\n            label={label}\n            key={name}\n            name={name}\n            rules={rules}\n            validateStatus={this.state[name]}\n            help={this.state[`${name}_message`]}\n          >\n            {viewOnly\n              ? <IceLabel />\n              : <Input onChange={this.validateOnChange.bind(this)} />}\n          </Form.Item>\n        );\n      }\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n        >\n          {viewOnly\n            ? <IceLabel />\n            : <Input />}\n        </Form.Item>\n      );\n    } if (data.type === 'textarea') {\n      if (!data.rows) {\n        data.rows = 4;\n      }\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n        >\n          {viewOnly\n            ? <IceLabel />\n            : <Input.TextArea rows={data.rows} />}\n        </Form.Item>\n      );\n    } if (data.type === 'date') {\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n        >\n          <DatePicker disabled={viewOnly} />\n        </Form.Item>\n      );\n    } if (data.type === 'datetime') {\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n        >\n          <DatePicker format=\"YYYY-MM-DD HH:mm:ss\" showTime disabled={viewOnly} />\n        </Form.Item>\n      );\n    } if (data.type === 'time') {\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n        >\n          <TimePicker\n            format=\"HH:mm\"\n            disabled={viewOnly}\n          />\n        </Form.Item>\n      );\n    } if (data.type === 'fileupload') {\n      const currentEmployee = adapter.getCurrentProfile();\n      if (currentEmployee != null) {\n        userId = currentEmployee.id;\n      } else {\n        userId = adapter.getUser().id * -1;\n      }\n\n      if (data.filetypes == null) {\n        data.filetypes = '.doc,.docx'\n          + 'application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,'\n          + 'image/*,'\n          + '.pdf';\n      }\n\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          name={name}\n          key={name}\n          label={label}\n        >\n          <IceUpload\n            user={userId}\n            fileGroup={adapter.tab}\n            fileName={name}\n            adapter={adapter}\n            accept={data.filetypes}\n            readOnly={viewOnly}\n          />\n        </Form.Item>\n      );\n    } if (data.type === 'datagroup') {\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          name={name}\n          key={name}\n          label={label}\n        >\n          <IceDataGroup\n            adapter={adapter}\n            field={field}\n            title={label}\n            readOnly={viewOnly}\n          />\n        </Form.Item>\n      );\n    } if (data.type === 'select2' || data.type === 'select' || data.type === 'select2multi') {\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n        >\n          <IceSelect\n            adapter={adapter}\n            field={field}\n            readOnly={viewOnly}\n          />\n        </Form.Item>\n      );\n    } if (data.type === 'colorpick') {\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          name={name}\n          key={name}\n          label={label}\n        >\n          <IceColorPick\n            adapter={adapter}\n            field={field}\n            title={label}\n            readOnly={viewOnly}\n          />\n        </Form.Item>\n      );\n    } if (data.type === 'signature') {\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n        >\n          <IceSignature readOnly={viewOnly} />\n        </Form.Item>\n      );\n    } if (data.type === 'placeholder') {\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n          shouldUpdate\n        >\n          <Input\n            bordered={false}\n          />\n        </Form.Item>\n      );\n    } if (data.type === 'editor') {\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n          shouldUpdate\n        >\n          <IceEditor\n            adapter={adapter}\n            field={field}\n            title={label}\n            readOnly={viewOnly}\n          />\n        </Form.Item>\n      );\n    } if (data.type === 'slider') {\n      return (\n        <Form.Item\n          labelCol={labelSpan}\n          label={label}\n          key={name}\n          name={name}\n          rules={rules}\n        >\n          <Slider\n            min={data.min}\n            max={data.max}\n            defaultValue={data.defaultValue ? data.defaultValue : 0}\n          />\n        </Form.Item>\n      );\n    }\n    return null;\n  }\n\n  generateFieldMessage(label) {\n    return `${label}: ${this.props.adapter.gt('is required')}`;\n  }\n\n  getValidationRule(data) {\n    if (ValidationRules[data.validation] == null) {\n      return null;\n    }\n\n    return ValidationRules[data.validation];\n  }\n\n  dataToFormFields(data, fields) {\n    for (let i = 0; i < fields.length; i++) {\n      const [key, formInputData] = fields[i];\n      if (formInputData.type === 'date') {\n        data[key] = data[key] ? moment(data[key], 'YYYY-MM-DD') : null;\n      } else if (formInputData.type === 'datetime') {\n        data[key] = data[key] ? moment(data[key], 'YYYY-MM-DD HH:mm:ss') : null;\n      } else if (formInputData.type === 'time') {\n        data[key] = data[key] ? moment(data[key], 'HH:mm') : null;\n      }\n    }\n\n    return data;\n  }\n\n  formFieldsToData(params, fields) {\n    for (let i = 0; i < fields.length; i++) {\n      const [key, formInputData] = fields[i];\n      if (formInputData.type === 'date') {\n        params[key] = params[key] ? params[key].format('YYYY-MM-DD') : 'NULL';\n      } else if (formInputData.type === 'datetime') {\n        params[key] = params[key] ? params[key].format('YYYY-MM-DD HH:mm:ss') : 'NULL';\n      } else if (formInputData.type === 'time') {\n        params[key] = params[key] ? params[key].format('HH:mm') : 'NULL';\n      } else if ((formInputData.type === 'select' || formInputData.type === 'select2') && params[key] == null) {\n        params[key] = 'NULL';\n      }\n    }\n\n    return params;\n  }\n\n  updateFields(data) {\n    const { fields } = this.props;\n    data = this.dataToFormFields(data, fields);\n    this.formReference.current.resetFields();\n    if (data == null) {\n      return;\n    }\n    try {\n      this.formReference.current.setFieldsValue(data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  resetFields() {\n    this.formReference.current.resetFields();\n  }\n\n  setFieldsValue(data) {\n    this.formReference.current.setFieldsValue(data);\n  }\n\n  save(params, success) {\n    const { adapter, fields } = this.props;\n    let values = params;\n    values = adapter.forceInjectValuesBeforeSave(values);\n    const msg = adapter.doCustomValidation(values);\n    if (msg !== null) {\n      this.showError(msg);\n      return;\n    }\n    if (adapter.csrfRequired) {\n      values.csrf = $(`#${adapter.getTableName()}Form`).data('csrf');\n    }\n\n    const id = (adapter.currentElement != null) ? adapter.currentElement.id : null;\n    if (id != null && id !== '') {\n      values.id = id;\n    }\n    values = this.formFieldsToData(values, fields);\n    adapter.add(values, [], () => adapter.get([]), () => {\n      this.formReference.current.resetFields();\n      this.showError(false);\n      success();\n    });\n  }\n}\n\nexport default IceForm;\n","import React from 'react';\nimport {\n  Button, Col, Modal, Row, Space,\n} from 'antd';\nimport IceForm from './IceForm';\n\nclass IceFormModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      viewOnly: false,\n      loading: false,\n    };\n    this.iceFormReference = React.createRef();\n  }\n\n  setViewOnly(value) {\n    this.setState({ viewOnly: value });\n  }\n\n  getWidth() {\n    return this.props.adapter.getWidth();\n  }\n\n  show(data) {\n    this.props.adapter.beforeRenderFieldHook = this.props.adapter.beforeRenderField ? this.props.adapter.beforeRenderField(data) : (fieldName, field) => field;\n    if (!data) {\n      this.setState({ visible: true });\n      if (this.iceFormReference.current) {\n        this.iceFormReference.current.resetFields();\n      }\n    } else {\n      this.setState({ visible: true });\n      if (this.iceFormReference.current && this.iceFormReference.current.isReady()) {\n        this.iceFormReference.current.updateFields(data);\n      } else {\n        this.waitForIt(\n          () => this.iceFormReference.current && this.iceFormReference.current.isReady(),\n          () => { this.iceFormReference.current.updateFields(data); },\n          1000,\n        );\n      }\n    }\n  }\n\n  waitForIt(condition, callback, time) {\n    setTimeout(() => {\n      if (condition()) {\n        callback();\n      } else {\n        this.waitForIt(condition, callback, time);\n      }\n    }, time);\n  }\n\n  hide() {\n    this.setState({ visible: false });\n  }\n\n  save(params) {\n    const { saveCompleteCallback } = this.props;\n    this.iceFormReference.current.save(params, () => {\n      this.closeModal();\n      if (saveCompleteCallback) {\n        saveCompleteCallback();\n      }\n    });\n  }\n\n  closeModal() {\n    this.hide();\n    this.iceFormReference.current.showError(false);\n  }\n\n  render() {\n    const {\n      fields, adapter, saveCallback, cancelCallback,\n    } = this.props;\n\n    const additionalProps = {};\n    additionalProps.footer = (\n      <Row gutter={16}>\n        <Col className=\"gutter-row\" span={12} style={{}} />\n        <Col className=\"gutter-row\" span={12} style={{ textAlign: 'right' }}>\n          <Space>\n            <Button onClick={() => {\n              if (cancelCallback) {\n                cancelCallback();\n              } else {\n                this.closeModal();\n              }\n            }}\n            >\n              {this.props.adapter.gt('Cancel')}\n            </Button>\n            <Button\n              loading={this.state.loading}\n              type=\"primary\"\n              onClick={() => {\n                this.setState({ loading: true });\n                const iceFrom = this.iceFormReference.current;\n                iceFrom\n                  .validateFields()\n                  .then((values) => {\n                    if (!iceFrom.isValid()) {\n                      this.setState({ loading: false });\n                      return;\n                    }\n                    if (saveCallback) {\n                      saveCallback(values, iceFrom.showError.bind(this), this.closeModal.bind(this));\n                    } else {\n                      this.save(values);\n                    }\n                    this.setState({ loading: false });\n                  })\n                  .catch((info) => {\n                    this.setState({ loading: false });\n                  });\n              }}\n            >\n              {this.state.viewOnly ? this.props.adapter.gt('Done') : this.props.adapter.gt('Save')}\n            </Button>\n          </Space>\n        </Col>\n      </Row>\n    );\n\n    if (this.state.viewOnly) {\n      additionalProps.footer = null;\n    }\n\n    return (\n      <Modal\n        visible={this.state.visible}\n        title={this.props.adapter.gt(this.props.title || adapter.objectTypeName)}\n        maskClosable={false}\n        width={this.getWidth()}\n        onCancel={() => {\n          if (cancelCallback) {\n            cancelCallback();\n          } else {\n            this.closeModal();\n          }\n        }}\n        {...additionalProps}\n      >\n        <IceForm\n          ref={this.iceFormReference}\n          adapter={adapter}\n          fields={fields}\n          viewOnly={this.state.viewOnly}\n        />\n      </Modal>\n    );\n  }\n}\n\n\nexport default IceFormModal;\n","import React from 'react';\nimport { Space } from 'antd';\n\nclass IceLabel extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { value } = this.props;\n\n    return (\n      <Space>\n        <div contentEditable='true' dangerouslySetInnerHTML={{ __html: this.nl2br(value || '') }}></div>\n      </Space>\n    );\n  }\n\n  nl2br(str) {\n    return (`${str}`).replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '<br />');\n  }\n}\n\nexport default IceLabel;\n","import React from 'react';\nimport { Form, Select } from 'antd';\n\nconst { Option } = Select;\n\nclass IceSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChange = props.onChange;\n  }\n\n  render() {\n    let options;\n    const { field, adapter } = this.props;\n    let { value } = this.props;\n    const data = field[1];\n    if (data['remote-source'] != null) {\n      let key = `${data['remote-source'][0]}_${data['remote-source'][1]}_${data['remote-source'][2]}`;\n      if (data['remote-source'].length === 4) {\n        key = `${key}_${data['remote-source'][3]}`;\n      }\n      options = adapter.fieldMasterData[key];\n    } else {\n      options = data.source;\n    }\n    const optionData = this.getFormSelectOptionsRemote(options, field, adapter);\n\n    // value should be an array if multi-select\n    if (data.type === 'select2multi') {\n      try {\n        value = JSON.parse(value);\n        if (value == null) {\n          value = [];\n        }\n        value = value.map((item) => `${item}`);\n      } catch (e) {\n        value = [];\n      }\n    } else {\n      value = value ? value.toString() : value;\n    }\n\n    return (\n      <Select\n        mode={data.type === 'select2multi' ? 'multiple' : undefined}\n        showSearch\n        placeholder={`Select ${data.label}`}\n        optionFilterProp=\"children\"\n        filterOption={\n          (input, option) => input != null\n            && option.label.toLowerCase().indexOf(input.toLowerCase()) >= 0\n        }\n        value={value}\n        options={optionData}\n        allowClear\n        onChange={this.handleChange.bind(this)}\n        disabled={this.props.readOnly}\n      />\n    );\n  }\n\n  handleChange(value) {\n    const { field } = this.props;\n    const data = field[1];\n    if (data.type === 'select2multi') {\n      this.onChange(JSON.stringify(value));\n    } else {\n      this.onChange(value);\n    }\n  }\n\n  makeOption(option) {\n    return <Option key={`${option[0]}`} value={`${option[0]}`}>{option[1]}</Option>;\n  }\n\n  getFormSelectOptionsRemote(options, field, adapter) {\n    const optionData = [];\n\n    if (Array.isArray(options)) {\n      for (let i = 0; i < options.length; i++) {\n        optionData.push({\n          label: options[i][1],\n          value: options[i][0],\n        });\n      }\n    } else {\n      for (const key in options) {\n        optionData.push({\n          label: options[key],\n          value: key,\n        });\n      }\n    }\n\n    // if (field[1].sort === 'true') {\n    //   tuples.sort((a, b) => {\n    //     a = a[1];\n    //     b = b[1];\n    //\n    //     // eslint-disable-next-line no-nested-ternary\n    //     return a < b ? -1 : (a > b ? 1 : 0);\n    //   });\n    // }\n\n    // for (let i = 0; i < tuples.length; i++) {\n    //   const prop = tuples[i][0];\n    //   const value = tuples[i][1];\n    //   optionData.push([prop, adapter.gt(value)]);\n    // }\n\n    return optionData;\n  }\n}\n\nexport default IceSelect;\n","import React from 'react';\nimport SignatureCanvas from 'react-signature-canvas';\nimport { Button, Modal, Tag } from 'antd';\nimport { VerifiedOutlined } from '@ant-design/icons';\n\nclass IceSignature extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChange = props.onChange;\n    this.state = {\n      visible: false,\n    };\n    this.signature = React.createRef();\n  }\n\n  componentDidMount() {\n  }\n\n  show() {\n    this.setState({ visible: true });\n  }\n\n  setSignature(ref) {\n    if (ref == null) {\n      return;\n    }\n    const { value } = this.props;\n    if (value != null && value.length > 10) {\n      ref.fromDataURL(value);\n    }\n  }\n\n  hide() {\n    this.setState({ visible: false });\n  }\n\n  clear() {\n    this.signature.clear();\n  }\n\n  save() {\n    const data = this.signature.toDataURL('image/png');\n    this.onChange(data);\n    this.setState({ visible: false });\n  }\n\n  render() {\n    const { readOnly } = this.props;\n\n    return (\n      <>\n        <Modal\n          visible={this.state.visible}\n          title=\"Signature\"\n          maskClosable={false}\n          centered\n          width={300}\n          onCancel={() => { this.hide(); }}\n          footer={[\n            <Button key=\"cancel\" onClick={() => { this.hide(); }}>\n              Cancel\n            </Button>,\n            <Button key=\"clear\" disabled={readOnly} type=\"dashed\" onClick={() => { if (!readOnly) { this.clear(); } }}>\n              Clear\n            </Button>,\n            <Button key=\"ok\" disabled={readOnly} type=\"primary\" onClick={() => { if (!readOnly) { this.save(); } }}>\n              Submit\n            </Button>,\n          ]}\n        >\n          <SignatureCanvas ref={(ref) => { this.signature = ref; this.setSignature(ref); }} canvasProps={{ width: 250, height: 200, className: 'sigCanvas', ...( readOnly ? { readOnly } : {}), }} />\n        </Modal>\n        <Tag color=\"blue\" style={{ cursor: 'pointer' }} onClick={() => { this.show(); }}>\n          <VerifiedOutlined />\n          {' '}\n          Sign\n        </Tag>\n      </>\n    );\n  }\n}\n\nexport default IceSignature;\n","import React from 'react';\nimport {\n  Button, Divider, Steps, Row, Col, Space,\n} from 'antd';\nimport IceForm from './IceForm';\n\nconst { Step } = Steps;\n\nclass IceStepForm extends IceForm {\n  constructor(props) {\n    super(props);\n\n    this.onChange = props.onChange;\n\n    let steps = this.props.fields.map((item) => ({\n      ...item,\n      ref: React.createRef(),\n    }));\n\n    steps = steps.map((item) => {\n      const { ref, fields } = item;\n      item.content = (\n        <IceForm\n          ref={ref}\n          adapter={props.adapter}\n          fields={fields}\n          twoColumnLayout={props.twoColumnLayout}\n          width={props.width}\n          layout={props.layout || 'horizontal'}\n        />\n      );\n\n      return item;\n    });\n\n    this.state = {\n      current: 0,\n      steps,\n      loading: false,\n    };\n  }\n\n  moveToStep(current) {\n    this.setState({ current });\n  }\n\n  next() {\n    if (this.validateFields(false) === false) {\n      return;\n    }\n\n    this.showError(false);\n    const current = this.state.current + 1;\n    this.setState({ current });\n  }\n\n  prev() {\n    const current = this.state.current - 1;\n    if (current < 0) {\n      return;\n    }\n    this.setState({ current });\n  }\n\n  render() {\n    const { adapter } = this.props;\n    const { current, steps } = this.state;\n    return (\n      <>\n        <Steps current={current}>\n          {steps.map((item, index) => (\n            <Step key={item.title} title={item.title} onClick={() => this.moveToStep(index)} />\n          ))}\n        </Steps>\n        <Divider />\n        <div className=\"steps-content\">\n          {steps.map((item, index) => (\n            <div style={{ display: index === current ? 'block' : 'none' }}>\n              {item.content}\n            </div>\n          ))}\n        </div>\n        <Divider />\n        <div className=\"steps-action\">\n          <Row gutter={16}>\n            <Col className=\"gutter-row\" span={12} style={{}}>\n              <Space>\n                {current < steps.length - 1 && (\n                  <Button type=\"primary\" onClick={() => this.next()}>\n                    {adapter.gt('Next')}\n                  </Button>\n                )}\n                {current > 0 && (\n                  <Button onClick={() => this.prev()}>\n                    {adapter.gt('Previous')}\n                  </Button>\n                )}\n              </Space>\n            </Col>\n            <Col className=\"gutter-row\" span={12} style={{ textAlign: 'right' }}>\n              <Space>\n                <Button onClick={() => this.props.closeModal()}>\n                  {adapter.gt('Cancel')}\n                </Button>\n                <Button type=\"primary\" loading={this.state.loading} onClick={() => this.saveData()}>\n                  {adapter.gt('Save')}\n                </Button>\n              </Space>\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n\n  async saveData() {\n    this.setState({ loading: true });\n    const data = await this.validateFields(true);\n    if (data) {\n      this.save(data, () => this.props.closeModal());\n    }\n    this.setState({ loading: false });\n  }\n\n  save(params, success) {\n    const { adapter } = this.props;\n    adapter.add(params, [], () => adapter.get([]), () => {\n      this.resetFields();\n      this.showError(false);\n      success();\n    });\n  }\n\n  updateFields(data) {\n    this.state.steps.forEach((item) => {\n      const subData = {};\n      item.fields.forEach(([key]) => {\n        subData[key] = data[key];\n      });\n      this.updateFieldsSubForm(item.ref, item.fields, subData);\n    });\n  }\n\n  updateFieldsSubForm(ref, fields, data) {\n    data = this.dataToFormFields(data, fields);\n    ref.current.resetFields();\n    if (data == null) {\n      return;\n    }\n    try {\n      ref.current.setFieldsValue(data);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async validateFields(all) {\n    const { adapter } = this.props;\n    const steps = all ? this.state.steps : this.state.steps.slice(0, this.state.current + 1);\n    const promiseList = steps.map(\n      (item) => item.ref.current.validateFields()\n        .then((values) => {\n          if (!item.ref.current.isValid()) {\n            return false;\n          }\n          return values;\n        })\n        .catch(() => false),\n    );\n\n    const allData = await Promise.all(promiseList);\n    const failedIndex = allData.findIndex((item) => item === false);\n\n    if (failedIndex >= 0) {\n      this.setState({ current: failedIndex });\n\n      return false;\n    }\n\n    let values = Object.assign({}, ...allData);\n    values = adapter.forceInjectValuesBeforeSave(values);\n    const msg = adapter.doCustomValidation(values);\n\n    if (msg !== null) {\n      this.showError(msg);\n      return false;\n    }\n\n    if (adapter.csrfRequired) {\n      values.csrf = $(`#${adapter.getTableName()}Form`).data('csrf');\n    }\n\n    const id = (adapter.currentElement != null) ? adapter.currentElement.id : null;\n    if (id != null && id !== '') {\n      values.id = id;\n    }\n\n    const fields = [].concat.apply([], this.state.steps.map((item) => item.fields));\n\n    return this.formFieldsToData(values, fields);\n  }\n\n  getSubFormData(ref, fields, params) {\n    const { adapter } = this.props;\n    let values = params;\n    values = adapter.forceInjectValuesBeforeSave(values);\n    const msg = adapter.doCustomValidation(values);\n    if (msg !== null) {\n      ref.current.showError(msg);\n      return;\n    }\n\n    if (adapter.csrfRequired) {\n      values.csrf = $(`#${adapter.getTableName()}Form`).data('csrf');\n    }\n\n    const id = (adapter.currentElement != null) ? adapter.currentElement.id : null;\n    if (id != null && id !== '') {\n      values.id = id;\n    }\n\n    return this.formFieldsToData(values, fields);\n  }\n\n  showError(errorMsg) {\n    this.state.steps.forEach((item) => item.ref.current.showError(errorMsg));\n  }\n\n  resetFields() {\n    this.state.steps.forEach((item) => item.ref.current.resetFields());\n  }\n\n  hideError() {\n    this.state.steps.forEach((item) => item.ref.current.hideError());\n  }\n\n  isReady() {\n    return this.state.steps.reduce((acc, item) => acc && item.ref.current != null, true);\n  }\n}\n\nexport default IceStepForm;\n","import React from 'react';\nimport { Modal } from 'antd';\nimport IceFormModal from './IceFormModal';\nimport IceStepForm from './IceStepForm';\n\nclass IceStepFormModal extends IceFormModal {\n  constructor(props) {\n    super(props);\n    this.width = 850;\n  }\n\n  show(data) {\n    this.props.adapter.beforeRenderFieldHook = this.props.adapter.beforeRenderField ? this.props.adapter.beforeRenderField(data) : (fieldName, field) => field;\n    if (!data) {\n      this.setState({ visible: true });\n      if (this.iceFormReference.current) {\n        this.iceFormReference.current.resetFields();\n      }\n    } else {\n      this.setState({ visible: true });\n      if (this.iceFormReference.current && this.iceFormReference.current.isReady()) {\n        this.iceFormReference.current.moveToStep(0);\n        this.iceFormReference.current.updateFields(data);\n      } else {\n        this.waitForIt(\n          () => this.iceFormReference.current && this.iceFormReference.current.isReady(),\n          () => {\n            this.iceFormReference.current.updateFields(data);\n            this.iceFormReference.current.moveToStep(0);\n          },\n          1000,\n        );\n      }\n    }\n  }\n\n  hide() {\n    this.iceFormReference.current.moveToStep(0);\n    this.setState({ visible: false });\n  }\n\n  render() {\n    const { fields, adapter } = this.props;\n    const { width, twoColumnLayout, layout } = this.props.adapter.getFormOptions();\n    return (\n      <Modal\n        visible={this.state.visible}\n        title={this.props.adapter.gt(this.props.title || adapter.objectTypeName)}\n        maskClosable={false}\n        width={width || this.width}\n        footer={[]}\n        onCancel={() => {\n          this.closeModal();\n        }}\n      >\n        <IceStepForm\n          ref={this.iceFormReference}\n          adapter={adapter}\n          fields={fields}\n          closeModal={() => { this.closeModal(); }}\n          twoColumnLayout={twoColumnLayout || false}\n          layout={layout}\n        />\n      </Modal>\n    );\n  }\n}\n\nexport default IceStepFormModal;\n","import React, {Component} from 'react';\nimport {Col, Form, Input, Row, Table, Space, Button, Tag, message} from 'antd';\nimport {\n  FilterOutlined,\n  PlusCircleOutlined,\n} from '@ant-design/icons';\nconst { Search } = Input;\n\nclass IceTable extends React.Component {\n  state = {\n    data: [],\n    pagination: {},\n    loading: true,\n    fetchConfig: false,\n    //filter: null,\n    showLoading: true,\n    currentElement: null,\n    fetchCompleted: false,\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const fetchConfig = {\n      page: 1,\n    };\n    message.config({\n      top: 40,\n    });\n    this.setState({\n      fetchConfig,\n      //filter: this.props.adapter.filter,\n      pagination: { 'pageSize': this.props.reader.pageSize }\n    });\n    //this.fetch(fetchConfig);\n  }\n\n  handleTableChange = (pagination, filters, sorter) => {\n    const pager = { ...this.state.pagination };\n    const { search } = this.state;\n    pager.current = pagination.current;\n    this.setState({\n      pagination: pager,\n    });\n\n    const fetchConfig = {\n      limit: pagination.pageSize,\n      page: pagination.current,\n      sortField: sorter.field,\n      sortOrder: sorter.order,\n      filters: JSON.stringify(filters),\n      search: search,\n    };\n\n    this.setState({\n      fetchConfig\n    });\n\n    this.fetch(fetchConfig);\n  };\n\n  reload = () => {\n    const fetchConfig = this.state.fetchConfig;\n    if (fetchConfig) {\n      this.fetch(fetchConfig)\n    }\n  };\n\n  search = (value) => {\n    const pager = { ...this.state.pagination };\n    this.setState({ search: value, refreshSearch: true });\n    const fetchConfig = this.state.fetchConfig;\n    console.log(fetchConfig);\n    if (fetchConfig) {\n      fetchConfig.page = 1;\n      //pager.current = 1;\n      fetchConfig.search = value;\n      this.setState({\n        fetchConfig,\n        pagination: pager,\n      }, () => this.fetch(fetchConfig));\n    }\n  }\n\n  addNew = () => {\n    this.props.adapter.renderForm();\n  }\n\n  showFilters = () => {\n    this.props.adapter.showFilters();\n  }\n\n  setFilterData = (filter) => {\n    this.setState({\n      filter,\n    });\n  }\n\n  setCurrentElement = (currentElement) => {\n    this.setState({currentElement});\n  }\n\n  setLoading(value) {\n    this.setState({ loading: value });\n  }\n\n  fetch = (params = {}) => {\n    //this.setState({ loading: this.state.showLoading });\n    this.setState({ loading: true });\n    //const hideMessage = message.loading({ content: 'Loading Latest Data ...', key: 'loadingTable', duration: 1});\n    const pagination = { ...this.state.pagination };\n\n    if (this.props.adapter.localStorageEnabled) {\n      try {\n        const cachedResponse = this.props.reader.getCachedResponse(params);\n        if (cachedResponse.items) {\n          this.setState({\n            loading: false,\n            data: cachedResponse.items,\n            pagination,\n            showLoading: false,\n          });\n        } else {\n          this.props.reader.clearCachedResponse(params);\n        }\n      } catch (e) {\n        this.props.reader.clearCachedResponse(params);\n      }\n    }\n\n    this.props.reader.get(params)\n      .then(data => {\n        // Read total count from server\n        // pagination.total = data.totalCount;\n        pagination.total = data.total;\n        //hideMessage();\n        // setTimeout(\n        //   () => message.success({ content: 'Loading Completed!', key: 'loadingSuccess', duration: 1 }),\n        //   600\n        // );\n        this.setState({\n          loading: false,\n          data: data.items,\n          pagination,\n          showLoading: false,\n          fetchCompleted: true,\n        });\n      });\n  };\n\n  getChildrenWithProps(element) {\n    const childrenWithProps = React.Children.map(this.props.children, child => {\n      // checking isValidElement is the safe way and avoids a typescript error too\n      const props = {\n        element,\n        adapter: this.props.adapter,\n        loading: this.state.loading,\n      };\n      if (React.isValidElement(child)) {\n        return React.cloneElement(child, props);\n      }\n      return child;\n    });\n\n    return childrenWithProps;\n  }\n\n  render() {\n    return (\n      <Row direction=\"vertical\" style={{ width: '100%' }}>\n        {(!this.state.currentElement || this.props.adapter.keepTableVisibleWhileShowingCustomView()) &&\n        <Col span={24}>\n          <Row gutter={24}>\n            <Col span={18}>\n              <Space>\n                {this.props.adapter.hasAccess('save') && this.props.adapter.getShowAddNew() &&\n                <Button type=\"primary\" onClick={this.addNew}><PlusCircleOutlined/> Add New</Button>\n                }\n                {this.props.adapter.hasCustomTopButtons() &&\n                this.props.adapter.getCustomTopButtons()\n                }\n                {this.props.adapter.getFilters() &&\n                <Button onClick={this.showFilters}><FilterOutlined/> Filters</Button>\n                }\n\n                {this.state.fetchCompleted\n                && this.props.adapter.getFilters()\n                && this.props.adapter.filter != null\n                && this.props.adapter.filter !== []\n                && this.props.adapter.filter !== ''\n                && this.props.adapter.getFilterString(this.props.adapter.filter) !== '' &&\n                <Tag closable\n                     style={{'lineHeight': '30px'}}\n                     color=\"blue\"\n                     onClose={() => this.props.adapter.resetFilters()}\n                     visible={this.props.adapter.filter != null && this.props.adapter.filter !== [] && this.props.adapter.filter !== ''}\n                >\n                  {this.props.adapter.getFilterString(this.props.adapter.filter)}\n                </Tag>\n                }\n\n              </Space>\n            </Col>\n            <Col span={6}>\n              <Form\n                ref={(formRef) => this.form = formRef}\n                name=\"advanced_search\"\n                className=\"ant-advanced-search-form\"\n              >\n                <Form.Item name=\"searchTerm\" label=\"\"\n                           rules={[\n                             {\n                               required: false,\n                             },\n                           ]}\n                >\n                  <Search\n                    placeholder=\"input search text\"\n                    enterButton=\"Search\"\n                    onSearch={value => this.search(value)}\n                  />\n                </Form.Item>\n              </Form>\n            </Col>\n          </Row>\n          <Row gutter={24}>\n            <Col span={24}>\n              <Table\n                // bordered\n                rowClassName={(record, index) => index % 2 === 0 ? 'table-row-light' : 'table-row-dark'}\n                columns={this.props.columns}\n                rowKey={record => record.id}\n                dataSource={this.state.data}\n                pagination={this.state.pagination}\n                loading={this.state.loading}\n                onChange={this.handleTableChange}\n                reader={this.props.dataPipe}\n              />\n            </Col>\n          </Row>\n        </Col>\n        }\n        {this.state.currentElement &&\n          this.getChildrenWithProps(this.state.currentElement)\n        }\n      </Row>\n    );\n  }\n}\n\nexport default IceTable;\n","import React from \"react\";\nimport {Button, message, Space, Upload, Tag} from \"antd\";\nimport { UploadOutlined, DownloadOutlined, DeleteOutlined } from '@ant-design/icons';\n\nclass IceUpload extends React.Component {\n  state = {\n    fileList: [],\n    uploaded: false,\n  };\n\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n    this.onChange = props.onChange;\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    message.config({\n      top: 55,\n      duration: 2,\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  handleDelete = () => {\n    this.setState({ fileList: [], value: null, uploaded: false});\n    this.onChange(null);\n  };\n\n  handleView = () => {\n    let currentValue = this.props.value;\n    if (this.state.value != null && this.state.value !== '') {\n      currentValue = this.state.value;\n    }\n    if (currentValue == null || currentValue === '') {\n      message.error('File not found');\n      return;\n    }\n\n    const { adapter } = this.props;\n\n    adapter.getFile(currentValue)\n      .then((data) => {\n        const file = {\n          key: data.uid,\n          uid: data.uid,\n          name: data.name,\n          status: data.status,\n          url: data.filename,\n        };\n        window.open(file.url);\n      }).catch((e) => {\n\n    });\n  };\n\n  handleChange = info => {\n    let fileList = [...info.fileList];\n\n    if (fileList.length === 0) {\n      this.setState({ value: null });\n      this.onChange(null);\n      this.setState({fileList: []});\n      this.setState({uploaded: false});\n      return;\n    }\n\n    fileList = fileList.slice(-1);\n\n    if (fileList[0].response && fileList[0].response.status === 'error') {\n      this.setState({ value: null });\n      this.onChange(null);\n      this.setState({fileList: []});\n      this.setState({uploaded: false});\n      message.error(`Error: ${fileList[0].response.message}`);\n      return;\n    }\n\n    fileList = fileList.map(file => {\n      if (file.response) {\n        // Component will show file.url as link\n        file.name = file.response.name;\n        file.url = file.response.url;\n      }\n      return file;\n    });\n\n    this.setState({fileList});\n    this.setState({ value: this.getFileName(fileList), uploaded: true });\n    this.onChange(this.getFileName(fileList));\n  };\n\n  getFileName(fileList) {\n    let file = null;\n    if (fileList) {\n      file = fileList[0];\n    }\n\n    return file ? file.name : '';\n  }\n\n  generateRandom(length) {\n    const d = new Date();\n    const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let result = '';\n    for (let i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];\n    return result + d.getTime();\n  }\n\n  render() {\n    let fileName = this.generateRandom(14);\n\n    const props = {\n      action: `${window.CLIENT_BASE_URL}fileupload-new.php?user=${this.props.user}&file_group=${this.props.fileGroup}&file_name=${fileName}`,\n      onChange: this.handleChange,\n      onRemove: this.handleDelete,\n      multiple: false,\n      listType: 'picture',\n    };\n\n    return (\n      <Space direction={'vertical'}>\n        {!this.props.readOnly &&\n        <Space>\n          <Upload {...props} fileList={this.state.fileList}>\n            <Tag color=\"blue\" style={{ cursor: 'pointer' }}>\n              <UploadOutlined />\n              {' '}\n              Upload\n            </Tag>\n          </Upload>\n        </Space>\n        }\n        <Space>\n          { (((this.props.value != null && this.props.value !== '') || (this.state.value != null && this.state.value !== '')) && !this.state.uploaded) &&\n          <Button type=\"link\" htmlType=\"button\" onClick={this.handleView}>\n            <DownloadOutlined/> View File\n          </Button>\n          }\n          { (((this.props.value != null && this.props.value !== '') || (this.state.value != null && this.state.value !== '')) && !this.state.uploaded && !this.props.readOnly) &&\n          <Button type=\"link\" htmlType=\"button\" danger onClick={this.handleDelete}>\n            <DeleteOutlined/> Delete\n          </Button>\n          }\n        </Space>\n      </Space>\n\n    );\n  }\n}\n\nexport default IceUpload;\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Checklist=t():e.Checklist=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=6)}([function(e,t,n){var r=n(1);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(3)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,\".cdx-checklist__item {\\n        display: flex;\\n        box-sizing: content-box;\\n    }\\n\\n        .cdx-checklist__item-text {\\n            outline: none;\\n            flex-grow: 1;\\n            padding: 5px 0;\\n        }\\n\\n        .cdx-checklist__item-checkbox {\\n            display: inline-block;\\n            flex-shrink: 0;\\n            position: relative;\\n            width: 20px;\\n            height: 20px;\\n            margin:  5px;\\n            margin-left: 0;\\n            margin-right: 7px;\\n            border-radius: 50%;\\n            border: 1px solid #d0d0d0;\\n            background: #fff;\\n            cursor: pointer;\\n            user-select: none;\\n        }\\n\\n        .cdx-checklist__item-checkbox:hover {\\n                border-color: #b5b5b5;\\n            }\\n\\n        .cdx-checklist__item-checkbox::after {\\n                position: absolute;\\n                top: 6px;\\n                left: 5px;\\n                width: 9px;\\n                height: 4px;\\n                border: 2px solid #fff;\\n                border-top: none;\\n                border-right: none;\\n                background: transparent;\\n                content: '';\\n                opacity: 0;\\n                transform: rotate(-45deg);\\n            }\\n\\n        .cdx-checklist__item--checked .cdx-checklist__item-checkbox {\\n                background: #388ae5;\\n                border-color: #388ae5;\\n            }\\n\\n        .cdx-checklist__item--checked .cdx-checklist__item-checkbox:hover {\\n                    background: #307cd1;\\n                }\\n\\n        .cdx-checklist__item--checked .cdx-checklist__item-checkbox::after {\\n                    opacity: 1;\\n                }\\n\",\"\"])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||\"\",r=e[3];if(!r)return n;if(t&&\"function\"==typeof btoa){var o=(c=r,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(c))))+\" */\"),i=r.sources.map((function(e){return\"/*# sourceURL=\"+r.sourceRoot+e+\" */\"}));return[n].concat(i).concat([o]).join(\"\\n\")}var c;return[n].join(\"\\n\")}(t,e);return t[2]?\"@media \"+t[2]+\"{\"+n+\"}\":n})).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];\"number\"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var c=e[o];\"number\"==typeof c[0]&&r[c[0]]||(n&&!c[2]?c[2]=n:n&&(c[2]=\"(\"+c[2]+\") and (\"+n+\")\"),t.push(c))}},t}},function(e,t,n){var r,o,i={},c=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){return document.querySelector(e)},a=function(e){var t={};return function(e){if(\"function\"==typeof e)return e();if(void 0===t[e]){var n=s.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,u=0,f=[],d=n(4);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var c=0;c<o.parts.length;c++)o.parts[c](r.parts[c]);for(;c<r.parts.length;c++)o.parts.push(g(r.parts[c],t))}else{var s=[];for(c=0;c<r.parts.length;c++)s.push(g(r.parts[c],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],c=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[c]?r[c].parts.push(s):n.push(r[c]={id:c,parts:[s]})}return n}function m(e,t){var n=a(e.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=f[f.length-1];if(\"top\"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if(\"bottom\"===e.insertAt)n.appendChild(t);else{if(\"object\"!=typeof e.insertAt||!e.insertAt.before)throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");var o=a(e.insertInto+\" \"+e.insertAt.before);n.insertBefore(t,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function b(e){var t=document.createElement(\"style\");return void 0===e.attrs.type&&(e.attrs.type=\"text/css\"),y(t,e.attrs),m(e,t),t}function y(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function g(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var c=u++;n=l||(l=b(t)),r=S.bind(null,n,c,!1),o=S.bind(null,n,c,!0)}else e.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=function(e){var t=document.createElement(\"link\");return void 0===e.attrs.type&&(e.attrs.type=\"text/css\"),e.attrs.rel=\"stylesheet\",y(t,e.attrs),m(e,t),t}(t),r=C.bind(null,n,t),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(t),r=w.bind(null,n),o=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(t=t||{}).attrs=\"object\"==typeof t.attrs?t.attrs:{},t.singleton||\"boolean\"==typeof t.singleton||(t.singleton=c()),t.insertInto||(t.insertInto=\"head\"),t.insertAt||(t.insertAt=\"bottom\");var n=h(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var c=n[o];(s=i[c.id]).refs--,r.push(s)}e&&p(h(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var a=0;a<s.parts.length;a++)s.parts[a]();delete i[s.id]}}}};var x,k=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join(\"\\n\")});function S(e,t,n,r){var o=n?\"\":r.css;if(e.styleSheet)e.styleSheet.cssText=k(t,o);else{var i=document.createTextNode(o),c=e.childNodes;c[t]&&e.removeChild(c[t]),c.length?e.insertBefore(i,c[t]):e.appendChild(i)}}function w(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute(\"media\",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function C(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=d(r)),o&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\");var c=new Blob([r],{type:\"text/css\"}),s=e.href;e.href=URL.createObjectURL(c),s&&URL.revokeObjectURL(s)}},function(e,t){e.exports=function(e){var t=\"undefined\"!=typeof window&&window.location;if(!t)throw new Error(\"fixUrls requires window.location\");if(!e||\"string\"!=typeof e)return e;var n=t.protocol+\"//\"+t.host,r=n+t.pathname.replace(/\\/[^\\/]*$/,\"/\");return e.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,(function(e,t){var o,i=t.trim().replace(/^\"(.*)\"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(i)?e:(o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\")}))}},function(e,t,n){\"use strict\";Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector),Element.prototype.closest||(Element.prototype.closest=function(e){var t=this;if(!document.documentElement.contains(t))return null;do{if(t.matches(e))return t;t=t.parentElement||t.parentNode}while(null!==t&&1===t.nodeType);return null})},function(e,t,n){\"use strict\";function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if(\"string\"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function i(){var e=document.activeElement,t=window.getSelection().getRangeAt(0),n=t.cloneRange();return n.selectNodeContents(e),n.setStart(t.endContainer,t.endOffset),n.extractContents()}function c(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=document.createElement(e);Array.isArray(n)?(t=i.classList).add.apply(t,r(n)):n&&i.classList.add(n);for(var c in o)i[c]=o[c];return i}function s(e){return e.innerHTML.replace(\"<br>\",\" \").trim()}function a(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,r=document.createRange(),o=window.getSelection();r.selectNodeContents(e),void 0!==n&&(r.setStart(e,n),r.setEnd(e,n)),r.collapse(t),o.removeAllRanges(),o.addRange(r)}n.r(t),n.d(t,\"default\",(function(){return f}));n(0),n(5);function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e}var f=function(){function e(t){var n=t.data,r=(t.config,t.api),o=t.readOnly;!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this._elements={wrapper:null,items:[]},this.readOnly=o,this.api=r,this.data=n||{}}return u(e,null,[{key:\"isReadOnlySupported\",get:function(){return!0}},{key:\"enableLineBreaks\",get:function(){return!0}},{key:\"toolbox\",get:function(){return{icon:'<svg width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M7.5 15a7.5 7.5 0 1 1 0-15 7.5 7.5 0 0 1 0 15zm0-2.394a5.106 5.106 0 1 0 0-10.212 5.106 5.106 0 0 0 0 10.212zm-.675-4.665l2.708-2.708 1.392 1.392-2.708 2.708-1.392 1.391-2.971-2.971L5.245 6.36l1.58 1.58z\"/></svg>',title:\"Checklist\"}}},{key:\"conversionConfig\",get:function(){return{export:function(e){return e.items.map((function(e){return e.text})).join(\". \")},import:function(e){return{items:[{text:e,checked:!1}]}}}}}]),u(e,[{key:\"render\",value:function(){var e=this;return this._elements.wrapper=c(\"div\",[this.CSS.baseBlock,this.CSS.wrapper]),this.data.items||(this.data.items=[{text:\"\",checked:!1}]),this.data.items.forEach((function(t){var n=e.createChecklistItem(t);e._elements.wrapper.appendChild(n)})),this.readOnly||(this._elements.wrapper.addEventListener(\"keydown\",(function(t){switch(t.keyCode){case 13:e.enterPressed(t);break;case 8:e.backspace(t)}}),!1),this._elements.wrapper.addEventListener(\"click\",(function(t){e.toggleCheckbox(t)}))),this._elements.wrapper}},{key:\"save\",value:function(){var e=this,t=this.items.map((function(t){return{text:s(e.getItemInput(t)),checked:t.classList.contains(e.CSS.itemChecked)}}));return{items:t=t.filter((function(e){return 0!==e.text.trim().length}))}}},{key:\"validate\",value:function(e){return!!e.items.length}},{key:\"toggleCheckbox\",value:function(e){var t=e.target.closest(\".\".concat(this.CSS.item));t.querySelector(\".\".concat(this.CSS.checkbox)).contains(e.target)&&t.classList.toggle(this.CSS.itemChecked)}},{key:\"createChecklistItem\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=c(\"div\",this.CSS.item),n=c(\"span\",this.CSS.checkbox),r=c(\"div\",this.CSS.textField,{innerHTML:e.text?e.text:\"\",contentEditable:!this.readOnly});return e.checked&&t.classList.add(this.CSS.itemChecked),t.appendChild(n),t.appendChild(r),t}},{key:\"enterPressed\",value:function(e){e.preventDefault();var t=this.items,n=document.activeElement.closest(\".\".concat(this.CSS.item));if(t.indexOf(n)===t.length-1&&0===s(this.getItemInput(n)).length){var r=this.api.blocks.getCurrentBlockIndex();return n.remove(),this.api.blocks.insert(),void this.api.caret.setToBlock(r+1)}var o,c,l=i(),u=(o=l,(c=document.createElement(\"div\")).appendChild(o),c.innerHTML),f=this.createChecklistItem({text:u,checked:!1});this._elements.wrapper.insertBefore(f,n.nextSibling),a(this.getItemInput(f),!0)}},{key:\"backspace\",value:function(e){var t=e.target.closest(\".\".concat(this.CSS.item)),n=this.items.indexOf(t),r=this.items[n-1];if(r&&0===window.getSelection().focusOffset){e.preventDefault();var o=i(),c=this.getItemInput(r),s=c.childNodes.length;c.appendChild(o),a(c,void 0,s),t.remove()}}},{key:\"getItemInput\",value:function(e){return e.querySelector(\".\".concat(this.CSS.textField))}},{key:\"CSS\",get:function(){return{baseBlock:this.api.styles.block,wrapper:\"cdx-checklist\",item:\"cdx-checklist__item\",itemChecked:\"cdx-checklist__item--checked\",checkbox:\"cdx-checklist__item-checkbox\",textField:\"cdx-checklist__item-text\"}}},{key:\"items\",get:function(){return Array.from(this._elements.wrapper.querySelectorAll(\".\".concat(this.CSS.item)))}}]),e}()}]).default}));","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.CodeTool=t():e.CodeTool=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=4)}([function(e,t,n){var r=n(1),o=n(2);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){\"use strict\";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function c(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],u=t.base?a[0]+t.base:a[0],s=n[u]||0,l=\"\".concat(u,\" \").concat(s);n[u]=s+1;var d=c(l),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(f)):i.push({identifier:l,updater:b(f,t),references:1}),r.push(l)}return r}function s(e){var t=document.createElement(\"style\"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),\"function\"==typeof e.insert)e.insert(t);else{var i=a(e.insert||\"head\");if(!i)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");i.appendChild(t)}return t}var l,d=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join(\"\\n\")});function f(e,t,n,r){var o=n?\"\":r.media?\"@media \".concat(r.media,\" {\").concat(r.css,\"}\"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute(\"media\",o):e.removeAttribute(\"media\"),a&&btoa&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))),\" */\")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,v=0;function b(e,t){var n,r,o;if(t.singleton){var a=v++;n=h||(h=s(t)),r=f.bind(null,n,a,!1),o=f.bind(null,n,a,!0)}else n=s(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||\"boolean\"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],\"[object Array]\"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=c(n[r]);i[o].references--}for(var a=u(e,t),s=0;s<n.length;s++){var l=c(n[s]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=a}}}},function(e,t,n){(t=n(3)(!1)).push([e.i,\".ce-code__textarea {\\n    min-height: 200px;\\n    font-family: Menlo, Monaco, Consolas, Courier New, monospace;\\n    color: #41314e;\\n    line-height: 1.6em;\\n    font-size: 12px;\\n    background: #f8f7fa;\\n    border: 1px solid #f1f1f4;\\n    box-shadow: none;\\n    white-space: pre;\\n    word-wrap: normal;\\n    overflow-x: auto;\\n    resize: vertical;\\n}\\n\",\"\"]),e.exports=t},function(e,t,n){\"use strict\";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||\"\",r=e[3];if(!r)return n;if(t&&\"function\"==typeof btoa){var o=(i=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u=\"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(c),\"/*# \".concat(u,\" */\")),a=r.sources.map((function(e){return\"/*# sourceURL=\".concat(r.sourceRoot||\"\").concat(e,\" */\")}));return[n].concat(a).concat([o]).join(\"\\n\")}var i,c,u;return[n].join(\"\\n\")}(t,e);return t[2]?\"@media \".concat(t[2],\" {\").concat(n,\"}\"):n})).join(\"\")},t.i=function(e,n,r){\"string\"==typeof e&&(e=[[null,e,\"\"]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(n&&(u[2]?u[2]=\"\".concat(n,\" and \").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return a}));n(0);function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}\n/**\n * CodeTool for Editor.js\n *\n * @author CodeX (team@ifmo.su)\n * @copyright CodeX 2018\n * @license MIT\n * @version 2.0.0\n */var a=function(){function e(t){var n=t.data,r=t.config,o=t.api,a=t.readOnly;!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this.api=o,this.readOnly=a,this.placeholder=this.api.i18n.t(r.placeholder||e.DEFAULT_PLACEHOLDER),this.CSS={baseClass:this.api.styles.block,input:this.api.styles.input,wrapper:\"ce-code\",textarea:\"ce-code__textarea\"},this.nodes={holder:null,textarea:null},this.data={code:n.code||\"\"},this.nodes.holder=this.drawView()}return o(e,null,[{key:\"isReadOnlySupported\",get:function(){return!0}},{key:\"enableLineBreaks\",get:function(){return!0}}]),o(e,[{key:\"drawView\",value:function(){var e=this,t=document.createElement(\"div\"),n=document.createElement(\"textarea\");return t.classList.add(this.CSS.baseClass,this.CSS.wrapper),n.classList.add(this.CSS.textarea,this.CSS.input),n.textContent=this.data.code,n.placeholder=this.placeholder,this.readOnly&&(n.disabled=!0),t.appendChild(n),n.addEventListener(\"keydown\",(function(t){switch(t.code){case\"Tab\":e.tabHandler(t)}})),this.nodes.textarea=n,t}},{key:\"render\",value:function(){return this.nodes.holder}},{key:\"save\",value:function(e){return{code:e.querySelector(\"textarea\").value}}},{key:\"onPaste\",value:function(e){var t=e.detail.data;this.data={code:t.textContent}}},{key:\"tabHandler\",value:function(e){e.stopPropagation(),e.preventDefault();var t,n=e.target,r=e.shiftKey,o=n.selectionStart,a=n.value;if(r){var i=function(e,t){for(var n=\"\";\"\\n\"!==n&&t>0;)t-=1,n=e.substr(t,1);return\"\\n\"===n&&(t+=1),t}(a,o);if(\"  \"!==a.substr(i,\"  \".length))return;n.value=a.substring(0,i)+a.substring(i+\"  \".length),t=o-\"  \".length}else t=o+\"  \".length,n.value=a.substring(0,o)+\"  \"+a.substring(o);n.setSelectionRange(t,t)}},{key:\"data\",get:function(){return this._data},set:function(e){this._data=e,this.nodes.textarea&&(this.nodes.textarea.textContent=e.code)}}],[{key:\"toolbox\",get:function(){return{icon:'<svg width=\"14\" height=\"14\" viewBox=\"0 -1 14 14\" xmlns=\"http://www.w3.org/2000/svg\" > <path d=\"M3.177 6.852c.205.253.347.572.427.954.078.372.117.844.117 1.417 0 .418.01.725.03.92.02.18.057.314.107.396.046.075.093.117.14.134.075.027.218.056.42.083a.855.855 0 0 1 .56.297c.145.167.215.38.215.636 0 .612-.432.934-1.216.934-.457 0-.87-.087-1.233-.262a1.995 1.995 0 0 1-.853-.751 2.09 2.09 0 0 1-.305-1.097c-.014-.648-.029-1.168-.043-1.56-.013-.383-.034-.631-.06-.733-.064-.263-.158-.455-.276-.578a2.163 2.163 0 0 0-.505-.376c-.238-.134-.41-.256-.519-.371C.058 6.76 0 6.567 0 6.315c0-.37.166-.657.493-.846.329-.186.56-.342.693-.466a.942.942 0 0 0 .26-.447c.056-.2.088-.42.097-.658.01-.25.024-.85.043-1.802.015-.629.239-1.14.672-1.522C2.691.19 3.268 0 3.977 0c.783 0 1.216.317 1.216.921 0 .264-.069.48-.211.643a.858.858 0 0 1-.563.29c-.249.03-.417.076-.498.126-.062.04-.112.134-.139.291-.031.187-.052.562-.061 1.119a8.828 8.828 0 0 1-.112 1.378 2.24 2.24 0 0 1-.404.963c-.159.212-.373.406-.64.583.25.163.454.342.612.538zm7.34 0c.157-.196.362-.375.612-.538a2.544 2.544 0 0 1-.641-.583 2.24 2.24 0 0 1-.404-.963 8.828 8.828 0 0 1-.112-1.378c-.009-.557-.03-.932-.061-1.119-.027-.157-.077-.251-.14-.29-.08-.051-.248-.096-.496-.127a.858.858 0 0 1-.564-.29C8.57 1.401 8.5 1.185 8.5.921 8.5.317 8.933 0 9.716 0c.71 0 1.286.19 1.72.574.432.382.656.893.671 1.522.02.952.033 1.553.043 1.802.009.238.041.458.097.658a.942.942 0 0 0 .26.447c.133.124.364.28.693.466a.926.926 0 0 1 .493.846c0 .252-.058.446-.183.58-.109.115-.281.237-.52.371-.21.118-.377.244-.504.376-.118.123-.212.315-.277.578-.025.102-.045.35-.06.733-.013.392-.027.912-.042 1.56a2.09 2.09 0 0 1-.305 1.097c-.2.323-.486.574-.853.75a2.811 2.811 0 0 1-1.233.263c-.784 0-1.216-.322-1.216-.934 0-.256.07-.47.214-.636a.855.855 0 0 1 .562-.297c.201-.027.344-.056.418-.083.048-.017.096-.06.14-.134a.996.996 0 0 0 .107-.396c.02-.195.031-.502.031-.92 0-.573.039-1.045.117-1.417.08-.382.222-.701.427-.954z\" /> </svg>',title:\"Code\"}}},{key:\"DEFAULT_PLACEHOLDER\",get:function(){return\"Enter a code\"}},{key:\"pasteConfig\",get:function(){return{tags:[\"pre\"]}}},{key:\"sanitize\",get:function(){return{code:!0}}}]),e}()}]).default}));","/*! For license information please see editor.js.LICENSE.txt */\n!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.EditorJS=e():t.EditorJS=e()}(window,(function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=181)}([function(t,e,n){var o=n(9),r=n(17),i=n(27),a=n(23),s=n(30),c=function(t,e,n){var l,u,f,d,p=t&c.F,h=t&c.G,v=t&c.S,g=t&c.P,y=t&c.B,b=h?o:v?o[e]||(o[e]={}):(o[e]||{}).prototype,m=h?r:r[e]||(r[e]={}),k=m.prototype||(m.prototype={});for(l in h&&(n=e),n)f=((u=!p&&b&&void 0!==b[l])?b:n)[l],d=y&&u?s(f,o):g&&\"function\"==typeof f?s(Function.call,f):f,b&&a(b,l,f,t&c.U),m[l]!=f&&i(m,l,d),g&&k[l]!=f&&(k[l]=f)};o.core=r,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}},function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}t.exports=function(t,e,o){return e&&n(t.prototype,e),o&&n(t,o),t}},function(t,e){function n(e){return t.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},n(e)}t.exports=n},function(t,e,n){var o=n(107);t.exports=function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&o(t,e)}},function(t,e,n){var o=n(143),r=n(366);t.exports=function(t,e){return!e||\"object\"!==o(e)&&\"function\"!=typeof e?r(t):e}},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(373)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a){\"use strict\";var s=n(1);function c(t){if(\"undefined\"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(t=function(t,e){if(t){if(\"string\"==typeof t)return l(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===n&&t.constructor&&(n=t.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(n):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(t,e):void 0}}(t))){var e=0,n=function(){};return{s:n,n:function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}},e:function(t){throw t},f:n}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,r,i=!0,a=!1;return{s:function(){o=t[Symbol.iterator]()},n:function(){var t=o.next();return i=t.done,t},e:function(t){a=!0,r=t},f:function(){try{i||null==o.return||o.return()}finally{if(a)throw r}}}}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=s(r),i=s(i),a=s(a);var u=function(){function t(e){var n=this,o=e.config,i=e.eventsDispatcher;if((0,r.default)(this,t),this.nodes={},this.listeners=new a.default,this.readOnlyMutableListeners={on:function(t,e,o){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];n.mutableListenerIds.push(n.listeners.on(t,e,o,r))},clearAll:function(){var t,e=c(n.mutableListenerIds);try{for(e.s();!(t=e.n()).done;){var o=t.value;n.listeners.offById(o)}}catch(t){e.e(t)}finally{e.f()}n.mutableListenerIds=[]}},this.mutableListenerIds=[],(this instanceof t?this.constructor:void 0)===t)throw new TypeError(\"Constructors for abstract class Module are not allowed.\");this.config=o,this.eventsDispatcher=i}return(0,i.default)(t,[{key:\"removeAllNodes\",value:function(){for(var t in this.nodes){var e=this.nodes[t];e instanceof HTMLElement&&e.remove()}}},{key:\"state\",set:function(t){this.Editor=t}},{key:\"isRtl\",get:function(){return\"rtl\"===this.config.i18n.direction}}]),t}();o.default=u,u.displayName=\"Module\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(365),n(22),n(15)],void 0===(i=\"function\"==typeof(o=function(t,e,o,r,i){\"use strict\";var a,s=n(1);function c(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"log\",o=arguments.length>3?arguments[3]:void 0,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:\"color: inherit\";if(\"console\"in window&&window.console[n]){var i=[\"info\",\"log\",\"warn\",\"error\"].includes(n),s=[];switch(c.logLevel){case a.ERROR:if(\"error\"!==n)return;break;case a.WARN:if(![\"error\",\"warn\"].includes(n))return;break;case a.INFO:if(!i||t)return}o&&s.push(o);var l=\"Editor.js \".concat(\"2.19.3\"),u=\"line-height: 1em;\\n            color: #006FEA;\\n            display: inline-block;\\n            font-size: 11px;\\n            line-height: 1em;\\n            background-color: #fff;\\n            padding: 4px 9px;\\n            border-radius: 30px;\\n            border: 1px solid rgba(56, 138, 229, 0.16);\\n            margin: 4px 5px 4px 0;\";t&&(i?(s.unshift(u,r),e=\"%c\".concat(l,\"%c \").concat(e)):e=\"( \".concat(l,\" )\").concat(e));try{if(i)if(o){var f;(f=console)[n].apply(f,[\"\".concat(e,\" %o\")].concat(s))}else{var d;(d=console)[n].apply(d,[e].concat(s))}else console[n](e)}catch(t){}}}Object.defineProperty(t,\"__esModule\",{value:!0}),t.setLogLevel=function(t){c.logLevel=t},t.typeOf=f,t.isFunction=d,t.isObject=p,t.isString=function(t){return\"string\"===f(t)},t.isBoolean=function(t){return\"boolean\"===f(t)},t.isNumber=function(t){return\"number\"===f(t)},t.isUndefined=h,t.isClass=function(t){return d(t)&&/^\\s*class\\s+/.test(t.toString())},t.isEmpty=function(t){return!t||0===Object.keys(t).length&&t.constructor===Object},t.isPromise=function(t){return Promise.resolve(t)===t},t.isPrintableKey=function(t){return t>47&&t<58||32===t||13===t||229===t||t>64&&t<91||t>95&&t<112||t>185&&t<193||t>218&&t<223},t.sequence=function(t){return v.apply(this,arguments)},t.array=function(t){return Array.prototype.slice.call(t)},t.delay=function(t,e){return function(){var n=this,o=arguments;window.setTimeout((function(){return t.apply(n,o)}),e)}},t.getFileExtension=function(t){return t.name.split(\".\").pop()},t.isValidMimeType=function(t){return/^[-\\w]+\\/([-+\\w]+|\\*)$/.test(t)},t.debounce=function(t,e,n){var o,r=arguments,i=this;return function(){var a=i,s=r,c=n&&!o;window.clearTimeout(o),o=window.setTimeout((function(){o=null,n||t.apply(a,s)}),e),c&&t.apply(a,s)}},t.copyTextToClipboard=function(t){var e=i.default.make(\"div\",\"codex-editor-clipboard\",{innerHTML:t});document.body.appendChild(e);var n=window.getSelection(),o=document.createRange();o.selectNode(e),window.getSelection().removeAllRanges(),n.addRange(o),document.execCommand(\"copy\"),document.body.removeChild(e)},t.getUserOS=g,t.capitalize=function(t){return t[0].toUpperCase()+t.slice(1)},t.deepMerge=function t(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];if(!r.length)return e;var a=r.shift();if(p(e)&&p(a))for(var s in a)p(a[s])?(e[s]||Object.assign(e,(0,o.default)({},s,{})),t(e[s],a[s])):Object.assign(e,(0,o.default)({},s,a[s]));return t.apply(void 0,[e].concat(r))},t.beautifyShortcut=function(t){var e=g();return t=t.replace(/shift/gi,\"⇧\").replace(/backspace/gi,\"⌫\").replace(/enter/gi,\"⏎\").replace(/up/gi,\"↑\").replace(/left/gi,\"→\").replace(/down/gi,\"↓\").replace(/right/gi,\"←\").replace(/escape/gi,\"⎋\").replace(/insert/gi,\"Ins\").replace(/delete/gi,\"␡\").replace(/\\+/gi,\" + \"),t=e.mac?t.replace(/ctrl|cmd/gi,\"⌘\").replace(/alt/gi,\"⌥\"):t.replace(/cmd/gi,\"Ctrl\").replace(/windows/gi,\"WIN\")},t.getValidUrl=function(t){try{return new URL(t).href}catch(t){}return\"//\"===t.substring(0,2)?window.location.protocol+t:window.location.origin+t},t.openTab=function(t){window.open(t,\"_blank\")},t.generateId=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\";return\"\".concat(t).concat(Math.floor(1e8*Math.random()).toString(16))},t.deprecationAssert=function(t,e,n){var o=\"«\".concat(e,\"» is deprecated and will be removed in the next major release. Please use the «\").concat(n,\"» instead.\");t&&u(o,\"warn\")},t.isTouchSupported=t.logLabeled=t.log=t.mouseButtons=t.keyCodes=t.LogLevels=void 0,e=s(e),o=s(o),r=s(r),i=s(i),t.LogLevels=a,function(t){t.VERBOSE=\"VERBOSE\",t.INFO=\"INFO\",t.WARN=\"WARN\",t.ERROR=\"ERROR\"}(a||(t.LogLevels=a={})),t.keyCodes={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,LEFT:37,UP:38,DOWN:40,RIGHT:39,DELETE:46,META:91},t.mouseButtons={LEFT:0,WHEEL:1,RIGHT:2,BACKWARD:3,FORWARD:4},c.logLevel=a.VERBOSE;var l=c.bind(window,!1);t.log=l;var u=c.bind(window,!0);function f(t){return Object.prototype.toString.call(t).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()}function d(t){return\"function\"===f(t)}function p(t){return\"object\"===f(t)}function h(t){return\"undefined\"===f(t)}function v(){return(v=(0,r.default)(e.default.mark((function t(n){var o,i,a,s,c=arguments;return e.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s=function(){return(s=(0,r.default)(e.default.mark((function t(n,o,r){return e.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,n.function(n.data);case 3:return t.next=5,o(h(n.data)?{}:n.data);case 5:t.next=10;break;case 7:t.prev=7,t.t0=t.catch(0),r(h(n.data)?{}:n.data);case 10:case\"end\":return t.stop()}}),t,null,[[0,7]])})))).apply(this,arguments)},a=function(t,e,n){return s.apply(this,arguments)},o=c.length>1&&void 0!==c[1]?c[1]:function(){},i=c.length>2&&void 0!==c[2]?c[2]:function(){},t.abrupt(\"return\",n.reduce(function(){var t=(0,r.default)(e.default.mark((function t(n,r){return e.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,n;case 2:return t.abrupt(\"return\",a(r,o,i));case 3:case\"end\":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}(),Promise.resolve()));case 5:case\"end\":return t.stop()}}),t)})))).apply(this,arguments)}function g(){var t={win:!1,mac:!1,x11:!1,linux:!1},e=Object.keys(t).find((function(t){return-1!==navigator.appVersion.toLowerCase().indexOf(t)}));return e?(t[e]=!0,t):t}t.logLabeled=u;var y=\"ontouchstart\"in document.documentElement;t.isTouchSupported=y})?o.apply(e,r):o)||(t.exports=i)},function(t,e){var n=t.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var o=n(12);t.exports=function(t){if(!o(t))throw TypeError(t+\" is not an object!\");return t}},function(t,e){t.exports=function(t){return\"object\"==typeof t?null!==t:\"function\"==typeof t}},function(t,e,n){var o=n(143);function r(){if(\"function\"!=typeof WeakMap)return null;var t=new WeakMap;return r=function(){return t},t}t.exports=function(t){if(t&&t.__esModule)return t;if(null===t||\"object\"!==o(t)&&\"function\"!=typeof t)return{default:t};var e=r();if(e&&e.has(t))return e.get(t);var n={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in t)if(Object.prototype.hasOwnProperty.call(t,a)){var s=i?Object.getOwnPropertyDescriptor(t,a):null;s&&(s.get||s.set)?Object.defineProperty(n,a,s):n[a]=t[a]}return n.default=t,e&&e.set(t,n),n}},function(t,e,n){var o=n(67)(\"wks\"),r=n(43),i=n(9).Symbol,a=\"function\"==typeof i;(t.exports=function(t){return o[t]||(o[t]=a&&i[t]||(a?i:r)(\"Symbol.\"+t))}).store=o},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(58),n(2),n(3),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s){\"use strict\";var c=n(13),l=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=l(r),i=l(i),a=l(a),s=c(s);var u=function(){function t(){(0,i.default)(this,t)}return(0,a.default)(t,null,[{key:\"isSingleTag\",value:function(t){return t.tagName&&[\"AREA\",\"BASE\",\"BR\",\"COL\",\"COMMAND\",\"EMBED\",\"HR\",\"IMG\",\"INPUT\",\"KEYGEN\",\"LINK\",\"META\",\"PARAM\",\"SOURCE\",\"TRACK\",\"WBR\"].includes(t.tagName)}},{key:\"isLineBreakTag\",value:function(t){return t&&t.tagName&&[\"BR\",\"WBR\"].includes(t.tagName)}},{key:\"make\",value:function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=document.createElement(t);for(var a in Array.isArray(n)?(e=i.classList).add.apply(e,(0,r.default)(n)):n&&i.classList.add(n),o)Object.prototype.hasOwnProperty.call(o,a)&&(i[a]=o[a]);return i}},{key:\"text\",value:function(t){return document.createTextNode(t)}},{key:\"svg\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:14,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:14,o=document.createElementNS(\"http://www.w3.org/2000/svg\",\"svg\");return o.classList.add(\"icon\",\"icon--\"+t),o.setAttribute(\"width\",e+\"px\"),o.setAttribute(\"height\",n+\"px\"),o.innerHTML='<use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#'.concat(t,'\"></use>'),o}},{key:\"append\",value:function(t,e){Array.isArray(e)?e.forEach((function(e){return t.appendChild(e)})):t.appendChild(e)}},{key:\"prepend\",value:function(t,e){Array.isArray(e)?(e=e.reverse()).forEach((function(e){return t.prepend(e)})):t.prepend(e)}},{key:\"swap\",value:function(t,e){var n=document.createElement(\"div\"),o=t.parentNode;o.insertBefore(n,t),o.insertBefore(t,e),o.insertBefore(e,n),o.removeChild(n)}},{key:\"find\",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,e=arguments.length>1?arguments[1]:void 0;return t.querySelector(e)}},{key:\"get\",value:function(t){return document.getElementById(t)}},{key:\"findAll\",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document,e=arguments.length>1?arguments[1]:void 0;return t.querySelectorAll(e)}},{key:\"findAllInputs\",value:function(e){return s.array(e.querySelectorAll(t.allInputsSelector)).reduce((function(e,n){return t.isNativeInput(n)||t.containsOnlyInlineElements(n)?[].concat((0,r.default)(e),[n]):[].concat((0,r.default)(e),(0,r.default)(t.getDeepestBlockElements(n)))}),[])}},{key:\"getDeepestNode\",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=n?\"lastChild\":\"firstChild\",r=n?\"previousSibling\":\"nextSibling\";if(e&&e.nodeType===Node.ELEMENT_NODE&&e[o]){var i=e[o];if(t.isSingleTag(i)&&!t.isNativeInput(i)&&!t.isLineBreakTag(i))if(i[r])i=i[r];else{if(!i.parentNode[r])return i.parentNode;i=i.parentNode[r]}return this.getDeepestNode(i,n)}return e}},{key:\"isElement\",value:function(t){return!s.isNumber(t)&&t&&t.nodeType&&t.nodeType===Node.ELEMENT_NODE}},{key:\"isFragment\",value:function(t){return!s.isNumber(t)&&t&&t.nodeType&&t.nodeType===Node.DOCUMENT_FRAGMENT_NODE}},{key:\"isContentEditable\",value:function(t){return\"true\"===t.contentEditable}},{key:\"isNativeInput\",value:function(t){return!(!t||!t.tagName)&&[\"INPUT\",\"TEXTAREA\"].includes(t.tagName)}},{key:\"canSetCaret\",value:function(e){var n=!0;if(t.isNativeInput(e))switch(e.type){case\"file\":case\"checkbox\":case\"radio\":case\"hidden\":case\"submit\":case\"button\":case\"image\":case\"reset\":n=!1}else n=t.isContentEditable(e);return n}},{key:\"isNodeEmpty\",value:function(t){return!(this.isSingleTag(t)&&!this.isLineBreakTag(t))&&0===(this.isElement(t)&&this.isNativeInput(t)?t.value:t.textContent.replace(\"​\",\"\")).trim().length}},{key:\"isLeaf\",value:function(t){return!!t&&0===t.childNodes.length}},{key:\"isEmpty\",value:function(t){t.normalize();for(var e=[t];e.length>0;)if(t=e.shift()){if(this.isLeaf(t)&&!this.isNodeEmpty(t))return!1;t.childNodes&&e.push.apply(e,(0,r.default)(Array.from(t.childNodes)))}return!0}},{key:\"isHTMLString\",value:function(e){var n=t.make(\"div\");return n.innerHTML=e,n.childElementCount>0}},{key:\"getContentLength\",value:function(e){return t.isNativeInput(e)?e.value.length:e.nodeType===Node.TEXT_NODE?e.length:e.textContent.length}},{key:\"containsOnlyInlineElements\",value:function(e){var n;return s.isString(e)?(n=document.createElement(\"div\")).innerHTML=e:n=e,Array.from(n.children).every((function e(n){return!t.blockElements.includes(n.tagName.toLowerCase())&&Array.from(n.children).every(e)}))}},{key:\"getDeepestBlockElements\",value:function(e){return t.containsOnlyInlineElements(e)?[e]:Array.from(e.children).reduce((function(e,n){return[].concat((0,r.default)(e),(0,r.default)(t.getDeepestBlockElements(n)))}),[])}},{key:\"getHolder\",value:function(t){return s.isString(t)?document.getElementById(t):t}},{key:\"isExtensionNode\",value:function(t){return t&&[\"GRAMMARLY-EXTENSION\"].includes(t.nodeName)}},{key:\"isAnchor\",value:function(t){return\"a\"===t.tagName.toLowerCase()}},{key:\"allInputsSelector\",get:function(){return\"[contenteditable], textarea, input:not([type]), \"+[\"text\",\"password\",\"email\",\"number\",\"search\",\"tel\",\"url\"].map((function(t){return'input[type=\"'.concat(t,'\"]')})).join(\", \")}},{key:\"blockElements\",get:function(){return[\"address\",\"article\",\"aside\",\"blockquote\",\"canvas\",\"div\",\"dl\",\"dt\",\"fieldset\",\"figcaption\",\"figure\",\"footer\",\"form\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"header\",\"hgroup\",\"hr\",\"li\",\"main\",\"nav\",\"noscript\",\"ol\",\"output\",\"p\",\"pre\",\"ruby\",\"section\",\"table\",\"tr\",\"tfoot\",\"ul\",\"video\"]}}]),t}();o.default=u,u.displayName=\"Dom\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o=n(32),r=Math.min;t.exports=function(t){return t>0?r(o(t),9007199254740991):0}},function(t,e){var n=t.exports={version:\"2.6.11\"};\"number\"==typeof __e&&(__e=n)},function(t,e,n){t.exports=!n(10)((function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a}))},function(t,e,n){var o=n(11),r=n(109),i=n(40),a=Object.defineProperty;e.f=n(18)?Object.defineProperty:function(t,e,n){if(o(t),e=i(e,!0),o(n),r)try{return a(t,e,n)}catch(t){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported!\");return\"value\"in n&&(t[e]=n.value),t}},function(t,e,n){var o=n(37);t.exports=function(t){return Object(o(t))}},function(t,e,n){t.exports=n(140)},function(t,e){function n(t,e,n,o,r,i,a){try{var s=t[i](a),c=s.value}catch(t){return void n(t)}s.done?e(c):Promise.resolve(c).then(o,r)}t.exports=function(t){return function(){var e=this,o=arguments;return new Promise((function(r,i){var a=t.apply(e,o);function s(t){n(a,r,i,s,c,\"next\",t)}function c(t){n(a,r,i,s,c,\"throw\",t)}s(void 0)}))}}},function(t,e,n){var o=n(9),r=n(27),i=n(26),a=n(43)(\"src\"),s=n(186),c=(\"\"+s).split(\"toString\");n(17).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,n,s){var l=\"function\"==typeof n;l&&(i(n,\"name\")||r(n,\"name\",e)),t[e]!==n&&(l&&(i(n,a)||r(n,a,t[e]?\"\"+t[e]:c.join(String(e)))),t===o?t[e]=n:s?t[e]?t[e]=n:r(t,e,n):(delete t[e],r(t,e,n)))})(Function.prototype,\"toString\",(function(){return\"function\"==typeof this&&this[a]||s.call(this)}))},function(t,e,n){var o=n(0),r=n(10),i=n(37),a=/\"/g,s=function(t,e,n,o){var r=String(i(t)),s=\"<\"+e;return\"\"!==n&&(s+=\" \"+n+'=\"'+String(o).replace(a,\"&quot;\")+'\"'),s+\">\"+r+\"</\"+e+\">\"};t.exports=function(t,e){var n={};n[t]=e(s),o(o.P+o.F*r((function(){var e=\"\"[t]('\"');return e!==e.toLowerCase()||e.split('\"').length>3})),\"String\",n)}},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(8),n(15)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s){\"use strict\";var c=n(13),l=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=l(r),i=l(i),a=c(a),s=l(s);var u=function(){function t(){(0,r.default)(this,t),this.instance=null,this.selection=null,this.savedSelectionRange=null,this.isFakeBackgroundEnabled=!1,this.commandBackground=\"backColor\",this.commandRemoveFormat=\"removeFormat\"}return(0,i.default)(t,[{key:\"removeFakeBackground\",value:function(){this.isFakeBackgroundEnabled&&(this.isFakeBackgroundEnabled=!1,document.execCommand(this.commandRemoveFormat))}},{key:\"setFakeBackground\",value:function(){document.execCommand(this.commandBackground,!1,\"#a8d6ff\"),this.isFakeBackgroundEnabled=!0}},{key:\"save\",value:function(){this.savedSelectionRange=t.range}},{key:\"restore\",value:function(){if(this.savedSelectionRange){var t=window.getSelection();t.removeAllRanges(),t.addRange(this.savedSelectionRange)}}},{key:\"clearSaved\",value:function(){this.savedSelectionRange=null}},{key:\"collapseToEnd\",value:function(){var t=window.getSelection(),e=document.createRange();e.selectNodeContents(t.focusNode),e.collapse(!1),t.removeAllRanges(),t.addRange(e)}},{key:\"findParentTag\",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,o=window.getSelection(),r=null;if(!o||!o.anchorNode||!o.focusNode)return null;var i=[o.anchorNode,o.focusNode];return i.forEach((function(o){for(var i=n;i>0&&o.parentNode&&(o.tagName!==t||(r=o,e&&o.classList&&!o.classList.contains(e)&&(r=null),!r));)o=o.parentNode,i--})),r}},{key:\"expandToTag\",value:function(t){var e=window.getSelection();e.removeAllRanges();var n=document.createRange();n.selectNodeContents(t),e.addRange(n)}}],[{key:\"get\",value:function(){return window.getSelection()}},{key:\"setCursor\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=document.createRange(),o=window.getSelection();if(s.default.isNativeInput(t)){if(!s.default.canSetCaret(t))return;return t.focus(),t.selectionStart=t.selectionEnd=e,t.getBoundingClientRect()}return n.setStart(t,e),n.setEnd(t,e),o.removeAllRanges(),o.addRange(n),n.getBoundingClientRect()}},{key:\"CSS\",get:function(){return{editorWrapper:\"codex-editor\",editorZone:\"codex-editor__redactor\"}}},{key:\"anchorNode\",get:function(){var t=window.getSelection();return t?t.anchorNode:null}},{key:\"anchorElement\",get:function(){var t=window.getSelection();if(!t)return null;var e=t.anchorNode;return e?s.default.isElement(e)?e:e.parentElement:null}},{key:\"anchorOffset\",get:function(){var t=window.getSelection();return t?t.anchorOffset:null}},{key:\"isCollapsed\",get:function(){var t=window.getSelection();return t?t.isCollapsed:null}},{key:\"isAtEditor\",get:function(){var e=t.get(),n=e.anchorNode||e.focusNode;n&&n.nodeType===Node.TEXT_NODE&&(n=n.parentNode);var o=null;return n&&(o=n.closest(\".\".concat(t.CSS.editorZone))),o&&o.nodeType===Node.ELEMENT_NODE}},{key:\"isSelectionExists\",get:function(){return!!t.get().anchorNode}},{key:\"range\",get:function(){var t=window.getSelection();return t&&t.rangeCount?t.getRangeAt(0):null}},{key:\"rect\",get:function(){var t,e=document.selection,n={x:0,y:0,width:0,height:0};if(e&&\"Control\"!==e.type)return t=(e=e).createRange(),n.x=t.boundingLeft,n.y=t.boundingTop,n.width=t.boundingWidth,n.height=t.boundingHeight,n;if(!window.getSelection)return a.log(\"Method window.getSelection is not supported\",\"warn\"),n;if(null===(e=window.getSelection()).rangeCount||isNaN(e.rangeCount))return a.log(\"Method SelectionUtils.rangeCount is not supported\",\"warn\"),n;if(0===e.rangeCount)return n;if((t=e.getRangeAt(0).cloneRange()).getBoundingClientRect&&(n=t.getBoundingClientRect()),0===n.x&&0===n.y){var o=document.createElement(\"span\");if(o.getBoundingClientRect){o.appendChild(document.createTextNode(\"​\")),t.insertNode(o),n=o.getBoundingClientRect();var r=o.parentNode;r.removeChild(o),r.normalize()}}return n}},{key:\"text\",get:function(){return window.getSelection?window.getSelection().toString():\"\"}}]),t}();o.default=u,u.displayName=\"SelectionUtils\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var o=n(19),r=n(42);t.exports=n(18)?function(t,e,n){return o.f(t,e,r(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var o=n(62),r=n(37);t.exports=function(t){return o(r(t))}},function(t,e,n){\"use strict\";var o=n(10);t.exports=function(t,e){return!!t&&o((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},function(t,e,n){var o=n(31);t.exports=function(t,e,n){if(o(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,o){return t.call(e,n,o)};case 3:return function(n,o,r){return t.call(e,n,o,r)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if(\"function\"!=typeof t)throw TypeError(t+\" is not a function!\");return t}},function(t,e){var n=Math.ceil,o=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?o:n)(t)}},function(t,e,n){var o=n(63),r=n(42),i=n(28),a=n(40),s=n(26),c=n(109),l=Object.getOwnPropertyDescriptor;e.f=n(18)?l:function(t,e){if(t=i(t),e=a(e,!0),c)try{return l(t,e)}catch(t){}if(s(t,e))return r(!o.f.call(t,e),t[e])}},function(t,e,n){var o=n(0),r=n(17),i=n(10);t.exports=function(t,e){var n=(r.Object||{})[t]||Object[t],a={};a[t]=e(n),o(o.S+o.F*i((function(){n(1)})),\"Object\",a)}},function(t,e,n){var o=n(30),r=n(62),i=n(20),a=n(16),s=n(125);t.exports=function(t,e){var n=1==t,c=2==t,l=3==t,u=4==t,f=6==t,d=5==t||f,p=e||s;return function(e,s,h){for(var v,g,y=i(e),b=r(y),m=o(s,h,3),k=a(b.length),x=0,S=n?p(e,k):c?p(e,0):void 0;k>x;x++)if((d||x in b)&&(g=m(v=b[x],x,y),t))if(n)S[x]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return x;case 2:S.push(v)}else if(u)return!1;return f?-1:l||u?u:S}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError(\"Can't call method on  \"+t);return t}},function(t,e,n){\"use strict\";if(n(18)){var o=n(44),r=n(9),i=n(10),a=n(0),s=n(78),c=n(106),l=n(30),u=n(56),f=n(42),d=n(27),p=n(57),h=n(32),v=n(16),g=n(136),y=n(46),b=n(40),m=n(26),k=n(64),x=n(12),S=n(20),w=n(98),T=n(47),E=n(49),C=n(48).f,B=n(100),_=n(43),O=n(14),I=n(35),N=n(68),M=n(65),R=n(102),A=n(54),L=n(71),P=n(55),D=n(101),j=n(127),F=n(19),U=n(33),H=F.f,z=U.f,W=r.RangeError,G=r.TypeError,V=r.Uint8Array,X=Array.prototype,Y=c.ArrayBuffer,K=c.DataView,Z=I(0),q=I(2),J=I(3),$=I(4),Q=I(5),tt=I(6),et=N(!0),nt=N(!1),ot=R.values,rt=R.keys,it=R.entries,at=X.lastIndexOf,st=X.reduce,ct=X.reduceRight,lt=X.join,ut=X.sort,ft=X.slice,dt=X.toString,pt=X.toLocaleString,ht=O(\"iterator\"),vt=O(\"toStringTag\"),gt=_(\"typed_constructor\"),yt=_(\"def_constructor\"),bt=s.CONSTR,mt=s.TYPED,kt=s.VIEW,xt=I(1,(function(t,e){return Ct(M(t,t[yt]),e)})),St=i((function(){return 1===new V(new Uint16Array([1]).buffer)[0]})),wt=!!V&&!!V.prototype.set&&i((function(){new V(1).set({})})),Tt=function(t,e){var n=h(t);if(n<0||n%e)throw W(\"Wrong offset!\");return n},Et=function(t){if(x(t)&&mt in t)return t;throw G(t+\" is not a typed array!\")},Ct=function(t,e){if(!x(t)||!(gt in t))throw G(\"It is not a typed array constructor!\");return new t(e)},Bt=function(t,e){return _t(M(t,t[yt]),e)},_t=function(t,e){for(var n=0,o=e.length,r=Ct(t,o);o>n;)r[n]=e[n++];return r},Ot=function(t,e,n){H(t,e,{get:function(){return this._d[n]}})},It=function(t){var e,n,o,r,i,a,s=S(t),c=arguments.length,u=c>1?arguments[1]:void 0,f=void 0!==u,d=B(s);if(null!=d&&!w(d)){for(a=d.call(s),o=[],e=0;!(i=a.next()).done;e++)o.push(i.value);s=o}for(f&&c>2&&(u=l(u,arguments[2],2)),e=0,n=v(s.length),r=Ct(this,n);n>e;e++)r[e]=f?u(s[e],e):s[e];return r},Nt=function(){for(var t=0,e=arguments.length,n=Ct(this,e);e>t;)n[t]=arguments[t++];return n},Mt=!!V&&i((function(){pt.call(new V(1))})),Rt=function(){return pt.apply(Mt?ft.call(Et(this)):Et(this),arguments)},At={copyWithin:function(t,e){return j.call(Et(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return $(Et(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return D.apply(Et(this),arguments)},filter:function(t){return Bt(this,q(Et(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Et(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Et(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Z(Et(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(Et(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Et(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return lt.apply(Et(this),arguments)},lastIndexOf:function(t){return at.apply(Et(this),arguments)},map:function(t){return xt(Et(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(Et(this),arguments)},reduceRight:function(t){return ct.apply(Et(this),arguments)},reverse:function(){for(var t,e=Et(this).length,n=Math.floor(e/2),o=0;o<n;)t=this[o],this[o++]=this[--e],this[e]=t;return this},some:function(t){return J(Et(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ut.call(Et(this),t)},subarray:function(t,e){var n=Et(this),o=n.length,r=y(t,o);return new(M(n,n[yt]))(n.buffer,n.byteOffset+r*n.BYTES_PER_ELEMENT,v((void 0===e?o:y(e,o))-r))}},Lt=function(t,e){return Bt(this,ft.call(Et(this),t,e))},Pt=function(t){Et(this);var e=Tt(arguments[1],1),n=this.length,o=S(t),r=v(o.length),i=0;if(r+e>n)throw W(\"Wrong length!\");for(;i<r;)this[e+i]=o[i++]},Dt={entries:function(){return it.call(Et(this))},keys:function(){return rt.call(Et(this))},values:function(){return ot.call(Et(this))}},jt=function(t,e){return x(t)&&t[mt]&&\"symbol\"!=typeof e&&e in t&&String(+e)==String(e)},Ft=function(t,e){return jt(t,e=b(e,!0))?f(2,t[e]):z(t,e)},Ut=function(t,e,n){return!(jt(t,e=b(e,!0))&&x(n)&&m(n,\"value\"))||m(n,\"get\")||m(n,\"set\")||n.configurable||m(n,\"writable\")&&!n.writable||m(n,\"enumerable\")&&!n.enumerable?H(t,e,n):(t[e]=n.value,t)};bt||(U.f=Ft,F.f=Ut),a(a.S+a.F*!bt,\"Object\",{getOwnPropertyDescriptor:Ft,defineProperty:Ut}),i((function(){dt.call({})}))&&(dt=pt=function(){return lt.call(this)});var Ht=p({},At);p(Ht,Dt),d(Ht,ht,Dt.values),p(Ht,{slice:Lt,set:Pt,constructor:function(){},toString:dt,toLocaleString:Rt}),Ot(Ht,\"buffer\",\"b\"),Ot(Ht,\"byteOffset\",\"o\"),Ot(Ht,\"byteLength\",\"l\"),Ot(Ht,\"length\",\"e\"),H(Ht,vt,{get:function(){return this[mt]}}),t.exports=function(t,e,n,c){var l=t+((c=!!c)?\"Clamped\":\"\")+\"Array\",f=\"get\"+t,p=\"set\"+t,h=r[l],y=h||{},b=h&&E(h),m=!h||!s.ABV,S={},w=h&&h.prototype,B=function(t,n){H(t,n,{get:function(){return function(t,n){var o=t._d;return o.v[f](n*e+o.o,St)}(this,n)},set:function(t){return function(t,n,o){var r=t._d;c&&(o=(o=Math.round(o))<0?0:o>255?255:255&o),r.v[p](n*e+r.o,o,St)}(this,n,t)},enumerable:!0})};m?(h=n((function(t,n,o,r){u(t,h,l,\"_d\");var i,a,s,c,f=0,p=0;if(x(n)){if(!(n instanceof Y||\"ArrayBuffer\"==(c=k(n))||\"SharedArrayBuffer\"==c))return mt in n?_t(h,n):It.call(h,n);i=n,p=Tt(o,e);var y=n.byteLength;if(void 0===r){if(y%e)throw W(\"Wrong length!\");if((a=y-p)<0)throw W(\"Wrong length!\")}else if((a=v(r)*e)+p>y)throw W(\"Wrong length!\");s=a/e}else s=g(n),i=new Y(a=s*e);for(d(t,\"_d\",{b:i,o:p,l:a,e:s,v:new K(i)});f<s;)B(t,f++)})),w=h.prototype=T(Ht),d(w,\"constructor\",h)):i((function(){h(1)}))&&i((function(){new h(-1)}))&&L((function(t){new h,new h(null),new h(1.5),new h(t)}),!0)||(h=n((function(t,n,o,r){var i;return u(t,h,l),x(n)?n instanceof Y||\"ArrayBuffer\"==(i=k(n))||\"SharedArrayBuffer\"==i?void 0!==r?new y(n,Tt(o,e),r):void 0!==o?new y(n,Tt(o,e)):new y(n):mt in n?_t(h,n):It.call(h,n):new y(g(n))})),Z(b!==Function.prototype?C(y).concat(C(b)):C(y),(function(t){t in h||d(h,t,y[t])})),h.prototype=w,o||(w.constructor=h));var _=w[ht],O=!!_&&(\"values\"==_.name||null==_.name),I=Dt.values;d(h,gt,!0),d(w,mt,l),d(w,kt,!0),d(w,yt,h),(c?new h(1)[vt]==l:vt in w)||H(w,vt,{get:function(){return l}}),S[l]=h,a(a.G+a.W+a.F*(h!=y),S),a(a.S,l,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*i((function(){y.of.call(h,1)})),l,{from:It,of:Nt}),\"BYTES_PER_ELEMENT\"in w||d(w,\"BYTES_PER_ELEMENT\",e),a(a.P,l,At),P(l),a(a.P+a.F*wt,l,{set:Pt}),a(a.P+a.F*!O,l,Dt),o||w.toString==dt||(w.toString=dt),a(a.P+a.F*i((function(){new h(1).slice()})),l,{slice:Lt}),a(a.P+a.F*(i((function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()}))||!i((function(){w.toLocaleString.call([1,2])}))),l,{toLocaleString:Rt}),A[l]=O?_:I,o||O||d(w,ht,I)}}else t.exports=function(){}},function(t,e,n){var o=n(355),r=n(356),i=n(141),a=n(357);t.exports=function(t,e){return o(t)||r(t,e)||i(t,e)||a()}},function(t,e,n){var o=n(12);t.exports=function(t,e){if(!o(t))return t;var n,r;if(e&&\"function\"==typeof(n=t.toString)&&!o(r=n.call(t)))return r;if(\"function\"==typeof(n=t.valueOf)&&!o(r=n.call(t)))return r;if(!e&&\"function\"==typeof(n=t.toString)&&!o(r=n.call(t)))return r;throw TypeError(\"Can't convert object to primitive value\")}},function(t,e,n){var o=n(43)(\"meta\"),r=n(12),i=n(26),a=n(19).f,s=0,c=Object.isExtensible||function(){return!0},l=!n(10)((function(){return c(Object.preventExtensions({}))})),u=function(t){a(t,o,{value:{i:\"O\"+ ++s,w:{}}})},f=t.exports={KEY:o,NEED:!1,fastKey:function(t,e){if(!r(t))return\"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!i(t,o)){if(!c(t))return\"F\";if(!e)return\"E\";u(t)}return t[o].i},getWeak:function(t,e){if(!i(t,o)){if(!c(t))return!0;if(!e)return!1;u(t)}return t[o].w},onFreeze:function(t){return l&&f.NEED&&c(t)&&!i(t,o)&&u(t),t}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,o=Math.random();t.exports=function(t){return\"Symbol(\".concat(void 0===t?\"\":t,\")_\",(++n+o).toString(36))}},function(t,e){t.exports=!1},function(t,e,n){var o=n(111),r=n(85);t.exports=Object.keys||function(t){return o(t,r)}},function(t,e,n){var o=n(32),r=Math.max,i=Math.min;t.exports=function(t,e){return(t=o(t))<0?r(t+e,0):i(t,e)}},function(t,e,n){var o=n(11),r=n(112),i=n(85),a=n(84)(\"IE_PROTO\"),s=function(){},c=function(){var t,e=n(82)(\"iframe\"),o=i.length;for(e.style.display=\"none\",n(86).appendChild(e),e.src=\"javascript:\",(t=e.contentWindow.document).open(),t.write(\"<script>document.F=Object<\\/script>\"),t.close(),c=t.F;o--;)delete c.prototype[i[o]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=o(t),n=new s,s.prototype=null,n[a]=t):n=c(),void 0===e?n:r(n,e)}},function(t,e,n){var o=n(111),r=n(85).concat(\"length\",\"prototype\");e.f=Object.getOwnPropertyNames||function(t){return o(t,r)}},function(t,e,n){var o=n(26),r=n(20),i=n(84)(\"IE_PROTO\"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=r(t),o(t,i)?t[i]:\"function\"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var o=n(14)(\"unscopables\"),r=Array.prototype;null==r[o]&&n(27)(r,o,{}),t.exports=function(t){r[o][t]=!0}},function(t,e,n){var o=n(12);t.exports=function(t,e){if(!o(t)||t._t!==e)throw TypeError(\"Incompatible receiver, \"+e+\" required!\");return t}},function(t,e,n){var o=n(19).f,r=n(26),i=n(14)(\"toStringTag\");t.exports=function(t,e,n){t&&!r(t=n?t:t.prototype,i)&&o(t,i,{configurable:!0,value:e})}},function(t,e,n){var o=n(0),r=n(37),i=n(10),a=n(88),s=\"[\"+a+\"]\",c=RegExp(\"^\"+s+s+\"*\"),l=RegExp(s+s+\"*$\"),u=function(t,e,n){var r={},s=i((function(){return!!a[t]()||\"​\"!=\"​\"[t]()})),c=r[t]=s?e(f):a[t];n&&(r[n]=c),o(o.P+o.F*s,\"String\",r)},f=u.trim=function(t,e){return t=String(r(t)),1&e&&(t=t.replace(c,\"\")),2&e&&(t=t.replace(l,\"\")),t};t.exports=u},function(t,e){t.exports={}},function(t,e,n){\"use strict\";var o=n(9),r=n(19),i=n(18),a=n(14)(\"species\");t.exports=function(t){var e=o[t];i&&e&&!e[a]&&r.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n,o){if(!(t instanceof e)||void 0!==o&&o in t)throw TypeError(n+\": incorrect invocation!\");return t}},function(t,e,n){var o=n(23);t.exports=function(t,e,n){for(var r in e)o(t,r,e[r],n);return t}},function(t,e,n){var o=n(362),r=n(363),i=n(141),a=n(364);t.exports=function(t){return o(t)||r(t)||i(t)||a()}},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(144)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a){\"use strict\";var s=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=s(r),i=s(i),a=s(a);var c=function(){function t(){(0,r.default)(this,t)}return(0,i.default)(t,null,[{key:\"ui\",value:function(e,n){return t._t(e,n)}},{key:\"t\",value:function(e,n){return t._t(e,n)}},{key:\"setDictionary\",value:function(e){t.currentDictionary=e}},{key:\"_t\",value:function(e,n){var o=t.getNamespace(e);return o&&o[n]?o[n]:n}},{key:\"getNamespace\",value:function(e){return e.split(\".\").reduce((function(t,e){return t&&Object.keys(t).length?t[e]:{}}),t.currentDictionary)}}]),t}();o.default=c,c.displayName=\"I18n\",c.currentDictionary=a.default,t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(379),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s){\"use strict\";var c=n(13),l=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=l(r),i=l(i),a=l(a),s=c(s);var u=function(){function t(e){var n=this;(0,r.default)(this,t),this.iterator=null,this.activated=!1,this.allowArrows=!0,this.onKeyDown=function(e){if(n.isEventReadyForHandling(e))switch(t.usedKeys.includes(e.keyCode)&&e.preventDefault(),e.keyCode){case s.keyCodes.TAB:n.handleTabPress(e);break;case s.keyCodes.LEFT:case s.keyCodes.UP:n.flipLeft();break;case s.keyCodes.RIGHT:case s.keyCodes.DOWN:n.flipRight();break;case s.keyCodes.ENTER:n.handleEnterPress(e)}},this.allowArrows=!s.isBoolean(e.allowArrows)||e.allowArrows,this.iterator=new a.default(e.items,e.focusedItemClass),this.activateCallback=e.activateCallback}return(0,i.default)(t,[{key:\"activate\",value:function(t){this.activated=!0,t&&this.iterator.setItems(t),document.addEventListener(\"keydown\",this.onKeyDown)}},{key:\"deactivate\",value:function(){this.activated=!1,this.dropCursor(),document.removeEventListener(\"keydown\",this.onKeyDown)}},{key:\"focusFirst\",value:function(){this.dropCursor(),this.flipRight()}},{key:\"flipLeft\",value:function(){this.iterator.previous()}},{key:\"flipRight\",value:function(){this.iterator.next()}},{key:\"dropCursor\",value:function(){this.iterator.dropCursor()}},{key:\"isEventReadyForHandling\",value:function(t){var e=[s.keyCodes.TAB,s.keyCodes.ENTER],n=this.iterator.currentItem==document.activeElement;return this.allowArrows&&!n&&e.push(s.keyCodes.LEFT,s.keyCodes.RIGHT,s.keyCodes.UP,s.keyCodes.DOWN),this.activated&&-1!==e.indexOf(t.keyCode)}},{key:\"handleTabPress\",value:function(t){switch(t.shiftKey?a.default.directions.LEFT:a.default.directions.RIGHT){case a.default.directions.RIGHT:this.flipRight();break;case a.default.directions.LEFT:this.flipLeft()}}},{key:\"handleEnterPress\",value:function(t){this.activated&&(this.iterator.currentItem&&this.iterator.currentItem.click(),s.isFunction(this.activateCallback)&&this.activateCallback(this.iterator.currentItem),t.preventDefault(),t.stopPropagation())}},{key:\"currentItem\",get:function(){return this.iterator.currentItem}}],[{key:\"usedKeys\",get:function(){return[s.keyCodes.TAB,s.keyCodes.LEFT,s.keyCodes.RIGHT,s.keyCodes.ENTER,s.keyCodes.UP,s.keyCodes.DOWN]}}]),t}();o.default=u,u.displayName=\"Flipper\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(22),n(2),n(3),n(15),n(8),n(147),n(66),n(380),n(381),n(382),n(25)],void 0===(i=\"function\"==typeof(o=function(t,e,o,r,i,a,s,c,l,u,f,d,p){\"use strict\";var h,v=n(13),g=n(1);Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=t.BlockToolAPI=void 0,e=g(e),o=g(o),r=g(r),i=g(i),a=g(a),s=v(s),c=g(c),u=g(u),f=g(f),d=g(d),p=g(p),t.BlockToolAPI=h,function(t){t.APPEND_CALLBACK=\"appendCallback\",t.RENDERED=\"rendered\",t.MOVED=\"moved\",t.UPDATED=\"updated\",t.REMOVED=\"removed\",t.ON_PASTE=\"onPaste\"}(h||(t.BlockToolAPI=h={}));var y=function(){function t(e){var n=this,o=e.name,i=e.data,a=e.Tool,u=e.settings,f=e.api,d=e.readOnly;(0,r.default)(this,t),this.cachedInputs=[],this.inputIndex=0,this.modificationDebounceTimer=450,this.didMutated=s.debounce((function(){n.cachedInputs=[],n.updateCurrentInput(),n.call(h.UPDATED)}),this.modificationDebounceTimer),this.handleFocus=function(){n.cachedInputs=[],n.updateCurrentInput()},this.name=o,this.class=a,this.settings=u,this.config=u.config||{},this.api=f,this.blockAPI=new c.default(this),this.mutationObserver=new MutationObserver(this.didMutated),this.tool=new a({data:i,config:this.config,api:this.api.getMethodsForTool(o,l.ToolType.Block),block:this.blockAPI,readOnly:d}),this.holder=this.compose(),this.tunes=this.makeTunes()}var n,v,g;return(0,i.default)(t,[{key:\"call\",value:function(t,e){if(this.tool[t]&&this.tool[t]instanceof Function){t===h.APPEND_CALLBACK&&s.log(\"`appendCallback` hook is deprecated and will be removed in the next major release. Use `rendered` hook instead\",\"warn\");try{this.tool[t].call(this.tool,e)}catch(e){s.log(\"Error during '\".concat(t,\"' call: \").concat(e.message),\"error\")}}}},{key:\"mergeWith\",value:(g=(0,o.default)(e.default.mark((function t(n){return e.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.tool.merge(n);case 2:case\"end\":return t.stop()}}),t,this)}))),function(t){return g.apply(this,arguments)})},{key:\"save\",value:(v=(0,o.default)(e.default.mark((function t(){var n,o,r,i=this;return e.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.tool.save(this.pluginsContent);case 2:return n=t.sent,o=window.performance.now(),t.abrupt(\"return\",Promise.resolve(n).then((function(t){return r=window.performance.now(),{tool:i.name,data:t,time:r-o}})).catch((function(t){s.log(\"Saving proccess for \".concat(i.name,\" tool failed due to the \").concat(t),\"log\",\"red\")})));case 5:case\"end\":return t.stop()}}),t,this)}))),function(){return v.apply(this,arguments)})},{key:\"validate\",value:(n=(0,o.default)(e.default.mark((function t(n){var o;return e.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(o=!0,!(this.tool.validate instanceof Function)){t.next=5;break}return t.next=4,this.tool.validate(n);case 4:o=t.sent;case 5:return t.abrupt(\"return\",o);case 6:case\"end\":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})},{key:\"makeTunes\",value:function(){var t=this;return[{name:\"moveUp\",Tune:u.default},{name:\"delete\",Tune:f.default},{name:\"moveDown\",Tune:d.default}].map((function(e){var n=e.name;return new(0,e.Tune)({api:t.api.getMethodsForTool(n,l.ToolType.Tune),settings:t.config})}))}},{key:\"renderTunes\",value:function(){var t=document.createDocumentFragment();return this.tunes.forEach((function(e){a.default.append(t,e.render())})),t}},{key:\"updateCurrentInput\",value:function(){this.currentInput=a.default.isNativeInput(document.activeElement)||!p.default.anchorNode?document.activeElement:p.default.anchorNode}},{key:\"willSelect\",value:function(){this.mutationObserver.observe(this.holder.firstElementChild,{childList:!0,subtree:!0,characterData:!0,attributes:!0}),this.addInputEvents()}},{key:\"willUnselect\",value:function(){this.mutationObserver.disconnect(),this.removeInputEvents()}},{key:\"compose\",value:function(){var e=a.default.make(\"div\",t.CSS.wrapper),n=a.default.make(\"div\",t.CSS.content),o=this.tool.render();return n.appendChild(o),e.appendChild(n),e}},{key:\"addInputEvents\",value:function(){var t=this;this.inputs.forEach((function(e){e.addEventListener(\"focus\",t.handleFocus)}))}},{key:\"removeInputEvents\",value:function(){var t=this;this.inputs.forEach((function(e){e.removeEventListener(\"focus\",t.handleFocus)}))}},{key:\"inputs\",get:function(){if(0!==this.cachedInputs.length)return this.cachedInputs;var t=a.default.findAllInputs(this.holder);return this.inputIndex>t.length-1&&(this.inputIndex=t.length-1),this.cachedInputs=t,t}},{key:\"currentInput\",get:function(){return this.inputs[this.inputIndex]},set:function(t){var e=this.inputs.findIndex((function(e){return e===t||e.contains(t)}));-1!==e&&(this.inputIndex=e)}},{key:\"firstInput\",get:function(){return this.inputs[0]}},{key:\"lastInput\",get:function(){var t=this.inputs;return t[t.length-1]}},{key:\"nextInput\",get:function(){return this.inputs[this.inputIndex+1]}},{key:\"previousInput\",get:function(){return this.inputs[this.inputIndex-1]}},{key:\"data\",get:function(){return this.save().then((function(t){return t&&!s.isEmpty(t.data)?t.data:{}}))}},{key:\"sanitize\",get:function(){return this.tool.sanitize}},{key:\"mergeable\",get:function(){return s.isFunction(this.tool.merge)}},{key:\"isEmpty\",get:function(){var t=a.default.isEmpty(this.pluginsContent),e=!this.hasMedia;return t&&e}},{key:\"hasMedia\",get:function(){return!!this.holder.querySelector([\"img\",\"iframe\",\"video\",\"audio\",\"source\",\"input\",\"textarea\",\"twitterwidget\"].join(\",\"))}},{key:\"focused\",set:function(e){this.holder.classList.toggle(t.CSS.focused,e)},get:function(){return this.holder.classList.contains(t.CSS.focused)}},{key:\"selected\",set:function(e){e?this.holder.classList.add(t.CSS.selected):this.holder.classList.remove(t.CSS.selected)},get:function(){return this.holder.classList.contains(t.CSS.selected)}},{key:\"stretched\",set:function(e){this.holder.classList.toggle(t.CSS.wrapperStretched,e)},get:function(){return this.holder.classList.contains(t.CSS.wrapperStretched)}},{key:\"dropTarget\",set:function(e){this.holder.classList.toggle(t.CSS.dropTarget,e)}},{key:\"pluginsContent\",get:function(){var e=this.holder.querySelector(\".\".concat(t.CSS.content));if(e&&e.childNodes.length)for(var n=e.childNodes.length-1;n>=0;n--){var o=e.childNodes[n];if(!a.default.isExtensionNode(o))return o}return null}}],[{key:\"CSS\",get:function(){return{wrapper:\"ce-block\",wrapperStretched:\"ce-block--stretched\",content:\"ce-block__content\",focused:\"ce-block--focused\",selected:\"ce-block--selected\",dropTarget:\"ce-block--drop-target\"}}}]),t}();t.default=y,y.displayName=\"Block\"})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o=n(36);t.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(t){return\"String\"==o(t)?t.split(\"\"):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var o=n(36),r=n(14)(\"toStringTag\"),i=\"Arguments\"==o(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),r))?n:i?o(e):\"Object\"==(a=o(e))&&\"function\"==typeof e.callee?\"Arguments\":a}},function(t,e,n){var o=n(11),r=n(31),i=n(14)(\"species\");t.exports=function(t,e){var n,a=o(t).constructor;return void 0===a||null==(n=o(a)[i])?e:r(n)}},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(39),n(21),n(22),n(2),n(3),n(5),n(6),n(4),n(374),n(7),n(8),n(375),n(376),n(377),n(378)],void 0===(i=\"function\"==typeof(o=function(t,e,o,r,i,a,s,c,l,u,f,d,p,h,v,g){\"use strict\";var y=n(13),b=n(1);function m(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(t,\"__esModule\",{value:!0}),t.ToolType=t.default=void 0,e=b(e),o=b(o),r=b(r),i=b(i),a=b(a),s=b(s),c=b(c),l=b(l),u=b(u),f=b(f),d=y(d),p=b(p),h=b(h),v=b(v),g=b(g);var k,x=function(t){(0,s.default)(y,t);var n,f=(n=y,function(){var t,e=(0,l.default)(n);if(m()){var o=(0,l.default)(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return(0,c.default)(this,t)});function y(t){var e,n=t.config,o=t.eventsDispatcher;return(0,i.default)(this,y),(e=f.call(this,{config:n,eventsDispatcher:o})).stubTool=\"stub\",e.toolsClasses={},e.toolsAvailable={},e.toolsUnavailable={},e.toolsSettings={},e._inlineTools={},e.toolsClasses={},e.toolsSettings={},e.toolsAvailable={},e.toolsUnavailable={},e._inlineTools=null,e}return(0,a.default)(y,[{key:\"prepare\",value:function(){var t=this;if(this.validateTools(),this.config.tools=d.deepMerge({},this.internalTools,this.config.tools),!Object.prototype.hasOwnProperty.call(this.config,\"tools\")||0===Object.keys(this.config.tools).length)throw Error(\"Can't start without tools\");for(var e in this.config.tools)d.isObject(this.config.tools[e])?(this.toolsClasses[e]=this.config.tools[e].class,this.toolsSettings[e]=this.config.tools[e],delete this.toolsSettings[e].class):(this.toolsClasses[e]=this.config.tools[e],this.toolsSettings[e]={class:this.config.tools[e]});var n=this.getListOfPrepareFunctions();return 0===n.length?Promise.resolve():d.sequence(n,(function(e){t.success(e)}),(function(e){t.fallback(e)}))}},{key:\"success\",value:function(t){this.toolsAvailable[t.toolName]=this.toolsClasses[t.toolName]}},{key:\"fallback\",value:function(t){this.toolsUnavailable[t.toolName]=this.toolsClasses[t.toolName]}},{key:\"constructInline\",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o={api:this.Editor.API.getMethodsForTool(e),config:n[this.USER_SETTINGS.CONFIG]||{}};return new t(o)}},{key:\"isDefault\",value:function(t){return t instanceof this.available[this.config.defaultBlock]}},{key:\"getToolSettings\",value:function(t){var e=this.toolsSettings[t],n=e[this.USER_SETTINGS.CONFIG]||{};return t!==this.config.defaultBlock||n.placeholder||(n.placeholder=this.config.placeholder,e[this.USER_SETTINGS.CONFIG]=n),e}},{key:\"isReadOnlySupported\",value:function(t){return!0===t[this.INTERNAL_SETTINGS.IS_READ_ONLY_SUPPORTED]}},{key:\"destroy\",value:function(){Object.values(this.available).forEach(function(){var t=(0,r.default)(o.default.mark((function t(e){return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!d.isFunction(e.reset)){t.next=3;break}return t.next=3,e.reset();case 3:case\"end\":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}())}},{key:\"getListOfPrepareFunctions\",value:function(){var t=[];for(var e in this.toolsClasses)if(Object.prototype.hasOwnProperty.call(this.toolsClasses,e)){var n=this.toolsClasses[e],o=this.toolsSettings[e][this.USER_SETTINGS.CONFIG];t.push({function:d.isFunction(n.prepare)?n.prepare:function(){},data:{toolName:e,config:o}})}return t}},{key:\"validateTools\",value:function(){for(var t in this.config.tools)if(Object.prototype.hasOwnProperty.call(this.config.tools,t)){if(t in this.internalTools)return;var e=this.config.tools[t];if(!d.isFunction(e)&&!d.isFunction(e.class))throw Error(\"Tool «\".concat(t,\"» must be a constructor function or an object with function in the «class» property\"))}}},{key:\"available\",get:function(){return this.toolsAvailable}},{key:\"unavailable\",get:function(){return this.toolsUnavailable}},{key:\"inline\",get:function(){var t=this;if(this._inlineTools)return this._inlineTools;var n=Object.entries(this.available).filter((function(n){var o=(0,e.default)(n,2),r=o[0],i=o[1];if(!i[t.INTERNAL_SETTINGS.IS_INLINE])return!1;var a=[\"render\",\"surround\",\"checkState\"].filter((function(e){return!t.constructInline(i,r)[e]}));return!a.length||(d.log(\"Incorrect Inline Tool: \".concat(i.name,\". Some of required methods is not implemented %o\"),\"warn\",a),!1)})),o={};return n.forEach((function(t){var n=(0,e.default)(t,2),r=n[0],i=n[1];o[r]=i})),this._inlineTools=o,this._inlineTools}},{key:\"blockTools\",get:function(){var t=this,n=Object.entries(this.available).filter((function(n){return!(0,e.default)(n,2)[1][t.INTERNAL_SETTINGS.IS_INLINE]})),o={};return n.forEach((function(t){var n=(0,e.default)(t,2),r=n[0],i=n[1];o[r]=i})),o}},{key:\"INTERNAL_SETTINGS\",get:function(){return{IS_ENABLED_LINE_BREAKS:\"enableLineBreaks\",IS_INLINE:\"isInline\",TITLE:\"title\",SHORTCUT:\"shortcut\",TOOLBOX:\"toolbox\",SANITIZE_CONFIG:\"sanitize\",CONVERSION_CONFIG:\"conversionConfig\",IS_READ_ONLY_SUPPORTED:\"isReadOnlySupported\"}}},{key:\"USER_SETTINGS\",get:function(){return{SHORTCUT:\"shortcut\",TOOLBOX:\"toolbox\",ENABLED_INLINE_TOOLS:\"inlineToolbar\",CONFIG:\"config\"}}},{key:\"internalTools\",get:function(){return{bold:{class:p.default},italic:{class:h.default},link:{class:v.default},paragraph:{class:u.default,inlineToolbar:!0},stub:{class:g.default}}}}]),y}(f.default);t.default=x,x.displayName=\"Tools\",t.ToolType=k,function(t){t[t.Block=0]=\"Block\",t[t.Inline=1]=\"Inline\",t[t.Tune=2]=\"Tune\"}(k||(t.ToolType=k={}))})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o=n(17),r=n(9),i=r[\"__core-js_shared__\"]||(r[\"__core-js_shared__\"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})(\"versions\",[]).push({version:o.version,mode:n(44)?\"pure\":\"global\",copyright:\"© 2019 Denis Pushkarev (zloirock.ru)\"})},function(t,e,n){var o=n(28),r=n(16),i=n(46);t.exports=function(t){return function(e,n,a){var s,c=o(e),l=r(c.length),u=i(a,l);if(t&&n!=n){for(;l>u;)if((s=c[u++])!=s)return!0}else for(;l>u;u++)if((t||u in c)&&c[u]===n)return t||u||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var o=n(36);t.exports=Array.isArray||function(t){return\"Array\"==o(t)}},function(t,e,n){var o=n(14)(\"iterator\"),r=!1;try{var i=[7][o]();i.return=function(){r=!0},Array.from(i,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!r)return!1;var n=!1;try{var i=[7],a=i[o]();a.next=function(){return{done:n=!0}},i[o]=function(){return a},t(i)}catch(t){}return n}},function(t,e,n){\"use strict\";var o=n(11);t.exports=function(){var t=o(this),e=\"\";return t.global&&(e+=\"g\"),t.ignoreCase&&(e+=\"i\"),t.multiline&&(e+=\"m\"),t.unicode&&(e+=\"u\"),t.sticky&&(e+=\"y\"),e}},function(t,e,n){\"use strict\";var o=n(64),r=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if(\"function\"==typeof n){var i=n.call(t,e);if(\"object\"!=typeof i)throw new TypeError(\"RegExp exec method returned something other than an Object or null\");return i}if(\"RegExp\"!==o(t))throw new TypeError(\"RegExp#exec called on incompatible receiver\");return r.call(t,e)}},function(t,e,n){\"use strict\";n(129);var o=n(23),r=n(27),i=n(10),a=n(37),s=n(14),c=n(103),l=s(\"species\"),u=!i((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:\"7\"},t},\"7\"!==\"\".replace(t,\"$<a>\")})),f=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n=\"ab\".split(t);return 2===n.length&&\"a\"===n[0]&&\"b\"===n[1]}();t.exports=function(t,e,n){var d=s(t),p=!i((function(){var e={};return e[d]=function(){return 7},7!=\"\"[t](e)})),h=p?!i((function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},\"split\"===t&&(n.constructor={},n.constructor[l]=function(){return n}),n[d](\"\"),!e})):void 0;if(!p||!h||\"replace\"===t&&!u||\"split\"===t&&!f){var v=/./[d],g=n(a,d,\"\"[t],(function(t,e,n,o,r){return e.exec===c?p&&!r?{done:!0,value:v.call(e,n,o)}:{done:!0,value:t.call(n,e,o)}:{done:!1}})),y=g[0],b=g[1];o(String.prototype,t,y),r(RegExp.prototype,d,2==e?function(t,e){return b.call(t,this,e)}:function(t){return b.call(t,this)})}}},function(t,e,n){var o=n(30),r=n(124),i=n(98),a=n(11),s=n(16),c=n(100),l={},u={};(e=t.exports=function(t,e,n,f,d){var p,h,v,g,y=d?function(){return t}:c(t),b=o(n,f,e?2:1),m=0;if(\"function\"!=typeof y)throw TypeError(t+\" is not iterable!\");if(i(y)){for(p=s(t.length);p>m;m++)if((g=e?b(a(h=t[m])[0],h[1]):b(t[m]))===l||g===u)return g}else for(v=y.call(t);!(h=v.next()).done;)if((g=r(v,b,h.value,e))===l||g===u)return g}).BREAK=l,e.RETURN=u},function(t,e,n){var o=n(9).navigator;t.exports=o&&o.userAgent||\"\"},function(t,e,n){\"use strict\";var o=n(9),r=n(0),i=n(23),a=n(57),s=n(41),c=n(75),l=n(56),u=n(12),f=n(10),d=n(71),p=n(52),h=n(89);t.exports=function(t,e,n,v,g,y){var b=o[t],m=b,k=g?\"set\":\"add\",x=m&&m.prototype,S={},w=function(t){var e=x[t];i(x,t,\"delete\"==t||\"has\"==t?function(t){return!(y&&!u(t))&&e.call(this,0===t?0:t)}:\"get\"==t?function(t){return y&&!u(t)?void 0:e.call(this,0===t?0:t)}:\"add\"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if(\"function\"==typeof m&&(y||x.forEach&&!f((function(){(new m).entries().next()})))){var T=new m,E=T[k](y?{}:-0,1)!=T,C=f((function(){T.has(1)})),B=d((function(t){new m(t)})),_=!y&&f((function(){for(var t=new m,e=5;e--;)t[k](e,e);return!t.has(-0)}));B||((m=e((function(e,n){l(e,m,t);var o=h(new b,e,m);return null!=n&&c(n,g,o[k],o),o}))).prototype=x,x.constructor=m),(C||_)&&(w(\"delete\"),w(\"has\"),g&&w(\"get\")),(_||E)&&w(k),y&&x.clear&&delete x.clear}else m=v.getConstructor(e,t,g,k),a(m.prototype,n),s.NEED=!0;return p(m,t),S[t]=m,r(r.G+r.W+r.F*(m!=b),S),y||v.setStrong(m,t,g),m}},function(t,e,n){for(var o,r=n(9),i=n(27),a=n(43),s=a(\"typed_array\"),c=a(\"view\"),l=!(!r.ArrayBuffer||!r.DataView),u=l,f=0,d=\"Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array\".split(\",\");f<9;)(o=r[d[f++]])?(i(o.prototype,s,!0),i(o.prototype,c,!0)):u=!1;t.exports={ABV:l,CONSTR:u,TYPED:s,VIEW:c}},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7),n(66)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u){\"use strict\";var f=n(1);function d(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=f(r),i=f(i),a=f(a),s=f(s),c=f(c);var p=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(d()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"getMethodsForTool\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u.ToolType.Block;return Object.assign(this.methods,{i18n:this.Editor.I18nAPI.getMethodsForTool(t,e)})}},{key:\"methods\",get:function(){return{blocks:this.Editor.BlocksAPI.methods,caret:this.Editor.CaretAPI.methods,events:this.Editor.EventsAPI.methods,listeners:this.Editor.ListenersAPI.methods,notifier:this.Editor.NotifierAPI.methods,sanitizer:this.Editor.SanitizerAPI.methods,saver:this.Editor.SaverAPI.methods,selection:this.Editor.SelectionAPI.methods,styles:this.Editor.StylesAPI.classes,toolbar:this.Editor.ToolbarAPI.methods,inlineToolbar:this.Editor.InlineToolbarAPI.methods,tooltip:this.Editor.TooltipAPI.methods,i18n:this.Editor.I18nAPI.methods,readOnly:this.Editor.ReadOnlyAPI.methods}}}]),o}((l=f(l)).default);o.default=p,p.displayName=\"API\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7),n(15),n(8),n(59),n(81)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p){\"use strict\";var h=n(13),v=n(1);function g(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=v(r),i=v(i),a=v(a),s=v(s),c=v(c),l=v(l),u=v(u),f=h(f),d=v(d);var y=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(g()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"toggleReadOnly\",value:function(t){t?(this.destroy(),this.Editor.Toolbox.destroy(),this.Editor.BlockSettings.destroy(),this.disableModuleBindings()):(this.drawUI(),this.enableModuleBindings())}},{key:\"move\",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];t&&(this.Editor.Toolbox.close(),this.Editor.BlockSettings.close());var e=this.Editor.BlockManager.currentBlock.holder;if(e){var n=this.Editor.UI.isMobile,o=e.offsetHeight,r=e.offsetTop;if(n)r+=o;else{var i=Math.floor(o/2);this.nodes.plusButton.style.transform=\"translate3d(0, calc(\".concat(i,\"px - 50%), 0)\"),this.Editor.Toolbox.nodes.toolbox.style.transform=\"translate3d(0, calc(\".concat(i,\"px - 50%), 0)\")}this.nodes.wrapper.style.transform=\"translate3D(0, \".concat(Math.floor(r),\"px, 0)\")}}},{key:\"open\",value:function(){var t=this,e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];f.delay((function(){t.move(n),t.nodes.wrapper.classList.add(t.CSS.toolbarOpened),e?t.blockActions.show():t.blockActions.hide()}),50)()}},{key:\"close\",value:function(){this.nodes.wrapper.classList.remove(this.CSS.toolbarOpened),this.blockActions.hide(),this.Editor.Toolbox.close(),this.Editor.BlockSettings.close()}},{key:\"make\",value:function(){var t=this;this.nodes.wrapper=u.default.make(\"div\",this.CSS.toolbar),[\"content\",\"actions\"].forEach((function(e){t.nodes[e]=u.default.make(\"div\",t.CSS[e])})),u.default.append(this.nodes.wrapper,this.nodes.content),u.default.append(this.nodes.content,this.nodes.actions),this.nodes.plusButton=u.default.make(\"div\",this.CSS.plusButton),u.default.append(this.nodes.plusButton,u.default.svg(\"plus\",14,14)),u.default.append(this.nodes.content,this.nodes.plusButton),this.readOnlyMutableListeners.on(this.nodes.plusButton,\"click\",(function(){t.plusButtonClicked()}),!1);var e=u.default.make(\"div\");e.appendChild(document.createTextNode(d.default.ui(p.I18nInternalNS.ui.toolbar.toolbox,\"Add\"))),e.appendChild(u.default.make(\"div\",this.CSS.plusButtonShortcut,{textContent:\"⇥ Tab\"})),this.Editor.Tooltip.onHover(this.nodes.plusButton,e),this.nodes.blockActionsButtons=u.default.make(\"div\",this.CSS.blockActionsButtons),this.nodes.settingsToggler=u.default.make(\"span\",this.CSS.settingsToggler);var n=u.default.svg(\"dots\",8,8);u.default.append(this.nodes.settingsToggler,n),u.default.append(this.nodes.blockActionsButtons,this.nodes.settingsToggler),u.default.append(this.nodes.actions,this.nodes.blockActionsButtons),this.Editor.Tooltip.onHover(this.nodes.settingsToggler,d.default.ui(p.I18nInternalNS.ui.blockTunes.toggler,\"Click to tune\"),{placement:\"top\"}),u.default.append(this.nodes.content,this.Editor.Toolbox.nodes.toolbox),u.default.append(this.nodes.actions,this.Editor.BlockSettings.nodes.wrapper),u.default.append(this.Editor.UI.nodes.wrapper,this.nodes.wrapper)}},{key:\"plusButtonClicked\",value:function(){this.Editor.Toolbox.toggle()}},{key:\"enableModuleBindings\",value:function(){var t=this;this.readOnlyMutableListeners.on(this.nodes.settingsToggler,\"click\",(function(){t.settingsTogglerClicked()}))}},{key:\"disableModuleBindings\",value:function(){this.readOnlyMutableListeners.clearAll()}},{key:\"settingsTogglerClicked\",value:function(){this.Editor.BlockSettings.opened?this.Editor.BlockSettings.close():this.Editor.BlockSettings.open()}},{key:\"drawUI\",value:function(){this.Editor.BlockSettings.make(),this.Editor.Toolbox.make(),this.make()}},{key:\"destroy\",value:function(){this.removeAllNodes()}},{key:\"CSS\",get:function(){return{toolbar:\"ce-toolbar\",content:\"ce-toolbar__content\",actions:\"ce-toolbar__actions\",actionsOpened:\"ce-toolbar__actions--opened\",toolbarOpened:\"ce-toolbar--opened\",plusButton:\"ce-toolbar__plus\",plusButtonShortcut:\"ce-toolbar__plus-shortcut\",plusButtonHidden:\"ce-toolbar__plus--hidden\",blockActionsButtons:\"ce-toolbar__actions-buttons\",settingsToggler:\"ce-toolbar__settings-btn\"}}},{key:\"opened\",get:function(){return this.nodes.wrapper.classList.contains(this.CSS.toolbarOpened)}},{key:\"plusButton\",get:function(){var t=this;return{hide:function(){return t.nodes.plusButton.classList.add(t.CSS.plusButtonHidden)},show:function(){t.Editor.Toolbox.isEmpty||t.nodes.plusButton.classList.remove(t.CSS.plusButtonHidden)}}}},{key:\"blockActions\",get:function(){var t=this;return{hide:function(){t.nodes.actions.classList.remove(t.CSS.actionsOpened)},show:function(){t.nodes.actions.classList.add(t.CSS.actionsOpened)}}}}]),o}(l.default);o.default=y,y.displayName=\"Toolbar\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(39),n(144),n(8)],void 0===(i=\"function\"==typeof(o=function(t,e,o,r){\"use strict\";var i=n(1);Object.defineProperty(t,\"__esModule\",{value:!0}),t.I18nInternalNS=void 0,e=i(e);var a=function t(n,o){var i={};return Object.entries(n).forEach((function(n){var a=(0,e.default)(n,2),s=a[0],c=a[1];if((0,r.isObject)(c)){var l=o?\"\".concat(o,\".\").concat(s):s,u=Object.values(c).every((function(t){return(0,r.isString)(t)}));i[s]=u?l:t(c,l)}else i[s]=c})),i}((o=i(o)).default);t.I18nInternalNS=a})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o=n(12),r=n(9).document,i=o(r)&&o(r.createElement);t.exports=function(t){return i?r.createElement(t):{}}},function(t,e,n){e.f=n(14)},function(t,e,n){var o=n(67)(\"keys\"),r=n(43);t.exports=function(t){return o[t]||(o[t]=r(t))}},function(t,e){t.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},function(t,e,n){var o=n(9).document;t.exports=o&&o.documentElement},function(t,e,n){var o=n(12),r=n(11),i=function(t,e){if(r(t),!o(e)&&null!==e)throw TypeError(e+\": can't set as prototype!\")};t.exports={set:Object.setPrototypeOf||(\"__proto__\"in{}?function(t,e,o){try{(o=n(30)(Function.call,n(33).f(Object.prototype,\"__proto__\").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:o(t,n),t}}({},!1):void 0),check:i}},function(t,e){t.exports=\"\\t\\n\\v\\f\\r   ᠎             　\\u2028\\u2029\\ufeff\"},function(t,e,n){var o=n(12),r=n(87).set;t.exports=function(t,e,n){var i,a=e.constructor;return a!==n&&\"function\"==typeof a&&(i=a.prototype)!==n.prototype&&o(i)&&r&&r(t,i),t}},function(t,e,n){\"use strict\";var o=n(32),r=n(37);t.exports=function(t){var e=String(r(this)),n=\"\",i=o(t);if(i<0||i==1/0)throw RangeError(\"Count can't be negative\");for(;i>0;(i>>>=1)&&(e+=e))1&i&&(n+=e);return n}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e,n){var o=n(32),r=n(37);t.exports=function(t){return function(e,n){var i,a,s=String(r(e)),c=o(n),l=s.length;return c<0||c>=l?t?\"\":void 0:(i=s.charCodeAt(c))<55296||i>56319||c+1===l||(a=s.charCodeAt(c+1))<56320||a>57343?t?s.charAt(c):i:t?s.slice(c,c+2):a-56320+(i-55296<<10)+65536}}},function(t,e,n){\"use strict\";var o=n(44),r=n(0),i=n(23),a=n(27),s=n(54),c=n(123),l=n(52),u=n(49),f=n(14)(\"iterator\"),d=!([].keys&&\"next\"in[].keys()),p=function(){return this};t.exports=function(t,e,n,h,v,g,y){c(n,e,h);var b,m,k,x=function(t){if(!d&&t in E)return E[t];switch(t){case\"keys\":case\"values\":return function(){return new n(this,t)}}return function(){return new n(this,t)}},S=e+\" Iterator\",w=\"values\"==v,T=!1,E=t.prototype,C=E[f]||E[\"@@iterator\"]||v&&E[v],B=C||x(v),_=v?w?x(\"entries\"):B:void 0,O=\"Array\"==e&&E.entries||C;if(O&&(k=u(O.call(new t)))!==Object.prototype&&k.next&&(l(k,S,!0),o||\"function\"==typeof k[f]||a(k,f,p)),w&&C&&\"values\"!==C.name&&(T=!0,B=function(){return C.call(this)}),o&&!y||!d&&!T&&E[f]||a(E,f,B),s[e]=B,s[S]=p,v)if(b={values:w?B:x(\"values\"),keys:g?B:x(\"keys\"),entries:_},y)for(m in b)m in E||i(E,m,b[m]);else r(r.P+r.F*(d||T),e,b);return b}},function(t,e,n){var o=n(96),r=n(37);t.exports=function(t,e,n){if(o(e))throw TypeError(\"String#\"+n+\" doesn't accept regex!\");return String(r(t))}},function(t,e,n){var o=n(12),r=n(36),i=n(14)(\"match\");t.exports=function(t){var e;return o(t)&&(void 0!==(e=t[i])?!!e:\"RegExp\"==r(t))}},function(t,e,n){var o=n(14)(\"match\");t.exports=function(t){var e=/./;try{\"/./\"[t](e)}catch(n){try{return e[o]=!1,!\"/./\"[t](e)}catch(t){}}return!0}},function(t,e,n){var o=n(54),r=n(14)(\"iterator\"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||i[r]===t)}},function(t,e,n){\"use strict\";var o=n(19),r=n(42);t.exports=function(t,e,n){e in t?o.f(t,e,r(0,n)):t[e]=n}},function(t,e,n){var o=n(64),r=n(14)(\"iterator\"),i=n(54);t.exports=n(17).getIteratorMethod=function(t){if(null!=t)return t[r]||t[\"@@iterator\"]||i[o(t)]}},function(t,e,n){\"use strict\";var o=n(20),r=n(46),i=n(16);t.exports=function(t){for(var e=o(this),n=i(e.length),a=arguments.length,s=r(a>1?arguments[1]:void 0,n),c=a>2?arguments[2]:void 0,l=void 0===c?n:r(c,n);l>s;)e[s++]=t;return e}},function(t,e,n){\"use strict\";var o=n(50),r=n(128),i=n(54),a=n(28);t.exports=n(94)(Array,\"Array\",(function(t,e){this._t=a(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,r(1)):r(0,\"keys\"==e?n:\"values\"==e?t[n]:[n,t[n]])}),\"values\"),i.Arguments=i.Array,o(\"keys\"),o(\"values\"),o(\"entries\")},function(t,e,n){\"use strict\";var o,r,i=n(72),a=RegExp.prototype.exec,s=String.prototype.replace,c=a,l=(o=/a/,r=/b*/g,a.call(o,\"a\"),a.call(r,\"a\"),0!==o.lastIndex||0!==r.lastIndex),u=void 0!==/()??/.exec(\"\")[1];(l||u)&&(c=function(t){var e,n,o,r,c=this;return u&&(n=new RegExp(\"^\"+c.source+\"$(?!\\\\s)\",i.call(c))),l&&(e=c.lastIndex),o=a.call(c,t),l&&o&&(c.lastIndex=c.global?o.index+o[0].length:e),u&&o&&o.length>1&&s.call(o[0],n,(function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(o[r]=void 0)})),o}),t.exports=c},function(t,e,n){\"use strict\";var o=n(93)(!0);t.exports=function(t,e,n){return e+(n?o(t,e).length:1)}},function(t,e,n){var o,r,i,a=n(30),s=n(117),c=n(86),l=n(82),u=n(9),f=u.process,d=u.setImmediate,p=u.clearImmediate,h=u.MessageChannel,v=u.Dispatch,g=0,y={},b=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},m=function(t){b.call(t.data)};d&&p||(d=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return y[++g]=function(){s(\"function\"==typeof t?t:Function(t),e)},o(g),g},p=function(t){delete y[t]},\"process\"==n(36)(f)?o=function(t){f.nextTick(a(b,t,1))}:v&&v.now?o=function(t){v.now(a(b,t,1))}:h?(i=(r=new h).port2,r.port1.onmessage=m,o=a(i.postMessage,i,1)):u.addEventListener&&\"function\"==typeof postMessage&&!u.importScripts?(o=function(t){u.postMessage(t+\"\",\"*\")},u.addEventListener(\"message\",m,!1)):o=\"onreadystatechange\"in l(\"script\")?function(t){c.appendChild(l(\"script\")).onreadystatechange=function(){c.removeChild(this),b.call(t)}}:function(t){setTimeout(a(b,t,1),0)}),t.exports={set:d,clear:p}},function(t,e,n){\"use strict\";var o=n(9),r=n(18),i=n(44),a=n(78),s=n(27),c=n(57),l=n(10),u=n(56),f=n(32),d=n(16),p=n(136),h=n(48).f,v=n(19).f,g=n(101),y=n(52),b=o.ArrayBuffer,m=o.DataView,k=o.Math,x=o.RangeError,S=o.Infinity,w=b,T=k.abs,E=k.pow,C=k.floor,B=k.log,_=k.LN2,O=r?\"_b\":\"buffer\",I=r?\"_l\":\"byteLength\",N=r?\"_o\":\"byteOffset\";function M(t,e,n){var o,r,i,a=new Array(n),s=8*n-e-1,c=(1<<s)-1,l=c>>1,u=23===e?E(2,-24)-E(2,-77):0,f=0,d=t<0||0===t&&1/t<0?1:0;for((t=T(t))!=t||t===S?(r=t!=t?1:0,o=c):(o=C(B(t)/_),t*(i=E(2,-o))<1&&(o--,i*=2),(t+=o+l>=1?u/i:u*E(2,1-l))*i>=2&&(o++,i/=2),o+l>=c?(r=0,o=c):o+l>=1?(r=(t*i-1)*E(2,e),o+=l):(r=t*E(2,l-1)*E(2,e),o=0));e>=8;a[f++]=255&r,r/=256,e-=8);for(o=o<<e|r,s+=e;s>0;a[f++]=255&o,o/=256,s-=8);return a[--f]|=128*d,a}function R(t,e,n){var o,r=8*n-e-1,i=(1<<r)-1,a=i>>1,s=r-7,c=n-1,l=t[c--],u=127&l;for(l>>=7;s>0;u=256*u+t[c],c--,s-=8);for(o=u&(1<<-s)-1,u>>=-s,s+=e;s>0;o=256*o+t[c],c--,s-=8);if(0===u)u=1-a;else{if(u===i)return o?NaN:l?-S:S;o+=E(2,e),u-=a}return(l?-1:1)*o*E(2,u-e)}function A(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function P(t){return[255&t,t>>8&255]}function D(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function j(t){return M(t,52,8)}function F(t){return M(t,23,4)}function U(t,e,n){v(t.prototype,e,{get:function(){return this[n]}})}function H(t,e,n,o){var r=p(+n);if(r+e>t[I])throw x(\"Wrong index!\");var i=t[O]._b,a=r+t[N],s=i.slice(a,a+e);return o?s:s.reverse()}function z(t,e,n,o,r,i){var a=p(+n);if(a+e>t[I])throw x(\"Wrong index!\");for(var s=t[O]._b,c=a+t[N],l=o(+r),u=0;u<e;u++)s[c+u]=l[i?u:e-u-1]}if(a.ABV){if(!l((function(){b(1)}))||!l((function(){new b(-1)}))||l((function(){return new b,new b(1.5),new b(NaN),\"ArrayBuffer\"!=b.name}))){for(var W,G=(b=function(t){return u(this,b),new w(p(t))}).prototype=w.prototype,V=h(w),X=0;V.length>X;)(W=V[X++])in b||s(b,W,w[W]);i||(G.constructor=b)}var Y=new m(new b(2)),K=m.prototype.setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||c(m.prototype,{setInt8:function(t,e){K.call(this,t,e<<24>>24)},setUint8:function(t,e){K.call(this,t,e<<24>>24)}},!0)}else b=function(t){u(this,b,\"ArrayBuffer\");var e=p(t);this._b=g.call(new Array(e),0),this[I]=e},m=function(t,e,n){u(this,m,\"DataView\"),u(t,b,\"DataView\");var o=t[I],r=f(e);if(r<0||r>o)throw x(\"Wrong offset!\");if(r+(n=void 0===n?o-r:d(n))>o)throw x(\"Wrong length!\");this[O]=t,this[N]=r,this[I]=n},r&&(U(b,\"byteLength\",\"_l\"),U(m,\"buffer\",\"_b\"),U(m,\"byteLength\",\"_l\"),U(m,\"byteOffset\",\"_o\")),c(m.prototype,{getInt8:function(t){return H(this,1,t)[0]<<24>>24},getUint8:function(t){return H(this,1,t)[0]},getInt16:function(t){var e=H(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=H(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return A(H(this,4,t,arguments[1]))},getUint32:function(t){return A(H(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return R(H(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return R(H(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){z(this,1,t,L,e)},setUint8:function(t,e){z(this,1,t,L,e)},setInt16:function(t,e){z(this,2,t,P,e,arguments[2])},setUint16:function(t,e){z(this,2,t,P,e,arguments[2])},setInt32:function(t,e){z(this,4,t,D,e,arguments[2])},setUint32:function(t,e){z(this,4,t,D,e,arguments[2])},setFloat32:function(t,e){z(this,4,t,F,e,arguments[2])},setFloat64:function(t,e){z(this,8,t,j,e,arguments[2])}});y(b,\"ArrayBuffer\"),y(m,\"DataView\"),s(m.prototype,a.VIEW,!0),e.ArrayBuffer=b,e.DataView=m},function(t,e){function n(e,o){return t.exports=n=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},n(e,o)}t.exports=n},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(58),n(2),n(3),n(384)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s){\"use strict\";var c=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=c(r),i=c(i),a=c(a),s=c(s);var l=function(){function t(){(0,i.default)(this,t),this.registeredShortcuts=new Map}return(0,a.default)(t,[{key:\"add\",value:function(t){if(this.findShortcut(t.on,t.name))throw Error(\"Shortcut \".concat(t.name,\" is already registered for \").concat(t.on,\". Please remove it before add a new handler.\"));var e=new s.default({name:t.name,on:t.on,callback:t.handler}),n=this.registeredShortcuts.get(t.on)||[];this.registeredShortcuts.set(t.on,[].concat((0,r.default)(n),[e]))}},{key:\"remove\",value:function(t,e){var n=this.findShortcut(t,e);if(n){n.remove();var o=this.registeredShortcuts.get(t);this.registeredShortcuts.set(t,o.filter((function(t){return t!==n})))}}},{key:\"findShortcut\",value:function(t,e){return(this.registeredShortcuts.get(t)||[]).find((function(t){return t.name===e}))}}]),t}();l.displayName=\"Shortcuts\";var u=new l;o.default=u,t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){t.exports=!n(18)&&!n(10)((function(){return 7!=Object.defineProperty(n(82)(\"div\"),\"a\",{get:function(){return 7}}).a}))},function(t,e,n){var o=n(9),r=n(17),i=n(44),a=n(83),s=n(19).f;t.exports=function(t){var e=r.Symbol||(r.Symbol=i?{}:o.Symbol||{});\"_\"==t.charAt(0)||t in e||s(e,t,{value:a.f(t)})}},function(t,e,n){var o=n(26),r=n(28),i=n(68)(!1),a=n(84)(\"IE_PROTO\");t.exports=function(t,e){var n,s=r(t),c=0,l=[];for(n in s)n!=a&&o(s,n)&&l.push(n);for(;e.length>c;)o(s,n=e[c++])&&(~i(l,n)||l.push(n));return l}},function(t,e,n){var o=n(19),r=n(11),i=n(45);t.exports=n(18)?Object.defineProperties:function(t,e){r(t);for(var n,a=i(e),s=a.length,c=0;s>c;)o.f(t,n=a[c++],e[n]);return t}},function(t,e,n){var o=n(28),r=n(48).f,i={}.toString,a=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&\"[object Window]\"==i.call(t)?function(t){try{return r(t)}catch(t){return a.slice()}}(t):r(o(t))}},function(t,e,n){\"use strict\";var o=n(18),r=n(45),i=n(69),a=n(63),s=n(20),c=n(62),l=Object.assign;t.exports=!l||n(10)((function(){var t={},e={},n=Symbol(),o=\"abcdefghijklmnopqrst\";return t[n]=7,o.split(\"\").forEach((function(t){e[t]=t})),7!=l({},t)[n]||Object.keys(l({},e)).join(\"\")!=o}))?function(t,e){for(var n=s(t),l=arguments.length,u=1,f=i.f,d=a.f;l>u;)for(var p,h=c(arguments[u++]),v=f?r(h).concat(f(h)):r(h),g=v.length,y=0;g>y;)p=v[y++],o&&!d.call(h,p)||(n[p]=h[p]);return n}:l},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){\"use strict\";var o=n(31),r=n(12),i=n(117),a=[].slice,s={},c=function(t,e,n){if(!(e in s)){for(var o=[],r=0;r<e;r++)o[r]=\"a[\"+r+\"]\";s[e]=Function(\"F,a\",\"return new F(\"+o.join(\",\")+\")\")}return s[e](t,n)};t.exports=Function.bind||function(t){var e=o(this),n=a.call(arguments,1),s=function(){var o=n.concat(a.call(arguments));return this instanceof s?c(e,o.length,o):i(e,o,t)};return r(e.prototype)&&(s.prototype=e.prototype),s}},function(t,e){t.exports=function(t,e,n){var o=void 0===n;switch(e.length){case 0:return o?t():t.call(n);case 1:return o?t(e[0]):t.call(n,e[0]);case 2:return o?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return o?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return o?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var o=n(9).parseInt,r=n(53).trim,i=n(88),a=/^[-+]?0[xX]/;t.exports=8!==o(i+\"08\")||22!==o(i+\"0x16\")?function(t,e){var n=r(String(t),3);return o(n,e>>>0||(a.test(n)?16:10))}:o},function(t,e,n){var o=n(9).parseFloat,r=n(53).trim;t.exports=1/o(n(88)+\"-0\")!=-1/0?function(t){var e=r(String(t),3),n=o(e);return 0===n&&\"-\"==e.charAt(0)?-0:n}:o},function(t,e,n){var o=n(36);t.exports=function(t,e){if(\"number\"!=typeof t&&\"Number\"!=o(t))throw TypeError(e);return+t}},function(t,e,n){var o=n(12),r=Math.floor;t.exports=function(t){return!o(t)&&isFinite(t)&&r(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){\"use strict\";var o=n(47),r=n(42),i=n(52),a={};n(27)(a,n(14)(\"iterator\"),(function(){return this})),t.exports=function(t,e,n){t.prototype=o(a,{next:r(1,n)}),i(t,e+\" Iterator\")}},function(t,e,n){var o=n(11);t.exports=function(t,e,n,r){try{return r?e(o(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&o(i.call(t)),e}}},function(t,e,n){var o=n(276);t.exports=function(t,e){return new(o(t))(e)}},function(t,e,n){var o=n(31),r=n(20),i=n(62),a=n(16);t.exports=function(t,e,n,s,c){o(e);var l=r(t),u=i(l),f=a(l.length),d=c?f-1:0,p=c?-1:1;if(n<2)for(;;){if(d in u){s=u[d],d+=p;break}if(d+=p,c?d<0:f<=d)throw TypeError(\"Reduce of empty array with no initial value\")}for(;c?d>=0:f>d;d+=p)d in u&&(s=e(s,u[d],d,l));return s}},function(t,e,n){\"use strict\";var o=n(20),r=n(46),i=n(16);t.exports=[].copyWithin||function(t,e){var n=o(this),a=i(n.length),s=r(t,a),c=r(e,a),l=arguments.length>2?arguments[2]:void 0,u=Math.min((void 0===l?a:r(l,a))-c,a-s),f=1;for(c<s&&s<c+u&&(f=-1,c+=u-1,s+=u-1);u-- >0;)c in n?n[s]=n[c]:delete n[s],s+=f,c+=f;return n}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){\"use strict\";var o=n(103);n(0)({target:\"RegExp\",proto:!0,forced:o!==/./.exec},{exec:o})},function(t,e,n){n(18)&&\"g\"!=/./g.flags&&n(19).f(RegExp.prototype,\"flags\",{configurable:!0,get:n(72)})},function(t,e,n){\"use strict\";var o,r,i,a,s=n(44),c=n(9),l=n(30),u=n(64),f=n(0),d=n(12),p=n(31),h=n(56),v=n(75),g=n(65),y=n(105).set,b=n(296)(),m=n(132),k=n(297),x=n(76),S=n(133),w=c.TypeError,T=c.process,E=T&&T.versions,C=E&&E.v8||\"\",B=c.Promise,_=\"process\"==u(T),O=function(){},I=r=m.f,N=!!function(){try{var t=B.resolve(1),e=(t.constructor={})[n(14)(\"species\")]=function(t){t(O,O)};return(_||\"function\"==typeof PromiseRejectionEvent)&&t.then(O)instanceof e&&0!==C.indexOf(\"6.6\")&&-1===x.indexOf(\"Chrome/66\")}catch(t){}}(),M=function(t){var e;return!(!d(t)||\"function\"!=typeof(e=t.then))&&e},R=function(t,e){if(!t._n){t._n=!0;var n=t._c;b((function(){for(var o=t._v,r=1==t._s,i=0,a=function(e){var n,i,a,s=r?e.ok:e.fail,c=e.resolve,l=e.reject,u=e.domain;try{s?(r||(2==t._h&&P(t),t._h=1),!0===s?n=o:(u&&u.enter(),n=s(o),u&&(u.exit(),a=!0)),n===e.promise?l(w(\"Promise-chain cycle\")):(i=M(n))?i.call(n,c,l):c(n)):l(o)}catch(t){u&&!a&&u.exit(),l(t)}};n.length>i;)a(n[i++]);t._c=[],t._n=!1,e&&!t._h&&A(t)}))}},A=function(t){y.call(c,(function(){var e,n,o,r=t._v,i=L(t);if(i&&(e=k((function(){_?T.emit(\"unhandledRejection\",r,t):(n=c.onunhandledrejection)?n({promise:t,reason:r}):(o=c.console)&&o.error&&o.error(\"Unhandled promise rejection\",r)})),t._h=_||L(t)?2:1),t._a=void 0,i&&e.e)throw e.v}))},L=function(t){return 1!==t._h&&0===(t._a||t._c).length},P=function(t){y.call(c,(function(){var e;_?T.emit(\"rejectionHandled\",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})}))},D=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),R(e,!0))},j=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw w(\"Promise can't be resolved itself\");(e=M(t))?b((function(){var o={_w:n,_d:!1};try{e.call(t,l(j,o,1),l(D,o,1))}catch(t){D.call(o,t)}})):(n._v=t,n._s=1,R(n,!1))}catch(t){D.call({_w:n,_d:!1},t)}}};N||(B=function(t){h(this,B,\"Promise\",\"_h\"),p(t),o.call(this);try{t(l(j,this,1),l(D,this,1))}catch(t){D.call(this,t)}},(o=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(57)(B.prototype,{then:function(t,e){var n=I(g(this,B));return n.ok=\"function\"!=typeof t||t,n.fail=\"function\"==typeof e&&e,n.domain=_?T.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&R(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new o;this.promise=t,this.resolve=l(j,t,1),this.reject=l(D,t,1)},m.f=I=function(t){return t===B||t===a?new i(t):r(t)}),f(f.G+f.W+f.F*!N,{Promise:B}),n(52)(B,\"Promise\"),n(55)(\"Promise\"),a=n(17).Promise,f(f.S+f.F*!N,\"Promise\",{reject:function(t){var e=I(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(s||!N),\"Promise\",{resolve:function(t){return S(s&&this===a?B:this,t)}}),f(f.S+f.F*!(N&&n(71)((function(t){B.all(t).catch(O)}))),\"Promise\",{all:function(t){var e=this,n=I(e),o=n.resolve,r=n.reject,i=k((function(){var n=[],i=0,a=1;v(t,!1,(function(t){var s=i++,c=!1;n.push(void 0),a++,e.resolve(t).then((function(t){c||(c=!0,n[s]=t,--a||o(n))}),r)})),--a||o(n)}));return i.e&&r(i.v),n.promise},race:function(t){var e=this,n=I(e),o=n.reject,r=k((function(){v(t,!1,(function(t){e.resolve(t).then(n.resolve,o)}))}));return r.e&&o(r.v),n.promise}})},function(t,e,n){\"use strict\";var o=n(31);function r(t){var e,n;this.promise=new t((function(t,o){if(void 0!==e||void 0!==n)throw TypeError(\"Bad Promise constructor\");e=t,n=o})),this.resolve=o(e),this.reject=o(n)}t.exports.f=function(t){return new r(t)}},function(t,e,n){var o=n(11),r=n(12),i=n(132);t.exports=function(t,e){if(o(t),r(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){\"use strict\";var o=n(19).f,r=n(47),i=n(57),a=n(30),s=n(56),c=n(75),l=n(94),u=n(128),f=n(55),d=n(18),p=n(41).fastKey,h=n(51),v=d?\"_s\":\"size\",g=function(t,e){var n,o=p(e);if(\"F\"!==o)return t._i[o];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,l){var u=t((function(t,o){s(t,u,e,\"_i\"),t._t=e,t._i=r(null),t._f=void 0,t._l=void 0,t[v]=0,null!=o&&c(o,n,t[l],t)}));return i(u.prototype,{clear:function(){for(var t=h(this,e),n=t._i,o=t._f;o;o=o.n)o.r=!0,o.p&&(o.p=o.p.n=void 0),delete n[o.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var n=h(this,e),o=g(n,t);if(o){var r=o.n,i=o.p;delete n._i[o.i],o.r=!0,i&&(i.n=r),r&&(r.p=i),n._f==o&&(n._f=r),n._l==o&&(n._l=i),n[v]--}return!!o},forEach:function(t){h(this,e);for(var n,o=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(o(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!g(h(this,e),t)}}),d&&o(u.prototype,\"size\",{get:function(){return h(this,e)[v]}}),u},def:function(t,e,n){var o,r,i=g(t,e);return i?i.v=n:(t._l=i={i:r=p(e,!0),k:e,v:n,p:o=t._l,n:void 0,r:!1},t._f||(t._f=i),o&&(o.n=i),t[v]++,\"F\"!==r&&(t._i[r]=i)),t},getEntry:g,setStrong:function(t,e,n){l(t,e,(function(t,n){this._t=h(t,e),this._k=n,this._l=void 0}),(function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?u(0,\"keys\"==t?e.k:\"values\"==t?e.v:[e.k,e.v]):(this._t=void 0,u(1))}),n?\"entries\":\"values\",!n,!0),f(e)}}},function(t,e,n){\"use strict\";var o=n(57),r=n(41).getWeak,i=n(11),a=n(12),s=n(56),c=n(75),l=n(35),u=n(26),f=n(51),d=l(5),p=l(6),h=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},y=function(t,e){return d(t.a,(function(t){return t[0]===e}))};g.prototype={get:function(t){var e=y(this,t);if(e)return e[1]},has:function(t){return!!y(this,t)},set:function(t,e){var n=y(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=p(this.a,(function(e){return e[0]===t}));return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,i){var l=t((function(t,o){s(t,l,e,\"_i\"),t._t=e,t._i=h++,t._l=void 0,null!=o&&c(o,n,t[i],t)}));return o(l.prototype,{delete:function(t){if(!a(t))return!1;var n=r(t);return!0===n?v(f(this,e)).delete(t):n&&u(n,this._i)&&delete n[this._i]},has:function(t){if(!a(t))return!1;var n=r(t);return!0===n?v(f(this,e)).has(t):n&&u(n,this._i)}}),l},def:function(t,e,n){var o=r(i(e),!0);return!0===o?v(t).set(e,n):o[t._i]=n,t},ufstore:v}},function(t,e,n){var o=n(32),r=n(16);t.exports=function(t){if(void 0===t)return 0;var e=o(t),n=r(e);if(e!==n)throw RangeError(\"Wrong length!\");return n}},function(t,e,n){var o=n(48),r=n(69),i=n(11),a=n(9).Reflect;t.exports=a&&a.ownKeys||function(t){var e=o.f(i(t)),n=r.f;return n?e.concat(n(t)):e}},function(t,e,n){var o=n(16),r=n(90),i=n(37);t.exports=function(t,e,n,a){var s=String(i(t)),c=s.length,l=void 0===n?\" \":String(n),u=o(e);if(u<=c||\"\"==l)return s;var f=u-c,d=r.call(l,Math.ceil(f/l.length));return d.length>f&&(d=d.slice(0,f)),a?d+s:s+d}},function(t,e,n){var o=n(18),r=n(45),i=n(28),a=n(63).f;t.exports=function(t){return function(e){for(var n,s=i(e),c=r(s),l=c.length,u=0,f=[];l>u;)n=c[u++],o&&!a.call(s,n)||f.push(t?[n,s[n]]:s[n]);return f}}},function(t,e,n){var o=function(t){\"use strict\";var e=Object.prototype,n=e.hasOwnProperty,o=\"function\"==typeof Symbol?Symbol:{},r=o.iterator||\"@@iterator\",i=o.asyncIterator||\"@@asyncIterator\",a=o.toStringTag||\"@@toStringTag\";function s(t,e,n,o){var r=e&&e.prototype instanceof u?e:u,i=Object.create(r.prototype),a=new S(o||[]);return i._invoke=function(t,e,n){var o=\"suspendedStart\";return function(r,i){if(\"executing\"===o)throw new Error(\"Generator is already running\");if(\"completed\"===o){if(\"throw\"===r)throw i;return T()}for(n.method=r,n.arg=i;;){var a=n.delegate;if(a){var s=m(a,n);if(s){if(s===l)continue;return s}}if(\"next\"===n.method)n.sent=n._sent=n.arg;else if(\"throw\"===n.method){if(\"suspendedStart\"===o)throw o=\"completed\",n.arg;n.dispatchException(n.arg)}else\"return\"===n.method&&n.abrupt(\"return\",n.arg);o=\"executing\";var u=c(t,e,n);if(\"normal\"===u.type){if(o=n.done?\"completed\":\"suspendedYield\",u.arg===l)continue;return{value:u.arg,done:n.done}}\"throw\"===u.type&&(o=\"completed\",n.method=\"throw\",n.arg=u.arg)}}}(t,n,a),i}function c(t,e,n){try{return{type:\"normal\",arg:t.call(e,n)}}catch(t){return{type:\"throw\",arg:t}}}t.wrap=s;var l={};function u(){}function f(){}function d(){}var p={};p[r]=function(){return this};var h=Object.getPrototypeOf,v=h&&h(h(w([])));v&&v!==e&&n.call(v,r)&&(p=v);var g=d.prototype=u.prototype=Object.create(p);function y(t){[\"next\",\"throw\",\"return\"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function b(t,e){var o;this._invoke=function(r,i){function a(){return new e((function(o,a){!function o(r,i,a,s){var l=c(t[r],t,i);if(\"throw\"!==l.type){var u=l.arg,f=u.value;return f&&\"object\"==typeof f&&n.call(f,\"__await\")?e.resolve(f.__await).then((function(t){o(\"next\",t,a,s)}),(function(t){o(\"throw\",t,a,s)})):e.resolve(f).then((function(t){u.value=t,a(u)}),(function(t){return o(\"throw\",t,a,s)}))}s(l.arg)}(r,i,o,a)}))}return o=o?o.then(a,a):a()}}function m(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,\"throw\"===e.method){if(t.iterator.return&&(e.method=\"return\",e.arg=void 0,m(t,e),\"throw\"===e.method))return l;e.method=\"throw\",e.arg=new TypeError(\"The iterator does not provide a 'throw' method\")}return l}var o=c(n,t.iterator,e.arg);if(\"throw\"===o.type)return e.method=\"throw\",e.arg=o.arg,e.delegate=null,l;var r=o.arg;return r?r.done?(e[t.resultName]=r.value,e.next=t.nextLoc,\"return\"!==e.method&&(e.method=\"next\",e.arg=void 0),e.delegate=null,l):r:(e.method=\"throw\",e.arg=new TypeError(\"iterator result is not an object\"),e.delegate=null,l)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function S(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(k,this),this.reset(!0)}function w(t){if(t){var e=t[r];if(e)return e.call(t);if(\"function\"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function e(){for(;++o<t.length;)if(n.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:T}}function T(){return{value:void 0,done:!0}}return f.prototype=g.constructor=d,d.constructor=f,d[a]=f.displayName=\"GeneratorFunction\",t.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===f||\"GeneratorFunction\"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,a in t||(t[a]=\"GeneratorFunction\")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},y(b.prototype),b.prototype[i]=function(){return this},t.AsyncIterator=b,t.async=function(e,n,o,r,i){void 0===i&&(i=Promise);var a=new b(s(e,n,o,r),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},y(g),g[a]=\"Generator\",g[r]=function(){return this},g.toString=function(){return\"[object Generator]\"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var o=e.pop();if(o in t)return n.value=o,n.done=!1,n}return n.done=!0,n}},t.values=w,S.prototype={constructor:S,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=void 0,this.tryEntries.forEach(x),!t)for(var e in this)\"t\"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(n,o){return a.type=\"throw\",a.arg=t,e.next=n,o&&(e.method=\"next\",e.arg=void 0),!!o}for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r],a=i.completion;if(\"root\"===i.tryLoc)return o(\"end\");if(i.tryLoc<=this.prev){var s=n.call(i,\"catchLoc\"),c=n.call(i,\"finallyLoc\");if(s&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(t,e){for(var o=this.tryEntries.length-1;o>=0;--o){var r=this.tryEntries[o];if(r.tryLoc<=this.prev&&n.call(r,\"finallyLoc\")&&this.prev<r.finallyLoc){var i=r;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method=\"next\",this.next=i.finallyLoc,l):this.complete(a)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),l},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),x(n),l}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var o=n.completion;if(\"throw\"===o.type){var r=o.arg;x(n)}return r}}throw new Error(\"illegal catch attempt\")},delegateYield:function(t,e,n){return this.delegate={iterator:w(t),resultName:e,nextLoc:n},\"next\"===this.method&&(this.arg=void 0),l}},t}(t.exports);try{regeneratorRuntime=o}catch(t){Function(\"r\",\"regeneratorRuntime = r\")(o)}},function(t,e,n){var o=n(142);t.exports=function(t,e){if(t){if(\"string\"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===n&&t.constructor&&(n=t.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(n):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,e):void 0}}},function(t,e){t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}},function(t,e){function n(e){return\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?t.exports=n=function(t){return typeof t}:t.exports=n=function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t},n(e)}t.exports=n},function(t){t.exports=JSON.parse('{\"ui\":{\"blockTunes\":{\"toggler\":{\"Click to tune\":\"\",\"or drag to move\":\"\"}},\"inlineToolbar\":{\"converter\":{\"Convert to\":\"\"}},\"toolbar\":{\"toolbox\":{\"Add\":\"\"}}},\"toolNames\":{\"Text\":\"\",\"Link\":\"\",\"Bold\":\"\",\"Italic\":\"\"},\"tools\":{\"link\":{\"Add a link\":\"\"},\"stub\":{\"The block can not be displayed correctly.\":\"\"}},\"blockTunes\":{\"delete\":{\"Delete\":\"\"},\"moveUp\":{\"Move up\":\"\"},\"moveDown\":{\"Move down\":\"\"}}}')},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(5),n(6),n(4),n(367)],void 0===(i=\"function\"==typeof(o=function(t,e,o,r,i,a){\"use strict\";var s=n(1);function c(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(t,\"__esModule\",{value:!0}),t.CriticalError=void 0,e=s(e),o=s(o),r=s(r),i=s(i);var l=function(t){(0,o.default)(s,t);var n,a=(n=s,function(){var t,e=(0,i.default)(n);if(c()){var o=(0,i.default)(this).constructor;t=Reflect.construct(e,arguments,o)}else t=e.apply(this,arguments);return(0,r.default)(this,t)});function s(){return(0,e.default)(this,s),a.apply(this,arguments)}return s}((0,(a=s(a)).default)(Error));t.CriticalError=l,l.displayName=\"CriticalError\"})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(8),n(147),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f){\"use strict\";var d=n(13),p=n(1);function h(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=p(r),i=p(i),a=p(a),s=p(s),c=p(c),l=d(l),u=p(u);var v=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(h()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){var t;return(0,r.default)(this,o),(t=n.apply(this,arguments)).insert=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.config.defaultBlock,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(arguments.length>2&&void 0!==arguments[2]&&arguments[2],arguments.length>3?arguments[3]:void 0),r=arguments.length>4?arguments[4]:void 0;t.Editor.BlockManager.insert({tool:e,data:n,index:o,needToFocus:r})},t}return(0,i.default)(o,[{key:\"getBlocksCount\",value:function(){return this.Editor.BlockManager.blocks.length}},{key:\"getCurrentBlockIndex\",value:function(){return this.Editor.BlockManager.currentBlockIndex}},{key:\"getBlockByIndex\",value:function(t){var e=this.Editor.BlockManager.getBlockByIndex(t);if(void 0!==e)return new u.default(e);l.logLabeled(\"There is no block at index `\"+t+\"`\",\"warn\")}},{key:\"swap\",value:function(t,e){l.log(\"`blocks.swap()` method is deprecated and will be removed in the next major release. Use `block.move()` method instead\",\"info\"),this.Editor.BlockManager.swap(t,e),this.Editor.Toolbar.move(!1)}},{key:\"move\",value:function(t,e){this.Editor.BlockManager.move(t,e),this.Editor.Toolbar.move(!1)}},{key:\"delete\",value:function(t){try{this.Editor.BlockManager.removeBlock(t)}catch(t){return void l.logLabeled(t,\"warn\")}0===this.Editor.BlockManager.blocks.length&&this.Editor.BlockManager.insert(),this.Editor.BlockManager.currentBlock&&this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock,this.Editor.Caret.positions.END),this.Editor.Toolbar.close()}},{key:\"clear\",value:function(){this.Editor.BlockManager.clear(!0),this.Editor.InlineToolbar.close()}},{key:\"render\",value:function(t){return this.Editor.BlockManager.clear(),this.Editor.Renderer.render(t.blocks)}},{key:\"renderFromHTML\",value:function(t){return this.Editor.BlockManager.clear(),this.Editor.Paste.processText(t,!0)}},{key:\"stretchBlock\",value:function(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];l.deprecationAssert(!0,\"blocks.stretchBlock()\",\"BlockAPI\");var n=this.Editor.BlockManager.getBlockByIndex(t);n&&(n.stretched=e)}},{key:\"insertNewBlock\",value:function(){l.log(\"Method blocks.insertNewBlock() is deprecated and it will be removed in the next major release. Use blocks.insert() instead.\",\"warn\"),this.insert()}},{key:\"methods\",get:function(){var t=this;return{clear:function(){return t.clear()},render:function(e){return t.render(e)},renderFromHTML:function(e){return t.renderFromHTML(e)},delete:function(e){return t.delete(e)},swap:function(e,n){return t.swap(e,n)},move:function(e,n){return t.move(e,n)},getBlockByIndex:function(e){return t.getBlockByIndex(e)},getCurrentBlockIndex:function(){return t.getCurrentBlockIndex()},getBlocksCount:function(){return t.getBlocksCount()},stretchBlock:function(e){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return t.stretchBlock(e,n)},insertNewBlock:function(){return t.insertNewBlock()},insert:this.insert}}}]),o}((f=p(f)).default);o.default=v,v.displayName=\"BlocksAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e],void 0===(i=\"function\"==typeof(o=function(n){\"use strict\";Object.defineProperty(n,\"__esModule\",{value:!0}),n.default=void 0;var o=function(t){var e={get name(){return t.name},get config(){return t.config},get holder(){return t.holder},get isEmpty(){return t.isEmpty},get selected(){return t.selected},set stretched(e){t.stretched=e},get stretched(){return t.stretched},call:function(e,n){return t.call(e,n)},save:function(){return t.save()},validate:function(e){return t.validate(e)}};Object.setPrototypeOf(this,e)};n.default=o,t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l){\"use strict\";var u=n(1);function f(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=u(s),c=u(c);var d=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(f()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){var t;return(0,r.default)(this,o),(t=n.apply(this,arguments)).setToFirstBlock=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.Editor.Caret.positions.DEFAULT,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return!!t.Editor.BlockManager.firstBlock&&(t.Editor.Caret.setToBlock(t.Editor.BlockManager.firstBlock,e,n),!0)},t.setToLastBlock=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.Editor.Caret.positions.DEFAULT,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return!!t.Editor.BlockManager.lastBlock&&(t.Editor.Caret.setToBlock(t.Editor.BlockManager.lastBlock,e,n),!0)},t.setToPreviousBlock=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.Editor.Caret.positions.DEFAULT,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return!!t.Editor.BlockManager.previousBlock&&(t.Editor.Caret.setToBlock(t.Editor.BlockManager.previousBlock,e,n),!0)},t.setToNextBlock=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.Editor.Caret.positions.DEFAULT,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return!!t.Editor.BlockManager.nextBlock&&(t.Editor.Caret.setToBlock(t.Editor.BlockManager.nextBlock,e,n),!0)},t.setToBlock=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.Editor.Caret.positions.DEFAULT,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return!!t.Editor.BlockManager.blocks[e]&&(t.Editor.Caret.setToBlock(t.Editor.BlockManager.blocks[e],n,o),!0)},t.focus=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?t.setToLastBlock(t.Editor.Caret.positions.END):t.setToFirstBlock(t.Editor.Caret.positions.START)},t}return(0,i.default)(o,[{key:\"methods\",get:function(){return{setToFirstBlock:this.setToFirstBlock,setToLastBlock:this.setToLastBlock,setToPreviousBlock:this.setToPreviousBlock,setToNextBlock:this.setToNextBlock,setToBlock:this.setToBlock,focus:this.focus}}}]),o}((l=u(l)).default);o.default=d,d.displayName=\"CaretAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l){\"use strict\";var u=n(1);function f(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=u(s),c=u(c);var d=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(f()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"on\",value:function(t,e){this.eventsDispatcher.on(t,e)}},{key:\"emit\",value:function(t,e){this.eventsDispatcher.emit(t,e)}},{key:\"off\",value:function(t,e){this.eventsDispatcher.off(t,e)}},{key:\"methods\",get:function(){var t=this;return{emit:function(e,n){return t.emit(e,n)},off:function(e,n){return t.off(e,n)},on:function(e,n){return t.on(e,n)}}}}]),o}((l=u(l)).default);o.default=d,d.displayName=\"EventsAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(59),n(66),n(8),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d){\"use strict\";var p=n(1);function h(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=p(r),i=p(i),a=p(a),s=p(s),c=p(c),l=p(l);var v=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(h()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"getMethodsForTool\",value:function(t,e){return Object.assign(this.methods,{t:function(n){return l.default.t(o.getNamespace(t,e),n)}})}},{key:\"methods\",get:function(){return{t:function(){(0,f.logLabeled)(\"I18n.t() method can be accessed only from Tools\",\"warn\")}}}}],[{key:\"getNamespace\",value:function(t,e){switch(e){case u.ToolType.Block:case u.ToolType.Inline:return\"tools.\".concat(t);case u.ToolType.Tune:return\"blockTunes.\".concat(t)}}}]),o}((d=p(d)).default);o.default=v,v.displayName=\"I18nAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l){\"use strict\";var u=n(1);function f(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=u(s),c=u(c);var d=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(f()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"open\",value:function(){this.Editor.InlineToolbar.tryToShow()}},{key:\"close\",value:function(){this.Editor.InlineToolbar.close()}},{key:\"methods\",get:function(){var t=this;return{close:function(){return t.close()},open:function(){return t.open()}}}}]),o}((l=u(l)).default);o.default=d,d.displayName=\"InlineToolbarAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l){\"use strict\";var u=n(1);function f(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=u(s),c=u(c);var d=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(f()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"on\",value:function(t,e,n,o){this.listeners.on(t,e,n,o)}},{key:\"off\",value:function(t,e,n,o){this.listeners.off(t,e,n,o)}},{key:\"methods\",get:function(){var t=this;return{on:function(e,n,o,r){return t.on(e,n,o,r)},off:function(e,n,o,r){return t.off(e,n,o,r)}}}}]),o}((l=u(l)).default);o.default=d,d.displayName=\"ListenersAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l){\"use strict\";var u=n(1);function f(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=u(s),c=u(c);var d=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(f()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"show\",value:function(t){return this.Editor.Notifier.show(t)}},{key:\"methods\",get:function(){var t=this;return{show:function(e){return t.show(e)}}}}]),o}((l=u(l)).default);o.default=d,d.displayName=\"NotifierAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l){\"use strict\";var u=n(1);function f(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=u(s),c=u(c);var d=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(f()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"toggle\",value:function(t){return this.Editor.ReadOnly.toggle(t)}},{key:\"methods\",get:function(){var t=this;return{toggle:function(e){return t.toggle(e)}}}}]),o}((l=u(l)).default);o.default=d,d.displayName=\"ReadOnlyAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l){\"use strict\";var u=n(1);function f(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=u(s),c=u(c);var d=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(f()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"clean\",value:function(t,e){return this.Editor.Sanitizer.clean(t,e)}},{key:\"methods\",get:function(){var t=this;return{clean:function(e,n){return t.clean(e,n)}}}}]),o}((l=u(l)).default);o.default=d,d.displayName=\"SanitizerAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(8),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u){\"use strict\";var f=n(13),d=n(1);function p(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=d(r),i=d(i),a=d(a),s=d(s),c=d(c),l=f(l);var h=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(p()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"save\",value:function(){var t=\"Editor's content can not be saved in read-only mode\";return this.Editor.ReadOnly.isEnabled?(l.logLabeled(t,\"warn\"),Promise.reject(new Error(t))):this.Editor.Saver.save()}},{key:\"methods\",get:function(){var t=this;return{save:function(){return t.save()}}}}]),o}((u=d(u)).default);o.default=h,h.displayName=\"SaverAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(25),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u){\"use strict\";var f=n(1);function d(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=f(r),i=f(i),a=f(a),s=f(s),c=f(c),l=f(l);var p=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(d()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"findParentTag\",value:function(t,e){return(new l.default).findParentTag(t,e)}},{key:\"expandToTag\",value:function(t){(new l.default).expandToTag(t)}},{key:\"methods\",get:function(){var t=this;return{findParentTag:function(e,n){return t.findParentTag(e,n)},expandToTag:function(e){return t.expandToTag(e)}}}}]),o}((u=f(u)).default);o.default=p,p.displayName=\"SelectionAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l){\"use strict\";var u=n(1);function f(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=u(s),c=u(c);var d=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(f()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"classes\",get:function(){return{block:\"cdx-block\",inlineToolButton:\"ce-inline-tool\",inlineToolButtonActive:\"ce-inline-tool--active\",input:\"cdx-input\",loader:\"cdx-loader\",button:\"cdx-button\",settingsButton:\"cdx-settings-button\",settingsButtonActive:\"cdx-settings-button--active\"}}}]),o}((l=u(l)).default);o.default=d,d.displayName=\"StylesAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u){\"use strict\";var f=n(13),d=n(1);function p(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=d(r),i=d(i),a=d(a),s=d(s),c=d(c),l=d(l),u=f(u);var h=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(p()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"open\",value:function(){this.Editor.Toolbar.open()}},{key:\"close\",value:function(){this.Editor.Toolbar.close()}},{key:\"toggleBlockSettings\",value:function(t){if(-1!==this.Editor.BlockManager.currentBlockIndex){var e=null!=t?t:!this.Editor.BlockSettings.opened;t!==this.Editor.BlockSettings.opened&&(e?(this.Editor.Toolbar.opened||(this.Editor.Toolbar.open(!0,!1),this.Editor.Toolbar.plusButton.hide()),this.Editor.BlockSettings.open()):this.Editor.BlockSettings.close())}else u.logLabeled(\"Could't toggle the Toolbar because there is no block selected \",\"warn\")}},{key:\"methods\",get:function(){var t=this;return{close:function(){return t.close()},open:function(){return t.open()},toggleBlockSettings:function(e){return t.toggleBlockSettings(e)}}}}]),o}(l.default);o.default=h,h.displayName=\"ToolbarAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l){\"use strict\";var u=n(1);function f(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=u(s),c=u(c);var d=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(f()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"show\",value:function(t,e,n){this.Editor.Tooltip.show(t,e,n)}},{key:\"hide\",value:function(){this.Editor.Tooltip.hide()}},{key:\"onHover\",value:function(t,e,n){this.Editor.Tooltip.onHover(t,e,n)}},{key:\"methods\",get:function(){var t=this;return{show:function(e,n,o){return t.show(e,n,o)},hide:function(){return t.hide()},onHover:function(e,n,o){return t.onHover(e,n,o)}}}}]),o}((l=u(l)).default);o.default=d,d.displayName=\"TooltipAPI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(22),n(2),n(3),n(5),n(6),n(4),n(7),n(8),n(25),n(60)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p,h){\"use strict\";var v=n(13),g=n(1);function y(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=g(r),i=g(i),a=g(a),s=g(s),c=g(c),l=g(l),u=g(u),f=g(f),d=v(d),p=g(p),h=g(h);var b=function(t){(0,c.default)(f,t);var e,n,o=(e=f,function(){var t,n=(0,u.default)(e);if(y()){var o=(0,u.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,l.default)(this,t)});function f(){return(0,a.default)(this,f),o.apply(this,arguments)}return(0,s.default)(f,[{key:\"keydown\",value:function(t){switch(this.beforeKeydownProcessing(t),t.keyCode){case d.keyCodes.BACKSPACE:this.backspace(t);break;case d.keyCodes.ENTER:this.enter(t);break;case d.keyCodes.DOWN:case d.keyCodes.RIGHT:this.arrowRightAndDown(t);break;case d.keyCodes.UP:case d.keyCodes.LEFT:this.arrowLeftAndUp(t);break;case d.keyCodes.TAB:this.tabPressed(t)}}},{key:\"beforeKeydownProcessing\",value:function(t){this.needToolbarClosing(t)&&d.isPrintableKey(t.keyCode)&&(this.Editor.Toolbar.close(),this.Editor.ConversionToolbar.close(),t.ctrlKey||t.metaKey||t.altKey||t.shiftKey||(this.Editor.BlockManager.clearFocused(),this.Editor.BlockSelection.clearSelection(t)))}},{key:\"keyup\",value:function(t){t.shiftKey||this.Editor.UI.checkEmptiness()}},{key:\"tabPressed\",value:function(t){this.Editor.BlockSelection.clearSelection(t);var e=this.Editor,n=e.BlockManager,o=e.Tools,r=e.InlineToolbar,i=e.ConversionToolbar,a=n.currentBlock;if(a){var s=o.isDefault(a.tool)&&a.isEmpty,c=!a.isEmpty&&i.opened,l=!a.isEmpty&&!p.default.isCollapsed&&r.opened;s?this.activateToolbox():c||l||this.activateBlockSettings()}}},{key:\"dragOver\",value:function(t){this.Editor.BlockManager.getBlockByChildNode(t.target).dropTarget=!0}},{key:\"dragLeave\",value:function(t){this.Editor.BlockManager.getBlockByChildNode(t.target).dropTarget=!1}},{key:\"handleCommandC\",value:function(t){var e=this.Editor.BlockSelection;if(e.anyBlockSelected)return e.copySelectedBlocks(t)}},{key:\"handleCommandX\",value:(n=(0,i.default)(r.default.mark((function t(e){var n,o,i,a,s;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=this.Editor,o=n.BlockSelection,i=n.BlockManager,a=n.Caret,o.anyBlockSelected){t.next=3;break}return t.abrupt(\"return\");case 3:return t.next=5,o.copySelectedBlocks(e);case 5:s=i.removeSelectedBlocks(),a.setToBlock(i.insertDefaultBlockAtIndex(s,!0),a.positions.START),o.clearSelection(e);case 8:case\"end\":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})},{key:\"enter\",value:function(t){var e=this.Editor,n=e.BlockManager,o=e.Tools,r=e.UI,i=n.currentBlock,a=o.available[i.name];if(!(a&&a[o.INTERNAL_SETTINGS.IS_ENABLED_LINE_BREAKS]||r.someToolbarOpened&&r.someFlipperButtonFocused||t.shiftKey)){var s=this.Editor.BlockManager.currentBlock;this.Editor.Caret.isAtStart&&!this.Editor.BlockManager.currentBlock.hasMedia?this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex):s=this.Editor.BlockManager.split(),this.Editor.Caret.setToBlock(s),this.Editor.Tools.isDefault(s.tool)&&s.isEmpty&&(this.Editor.Toolbar.open(!1),this.Editor.Toolbar.plusButton.show()),t.preventDefault()}}},{key:\"backspace\",value:function(t){var e=this.Editor,n=e.BlockManager,o=e.BlockSelection,r=e.Caret,i=n.currentBlock,a=this.Editor.Tools.available[i.name];if(i.selected||i.isEmpty&&i.currentInput===i.firstInput){t.preventDefault();var s=n.currentBlockIndex;return n.previousBlock&&0===n.previousBlock.inputs.length?n.removeBlock(s-1):n.removeBlock(),r.setToBlock(n.currentBlock,s?r.positions.END:r.positions.START),this.Editor.Toolbar.close(),void o.clearSelection(t)}if(!a||!a[this.Editor.Tools.INTERNAL_SETTINGS.IS_ENABLED_LINE_BREAKS]||r.isAtStart){var c=0===n.currentBlockIndex;r.isAtStart&&p.default.isCollapsed&&i.currentInput===i.firstInput&&!c&&(t.preventDefault(),this.mergeBlocks())}}},{key:\"mergeBlocks\",value:function(){var t=this.Editor,e=t.BlockManager,n=t.Caret,o=t.Toolbar,r=e.previousBlock,i=e.currentBlock;if(i.name!==r.name||!r.mergeable)return 0===r.inputs.length||r.isEmpty?(e.removeBlock(e.currentBlockIndex-1),n.setToBlock(e.currentBlock),void o.close()):void(n.navigatePrevious()&&o.close());n.createShadow(r.pluginsContent),e.mergeBlocks(r,i).then((function(){n.restoreCaret(r.pluginsContent),r.pluginsContent.normalize(),o.close()}))}},{key:\"arrowRightAndDown\",value:function(t){var e=this,n=h.default.usedKeys.includes(t.keyCode)&&(!t.shiftKey||t.keyCode===d.keyCodes.TAB);if(!this.Editor.UI.someToolbarOpened||!n){this.Editor.BlockManager.clearFocused(),this.Editor.Toolbar.close();var o=this.Editor.Caret.isAtEnd||this.Editor.BlockSelection.anyBlockSelected;t.shiftKey&&t.keyCode===d.keyCodes.DOWN&&o?this.Editor.CrossBlockSelection.toggleBlockSelectedState():((t.keyCode===d.keyCodes.DOWN||t.keyCode===d.keyCodes.RIGHT&&!this.isRtl?this.Editor.Caret.navigateNext():this.Editor.Caret.navigatePrevious())?t.preventDefault():d.delay((function(){e.Editor.BlockManager.currentBlock&&e.Editor.BlockManager.currentBlock.updateCurrentInput()}),20)(),this.Editor.BlockSelection.clearSelection(t))}}},{key:\"arrowLeftAndUp\",value:function(t){var e=this;if(this.Editor.UI.someToolbarOpened){if(h.default.usedKeys.includes(t.keyCode)&&(!t.shiftKey||t.keyCode===d.keyCodes.TAB))return;this.Editor.UI.closeAllToolbars()}this.Editor.BlockManager.clearFocused(),this.Editor.Toolbar.close();var n=this.Editor.Caret.isAtStart||this.Editor.BlockSelection.anyBlockSelected;t.shiftKey&&t.keyCode===d.keyCodes.UP&&n?this.Editor.CrossBlockSelection.toggleBlockSelectedState(!1):((t.keyCode===d.keyCodes.UP||t.keyCode===d.keyCodes.LEFT&&!this.isRtl?this.Editor.Caret.navigatePrevious():this.Editor.Caret.navigateNext())?t.preventDefault():d.delay((function(){e.Editor.BlockManager.currentBlock&&e.Editor.BlockManager.currentBlock.updateCurrentInput()}),20)(),this.Editor.BlockSelection.clearSelection(t))}},{key:\"needToolbarClosing\",value:function(t){var e=t.keyCode===d.keyCodes.ENTER&&this.Editor.Toolbox.opened,n=t.keyCode===d.keyCodes.ENTER&&this.Editor.BlockSettings.opened,o=t.keyCode===d.keyCodes.ENTER&&this.Editor.InlineToolbar.opened,r=t.keyCode===d.keyCodes.ENTER&&this.Editor.ConversionToolbar.opened,i=t.keyCode===d.keyCodes.TAB;return!(t.shiftKey||i||e||n||o||r)}},{key:\"activateToolbox\",value:function(){this.Editor.Toolbar.opened||(this.Editor.Toolbar.open(!1,!1),this.Editor.Toolbar.plusButton.show()),this.Editor.Toolbox.open()}},{key:\"activateBlockSettings\",value:function(){this.Editor.Toolbar.opened||(this.Editor.BlockManager.currentBlock.focused=!0,this.Editor.Toolbar.open(!0,!1),this.Editor.Toolbar.plusButton.hide()),this.Editor.BlockSettings.opened||this.Editor.BlockSettings.open()}}]),f}(f.default);o.default=b,b.displayName=\"BlockEvents\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(22),n(2),n(3),n(5),n(6),n(4),n(61),n(7),n(15),n(8),n(383)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p,h,v){\"use strict\";var g=n(13),y=n(1);function b(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=y(r),i=y(i),a=y(a),s=y(s),c=y(c),l=y(l),u=y(u),f=g(f),d=y(d),p=y(p),h=g(h),v=y(v);var m=function(t){(0,c.default)(g,t);var e,n,o,d=(e=g,function(){var t,n=(0,u.default)(e);if(b()){var o=(0,u.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,l.default)(this,t)});function g(){var t;return(0,a.default)(this,g),(t=d.apply(this,arguments))._currentBlockIndex=-1,t._blocks=null,t}return(0,s.default)(g,[{key:\"prepare\",value:function(){var t=this,e=new v.default(this.Editor.UI.nodes.redactor);this._blocks=new Proxy(e,{set:v.default.set,get:v.default.get}),this.listeners.on(document,\"copy\",(function(e){return t.Editor.BlockEvents.handleCommandC(e)}))}},{key:\"toggleReadOnly\",value:function(t){t?this.disableModuleBindings():this.enableModuleBindings()}},{key:\"composeBlock\",value:function(t){var e=t.tool,n=t.data,o=void 0===n?{}:n,r=this.Editor.ReadOnly.isEnabled,i=this.Editor.Tools.getToolSettings(e),a=this.Editor.Tools.available[e],s=new f.default({name:e,data:o,Tool:a,settings:i,api:this.Editor.API,readOnly:r});return r||this.bindBlockEvents(s),s}},{key:\"insert\",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.tool,n=void 0===e?this.config.defaultBlock:e,o=t.data,r=void 0===o?{}:o,i=t.index,a=t.needToFocus,s=void 0===a||a,c=t.replace,l=void 0!==c&&c,u=i;void 0===u&&(u=this.currentBlockIndex+(l?0:1));var f=this.composeBlock({tool:n,data:r});return this._blocks.insert(u,f,l),s?this.currentBlockIndex=u:u<=this.currentBlockIndex&&this.currentBlockIndex++,f}},{key:\"replace\",value:function(t){var e=t.tool,n=void 0===e?this.config.defaultBlock:e,o=t.data,r=void 0===o?{}:o;return this.insert({tool:n,data:r,index:this.currentBlockIndex,replace:!0})}},{key:\"paste\",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=this.insert({tool:t,replace:n});try{o.call(f.BlockToolAPI.ON_PASTE,e)}catch(e){h.log(\"\".concat(t,\": onPaste callback call is failed\"),\"error\",e)}return o}},{key:\"insertDefaultBlockAtIndex\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.composeBlock({tool:this.config.defaultBlock});return this._blocks[t]=n,e?this.currentBlockIndex=t:t<=this.currentBlockIndex&&this.currentBlockIndex++,n}},{key:\"insertAtEnd\",value:function(){return this.currentBlockIndex=this.blocks.length-1,this.insert()}},{key:\"mergeBlocks\",value:(o=(0,i.default)(r.default.mark((function t(e,n){var o,i;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(o=this._blocks.indexOf(n),!n.isEmpty){t.next=3;break}return t.abrupt(\"return\");case 3:return t.next=5,n.data;case 5:if(i=t.sent,h.isEmpty(i)){t.next=9;break}return t.next=9,e.mergeWith(i);case 9:this.removeBlock(o),this.currentBlockIndex=this._blocks.indexOf(e);case 11:case\"end\":return t.stop()}}),t,this)}))),function(t,e){return o.apply(this,arguments)})},{key:\"removeBlock\",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.currentBlockIndex;if(!this.validateIndex(t))throw new Error(\"Can't find a Block to remove\");this._blocks.remove(t),this.currentBlockIndex>=t&&this.currentBlockIndex--,this.blocks.length?0===t&&(this.currentBlockIndex=0):(this.currentBlockIndex=-1,this.insert())}},{key:\"removeSelectedBlocks\",value:function(){for(var t,e=this.blocks.length-1;e>=0;e--)this.blocks[e].selected&&(this.removeBlock(e),t=e);return t}},{key:\"removeAllBlocks\",value:function(){for(var t=this.blocks.length-1;t>=0;t--)this._blocks.remove(t);this.currentBlockIndex=-1,this.insert(),this.currentBlock.firstInput.focus()}},{key:\"split\",value:function(){var t=this.Editor.Caret.extractFragmentFromCaretPosition(),e=p.default.make(\"div\");e.appendChild(t);var n={text:p.default.isEmpty(e)?\"\":e.innerHTML};return this.insert({data:n})}},{key:\"getBlockByIndex\",value:function(t){return this._blocks[t]}},{key:\"getBlock\",value:function(t){p.default.isElement(t)||(t=t.parentNode);var e=this._blocks.nodes,n=t.closest(\".\".concat(f.default.CSS.wrapper)),o=e.indexOf(n);if(o>=0)return this._blocks[o]}},{key:\"highlightCurrentNode\",value:function(){this.clearFocused(),this.currentBlock.focused=!0}},{key:\"clearFocused\",value:function(){this.blocks.forEach((function(t){t.focused=!1}))}},{key:\"setCurrentBlockByChildNode\",value:function(t){p.default.isElement(t)||(t=t.parentNode);var e=t.closest(\".\".concat(f.default.CSS.wrapper));if(e){var n=e.closest(\".\".concat(this.Editor.UI.CSS.editorWrapper));if(null==n?void 0:n.isEqualNode(this.Editor.UI.nodes.wrapper))return this.currentBlockIndex=this._blocks.nodes.indexOf(e),this.currentBlock.updateCurrentInput(),this.currentBlock}}},{key:\"getBlockByChildNode\",value:function(t){p.default.isElement(t)||(t=t.parentNode);var e=t.closest(\".\".concat(f.default.CSS.wrapper));return this.blocks.find((function(t){return t.holder===e}))}},{key:\"swap\",value:function(t,e){this._blocks.swap(t,e),this.currentBlockIndex=e}},{key:\"move\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.currentBlockIndex;isNaN(t)||isNaN(e)?h.log(\"Warning during 'move' call: incorrect indices provided.\",\"warn\"):this.validateIndex(t)&&this.validateIndex(e)?(this._blocks.move(t,e),this.currentBlockIndex=t):h.log(\"Warning during 'move' call: indices cannot be lower than 0 or greater than the amount of blocks.\",\"warn\")}},{key:\"dropPointer\",value:function(){this.currentBlockIndex=-1,this.clearFocused()}},{key:\"clear\",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this._blocks.removeAll(),this.dropPointer(),t&&this.insert(),this.Editor.UI.checkEmptiness()}},{key:\"destroy\",value:(n=(0,i.default)(r.default.mark((function t(){return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Promise.all(this.blocks.map((function(t){if(h.isFunction(t.tool.destroy))return t.tool.destroy()})));case 2:case\"end\":return t.stop()}}),t,this)}))),function(){return n.apply(this,arguments)})},{key:\"bindBlockEvents\",value:function(t){var e=this.Editor.BlockEvents;this.readOnlyMutableListeners.on(t.holder,\"keydown\",(function(t){e.keydown(t)})),this.readOnlyMutableListeners.on(t.holder,\"keyup\",(function(t){e.keyup(t)})),this.readOnlyMutableListeners.on(t.holder,\"dragover\",(function(t){e.dragOver(t)})),this.readOnlyMutableListeners.on(t.holder,\"dragleave\",(function(t){e.dragLeave(t)}))}},{key:\"disableModuleBindings\",value:function(){this.readOnlyMutableListeners.clearAll()}},{key:\"enableModuleBindings\",value:function(){var t=this;this.readOnlyMutableListeners.on(document,\"cut\",(function(e){return t.Editor.BlockEvents.handleCommandX(e)})),this.blocks.forEach((function(e){t.bindBlockEvents(e)}))}},{key:\"validateIndex\",value:function(t){return!(t<0||t>=this._blocks.length)}},{key:\"currentBlockIndex\",get:function(){return this._currentBlockIndex},set:function(t){this._blocks[this._currentBlockIndex]&&this._blocks[this._currentBlockIndex].willUnselect(),this._blocks[t]&&this._blocks[t].willSelect(),this._currentBlockIndex=t}},{key:\"firstBlock\",get:function(){return this._blocks[0]}},{key:\"lastBlock\",get:function(){return this._blocks[this._blocks.length-1]}},{key:\"currentBlock\",get:function(){return this._blocks[this.currentBlockIndex]}},{key:\"nextBlock\",get:function(){return this.currentBlockIndex===this._blocks.length-1?null:this._blocks[this.currentBlockIndex+1]}},{key:\"nextContentfulBlock\",get:function(){return this.blocks.slice(this.currentBlockIndex+1).find((function(t){return!!t.inputs.length}))}},{key:\"previousContentfulBlock\",get:function(){return this.blocks.slice(0,this.currentBlockIndex).reverse().find((function(t){return!!t.inputs.length}))}},{key:\"previousBlock\",get:function(){return 0===this.currentBlockIndex?null:this._blocks[this.currentBlockIndex-1]}},{key:\"blocks\",get:function(){return this._blocks.array}},{key:\"isEditorEmpty\",get:function(){return this.blocks.every((function(t){return t.isEmpty}))}}]),g}(d.default);o.default=m,m.displayName=\"BlockManager\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(22),n(2),n(3),n(5),n(6),n(4),n(7),n(8),n(15),n(108),n(25)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p,h,v){\"use strict\";var g=n(13),y=n(1);function b(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=y(r),i=y(i),a=y(a),s=y(s),c=y(c),l=y(l),u=y(u),f=y(f),d=g(d),p=y(p),h=y(h),v=y(v);var m=function(t){(0,c.default)(f,t);var e,n,o=(e=f,function(){var t,n=(0,u.default)(e);if(b()){var o=(0,u.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,l.default)(this,t)});function f(){var t;return(0,a.default)(this,f),(t=o.apply(this,arguments)).anyBlockSelectedCache=null,t.needToSelectAll=!1,t.nativeInputSelected=!1,t.readyToBlockSelection=!1,t}return(0,s.default)(f,[{key:\"prepare\",value:function(){var t=this;this.selection=new v.default,h.default.add({name:\"CMD+A\",handler:function(e){var n=t.Editor,o=n.BlockManager;if(n.ReadOnly.isEnabled)return e.preventDefault(),void t.selectAllBlocks();o.currentBlock&&t.handleCommandA(e)},on:this.Editor.UI.nodes.redactor})}},{key:\"toggleReadOnly\",value:function(t){v.default.get().removeAllRanges(),this.allBlocksSelected=!1}},{key:\"unSelectBlockByIndex\",value:function(t){var e=this.Editor.BlockManager;(isNaN(t)?e.currentBlock:e.getBlockByIndex(t)).selected=!1,this.clearCache()}},{key:\"clearSelection\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=this.Editor,o=n.BlockManager,r=n.Caret,i=n.RectangleSelection;this.needToSelectAll=!1,this.nativeInputSelected=!1,this.readyToBlockSelection=!1;var a=t&&t instanceof KeyboardEvent,s=a&&d.isPrintableKey(t.keyCode);if(this.anyBlockSelected&&a&&s&&!v.default.isSelectionExists){var c=o.removeSelectedBlocks();o.insertDefaultBlockAtIndex(c,!0),r.setToBlock(o.currentBlock),d.delay((function(){var e=t.key;r.insertContentAtCaretPosition(e.length>1?\"\":e)}),20)()}this.Editor.CrossBlockSelection.clear(t),this.anyBlockSelected&&!i.isRectActivated()?(e&&this.selection.restore(),this.allBlocksSelected=!1):this.Editor.RectangleSelection.clearSelection()}},{key:\"copySelectedBlocks\",value:(n=(0,i.default)(r.default.mark((function t(e){var n,o,i,a,s=this;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e.preventDefault(),n=p.default.make(\"div\"),this.selectedBlocks.forEach((function(t){var e=s.Editor.Sanitizer.clean(t.holder.innerHTML,s.sanitizerConfig),o=p.default.make(\"p\");o.innerHTML=e,n.appendChild(o)})),t.next=5,Promise.all(this.selectedBlocks.map((function(t){return t.save()})));case 5:o=t.sent,i=Array.from(n.childNodes).map((function(t){return t.textContent})).join(\"\\n\\n\"),a=n.innerHTML,e.clipboardData.setData(\"text/plain\",i),e.clipboardData.setData(\"text/html\",a),e.clipboardData.setData(this.Editor.Paste.MIME_TYPE,JSON.stringify(o));case 11:case\"end\":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})},{key:\"selectBlockByIndex\",value:function(t){var e,n=this.Editor.BlockManager;n.clearFocused(),e=isNaN(t)?n.currentBlock:n.getBlockByIndex(t),this.selection.save(),v.default.get().removeAllRanges(),e.selected=!0,this.clearCache(),this.Editor.InlineToolbar.close()}},{key:\"clearCache\",value:function(){this.anyBlockSelectedCache=null}},{key:\"destroy\",value:function(){h.default.remove(this.Editor.UI.nodes.redactor,\"CMD+A\")}},{key:\"handleCommandA\",value:function(t){if(this.Editor.RectangleSelection.clearSelection(),!p.default.isNativeInput(t.target)||this.readyToBlockSelection){var e=this.Editor.BlockManager.getBlock(t.target).inputs;e.length>1&&!this.readyToBlockSelection?this.readyToBlockSelection=!0:1!==e.length||this.needToSelectAll?this.needToSelectAll?(t.preventDefault(),this.selectAllBlocks(),this.needToSelectAll=!1,this.readyToBlockSelection=!1,this.Editor.ConversionToolbar.close()):this.readyToBlockSelection&&(t.preventDefault(),this.selectBlockByIndex(),this.needToSelectAll=!0):this.needToSelectAll=!0}else this.readyToBlockSelection=!0}},{key:\"selectAllBlocks\",value:function(){this.selection.save(),v.default.get().removeAllRanges(),this.allBlocksSelected=!0,this.Editor.InlineToolbar.close()}},{key:\"sanitizerConfig\",get:function(){return{p:{},h1:{},h2:{},h3:{},h4:{},h5:{},h6:{},ol:{},ul:{},li:{},br:!0,img:{src:!0,width:!0,height:!0},a:{href:!0},b:{},i:{},u:{}}}},{key:\"allBlocksSelected\",get:function(){return this.Editor.BlockManager.blocks.every((function(t){return!0===t.selected}))},set:function(t){this.Editor.BlockManager.blocks.forEach((function(e){e.selected=t})),this.clearCache()}},{key:\"anyBlockSelected\",get:function(){var t=this.Editor.BlockManager;return null===this.anyBlockSelectedCache&&(this.anyBlockSelectedCache=t.blocks.some((function(t){return!0===t.selected}))),this.anyBlockSelectedCache}},{key:\"selectedBlocks\",get:function(){return this.Editor.BlockManager.blocks.filter((function(t){return t.selected}))}}]),f}(f.default);o.default=m,m.displayName=\"BlockSelection\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(25),n(7),n(15),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d){\"use strict\";var p=n(13),h=n(1);function v(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=h(r),i=h(i),a=h(a),s=h(s),c=h(c),l=h(l),u=h(u),f=h(f),d=p(d);var g=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(v()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"setToBlock\",value:function(t){var e,n=this,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.positions.DEFAULT,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,i=this.Editor.BlockManager;switch(o){case this.positions.START:e=t.firstInput;break;case this.positions.END:e=t.lastInput;break;default:e=t.currentInput}if(e){var a=f.default.getDeepestNode(e,o===this.positions.END),s=f.default.getContentLength(a);switch(!0){case o===this.positions.START:r=0;break;case o===this.positions.END:case r>s:r=s}d.delay((function(){n.set(a,r)}),20)(),i.setCurrentBlockByChildNode(t.holder),i.currentBlock.currentInput=e}}},{key:\"setToInput\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.positions.DEFAULT,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,o=this.Editor.BlockManager.currentBlock,r=f.default.getDeepestNode(t);switch(e){case this.positions.START:this.set(r,0);break;case this.positions.END:this.set(r,f.default.getContentLength(r));break;default:n&&this.set(r,n)}o.currentInput=t}},{key:\"set\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=l.default.setCursor(t,e),o=n.top,r=n.bottom,i=window,a=i.innerHeight;o<0&&window.scrollBy(0,o),r>a&&window.scrollBy(0,r-a)}},{key:\"setToTheLastBlock\",value:function(){var t=this.Editor.BlockManager.lastBlock;if(t)if(this.Editor.Tools.isDefault(t.tool)&&t.isEmpty)this.setToBlock(t);else{var e=this.Editor.BlockManager.insertAtEnd();this.setToBlock(e)}}},{key:\"extractFragmentFromCaretPosition\",value:function(){var t=l.default.get();if(t.rangeCount){var e=t.getRangeAt(0),n=this.Editor.BlockManager.currentBlock.currentInput;if(e.deleteContents(),n){if(f.default.isNativeInput(n)){var o=n,r=document.createDocumentFragment(),i=o.value.substring(0,o.selectionStart),a=o.value.substring(o.selectionStart);return r.textContent=a,o.value=i,r}var s=e.cloneRange();return s.selectNodeContents(n),s.setStart(e.endContainer,e.endOffset),s.extractContents()}}}},{key:\"navigateNext\",value:function(){var t=this.Editor,e=t.BlockManager,n=t.Tools,o=e.currentBlock,r=e.nextContentfulBlock,i=o.nextInput,a=this.isAtEnd,s=r;if(!s&&!i){if(n.isDefault(o.tool)||!a)return!1;s=e.insertAtEnd()}return!!a&&(i?this.setToInput(i,this.positions.START):this.setToBlock(s,this.positions.START),!0)}},{key:\"navigatePrevious\",value:function(){var t=this.Editor.BlockManager,e=t.currentBlock,n=t.previousContentfulBlock;if(!e)return!1;var o=e.previousInput;return!(!n&&!o||!this.isAtStart||(o?this.setToInput(o,this.positions.END):this.setToBlock(n,this.positions.END),0))}},{key:\"createShadow\",value:function(t){var e=document.createElement(\"span\");e.classList.add(o.CSS.shadowCaret),t.insertAdjacentElement(\"beforeend\",e)}},{key:\"restoreCaret\",value:function(t){var e=t.querySelector(\".\".concat(o.CSS.shadowCaret));e&&((new l.default).expandToTag(e),setTimeout((function(){var t=document.createRange();t.selectNode(e),t.extractContents()}),50))}},{key:\"insertContentAtCaretPosition\",value:function(t){var e=document.createDocumentFragment(),n=document.createElement(\"div\"),o=l.default.get(),r=l.default.range;n.innerHTML=t,Array.from(n.childNodes).forEach((function(t){return e.appendChild(t)})),0===e.childNodes.length&&e.appendChild(new Text(\"\"));var i=e.lastChild;r.deleteContents(),r.insertNode(e);var a=document.createRange();a.setStart(i,i.textContent.length),o.removeAllRanges(),o.addRange(a)}},{key:\"getHigherLevelSiblings\",value:function(t,e){for(var n=t,o=[];n.parentNode&&\"true\"!==n.parentNode.contentEditable;)n=n.parentNode;for(var r=\"left\"===e?\"previousSibling\":\"nextSibling\";n[r];)n=n[r],o.push(n);return o}},{key:\"positions\",get:function(){return{START:\"start\",END:\"end\",DEFAULT:\"default\"}}},{key:\"isAtStart\",get:function(){var t=l.default.get(),e=f.default.getDeepestNode(this.Editor.BlockManager.currentBlock.currentInput),n=t.focusNode;if(f.default.isNativeInput(e))return 0===e.selectionEnd;if(!t.anchorNode)return!1;var o=n.textContent.search(/\\S/);-1===o&&(o=0);var r=t.focusOffset;return n.nodeType!==Node.TEXT_NODE&&n.childNodes.length&&(n.childNodes[r]?(n=n.childNodes[r],r=0):r=(n=n.childNodes[r-1]).textContent.length),!(!f.default.isLineBreakTag(e)&&!f.default.isEmpty(e)||!this.getHigherLevelSiblings(n,\"left\").every((function(t){var e=f.default.isLineBreakTag(t),n=1===t.children.length&&f.default.isLineBreakTag(t.children[0]),o=e||n;return f.default.isEmpty(t)&&!o}))||r!==o)||(null===e||n===e&&r<=o)}},{key:\"isAtEnd\",get:function(){var t=l.default.get(),e=t.focusNode,n=f.default.getDeepestNode(this.Editor.BlockManager.currentBlock.currentInput,!0);if(f.default.isNativeInput(n))return n.selectionEnd===n.value.length;if(!t.focusNode)return!1;var o=t.focusOffset;if(e.nodeType!==Node.TEXT_NODE&&e.childNodes.length&&(e.childNodes[o-1]?o=(e=e.childNodes[o-1]).textContent.length:(e=e.childNodes[0],o=0)),f.default.isLineBreakTag(n)||f.default.isEmpty(n)){var r=this.getHigherLevelSiblings(e,\"right\");if(r.every((function(t,e){return e===r.length-1&&f.default.isLineBreakTag(t)||f.default.isEmpty(t)&&!f.default.isLineBreakTag(t)}))&&o===e.textContent.length)return!0}var i=n.textContent.replace(/\\s+$/,\"\");return e===n&&o>=i.length}}],[{key:\"CSS\",get:function(){return{shadowCaret:\"cdx-shadow-caret\"}}}]),o}(u.default);o.default=g,g.displayName=\"Caret\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(22),n(2),n(3),n(5),n(6),n(4),n(7),n(25),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p){\"use strict\";var h=n(13),v=n(1);function g(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=v(r),i=v(i),a=v(a),s=v(s),c=v(c),l=v(l),u=v(u),f=v(f),d=v(d),p=h(p);var y=function(t){(0,c.default)(f,t);var e,n,o=(e=f,function(){var t,n=(0,u.default)(e);if(g()){var o=(0,u.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,l.default)(this,t)});function f(){var t;return(0,a.default)(this,f),(t=o.apply(this,arguments)).onMouseUp=function(){t.listeners.off(document,\"mouseover\",t.onMouseOver),t.listeners.off(document,\"mouseup\",t.onMouseUp)},t.onMouseOver=function(e){var n=t.Editor,o=n.BlockManager,r=n.BlockSelection,i=o.getBlockByChildNode(e.relatedTarget)||t.lastSelectedBlock,a=o.getBlockByChildNode(e.target);if(i&&a&&a!==i){if(i===t.firstSelectedBlock)return d.default.get().removeAllRanges(),i.selected=!0,a.selected=!0,void r.clearCache();if(a===t.firstSelectedBlock)return i.selected=!1,a.selected=!1,void r.clearCache();t.Editor.InlineToolbar.close(),t.toggleBlocksSelectedState(i,a),t.lastSelectedBlock=a}},t}return(0,s.default)(f,[{key:\"prepare\",value:(n=(0,i.default)(r.default.mark((function t(){var e=this;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:this.listeners.on(document,\"mousedown\",(function(t){e.enableCrossBlockSelection(t)}));case 1:case\"end\":return t.stop()}}),t,this)}))),function(){return n.apply(this,arguments)})},{key:\"watchSelection\",value:function(t){if(t.button===p.mouseButtons.LEFT){var e=this.Editor.BlockManager;this.firstSelectedBlock=e.getBlock(t.target),this.lastSelectedBlock=this.firstSelectedBlock,this.listeners.on(document,\"mouseover\",this.onMouseOver),this.listeners.on(document,\"mouseup\",this.onMouseUp)}}},{key:\"toggleBlockSelectedState\",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],e=this.Editor,n=e.BlockManager,o=e.BlockSelection;this.lastSelectedBlock||(this.lastSelectedBlock=this.firstSelectedBlock=n.currentBlock),this.firstSelectedBlock===this.lastSelectedBlock&&(this.firstSelectedBlock.selected=!0,o.clearCache(),d.default.get().removeAllRanges());var r=n.blocks.indexOf(this.lastSelectedBlock)+(t?1:-1),i=n.blocks[r];i&&(this.lastSelectedBlock.selected!==i.selected?(i.selected=!0,o.clearCache()):(this.lastSelectedBlock.selected=!1,o.clearCache()),this.lastSelectedBlock=i,this.Editor.InlineToolbar.close(),i.holder.scrollIntoView({block:\"nearest\"}))}},{key:\"clear\",value:function(t){var e=this.Editor,n=e.BlockManager,o=e.BlockSelection,r=e.Caret,i=n.blocks.indexOf(this.firstSelectedBlock),a=n.blocks.indexOf(this.lastSelectedBlock);if(o.anyBlockSelected&&i>-1&&a>-1)if(t&&t instanceof KeyboardEvent)switch(t.keyCode){case p.keyCodes.DOWN:case p.keyCodes.RIGHT:r.setToBlock(n.blocks[Math.max(i,a)],r.positions.END);break;case p.keyCodes.UP:case p.keyCodes.LEFT:r.setToBlock(n.blocks[Math.min(i,a)],r.positions.START);break;default:r.setToBlock(n.blocks[Math.max(i,a)],r.positions.END)}else r.setToBlock(n.blocks[Math.max(i,a)],r.positions.END);this.firstSelectedBlock=this.lastSelectedBlock=null}},{key:\"enableCrossBlockSelection\",value:function(t){var e=this.Editor.UI;d.default.isCollapsed||this.Editor.BlockSelection.clearSelection(t),e.nodes.redactor.contains(t.target)?this.watchSelection(t):this.Editor.BlockSelection.clearSelection(t)}},{key:\"toggleBlocksSelectedState\",value:function(t,e){for(var n=this.Editor,o=n.BlockManager,r=n.BlockSelection,i=o.blocks.indexOf(t),a=o.blocks.indexOf(e),s=t.selected!==e.selected,c=Math.min(i,a);c<=Math.max(i,a);c++){var l=o.blocks[c];l!==this.firstSelectedBlock&&l!==(s?t:e)&&(o.blocks[c].selected=!o.blocks[c].selected,r.clearCache())}}},{key:\"isCrossBlockSelectionStarted\",get:function(){return!!this.firstSelectedBlock&&!!this.lastSelectedBlock}}]),f}(f.default);o.default=y,y.displayName=\"CrossBlockSelection\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(22),n(2),n(3),n(5),n(6),n(4),n(25),n(7)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d){\"use strict\";var p=n(1);function h(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=p(r),i=p(i),a=p(a),s=p(s),c=p(c),l=p(l),u=p(u),f=p(f);var v=function(t){(0,c.default)(d,t);var e,n,o=(e=d,function(){var t,n=(0,u.default)(e);if(h()){var o=(0,u.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,l.default)(this,t)});function d(){var t;return(0,a.default)(this,d),(t=o.apply(this,arguments)).isStartedAtEditor=!1,t}return(0,s.default)(d,[{key:\"toggleReadOnly\",value:function(t){t?this.disableModuleBindings():this.enableModuleBindings()}},{key:\"enableModuleBindings\",value:function(){var t=this,e=this.Editor.UI;this.readOnlyMutableListeners.on(e.nodes.holder,\"drop\",function(){var e=(0,i.default)(r.default.mark((function e(n){return r.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.processDrop(n);case 2:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),!0),this.readOnlyMutableListeners.on(e.nodes.holder,\"dragstart\",(function(){t.processDragStart()})),this.readOnlyMutableListeners.on(e.nodes.holder,\"dragover\",(function(e){t.processDragOver(e)}),!0)}},{key:\"disableModuleBindings\",value:function(){this.readOnlyMutableListeners.clearAll()}},{key:\"processDrop\",value:(n=(0,i.default)(r.default.mark((function t(e){var n,o,i,a,s,c;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=this.Editor,o=n.BlockManager,i=n.Caret,a=n.Paste,e.preventDefault(),o.blocks.forEach((function(t){t.dropTarget=!1})),f.default.isAtEditor&&!f.default.isCollapsed&&this.isStartedAtEditor&&document.execCommand(\"delete\"),this.isStartedAtEditor=!1,(s=o.setCurrentBlockByChildNode(e.target))?this.Editor.Caret.setToBlock(s,i.positions.END):(c=o.setCurrentBlockByChildNode(o.lastBlock.holder),this.Editor.Caret.setToBlock(c,i.positions.END)),t.next=9,a.processDataTransfer(e.dataTransfer,!0);case 9:case\"end\":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})},{key:\"processDragStart\",value:function(){f.default.isAtEditor&&!f.default.isCollapsed&&(this.isStartedAtEditor=!0),this.Editor.InlineToolbar.close()}},{key:\"processDragOver\",value:function(t){t.preventDefault()}}]),d}((d=p(d)).default);o.default=v,v.displayName=\"DragNDrop\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7),n(8),n(61)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f){\"use strict\";var d=n(13),p=n(1);function h(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=p(r),i=p(i),a=p(a),s=p(s),c=p(c),l=p(l),u=d(u),f=p(f);var v=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(h()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){var t;return(0,r.default)(this,o),(t=n.apply(this,arguments)).disabled=!1,t.mutationDebouncer=u.debounce((function(){t.updateNativeInputs(),u.isFunction(t.config.onChange)&&t.config.onChange(t.Editor.API.methods)}),o.DebounceTimer),t.nativeInputs=[],t}return(0,i.default)(o,[{key:\"destroy\",value:function(){var t=this;this.mutationDebouncer=null,this.observer&&this.observer.disconnect(),this.observer=null,this.nativeInputs.forEach((function(e){return t.listeners.off(e,\"input\",t.mutationDebouncer)})),this.mutationDebouncer=null}},{key:\"toggleReadOnly\",value:function(t){t?this.disableModule():this.enableModule()}},{key:\"disable\",value:function(){this.disabled=!0}},{key:\"enable\",value:function(){this.disabled=!1}},{key:\"setObserver\",value:function(){var t=this,e=this.Editor.UI;this.observer=new MutationObserver((function(e,n){t.mutationHandler(e,n)})),this.observer.observe(e.nodes.redactor,{childList:!0,attributes:!0,subtree:!0,characterData:!0,characterDataOldValue:!0})}},{key:\"mutationHandler\",value:function(t,e){if(!this.disabled){var n=!1;t.forEach((function(t){switch(t.type){case\"childList\":case\"characterData\":n=!0;break;case\"attributes\":t.target.classList.contains(f.default.CSS.wrapper)||(n=!0)}})),n&&this.mutationDebouncer()}}},{key:\"updateNativeInputs\",value:function(){var t=this;this.nativeInputs&&this.nativeInputs.forEach((function(e){t.listeners.off(e,\"input\")})),this.nativeInputs=Array.from(this.Editor.UI.nodes.redactor.querySelectorAll(\"textarea, input, select\")),this.nativeInputs.forEach((function(e){return t.listeners.on(e,\"input\",t.mutationDebouncer)}))}},{key:\"enableModule\",value:function(){var t=this;window.setTimeout((function(){t.setObserver(),t.updateNativeInputs(),t.enable()}),1e3)}},{key:\"disableModule\",value:function(){this.disable()}}]),o}(l.default);o.default=v,v.displayName=\"ModificationsObserver\",v.DebounceTimer=450,t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7),n(385)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u){\"use strict\";var f=n(1);function d(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=f(r),i=f(i),a=f(a),s=f(s),c=f(c),l=f(l),u=f(u);var p=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(d()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){return(0,r.default)(this,o),n.apply(this,arguments)}return(0,i.default)(o,[{key:\"show\",value:function(t){u.default.show(t)}}]),o}(l.default);o.default=p,p.displayName=\"Notifier\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(58),n(21),n(22),n(39),n(2),n(3),n(5),n(6),n(4),n(7),n(15),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p,h,v){\"use strict\";var g=n(13),y=n(1);function b(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=y(r),i=y(i),a=y(a),s=y(s),c=y(c),l=y(l),u=y(u),f=y(f),d=y(d),p=y(p),h=y(h),v=g(v);var m=function(t){(0,u.default)(w,t);var e,n,o,p,g,y,m,k,x,S=(e=w,function(){var t,n=(0,d.default)(e);if(b()){var o=(0,d.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,f.default)(this,t)});function w(){var t;return(0,c.default)(this,w),(t=S.apply(this,arguments)).MIME_TYPE=\"application/x-editor-js\",t.toolsTags={},t.tagsByTool={},t.toolsPatterns=[],t.toolsFiles={},t.exceptionList=[],t.processTool=function(e){var n=(0,s.default)(e,2),o=n[0],r=n[1];try{var i=new t.Editor.Tools.blockTools[o]({api:t.Editor.API.getMethodsForTool(o),config:{},data:{},readOnly:!1});if(!1===r.pasteConfig)return void t.exceptionList.push(o);if(!v.isFunction(i.onPaste))return;var a=r.pasteConfig||{};t.getTagsConfig(o,a),t.getFilesConfig(o,a),t.getPatternsConfig(o,a)}catch(t){v.log(\"Paste handling for «\".concat(o,\"» Tool hasn't been set up because of the error\"),\"warn\",t)}},t.handlePasteEvent=function(){var e=(0,a.default)(i.default.mark((function e(n){var o,r,a;return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=t.Editor,r=o.BlockManager,a=o.Toolbar,r.currentBlock&&(!t.isNativeBehaviour(n.target)||n.clipboardData.types.includes(\"Files\"))){e.next=3;break}return e.abrupt(\"return\");case 3:if(!r.currentBlock||!t.exceptionList.includes(r.currentBlock.name)){e.next=5;break}return e.abrupt(\"return\");case 5:n.preventDefault(),t.processDataTransfer(n.clipboardData),r.clearFocused(),a.close();case 9:case\"end\":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),t}return(0,l.default)(w,[{key:\"prepare\",value:(x=(0,a.default)(i.default.mark((function t(){return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:this.processTools();case 1:case\"end\":return t.stop()}}),t,this)}))),function(){return x.apply(this,arguments)})},{key:\"toggleReadOnly\",value:function(t){t?this.unsetCallback():this.setCallback()}},{key:\"processDataTransfer\",value:(k=(0,a.default)(i.default.mark((function t(e){var n,o,r,a,s,c,l,u,f,d=arguments;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=d.length>1&&void 0!==d[1]&&d[1],o=this.Editor.Sanitizer,!((r=e.types).includes?r.includes(\"Files\"):r.contains(\"Files\"))){t.next=8;break}return t.next=7,this.processFiles(e.files);case 7:return t.abrupt(\"return\");case 8:if(a=e.getData(this.MIME_TYPE),s=e.getData(\"text/plain\"),c=e.getData(\"text/html\"),!a){t.next=19;break}return t.prev=12,this.insertEditorJSData(JSON.parse(a)),t.abrupt(\"return\");case 17:t.prev=17,t.t0=t.catch(12);case 19:if(n&&s.trim()&&c.trim()&&(c=\"<p>\"+(c.trim()?c:s)+\"</p>\"),l=Object.keys(this.toolsTags).reduce((function(t,e){return t[e.toLowerCase()]=!0,t}),{}),u=Object.assign({},l,o.getAllInlineToolsConfig(),{br:{}}),(f=o.clean(c,u)).trim()&&f.trim()!==s&&h.default.isHTMLString(f)){t.next=28;break}return t.next=26,this.processText(s);case 26:t.next=30;break;case 28:return t.next=30,this.processText(f,!0);case 30:case\"end\":return t.stop()}}),t,this,[[12,17]])}))),function(t){return k.apply(this,arguments)})},{key:\"processText\",value:(m=(0,a.default)(i.default.mark((function t(e){var n,o,r,s,c,l,u,f,d=this,p=arguments;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=p.length>1&&void 0!==p[1]&&p[1],o=this.Editor,r=o.Caret,s=o.BlockManager,c=o.Tools,(l=n?this.processHTML(e):this.processPlain(e)).length){t.next=5;break}return t.abrupt(\"return\");case 5:if(1!==l.length){t.next=8;break}return l[0].isBlock?this.processSingleBlock(l.pop()):this.processInlinePaste(l.pop()),t.abrupt(\"return\");case 8:u=s.currentBlock&&c.isDefault(s.currentBlock.tool),f=u&&s.currentBlock.isEmpty,l.map(function(){var t=(0,a.default)(i.default.mark((function t(e,n){return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt(\"return\",d.insertBlock(e,0===n&&f));case 1:case\"end\":return t.stop()}}),t)})));return function(e,n){return t.apply(this,arguments)}}()),s.currentBlock&&r.setToBlock(s.currentBlock,r.positions.END);case 12:case\"end\":return t.stop()}}),t,this)}))),function(t){return m.apply(this,arguments)})},{key:\"setCallback\",value:function(){this.listeners.on(this.Editor.UI.nodes.holder,\"paste\",this.handlePasteEvent)}},{key:\"unsetCallback\",value:function(){this.listeners.off(this.Editor.UI.nodes.holder,\"paste\",this.handlePasteEvent)}},{key:\"processTools\",value:function(){var t=this.Editor.Tools.blockTools;Object.entries(t).forEach(this.processTool)}},{key:\"getTagsConfig\",value:function(t,e){var n=this,o=e.tags||[];o.forEach((function(e){Object.prototype.hasOwnProperty.call(n.toolsTags,e)?v.log(\"Paste handler for «\".concat(t,\"» Tool on «\").concat(e,\"» tag is skipped \")+\"because it is already used by «\".concat(n.toolsTags[e].tool,\"» Tool.\"),\"warn\"):n.toolsTags[e.toUpperCase()]={tool:t}})),this.tagsByTool[t]=o.map((function(t){return t.toUpperCase()}))}},{key:\"getFilesConfig\",value:function(t,e){var n=e.files,o=void 0===n?{}:n,r=o.extensions,i=o.mimeTypes;(r||i)&&(r&&!Array.isArray(r)&&(v.log(\"«extensions» property of the onDrop config for «\".concat(t,\"» Tool should be an array\")),r=[]),i&&!Array.isArray(i)&&(v.log(\"«mimeTypes» property of the onDrop config for «\".concat(t,\"» Tool should be an array\")),i=[]),i&&(i=i.filter((function(e){return!!v.isValidMimeType(e)||(v.log(\"MIME type value «\".concat(e,\"» for the «\").concat(t,\"» Tool is not a valid MIME type\"),\"warn\"),!1)}))),this.toolsFiles[t]={extensions:r||[],mimeTypes:i||[]})}},{key:\"getPatternsConfig\",value:function(t,e){var n=this;e.patterns&&!v.isEmpty(e.patterns)&&Object.entries(e.patterns).forEach((function(e){var o=(0,s.default)(e,2),r=o[0],i=o[1];i instanceof RegExp||v.log(\"Pattern \".concat(i,\" for «\").concat(t,\"» Tool is skipped because it should be a Regexp instance.\"),\"warn\"),n.toolsPatterns.push({key:r,pattern:i,tool:t})}))}},{key:\"isNativeBehaviour\",value:function(t){return h.default.isNativeInput(t)}},{key:\"processFiles\",value:(y=(0,a.default)(i.default.mark((function t(e){var n,o,r,a,s,c,l=this;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=this.Editor,o=n.BlockManager,r=n.Tools,t.next=3,Promise.all(Array.from(e).map((function(t){return l.processFile(t)})));case 3:a=(a=t.sent).filter((function(t){return!!t})),s=r.isDefault(o.currentBlock.tool),c=s&&o.currentBlock.isEmpty,a.forEach((function(t,e){o.paste(t.type,t.event,0===e&&c)}));case 8:case\"end\":return t.stop()}}),t,this)}))),function(t){return y.apply(this,arguments)})},{key:\"processFile\",value:(g=(0,a.default)(i.default.mark((function t(e){var n,o,r,a,c;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=v.getFileExtension(e),o=Object.entries(this.toolsFiles).find((function(t){var o=(0,s.default)(t,2),r=(o[0],o[1]),i=r.mimeTypes,a=r.extensions,c=e.type.split(\"/\"),l=(0,s.default)(c,2),u=l[0],f=l[1],d=a.find((function(t){return t.toLowerCase()===n.toLowerCase()})),p=i.find((function(t){var e=t.split(\"/\"),n=(0,s.default)(e,2),o=n[0],r=n[1];return o===u&&(r===f||\"*\"===r)}));return!!d||!!p}))){t.next=4;break}return t.abrupt(\"return\");case 4:return r=(0,s.default)(o,1),a=r[0],c=this.composePasteEvent(\"file\",{file:e}),t.abrupt(\"return\",{event:c,type:a});case 7:case\"end\":return t.stop()}}),t,this)}))),function(t){return g.apply(this,arguments)})},{key:\"processHTML\",value:function(t){var e=this,n=this.Editor,o=n.Tools,r=n.Sanitizer,i=this.config.defaultBlock,a=h.default.make(\"DIV\");return a.innerHTML=t,this.getNodes(a).map((function(t){var n,a=i,s=!1;switch(t.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:(n=h.default.make(\"div\")).appendChild(t);break;case Node.ELEMENT_NODE:n=t,s=!0,e.toolsTags[n.tagName]&&(a=e.toolsTags[n.tagName].tool)}var c=o.blockTools[a].pasteConfig.tags.reduce((function(t,e){return t[e.toLowerCase()]={},t}),{}),l=Object.assign({},c,r.getInlineToolsConfig(a));return n.innerHTML=r.clean(n.innerHTML,l),{content:n,isBlock:s,tool:a,event:e.composePasteEvent(\"tag\",{data:n})}})).filter((function(t){return!h.default.isNodeEmpty(t.content)||h.default.isSingleTag(t.content)}))}},{key:\"processPlain\",value:function(t){var e=this,n=this.config.defaultBlock;if(!t)return[];var o=n;return t.split(/\\r?\\n/).filter((function(t){return t.trim()})).map((function(t){var n=h.default.make(\"div\");n.textContent=t;var r=e.composePasteEvent(\"tag\",{data:n});return{content:n,tool:o,isBlock:!1,event:r}}))}},{key:\"processSingleBlock\",value:(p=(0,a.default)(i.default.mark((function t(e){var n,o,r,a,s;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=this.Editor,o=n.Caret,r=n.BlockManager,a=n.Tools,(s=r.currentBlock)&&e.tool===s.name&&h.default.containsOnlyInlineElements(e.content.innerHTML)){t.next=5;break}return this.insertBlock(e,s&&a.isDefault(s.tool)&&s.isEmpty),t.abrupt(\"return\");case 5:o.insertContentAtCaretPosition(e.content.innerHTML);case 6:case\"end\":return t.stop()}}),t,this)}))),function(t){return p.apply(this,arguments)})},{key:\"processInlinePaste\",value:(o=(0,a.default)(i.default.mark((function t(e){var n,o,r,a,s,c,l,u,f,d;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=this.Editor,o=n.BlockManager,r=n.Caret,a=n.Sanitizer,s=n.Tools,c=e.content,!(o.currentBlock&&s.isDefault(o.currentBlock.tool)&&c.textContent.length<w.PATTERN_PROCESSING_MAX_LENGTH)){t.next=12;break}return t.next=6,this.processPattern(c.textContent);case 6:if(!(l=t.sent)){t.next=12;break}return u=o.currentBlock&&s.isDefault(o.currentBlock.tool)&&o.currentBlock.isEmpty,f=o.paste(l.tool,l.event,u),r.setToBlock(f,r.positions.END),t.abrupt(\"return\");case 12:o.currentBlock&&o.currentBlock.currentInput?(d=a.getInlineToolsConfig(o.currentBlock.name),document.execCommand(\"insertHTML\",!1,a.clean(c.innerHTML,d))):this.insertBlock(e);case 13:case\"end\":return t.stop()}}),t,this)}))),function(t){return o.apply(this,arguments)})},{key:\"processPattern\",value:(n=(0,a.default)(i.default.mark((function t(e){var n,o;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=this.toolsPatterns.find((function(t){var n=t.pattern.exec(e);return!!n&&e===n.shift()}))){t.next=3;break}return t.abrupt(\"return\");case 3:return o=this.composePasteEvent(\"pattern\",{key:n.key,data:e}),t.abrupt(\"return\",{event:o,tool:n.tool});case 5:case\"end\":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})},{key:\"insertBlock\",value:function(t){var e,n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=this.Editor,r=o.BlockManager,i=o.Caret,a=r.currentBlock;if(n&&a&&a.isEmpty)return e=r.paste(t.tool,t.event,!0),void i.setToBlock(e,i.positions.END);e=r.paste(t.tool,t.event),i.setToBlock(e,i.positions.END)}},{key:\"insertEditorJSData\",value:function(t){var e=this.Editor,n=e.BlockManager,o=e.Caret,r=e.Sanitizer,i=e.Tools;r.sanitizeBlocks(t).forEach((function(t,e){var r=t.tool,a=t.data,s=!1;0===e&&(s=n.currentBlock&&i.isDefault(n.currentBlock.tool)&&n.currentBlock.isEmpty);var c=n.insert({tool:r,data:a,replace:s});o.setToBlock(c,o.positions.END)}))}},{key:\"processElementNode\",value:function(t,e,n){var o=Object.keys(this.toolsTags),i=t,a=(this.toolsTags[i.tagName]||{}).tool,s=void 0===a?\"\":a,c=this.tagsByTool[s]||[],l=o.includes(i.tagName),u=h.default.blockElements.includes(i.tagName.toLowerCase()),f=Array.from(i.children).some((function(t){var e=t.tagName;return o.includes(e)&&!c.includes(e)})),d=Array.from(i.children).some((function(t){var e=t.tagName;return h.default.blockElements.includes(e.toLowerCase())}));return u||l||f?l&&!f||u&&!d&&!f?[].concat((0,r.default)(e),[n,i]):void 0:(n.appendChild(i),[].concat((0,r.default)(e),[n]))}},{key:\"getNodes\",value:function(t){var e,n=this;return Array.from(t.childNodes).reduce((function t(o,i){if(h.default.isEmpty(i)&&!h.default.isSingleTag(i))return o;var a=o[o.length-1],s=new DocumentFragment;switch(a&&h.default.isFragment(a)&&(s=o.pop()),i.nodeType){case Node.ELEMENT_NODE:if(e=n.processElementNode(i,o,s))return e;break;case Node.TEXT_NODE:return s.appendChild(i),[].concat((0,r.default)(o),[s]);default:return[].concat((0,r.default)(o),[s])}return[].concat((0,r.default)(o),(0,r.default)(Array.from(i.childNodes).reduce(t,[])))}),[])}},{key:\"composePasteEvent\",value:function(t,e){return new CustomEvent(t,{detail:e})}}]),w}(p.default);o.default=m,m.displayName=\"Paste\",m.PATTERN_PROCESSING_MAX_LENGTH=450,t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(39),n(22),n(2),n(3),n(5),n(6),n(4),n(7),n(145)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p){\"use strict\";var h=n(1);function v(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=h(r),i=h(i),a=h(a),s=h(s),c=h(c),l=h(l),u=h(u),f=h(f);var g=function(t){(0,l.default)(h,t);var e,n,o,d=(e=h,function(){var t,n=(0,f.default)(e);if(v()){var o=(0,f.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,u.default)(this,t)});function h(){var t;return(0,s.default)(this,h),(t=d.apply(this,arguments)).toolsDontSupportReadOnly=[],t.readOnlyEnabled=!1,t}return(0,c.default)(h,[{key:\"prepare\",value:(o=(0,a.default)(r.default.mark((function t(){var e,n,o;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:e=this.Editor.Tools,n=e.blockTools,o=[],Object.entries(n).forEach((function(t){var n=(0,i.default)(t,2),r=n[0],a=n[1];e.isReadOnlySupported(a)||o.push(r)})),this.toolsDontSupportReadOnly=o,this.config.readOnly&&o.length>0&&this.throwCriticalError(),this.toggle(this.config.readOnly);case 7:case\"end\":return t.stop()}}),t,this)}))),function(){return o.apply(this,arguments)})},{key:\"toggle\",value:(n=(0,a.default)(r.default.mark((function t(){var e,n,o,i,a=arguments;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:(e=a.length>0&&void 0!==a[0]?a[0]:!this.readOnlyEnabled)&&this.toolsDontSupportReadOnly.length>0&&this.throwCriticalError(),n=this.readOnlyEnabled,this.readOnlyEnabled=e,t.t0=r.default.keys(this.Editor);case 5:if((t.t1=t.t0()).done){t.next=12;break}if(o=t.t1.value,this.Editor[o].toggleReadOnly){t.next=9;break}return t.abrupt(\"continue\",5);case 9:this.Editor[o].toggleReadOnly(e),t.next=5;break;case 12:if(n!==e){t.next=14;break}return t.abrupt(\"return\",this.readOnlyEnabled);case 14:return t.next=16,this.Editor.Saver.save();case 16:return i=t.sent,t.next=19,this.Editor.BlockManager.clear();case 19:return t.next=21,this.Editor.Renderer.render(i.blocks);case 21:return t.abrupt(\"return\",this.readOnlyEnabled);case 22:case\"end\":return t.stop()}}),t,this)}))),function(){return n.apply(this,arguments)})},{key:\"throwCriticalError\",value:function(){throw new p.CriticalError(\"To enable read-only mode all connected tools should support it. Tools \".concat(this.toolsDontSupportReadOnly.join(\", \"),\" don't support read-only mode.\"))}},{key:\"isEnabled\",get:function(){return this.readOnlyEnabled}}]),h}((d=h(d)).default);o.default=g,g.displayName=\"ReadOnly\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7),n(15),n(25),n(61)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d){\"use strict\";var p=n(1);function h(t){if(\"undefined\"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(t=function(t,e){if(t){if(\"string\"==typeof t)return v(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===n&&t.constructor&&(n=t.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(n):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?v(t,e):void 0}}(t))){var e=0,n=function(){};return{s:n,n:function(){return e>=t.length?{done:!0}:{done:!1,value:t[e++]}},e:function(t){throw t},f:n}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,r,i=!0,a=!1;return{s:function(){o=t[Symbol.iterator]()},n:function(){var t=o.next();return i=t.done,t},e:function(t){a=!0,r=t},f:function(){try{i||null==o.return||o.return()}finally{if(a)throw r}}}}function v(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}function g(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=p(r),i=p(i),a=p(a),s=p(s),c=p(c),l=p(l),u=p(u),f=p(f),d=p(d);var y=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(g()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){var t;return(0,r.default)(this,o),(t=n.apply(this,arguments)).isRectSelectionActivated=!1,t.SCROLL_SPEED=3,t.HEIGHT_OF_SCROLL_ZONE=40,t.BOTTOM_SCROLL_ZONE=1,t.TOP_SCROLL_ZONE=2,t.MAIN_MOUSE_BUTTON=0,t.mousedown=!1,t.isScrolling=!1,t.inScrollZone=null,t.startX=0,t.startY=0,t.mouseX=0,t.mouseY=0,t.stackOfSelected=[],t.listenerIds=[],t}return(0,i.default)(o,[{key:\"prepare\",value:function(){this.enableModuleBindings()}},{key:\"startSelection\",value:function(t,e){var n=document.elementFromPoint(t-window.pageXOffset,e-window.pageYOffset);n.closest(\".\".concat(this.Editor.Toolbar.CSS.toolbar))||(this.Editor.BlockSelection.allBlocksSelected=!1,this.clearSelection(),this.stackOfSelected=[]);var o=[\".\".concat(d.default.CSS.content),\".\".concat(this.Editor.Toolbar.CSS.toolbar),\".\".concat(this.Editor.InlineToolbar.CSS.inlineToolbar)],r=n.closest(\".\"+this.Editor.UI.CSS.editorWrapper),i=o.some((function(t){return!!n.closest(t)}));r&&!i&&(this.mousedown=!0,this.startX=t,this.startY=e)}},{key:\"endSelection\",value:function(){this.mousedown=!1,this.startX=0,this.startY=0,this.overlayRectangle.style.display=\"none\"}},{key:\"isRectActivated\",value:function(){return this.isRectSelectionActivated}},{key:\"clearSelection\",value:function(){this.isRectSelectionActivated=!1}},{key:\"enableModuleBindings\",value:function(){var t=this,e=this.genHTML().container;this.listeners.on(e,\"mousedown\",(function(e){t.processMouseDown(e)}),!1),this.listeners.on(document.body,\"mousemove\",(function(e){t.processMouseMove(e)}),!1),this.listeners.on(document.body,\"mouseleave\",(function(){t.processMouseLeave()})),this.listeners.on(window,\"scroll\",(function(e){t.processScroll(e)}),!1),this.listeners.on(document.body,\"mouseup\",(function(){t.processMouseUp()}),!1)}},{key:\"processMouseDown\",value:function(t){t.button===this.MAIN_MOUSE_BUTTON&&this.startSelection(t.pageX,t.pageY)}},{key:\"processMouseMove\",value:function(t){this.changingRectangle(t),this.scrollByZones(t.clientY)}},{key:\"processMouseLeave\",value:function(){this.clearSelection(),this.endSelection()}},{key:\"processScroll\",value:function(t){this.changingRectangle(t)}},{key:\"processMouseUp\",value:function(){this.endSelection()}},{key:\"scrollByZones\",value:function(t){this.inScrollZone=null,t<=this.HEIGHT_OF_SCROLL_ZONE&&(this.inScrollZone=this.TOP_SCROLL_ZONE),document.documentElement.clientHeight-t<=this.HEIGHT_OF_SCROLL_ZONE&&(this.inScrollZone=this.BOTTOM_SCROLL_ZONE),this.inScrollZone?this.isScrolling||(this.scrollVertical(this.inScrollZone===this.TOP_SCROLL_ZONE?-this.SCROLL_SPEED:this.SCROLL_SPEED),this.isScrolling=!0):this.isScrolling=!1}},{key:\"genHTML\",value:function(){var t=this.Editor.UI,e=t.nodes.holder.querySelector(\".\"+t.CSS.editorWrapper),n=u.default.make(\"div\",o.CSS.overlay,{}),r=u.default.make(\"div\",o.CSS.overlayContainer,{}),i=u.default.make(\"div\",o.CSS.rect,{});return r.appendChild(i),n.appendChild(r),e.appendChild(n),this.overlayRectangle=i,{container:e,overlay:n}}},{key:\"scrollVertical\",value:function(t){var e=this;if(this.inScrollZone&&this.mousedown){var n=window.pageYOffset;window.scrollBy(0,t),this.mouseY+=window.pageYOffset-n,setTimeout((function(){e.scrollVertical(t)}),0)}}},{key:\"changingRectangle\",value:function(t){if(this.mousedown){void 0!==t.pageY&&(this.mouseX=t.pageX,this.mouseY=t.pageY);var e=this.genInfoForMouseSelection(),n=e.rightPos,o=e.leftPos,r=e.index,i=this.startX>n&&this.mouseX>n,a=this.startX<o&&this.mouseX<o;this.rectCrossesBlocks=!(i||a),this.isRectSelectionActivated||(this.rectCrossesBlocks=!1,this.isRectSelectionActivated=!0,this.shrinkRectangleToPoint(),this.overlayRectangle.style.display=\"block\"),this.updateRectangleSize(),void 0!==r&&(this.trySelectNextBlock(r),this.inverseSelection(),f.default.get().removeAllRanges(),t.preventDefault())}}},{key:\"shrinkRectangleToPoint\",value:function(){this.overlayRectangle.style.left=\"\".concat(this.startX-window.pageXOffset,\"px\"),this.overlayRectangle.style.top=\"\".concat(this.startY-window.pageYOffset,\"px\"),this.overlayRectangle.style.bottom=\"calc(100% - \".concat(this.startY-window.pageYOffset,\"px\"),this.overlayRectangle.style.right=\"calc(100% - \".concat(this.startX-window.pageXOffset,\"px\")}},{key:\"inverseSelection\",value:function(){var t=this.Editor.BlockManager.getBlockByIndex(this.stackOfSelected[0]).selected;if(this.rectCrossesBlocks&&!t){var e,n=h(this.stackOfSelected);try{for(n.s();!(e=n.n()).done;){var o=e.value;this.Editor.BlockSelection.selectBlockByIndex(o)}}catch(t){n.e(t)}finally{n.f()}}if(!this.rectCrossesBlocks&&t){var r,i=h(this.stackOfSelected);try{for(i.s();!(r=i.n()).done;){var a=r.value;this.Editor.BlockSelection.unSelectBlockByIndex(a)}}catch(t){i.e(t)}finally{i.f()}}}},{key:\"updateRectangleSize\",value:function(){this.mouseY>=this.startY?(this.overlayRectangle.style.top=\"\".concat(this.startY-window.pageYOffset,\"px\"),this.overlayRectangle.style.bottom=\"calc(100% - \".concat(this.mouseY-window.pageYOffset,\"px\")):(this.overlayRectangle.style.bottom=\"calc(100% - \".concat(this.startY-window.pageYOffset,\"px\"),this.overlayRectangle.style.top=\"\".concat(this.mouseY-window.pageYOffset,\"px\")),this.mouseX>=this.startX?(this.overlayRectangle.style.left=\"\".concat(this.startX-window.pageXOffset,\"px\"),this.overlayRectangle.style.right=\"calc(100% - \".concat(this.mouseX-window.pageXOffset,\"px\")):(this.overlayRectangle.style.right=\"calc(100% - \".concat(this.startX-window.pageXOffset,\"px\"),this.overlayRectangle.style.left=\"\".concat(this.mouseX-window.pageXOffset,\"px\"))}},{key:\"genInfoForMouseSelection\",value:function(){var t,e=document.body.offsetWidth/2,n=this.mouseY-window.pageYOffset,o=document.elementFromPoint(e,n),r=this.Editor.BlockManager.getBlockByChildNode(o);void 0!==r&&(t=this.Editor.BlockManager.blocks.findIndex((function(t){return t.holder===r.holder})));var i=this.Editor.BlockManager.lastBlock.holder.querySelector(\".\"+d.default.CSS.content),a=Number.parseInt(window.getComputedStyle(i).width,10)/2;return{index:t,leftPos:e-a,rightPos:e+a}}},{key:\"addBlockInSelection\",value:function(t){this.rectCrossesBlocks&&this.Editor.BlockSelection.selectBlockByIndex(t),this.stackOfSelected.push(t)}},{key:\"trySelectNextBlock\",value:function(t){var e=this,n=this.stackOfSelected[this.stackOfSelected.length-1]===t,o=this.stackOfSelected.length;if(!n){var r=this.stackOfSelected[o-1]-this.stackOfSelected[o-2]>0,i=0;o>1&&(i=r?1:-1);var a=t>this.stackOfSelected[o-1]&&1===i,s=t<this.stackOfSelected[o-1]&&-1===i,c=!(a||s||0===i);if(c||!(t>this.stackOfSelected[o-1]||void 0===this.stackOfSelected[o-1])){if(!c&&t<this.stackOfSelected[o-1])for(var l=this.stackOfSelected[o-1]-1;l>=t;l--)this.addBlockInSelection(l);else if(c){var u,f=o-1;for(u=t>this.stackOfSelected[o-1]?function(){return t>e.stackOfSelected[f]}:function(){return t<e.stackOfSelected[f]};u();)this.rectCrossesBlocks&&this.Editor.BlockSelection.unSelectBlockByIndex(this.stackOfSelected[f]),this.stackOfSelected.pop(),f--}}else for(var d=this.stackOfSelected[o-1]+1||t;d<=t;d++)this.addBlockInSelection(d)}}}],[{key:\"CSS\",get:function(){return{overlay:\"codex-editor-overlay\",overlayContainer:\"codex-editor-overlay__container\",rect:\"codex-editor-overlay__rectangle\",topScrollZone:\"codex-editor-overlay__scroll-zone--top\",bottomScrollZone:\"codex-editor-overlay__scroll-zone--bottom\"}}}]),o}(l.default);o.default=y,y.displayName=\"RectangleSelection\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(22),n(2),n(3),n(5),n(6),n(4),n(7),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d){\"use strict\";var p=n(13),h=n(1);function v(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=h(r),i=h(i),a=h(a),s=h(s),c=h(c),l=h(l),u=h(u),f=h(f),d=p(d);var g=function(t){(0,c.default)(p,t);var e,n,o,f=(e=p,function(){var t,n=(0,u.default)(e);if(v()){var o=(0,u.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,l.default)(this,t)});function p(){return(0,a.default)(this,p),f.apply(this,arguments)}return(0,s.default)(p,[{key:\"render\",value:(o=(0,i.default)(r.default.mark((function t(e){var n,o,i=this;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.map((function(t){return{function:function(){return i.insertBlock(t)}}})),t.next=3,d.sequence(n);case 3:return o=t.sent,this.Editor.UI.checkEmptiness(),t.abrupt(\"return\",o);case 6:case\"end\":return t.stop()}}),t,this)}))),function(t){return o.apply(this,arguments)})},{key:\"insertBlock\",value:(n=(0,i.default)(r.default.mark((function t(e){var n,o,i,a,s,c,l,u;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(n=this.Editor,o=n.Tools,i=n.BlockManager,a=e.type,s=e.data,!(a in o.available)){t.next=14;break}t.prev=4,i.insert({tool:a,data:s}),t.next=12;break;case 8:throw t.prev=8,t.t0=t.catch(4),d.log(\"Block «\".concat(a,\"» skipped because of plugins error\"),\"warn\",s),Error(t.t0);case 12:t.next=19;break;case 14:c={savedData:{type:a,data:s},title:a},a in o.unavailable&&(l=o.unavailable[a].toolbox,u=o.getToolSettings(a).toolbox,c.title=l.title||u&&u.title||c.title),i.insert({tool:o.stubTool,data:c}).stretched=!0,d.log(\"Tool «\".concat(a,\"» is not found. Check 'tools' property at your initial Editor.js config.\"),\"warn\");case 19:case\"end\":return t.stop()}}),t,this,[[4,8]])}))),function(t){return n.apply(this,arguments)})}]),p}(f.default);o.default=g,g.displayName=\"Renderer\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(39),n(2),n(3),n(5),n(6),n(4),n(7),n(8),n(386)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d){\"use strict\";var p=n(13),h=n(1);function v(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=h(r),i=h(i),a=h(a),s=h(s),c=h(c),l=h(l),u=h(u),f=p(f),d=h(d);var g=function(t){(0,s.default)(o,t);var e,n=(e=o,function(){var t,n=(0,l.default)(e);if(v()){var o=(0,l.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,c.default)(this,t)});function o(){var t;return(0,i.default)(this,o),(t=n.apply(this,arguments)).configCache={},t.inlineToolsConfigCache=null,t}return(0,a.default)(o,[{key:\"sanitizeBlocks\",value:function(t){var e=this;return t.map((function(t){var n=e.composeToolConfig(t.tool);return f.isEmpty(n)||(t.data=e.deepSanitize(t.data,n)),t}))}},{key:\"deepSanitize\",value:function(t,e){return Array.isArray(t)?this.cleanArray(t,e):f.isObject(t)?this.cleanObject(t,e):f.isString(t)?this.cleanOneItem(t,e):t}},{key:\"clean\",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={tags:e},o=this.createHTMLJanitorInstance(n);return o.clean(t)}},{key:\"composeToolConfig\",value:function(t){if(this.configCache[t])return this.configCache[t];var e=this.Editor.Tools.INTERNAL_SETTINGS.SANITIZE_CONFIG,n=this.Editor.Tools.available[t],o=this.getInlineToolsConfig(t);if(!n.sanitize||n[e]&&f.isEmpty(n[e]))return o;var r=n.sanitize,i={};for(var a in r)if(Object.prototype.hasOwnProperty.call(r,a)){var s=r[a];f.isObject(s)?i[a]=Object.assign({},o,s):i[a]=s}return this.configCache[t]=i,i}},{key:\"getInlineToolsConfig\",value:function(t){var e=this.Editor.Tools,n=e.getToolSettings(t).inlineToolbar||[],o={};return f.isBoolean(n)&&n?o=this.getAllInlineToolsConfig():n.map((function(t){o=Object.assign(o,e.inline[t][e.INTERNAL_SETTINGS.SANITIZE_CONFIG])})),o.br=!0,o.wbr=!0,o}},{key:\"getAllInlineToolsConfig\",value:function(){var t=this.Editor.Tools;if(this.inlineToolsConfigCache)return this.inlineToolsConfigCache;var e={};return Object.entries(t.inline).forEach((function(n){var o=(0,r.default)(n,2)[1];Object.assign(e,o[t.INTERNAL_SETTINGS.SANITIZE_CONFIG])})),this.inlineToolsConfigCache=e,this.inlineToolsConfigCache}},{key:\"cleanArray\",value:function(t,e){var n=this;return t.map((function(t){return n.deepSanitize(t,e)}))}},{key:\"cleanObject\",value:function(t,e){var n={};for(var o in t)if(Object.prototype.hasOwnProperty.call(t,o)){var r=t[o],i=this.isRule(e[o])?e[o]:e;n[o]=this.deepSanitize(r,i)}return n}},{key:\"cleanOneItem\",value:function(t,e){return f.isObject(e)?this.clean(t,e):!1===e?this.clean(t,{}):t}},{key:\"isRule\",value:function(t){return f.isObject(t)||f.isBoolean(t)||f.isFunction(t)}},{key:\"createHTMLJanitorInstance\",value:function(t){return t?new d.default(t):null}}]),o}(u.default);o.default=g,g.displayName=\"Sanitizer\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(22),n(2),n(3),n(5),n(6),n(4),n(7),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d){\"use strict\";var p=n(13),h=n(1);function v(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=h(r),i=h(i),a=h(a),s=h(s),c=h(c),l=h(l),u=h(u),f=h(f),d=p(d);var g=function(t){(0,c.default)(p,t);var e,n,o,f=(e=p,function(){var t,n=(0,u.default)(e);if(v()){var o=(0,u.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,l.default)(this,t)});function p(){return(0,a.default)(this,p),f.apply(this,arguments)}return(0,s.default)(p,[{key:\"save\",value:(o=(0,i.default)(r.default.mark((function t(){var e,n,o,i,a,s,c,l,u=this;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=this.Editor,n=e.BlockManager,o=e.Sanitizer,i=e.ModificationsObserver,a=n.blocks,s=[],i.disable(),t.prev=3,a.forEach((function(t){s.push(u.getSavedData(t))})),t.next=7,Promise.all(s);case 7:return c=t.sent,t.next=10,o.sanitizeBlocks(c);case 10:return l=t.sent,t.abrupt(\"return\",this.makeOutput(l));case 12:return t.prev=12,i.enable(),t.finish(12);case 15:case\"end\":return t.stop()}}),t,this,[[3,,12,15]])}))),function(){return o.apply(this,arguments)})},{key:\"getSavedData\",value:(n=(0,i.default)(r.default.mark((function t(e){var n,o;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.save();case 2:if(n=t.sent,t.t0=n,!t.t0){t.next=8;break}return t.next=7,e.validate(n.data);case 7:t.t0=t.sent;case 8:return o=t.t0,t.abrupt(\"return\",Object.assign(Object.assign({},n),{isValid:o}));case 10:case\"end\":return t.stop()}}),t)}))),function(t){return n.apply(this,arguments)})},{key:\"makeOutput\",value:function(t){var e=this,n=0,o=[];return d.log(\"[Editor.js saving]:\",\"groupCollapsed\"),t.forEach((function(t){var r=t.tool,i=t.data,a=t.time,s=t.isValid;if(n+=a,d.log(\"\".concat(r.charAt(0).toUpperCase()+r.slice(1)),\"group\"),!s)return d.log(\"Block «\".concat(r,\"» skipped because saved data is invalid\")),void d.log(void 0,\"groupEnd\");d.log(i),d.log(void 0,\"groupEnd\"),r!==e.Editor.Tools.stubTool?o.push({type:r,data:i}):o.push(i)})),d.log(\"Total\",\"log\",n),d.log(void 0,\"groupEnd\"),{time:+new Date,blocks:o,version:\"2.19.3\"}}}]),p}(f.default);o.default=g,g.displayName=\"Saver\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7),n(15),n(60),n(8),n(25)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p){\"use strict\";var h=n(13),v=n(1);function g(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=v(r),i=v(i),a=v(a),s=v(s),c=v(c),l=v(l),u=v(u),f=v(f),d=h(d),p=v(p);var y=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(g()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){var t;return(0,r.default)(this,o),(t=n.apply(this,arguments)).buttons=[],t.flipper=null,t.selection=new p.default,t}return(0,i.default)(o,[{key:\"make\",value:function(){this.nodes.wrapper=u.default.make(\"div\",this.CSS.wrapper),this.nodes.toolSettings=u.default.make(\"div\",this.CSS.toolSettings),this.nodes.defaultSettings=u.default.make(\"div\",this.CSS.defaultSettings),u.default.append(this.nodes.wrapper,[this.nodes.toolSettings,this.nodes.defaultSettings]),this.enableFlipper()}},{key:\"destroy\",value:function(){this.flipper&&(this.flipper.deactivate(),this.flipper=null),this.removeAllNodes()}},{key:\"open\",value:function(){this.nodes.wrapper.classList.add(this.CSS.wrapperOpened),this.selection.save(),this.Editor.BlockManager.currentBlock.selected=!0,this.Editor.BlockSelection.clearCache(),this.addToolSettings(),this.addDefaultSettings(),this.eventsDispatcher.emit(this.events.opened),this.flipper.activate(this.blockTunesButtons)}},{key:\"close\",value:function(){this.nodes.wrapper.classList.remove(this.CSS.wrapperOpened),p.default.isAtEditor||this.selection.restore(),this.selection.clearSaved(),!this.Editor.CrossBlockSelection.isCrossBlockSelectionStarted&&this.Editor.BlockManager.currentBlock&&(this.Editor.BlockManager.currentBlock.selected=!1),this.nodes.toolSettings.innerHTML=\"\",this.nodes.defaultSettings.innerHTML=\"\",this.eventsDispatcher.emit(this.events.closed),this.buttons=[],this.flipper.deactivate()}},{key:\"addToolSettings\",value:function(){d.isFunction(this.Editor.BlockManager.currentBlock.tool.renderSettings)&&u.default.append(this.nodes.toolSettings,this.Editor.BlockManager.currentBlock.tool.renderSettings())}},{key:\"addDefaultSettings\",value:function(){u.default.append(this.nodes.defaultSettings,this.Editor.BlockManager.currentBlock.renderTunes())}},{key:\"enableFlipper\",value:function(){var t=this;this.flipper=new f.default({focusedItemClass:this.CSS.focusedButton,activateCallback:function(e){e&&u.default.canSetCaret(e)?t.close():d.delay((function(){t.Editor.Caret.setToBlock(t.Editor.BlockManager.currentBlock)}),50)()}})}},{key:\"events\",get:function(){return{opened:\"block-settings-opened\",closed:\"block-settings-closed\"}}},{key:\"CSS\",get:function(){return{wrapper:\"ce-settings\",wrapperOpened:\"ce-settings--opened\",toolSettings:\"ce-settings__plugin-zone\",defaultSettings:\"ce-settings__default-zone\",button:\"ce-settings__button\",focusedButton:\"ce-settings__button--focused\",focusedButtonAnimated:\"ce-settings__button--focused-animated\"}}},{key:\"opened\",get:function(){return this.nodes.wrapper.classList.contains(this.CSS.wrapperOpened)}},{key:\"blockTunesButtons\",get:function(){var t=this,e=this.Editor.StylesAPI;if(0!==this.buttons.length)return this.buttons;var n=this.nodes.toolSettings.querySelectorAll(\".\".concat(e.classes.settingsButton,\", \").concat(u.default.allInputsSelector)),o=this.nodes.defaultSettings.querySelectorAll(\".\".concat(this.CSS.button));return n.forEach((function(e){t.buttons.push(e)})),o.forEach((function(e){t.buttons.push(e)})),this.buttons}}]),o}(l.default);o.default=y,y.displayName=\"BlockSettings\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(39),n(21),n(22),n(58),n(2),n(3),n(5),n(6),n(4),n(7),n(15),n(8),n(60),n(59),n(81)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p,h,v,g,y,b){\"use strict\";var m=n(13),k=n(1);function x(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=k(r),i=k(i),a=k(a),s=k(s),c=k(c),l=k(l),u=k(u),f=k(f),d=k(d),p=k(p),h=k(h),v=m(v),g=k(g),y=k(y);var S=function(t){(0,u.default)(p,t);var e,n,o=(e=p,function(){var t,n=(0,d.default)(e);if(x()){var o=(0,d.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,f.default)(this,t)});function p(){var t;return(0,c.default)(this,p),(t=o.apply(this,arguments)).opened=!1,t.tools={},t.flipper=null,t.togglingCallback=null,t}return(0,l.default)(p,[{key:\"make\",value:function(){this.nodes.wrapper=h.default.make(\"div\",[p.CSS.conversionToolbarWrapper].concat((0,s.default)(this.isRtl?[this.Editor.UI.CSS.editorRtlFix]:[]))),this.nodes.tools=h.default.make(\"div\",p.CSS.conversionToolbarTools);var t=h.default.make(\"div\",p.CSS.conversionToolbarLabel,{textContent:y.default.ui(b.I18nInternalNS.ui.inlineToolbar.converter,\"Convert to\")});return this.addTools(),this.enableFlipper(),h.default.append(this.nodes.wrapper,t),h.default.append(this.nodes.wrapper,this.nodes.tools),this.nodes.wrapper}},{key:\"destroy\",value:function(){this.flipper&&(this.flipper.deactivate(),this.flipper=null),this.removeAllNodes()}},{key:\"toggle\",value:function(t){this.opened?this.close():this.open(),v.isFunction(t)&&(this.togglingCallback=t)}},{key:\"open\",value:function(){var t=this;this.filterTools(),this.opened=!0,this.nodes.wrapper.classList.add(p.CSS.conversionToolbarShowed),setTimeout((function(){t.flipper.activate(Object.values(t.tools).filter((function(t){return!t.classList.contains(p.CSS.conversionToolHidden)}))),t.flipper.focusFirst(),v.isFunction(t.togglingCallback)&&t.togglingCallback(!0)}),50)}},{key:\"close\",value:function(){this.opened=!1,this.flipper.deactivate(),this.nodes.wrapper.classList.remove(p.CSS.conversionToolbarShowed),v.isFunction(this.togglingCallback)&&this.togglingCallback(!1)}},{key:\"hasTools\",value:function(){var t=Object.keys(this.tools);return!(1===t.length&&t.shift()===this.config.defaultBlock)}},{key:\"replaceWithBlock\",value:(n=(0,a.default)(i.default.mark((function t(e){var n,o,r,a,s,c,l,u,f,d,p,h=this;return i.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=this.Editor.BlockManager.currentBlock.class,o=this.Editor.BlockManager.currentBlock.name,t.next=4,this.Editor.BlockManager.currentBlock.save();case 4:if(r=t.sent,a=this.Editor.Tools.INTERNAL_SETTINGS,s=r.data,o===e&&(e=this.config.defaultBlock),c=this.Editor.Tools.toolsClasses[e],l=\"\",u=n[a.CONVERSION_CONFIG].export,!v.isFunction(u)){t.next=15;break}l=u(s),t.next=21;break;case 15:if(!v.isString(u)){t.next=19;break}l=s[u],t.next=21;break;case 19:return v.log(\"Conversion «export» property must be a string or function. String means key of saved data object to export. Function should export processed string to export.\"),t.abrupt(\"return\");case 21:if(f=this.Editor.Sanitizer.clean(l,c.sanitize),d={},p=c[a.CONVERSION_CONFIG].import,!v.isFunction(p)){t.next=28;break}d=p(f),t.next=34;break;case 28:if(!v.isString(p)){t.next=32;break}d[p]=f,t.next=34;break;case 32:return v.log(\"Conversion «import» property must be a string or function. String means key of tool data to import. Function accepts a imported string and return composed tool data.\"),t.abrupt(\"return\");case 34:this.Editor.BlockManager.replace({tool:e,data:d}),this.Editor.BlockSelection.clearSelection(),this.close(),this.Editor.InlineToolbar.close(),v.delay((function(){h.Editor.Caret.setToBlock(h.Editor.BlockManager.currentBlock)}),10)();case 39:case\"end\":return t.stop()}}),t,this)}))),function(t){return n.apply(this,arguments)})},{key:\"addTools\",value:function(){var t=this.Editor.Tools.blockTools;for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e)){var n=this.Editor.Tools.INTERNAL_SETTINGS,o=t[e],r=o[n.TOOLBOX],i=o[n.CONVERSION_CONFIG],a=this.Editor.Tools.USER_SETTINGS,s=this.Editor.Tools.getToolSettings(e)[a.TOOLBOX],c=null!=s?s:r;!v.isEmpty(c)&&c.icon&&i&&i.import&&this.addTool(e,c.icon,c.title)}}},{key:\"addTool\",value:function(t,e,n){var o=this,r=h.default.make(\"div\",[p.CSS.conversionTool]),s=h.default.make(\"div\",[p.CSS.conversionToolIcon]);r.dataset.tool=t,s.innerHTML=e,h.default.append(r,s),h.default.append(r,h.default.text(y.default.t(b.I18nInternalNS.toolNames,n||v.capitalize(t)))),h.default.append(this.nodes.tools,r),this.tools[t]=r,this.listeners.on(r,\"click\",(0,a.default)(i.default.mark((function e(){return i.default.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,o.replaceWithBlock(t);case 2:case\"end\":return e.stop()}}),e)}))))}},{key:\"filterTools\",value:function(){var t=this.Editor.BlockManager.currentBlock;Object.entries(this.tools).forEach((function(e){var n=(0,r.default)(e,2),o=n[0],i=n[1];i.hidden=!1,i.classList.toggle(p.CSS.conversionToolHidden,o===t.name)}))}},{key:\"enableFlipper\",value:function(){this.flipper=new g.default({focusedItemClass:p.CSS.conversionToolFocused})}}],[{key:\"CSS\",get:function(){return{conversionToolbarWrapper:\"ce-conversion-toolbar\",conversionToolbarShowed:\"ce-conversion-toolbar--showed\",conversionToolbarTools:\"ce-conversion-toolbar__tools\",conversionToolbarLabel:\"ce-conversion-toolbar__label\",conversionTool:\"ce-conversion-tool\",conversionToolHidden:\"ce-conversion-tool--hidden\",conversionToolIcon:\"ce-conversion-tool__icon\",conversionToolFocused:\"ce-conversion-tool--focused\",conversionToolActive:\"ce-conversion-tool--active\"}}}]),p}(p.default);o.default=S,S.displayName=\"ConversionToolbar\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(58),n(39),n(2),n(3),n(5),n(6),n(4),n(7),n(15),n(25),n(8),n(60),n(59),n(81),n(108)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p,h,v,g,y,b){\"use strict\";var m=n(13),k=n(1);function x(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=k(r),i=k(i),a=k(a),s=k(s),c=k(c),l=k(l),u=k(u),f=k(f),d=k(d),p=k(p),h=m(h),v=k(v),g=k(g),b=k(b);var S=function(t){(0,c.default)(o,t);var e,n=(e=o,function(){var t,n=(0,u.default)(e);if(x()){var o=(0,u.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,l.default)(this,t)});function o(){var t;return(0,a.default)(this,o),(t=n.apply(this,arguments)).CSS={inlineToolbar:\"ce-inline-toolbar\",inlineToolbarShowed:\"ce-inline-toolbar--showed\",inlineToolbarLeftOriented:\"ce-inline-toolbar--left-oriented\",inlineToolbarRightOriented:\"ce-inline-toolbar--right-oriented\",inlineToolbarShortcut:\"ce-inline-toolbar__shortcut\",buttonsWrapper:\"ce-inline-toolbar__buttons\",actionsWrapper:\"ce-inline-toolbar__actions\",inlineToolButton:\"ce-inline-tool\",inputField:\"cdx-input\",focusedButton:\"ce-inline-tool--focused\",conversionToggler:\"ce-inline-toolbar__dropdown\",conversionTogglerHidden:\"ce-inline-toolbar__dropdown--hidden\",conversionTogglerContent:\"ce-inline-toolbar__dropdown-content\",togglerAndButtonsWrapper:\"ce-inline-toolbar__toggler-and-button-wrapper\"},t.opened=!1,t.toolbarVerticalMargin=5,t.buttonsList=null,t.width=0,t.flipper=null,t.internalTools={},t}return(0,s.default)(o,[{key:\"toggleReadOnly\",value:function(t){t?(this.destroy(),this.Editor.ConversionToolbar.destroy()):this.make()}},{key:\"tryToShow\",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.allowedToShow()?(this.move(),this.open(),this.Editor.Toolbar.close()):t&&this.close()}},{key:\"move\",value:function(){var t=p.default.rect,e=this.Editor.UI.nodes.wrapper.getBoundingClientRect(),n={x:t.x-e.left,y:t.y+t.height-e.top+this.toolbarVerticalMargin};t.width&&(n.x+=Math.floor(t.width/2));var o=n.x-this.width/2,r=n.x+this.width/2;this.nodes.wrapper.classList.toggle(this.CSS.inlineToolbarLeftOriented,o<this.Editor.UI.contentRect.left),this.nodes.wrapper.classList.toggle(this.CSS.inlineToolbarRightOriented,r>this.Editor.UI.contentRect.right),this.nodes.wrapper.style.left=Math.floor(n.x)+\"px\",this.nodes.wrapper.style.top=Math.floor(n.y)+\"px\"}},{key:\"close\",value:function(){var t=this;this.opened&&(this.Editor.ReadOnly.isEnabled||(this.nodes.wrapper.classList.remove(this.CSS.inlineToolbarShowed),Array.from(this.toolsInstances.entries()).forEach((function(e){var n=(0,i.default)(e,2),o=n[0],r=n[1],a=t.getToolShortcut(o);a&&b.default.remove(t.Editor.UI.nodes.redactor,a),h.isFunction(r.clear)&&r.clear()})),this.opened=!1,this.flipper.deactivate(),this.Editor.ConversionToolbar.close()))}},{key:\"open\",value:function(){if(!this.opened){this.addToolsFiltered(),this.nodes.wrapper.classList.add(this.CSS.inlineToolbarShowed),this.buttonsList=this.nodes.buttons.querySelectorAll(\".\".concat(this.CSS.inlineToolButton)),this.opened=!0,this.Editor.ConversionToolbar.hasTools()?this.setConversionTogglerContent():this.nodes.conversionToggler.hidden=!0;var t=Array.from(this.buttonsList);t.unshift(this.nodes.conversionToggler),t=t.filter((function(t){return!t.hidden})),this.flipper.activate(t)}}},{key:\"containsNode\",value:function(t){return this.nodes.wrapper.contains(t)}},{key:\"destroy\",value:function(){this.flipper&&(this.flipper.deactivate(),this.flipper=null),this.removeAllNodes()}},{key:\"getInlineToolbarSettings\",value:function(t){var e=this,n=this.Editor.Tools.getToolSettings(t)[this.Editor.Tools.USER_SETTINGS.ENABLED_INLINE_TOOLS];if(!0!==n&&!Array.isArray(n))return!1;if(Array.isArray(n))return n;var o=this.config.inlineToolbar;return Array.isArray(o)?o:!0===o&&Object.entries(this.Editor.Tools.available).filter((function(t){var n=(0,i.default)(t,2);return n[0],n[1][e.Editor.Tools.INTERNAL_SETTINGS.IS_INLINE]})).map((function(t){var e=(0,i.default)(t,2),n=e[0];return e[1],n}))}},{key:\"make\",value:function(){var t=this;this.nodes.wrapper=d.default.make(\"div\",[this.CSS.inlineToolbar].concat((0,r.default)(this.isRtl?[this.Editor.UI.CSS.editorRtlFix]:[]))),this.nodes.togglerAndButtonsWrapper=d.default.make(\"div\",this.CSS.togglerAndButtonsWrapper),this.nodes.buttons=d.default.make(\"div\",this.CSS.buttonsWrapper),this.nodes.actions=d.default.make(\"div\",this.CSS.actionsWrapper),this.listeners.on(this.nodes.wrapper,\"mousedown\",(function(e){e.target.closest(\".\".concat(t.CSS.actionsWrapper))||e.preventDefault()})),d.default.append(this.nodes.wrapper,[this.nodes.togglerAndButtonsWrapper,this.nodes.actions]),d.default.append(this.Editor.UI.nodes.wrapper,this.nodes.wrapper),this.addConversionToggler(),d.default.append(this.nodes.togglerAndButtonsWrapper,this.nodes.buttons),this.prepareConversionToolbar(),this.recalculateWidth(),this.enableFlipper()}},{key:\"allowedToShow\",value:function(){var t=p.default.get(),e=p.default.text;if(!t||!t.anchorNode)return!1;if(t.isCollapsed||e.length<1)return!1;var n=d.default.isElement(t.anchorNode)?t.anchorNode:t.anchorNode.parentElement;if(t&&[\"IMG\",\"INPUT\"].includes(n.tagName))return!1;if(null===n.closest('[contenteditable=\"true\"]'))return!1;var o=this.Editor.BlockManager.getBlock(t.anchorNode);return!!o&&!1!==this.getInlineToolbarSettings(o.name)}},{key:\"recalculateWidth\",value:function(){this.width=this.nodes.wrapper.offsetWidth}},{key:\"addConversionToggler\",value:function(){var t=this;this.nodes.conversionToggler=d.default.make(\"div\",this.CSS.conversionToggler),this.nodes.conversionTogglerContent=d.default.make(\"div\",this.CSS.conversionTogglerContent);var e=d.default.svg(\"toggler-down\",13,13);this.nodes.conversionToggler.appendChild(this.nodes.conversionTogglerContent),this.nodes.conversionToggler.appendChild(e),this.nodes.togglerAndButtonsWrapper.appendChild(this.nodes.conversionToggler),this.listeners.on(this.nodes.conversionToggler,\"click\",(function(){t.Editor.ConversionToolbar.toggle((function(e){!e&&t.opened?t.flipper.activate():t.opened&&t.flipper.deactivate()}))})),this.Editor.Tooltip.onHover(this.nodes.conversionToggler,g.default.ui(y.I18nInternalNS.ui.inlineToolbar.converter,\"Convert to\"),{placement:\"top\",hidingDelay:100})}},{key:\"setConversionTogglerContent\",value:function(){var t=this.Editor,e=t.BlockManager,n=t.Tools,o=e.currentBlock.name,r=n.available[o][n.INTERNAL_SETTINGS.CONVERSION_CONFIG]||{},i=r&&r.export;this.nodes.conversionToggler.hidden=!i,this.nodes.conversionToggler.classList.toggle(this.CSS.conversionTogglerHidden,!i);var a=n.getToolSettings(o),s=n.available[o][n.INTERNAL_SETTINGS.TOOLBOX]||{},c=a.toolbox||{};this.nodes.conversionTogglerContent.innerHTML=c.icon||s.icon||c.title||s.title||h.capitalize(o)}},{key:\"prepareConversionToolbar\",value:function(){var t=this.Editor.ConversionToolbar.make();d.default.append(this.nodes.wrapper,t)}},{key:\"addToolsFiltered\",value:function(){var t=this,e=p.default.get(),n=this.Editor.BlockManager.getBlock(e.anchorNode);this.nodes.buttons.innerHTML=\"\",this.nodes.actions.innerHTML=\"\",this.toolsInstances=new Map,this.getInlineToolbarSettings(n.name).forEach((function(e){var n=t.Editor.Tools.getToolSettings(e),o=t.Editor.Tools.constructInline(t.Editor.Tools.inline[e],e,n);t.addTool(e,o),o.checkState(p.default.get())})),this.recalculateWidth()}},{key:\"addTool\",value:function(t,e){var n=this,o=this.Editor,r=o.Tools,i=o.Tooltip,a=e.render();if(a){if(a.dataset.tool=t,this.nodes.buttons.appendChild(a),this.toolsInstances.set(t,e),h.isFunction(e.renderActions)){var s=e.renderActions();this.nodes.actions.appendChild(s)}this.listeners.on(a,\"click\",(function(t){n.toolClicked(e),t.preventDefault()}));var c=this.getToolShortcut(t);if(c)try{this.enableShortcuts(e,c)}catch(t){}var l=d.default.make(\"div\"),u=g.default.t(y.I18nInternalNS.toolNames,r.toolsClasses[t][r.INTERNAL_SETTINGS.TITLE]||h.capitalize(t));l.appendChild(d.default.text(u)),c&&l.appendChild(d.default.make(\"div\",this.CSS.inlineToolbarShortcut,{textContent:h.beautifyShortcut(c)})),i.onHover(a,l,{placement:\"top\",hidingDelay:100})}else h.log(\"Render method must return an instance of Node\",\"warn\",t)}},{key:\"getToolShortcut\",value:function(t){var e=this.Editor.Tools,n=e.getToolSettings(t),o=this.toolsInstances.get(t);return Object.keys(this.internalTools).includes(t)?this.inlineTools[t][e.INTERNAL_SETTINGS.SHORTCUT]:n&&n[e.USER_SETTINGS.SHORTCUT]?n[e.USER_SETTINGS.SHORTCUT]:o.shortcut?o.shortcut:void 0}},{key:\"enableShortcuts\",value:function(t,e){var n=this;b.default.add({name:e,handler:function(e){var o=n.Editor.BlockManager.currentBlock;if(o){var r=n.Editor.Tools.getToolSettings(o.name);r&&r[n.Editor.Tools.USER_SETTINGS.ENABLED_INLINE_TOOLS]&&(e.preventDefault(),n.toolClicked(t))}},on:this.Editor.UI.nodes.redactor})}},{key:\"toolClicked\",value:function(t){var e=p.default.range;t.surround(e),this.checkToolsState()}},{key:\"checkToolsState\",value:function(){this.toolsInstances.forEach((function(t){t.checkState(p.default.get())}))}},{key:\"enableFlipper\",value:function(){this.flipper=new v.default({focusedItemClass:this.CSS.focusedButton,allowArrows:!1})}},{key:\"state\",set:function(t){var e=this;this.Editor=t;var n=t.Tools;Object.entries(n.internalTools).filter((function(t){var e=(0,i.default)(t,2)[1];return h.isFunction(e)?e[n.INTERNAL_SETTINGS.IS_INLINE]:e.class[n.INTERNAL_SETTINGS.IS_INLINE]})).map((function(t){var n=(0,i.default)(t,2),o=n[0],r=n[1];e.internalTools[o]=h.isFunction(r)?r:r.class}))}},{key:\"inlineTools\",get:function(){var t={};for(var e in this.Editor.Tools.inline)if(Object.prototype.hasOwnProperty.call(this.Editor.Tools.inline,e)){var n=this.Editor.Tools.getToolSettings(e);t[e]=this.Editor.Tools.constructInline(this.Editor.Tools.inline[e],e,n)}return t}}]),o}(f.default);o.default=S,S.displayName=\"InlineToolbar\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7),n(15),n(8),n(60),n(61),n(59),n(81),n(108)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p,h,v,g){\"use strict\";var y=n(13),b=n(1);function m(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=b(r),i=b(i),a=b(a),s=b(s),c=b(c),l=b(l),u=b(u),f=y(f),d=b(d),h=b(h),g=b(g);var k=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(m()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){var t;return(0,r.default)(this,o),(t=n.apply(this,arguments)).nodes={toolbox:null,buttons:[]},t.opened=!1,t.displayedToolsCount=0,t.flipper=null,t}return(0,i.default)(o,[{key:\"make\",value:function(){this.nodes.toolbox=u.default.make(\"div\",this.CSS.toolbox),this.addTools(),this.enableFlipper()}},{key:\"destroy\",value:function(){this.flipper&&(this.flipper.deactivate(),this.flipper=null),this.removeAllNodes(),this.removeAllShortcuts()}},{key:\"toolButtonActivate\",value:function(t,e){var n=this.Editor.Tools.toolsClasses[e];this.insertNewBlock(n,e)}},{key:\"open\",value:function(){this.isEmpty||(this.Editor.UI.nodes.wrapper.classList.add(this.CSS.openedToolbarHolderModifier),this.nodes.toolbox.classList.add(this.CSS.toolboxOpened),this.opened=!0,this.flipper.activate())}},{key:\"close\",value:function(){this.nodes.toolbox.classList.remove(this.CSS.toolboxOpened),this.Editor.UI.nodes.wrapper.classList.remove(this.CSS.openedToolbarHolderModifier),this.opened=!1,this.flipper.deactivate()}},{key:\"toggle\",value:function(){this.opened?this.close():this.open()}},{key:\"addTools\",value:function(){var t=this.Editor.Tools.available;for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&this.addTool(e,t[e])}},{key:\"addTool\",value:function(t,e){var n=this,o=this.Editor.Tools.INTERNAL_SETTINGS,r=this.Editor.Tools.USER_SETTINGS,i=e[o.TOOLBOX];if(!f.isEmpty(i))if(!i||i.icon){var a=this.Editor.Tools.getToolSettings(t)[r.TOOLBOX];if(!1!==(null!=a?a:i)){var s=u.default.make(\"li\",[this.CSS.toolboxButton]);s.dataset.tool=t,s.innerHTML=a&&a.icon||i.icon,u.default.append(this.nodes.toolbox,s),this.nodes.toolbox.appendChild(s),this.nodes.buttons.push(s),this.listeners.on(s,\"click\",(function(e){n.toolButtonActivate(e,t)}));var c=this.drawTooltip(t);this.Editor.Tooltip.onHover(s,c,{placement:\"bottom\",hidingDelay:200});var l=this.getToolShortcut(t,e);l&&this.enableShortcut(e,t,l),this.displayedToolsCount++}}else f.log(\"Toolbar icon is missed. Tool %o skipped\",\"warn\",t)}},{key:\"getToolShortcut\",value:function(t,e){var n=this.Editor.Tools.getToolSettings(t),o=e[this.Editor.Tools.INTERNAL_SETTINGS.SHORTCUT];return(n?n[this.Editor.Tools.USER_SETTINGS.SHORTCUT]:null)||o}},{key:\"drawTooltip\",value:function(t){var e=this.Editor.Tools.available[t],n=this.Editor.Tools.getToolSettings(t),o=this.Editor.Tools.available[t][this.Editor.Tools.INTERNAL_SETTINGS.TOOLBOX]||{},r=n.toolbox||{},i=h.default.t(v.I18nInternalNS.toolNames,r.title||o.title||t),a=this.getToolShortcut(t,e),s=u.default.make(\"div\",this.CSS.buttonTooltip),c=document.createTextNode(f.capitalize(i));return s.appendChild(c),a&&(a=f.beautifyShortcut(a),s.appendChild(u.default.make(\"div\",this.CSS.buttonShortcut,{textContent:a}))),s}},{key:\"enableShortcut\",value:function(t,e,n){var o=this;g.default.add({name:n,handler:function(n){n.preventDefault(),o.insertNewBlock(t,e)},on:this.Editor.UI.nodes.redactor})}},{key:\"removeAllShortcuts\",value:function(){var t=this.Editor.Tools.available;for(var e in t)if(Object.prototype.hasOwnProperty.call(t,e)){var n=this.getToolShortcut(e,t[e]);n&&g.default.remove(this.Editor.UI.nodes.redactor,n)}}},{key:\"enableFlipper\",value:function(){var t=Array.from(this.nodes.toolbox.childNodes);this.flipper=new d.default({items:t,focusedItemClass:this.CSS.toolboxButtonActive})}},{key:\"insertNewBlock\",value:function(t,e){var n=this.Editor,o=n.BlockManager,r=n.Caret,i=o.currentBlock,a=o.insert({tool:e,replace:i.isEmpty});a.call(p.BlockToolAPI.APPEND_CALLBACK),this.Editor.Caret.setToBlock(a),0===a.inputs.length&&(a===o.lastBlock?(o.insertAtEnd(),r.setToBlock(o.lastBlock)):r.setToBlock(o.nextBlock)),this.Editor.Toolbar.close()}},{key:\"CSS\",get:function(){return{toolbox:\"ce-toolbox\",toolboxButton:\"ce-toolbox__button\",toolboxButtonActive:\"ce-toolbox__button--active\",toolboxOpened:\"ce-toolbox--opened\",openedToolbarHolderModifier:\"codex-editor--toolbox-opened\",buttonTooltip:\"ce-toolbox-button-tooltip\",buttonShortcut:\"ce-toolbox-button-tooltip__shortcut\"}}},{key:\"isEmpty\",get:function(){return 0===this.displayedToolsCount}}]),o}(l.default);o.default=k,k.displayName=\"Toolbox\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(5),n(6),n(4),n(7),n(387)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u){\"use strict\";var f=n(1);function d(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=f(r),i=f(i),a=f(a),s=f(s),c=f(c),l=f(l),u=f(u);var p=function(t){(0,a.default)(o,t);var e,n=(e=o,function(){var t,n=(0,c.default)(e);if(d()){var o=(0,c.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,s.default)(this,t)});function o(){var t;return(0,r.default)(this,o),(t=n.apply(this,arguments)).lib=new u.default,t}return(0,i.default)(o,[{key:\"show\",value:function(t,e,n){this.lib.show(t,e,n)}},{key:\"hide\",value:function(){this.lib.hide()}},{key:\"onHover\",value:function(t,e,n){this.lib.onHover(t,e,n)}}]),o}(l.default);o.default=p,p.displayName=\"Tooltip\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(39),n(58),n(21),n(22),n(2),n(3),n(5),n(6),n(4),n(388),n(7),n(15),n(8),n(25),n(61),n(60)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d,p,h,v,g,y,b,m){\"use strict\";var k=n(13),x=n(1);function S(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=x(r),i=x(i),a=x(a),s=x(s),c=x(c),l=x(l),u=x(u),f=x(f),d=x(d),p=x(p),h=x(h),v=x(v),g=k(g),y=x(y),b=x(b),m=x(m);var w=function(t){(0,u.default)(k,t);var e,o,h=(e=k,function(){var t,n=(0,d.default)(e);if(S()){var o=(0,d.default)(this).constructor;t=Reflect.construct(n,arguments,o)}else t=n.apply(this,arguments);return(0,f.default)(this,t)});function k(){var t;return(0,c.default)(this,k),(t=h.apply(this,arguments)).isMobile=!1,t.contentRectCache=void 0,t.resizeDebouncer=g.debounce((function(){t.windowResize()}),200),t}return(0,l.default)(k,[{key:\"addLoader\",value:function(){this.nodes.loader=v.default.make(\"div\",this.CSS.editorLoader),this.nodes.wrapper.prepend(this.nodes.loader),this.nodes.redactor.classList.add(this.CSS.editorZoneHidden)}},{key:\"removeLoader\",value:function(){this.nodes.loader.remove(),this.nodes.redactor.classList.remove(this.CSS.editorZoneHidden)}},{key:\"prepare\",value:(o=(0,s.default)(a.default.mark((function t(){return a.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:this.checkIsMobile(),this.make(),this.addLoader(),this.appendSVGSprite(),this.loadStyles();case 5:case\"end\":return t.stop()}}),t,this)}))),function(){return o.apply(this,arguments)})},{key:\"toggleReadOnly\",value:function(t){t?this.disableModuleBindings():this.enableModuleBindings()}},{key:\"checkEmptiness\",value:function(){var t=this.Editor.BlockManager;this.nodes.wrapper.classList.toggle(this.CSS.editorEmpty,t.isEditorEmpty)}},{key:\"destroy\",value:function(){this.nodes.holder.innerHTML=\"\"}},{key:\"closeAllToolbars\",value:function(){var t=this.Editor,e=t.Toolbox,n=t.BlockSettings,o=t.InlineToolbar,r=t.ConversionToolbar;n.close(),o.close(),r.close(),e.close()}},{key:\"checkIsMobile\",value:function(){this.isMobile=window.innerWidth<650}},{key:\"make\",value:function(){this.nodes.holder=v.default.getHolder(this.config.holder),this.nodes.wrapper=v.default.make(\"div\",[this.CSS.editorWrapper].concat((0,i.default)(this.isRtl?[this.CSS.editorRtlFix]:[]))),this.nodes.redactor=v.default.make(\"div\",this.CSS.editorZone),this.nodes.holder.offsetWidth<this.contentRect.width&&this.nodes.wrapper.classList.add(this.CSS.editorWrapperNarrow),this.nodes.redactor.style.paddingBottom=this.config.minHeight+\"px\",this.nodes.wrapper.appendChild(this.nodes.redactor),this.nodes.holder.appendChild(this.nodes.wrapper)}},{key:\"loadStyles\",value:function(){var t=n(389);if(!v.default.get(\"editor-js-styles\")){var e=v.default.make(\"style\",null,{id:\"editor-js-styles\",textContent:t.toString()});v.default.prepend(document.head,e)}}},{key:\"enableModuleBindings\",value:function(){var t=this;this.readOnlyMutableListeners.on(this.nodes.redactor,\"click\",(function(e){t.redactorClicked(e)}),!1),this.readOnlyMutableListeners.on(this.nodes.redactor,\"mousedown\",(function(e){t.documentTouched(e)}),!0),this.readOnlyMutableListeners.on(this.nodes.redactor,\"touchstart\",(function(e){t.documentTouched(e)}),!0),this.readOnlyMutableListeners.on(document,\"keydown\",(function(e){t.documentKeydown(e)}),!0),this.readOnlyMutableListeners.on(document,\"click\",(function(e){t.documentClicked(e)}),!0),this.readOnlyMutableListeners.on(document,\"selectionchange\",(function(e){t.selectionChanged(e)}),!0),this.readOnlyMutableListeners.on(window,\"resize\",(function(){t.resizeDebouncer()}),{passive:!0})}},{key:\"disableModuleBindings\",value:function(){this.readOnlyMutableListeners.clearAll()}},{key:\"windowResize\",value:function(){this.contentRectCache=null,this.checkIsMobile()}},{key:\"documentKeydown\",value:function(t){switch(t.keyCode){case g.keyCodes.ENTER:this.enterPressed(t);break;case g.keyCodes.BACKSPACE:this.backspacePressed(t);break;case g.keyCodes.ESC:this.escapePressed(t);break;default:this.defaultBehaviour(t)}}},{key:\"defaultBehaviour\",value:function(t){var e=this.Editor.BlockManager.currentBlock,n=t.target.closest(\".\".concat(this.CSS.editorWrapper)),o=t.altKey||t.ctrlKey||t.metaKey||t.shiftKey;void 0===e||null!==n?n||e&&o||(this.Editor.BlockManager.dropPointer(),this.Editor.Toolbar.close()):this.Editor.BlockEvents.keydown(t)}},{key:\"backspacePressed\",value:function(t){var e=this.Editor,n=e.BlockManager,o=e.BlockSelection,r=e.Caret;if(o.anyBlockSelected&&!y.default.isSelectionExists){var i=n.removeSelectedBlocks();r.setToBlock(n.insertDefaultBlockAtIndex(i,!0),r.positions.START),o.clearSelection(t),t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation()}}},{key:\"escapePressed\",value:function(t){this.Editor.BlockSelection.clearSelection(t),this.Editor.Toolbox.opened?this.Editor.Toolbox.close():this.Editor.BlockSettings.opened?this.Editor.BlockSettings.close():this.Editor.ConversionToolbar.opened?this.Editor.ConversionToolbar.close():this.Editor.InlineToolbar.opened?this.Editor.InlineToolbar.close():this.Editor.Toolbar.close()}},{key:\"enterPressed\",value:function(t){var e=this.Editor,n=e.BlockManager,o=e.BlockSelection,r=n.currentBlockIndex>=0;if(o.anyBlockSelected&&!y.default.isSelectionExists)return o.clearSelection(t),t.preventDefault(),t.stopImmediatePropagation(),void t.stopPropagation();if(!this.someToolbarOpened&&r&&\"BODY\"===t.target.tagName){var i=this.Editor.BlockManager.insert();this.Editor.Caret.setToBlock(i),this.Editor.BlockManager.highlightCurrentNode(),this.Editor.Toolbar.move(),this.Editor.Toolbar.plusButton.show()}this.Editor.BlockSelection.clearSelection(t)}},{key:\"documentClicked\",value:function(t){if(t.isTrusted){var e=t.target;this.nodes.holder.contains(e)||y.default.isAtEditor||(this.Editor.BlockManager.dropPointer(),this.Editor.InlineToolbar.close(),this.Editor.Toolbar.close(),this.Editor.ConversionToolbar.close()),this.Editor.CrossBlockSelection.isCrossBlockSelectionStarted||this.Editor.BlockSelection.clearSelection(t)}}},{key:\"documentTouched\",value:function(t){var e=t.target;if(e===this.nodes.redactor){var n=t instanceof MouseEvent?t.clientX:t.touches[0].clientX,o=t instanceof MouseEvent?t.clientY:t.touches[0].clientY;e=document.elementFromPoint(n,o)}try{this.Editor.BlockManager.setCurrentBlockByChildNode(e),this.Editor.BlockManager.highlightCurrentNode()}catch(t){this.Editor.RectangleSelection.isRectActivated()||this.Editor.Caret.setToTheLastBlock()}this.Editor.Toolbar.open(),this.Editor.Toolbar.plusButton.hide()}},{key:\"redactorClicked\",value:function(t){if(y.default.isCollapsed){var e=function(){t.stopImmediatePropagation(),t.stopPropagation()},n=t.target,o=t.metaKey||t.ctrlKey;if(v.default.isAnchor(n)&&o){e();var r=n.getAttribute(\"href\"),i=g.getValidUrl(r);g.openTab(i)}else this.Editor.BlockManager.currentBlock||(e(),this.Editor.BlockManager.insert()),this.Editor.Tools.isDefault(this.Editor.BlockManager.currentBlock.tool)&&(e(),this.Editor.BlockManager.currentBlock.isEmpty&&this.Editor.Toolbar.plusButton.show())}}},{key:\"selectionChanged\",value:function(t){var e=this.Editor,n=e.CrossBlockSelection,o=e.BlockSelection,r=y.default.anchorElement;n.isCrossBlockSelectionStarted&&o.anyBlockSelected&&y.default.get().removeAllRanges(),r&&r.closest(\".\".concat(b.default.CSS.content))?(this.Editor.BlockManager.currentBlock||this.Editor.BlockManager.setCurrentBlockByChildNode(r),this.Editor.InlineToolbar.tryToShow(!0)):this.Editor.InlineToolbar.containsNode(r)||this.Editor.InlineToolbar.close()}},{key:\"appendSVGSprite\",value:function(){var t=v.default.make(\"div\");t.hidden=!0,t.style.display=\"none\",t.innerHTML=p.default,v.default.append(this.nodes.wrapper,t)}},{key:\"CSS\",get:function(){return{editorWrapper:\"codex-editor\",editorWrapperNarrow:\"codex-editor--narrow\",editorZone:\"codex-editor__redactor\",editorZoneHidden:\"codex-editor__redactor--hidden\",editorLoader:\"codex-editor__loader\",editorEmpty:\"codex-editor--empty\",editorRtlFix:\"codex-editor--rtl\"}}},{key:\"contentRect\",get:function(){if(this.contentRectCache)return this.contentRectCache;var t=this.nodes.wrapper.querySelector(\".\".concat(b.default.CSS.content));return t?(this.contentRectCache=t.getBoundingClientRect(),this.contentRectCache):{width:650,left:0,right:0}}},{key:\"someToolbarOpened\",get:function(){var t=this.Editor,e=t.Toolbox,n=t.BlockSettings,o=t.InlineToolbar,r=t.ConversionToolbar;return n.opened||o.opened||r.opened||e.opened}},{key:\"someFlipperButtonFocused\",get:function(){return Object.entries(this.Editor).filter((function(t){var e=(0,r.default)(t,2);return e[0],e[1].flipper instanceof m.default})).some((function(t){var e=(0,r.default)(t,2);return e[0],e[1].flipper.currentItem}))}}]),k}(h.default);o.default=w,w.displayName=\"UI\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){n(182),t.exports=n(354)},function(t,e,n){n(183)},function(t,e,n){\"use strict\";n(184),n(327),n(329),n(332),n(334),n(336),n(338),n(340),n(342),n(344),n(346),n(348),n(350),n(140)},function(t,e,n){n(185),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(266),n(267),n(269),n(270),n(271),n(272),n(273),n(274),n(275),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(287),n(288),n(289),n(102),n(290),n(129),n(291),n(130),n(292),n(293),n(294),n(295),n(131),n(298),n(299),n(300),n(301),n(302),n(303),n(304),n(305),n(306),n(307),n(308),n(309),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),t.exports=n(17)},function(t,e,n){\"use strict\";var o=n(9),r=n(26),i=n(18),a=n(0),s=n(23),c=n(41).KEY,l=n(10),u=n(67),f=n(52),d=n(43),p=n(14),h=n(83),v=n(110),g=n(187),y=n(70),b=n(11),m=n(12),k=n(20),x=n(28),S=n(40),w=n(42),T=n(47),E=n(113),C=n(33),B=n(69),_=n(19),O=n(45),I=C.f,N=_.f,M=E.f,R=o.Symbol,A=o.JSON,L=A&&A.stringify,P=p(\"_hidden\"),D=p(\"toPrimitive\"),j={}.propertyIsEnumerable,F=u(\"symbol-registry\"),U=u(\"symbols\"),H=u(\"op-symbols\"),z=Object.prototype,W=\"function\"==typeof R&&!!B.f,G=o.QObject,V=!G||!G.prototype||!G.prototype.findChild,X=i&&l((function(){return 7!=T(N({},\"a\",{get:function(){return N(this,\"a\",{value:7}).a}})).a}))?function(t,e,n){var o=I(z,e);o&&delete z[e],N(t,e,n),o&&t!==z&&N(z,e,o)}:N,Y=function(t){var e=U[t]=T(R.prototype);return e._k=t,e},K=W&&\"symbol\"==typeof R.iterator?function(t){return\"symbol\"==typeof t}:function(t){return t instanceof R},Z=function(t,e,n){return t===z&&Z(H,e,n),b(t),e=S(e,!0),b(n),r(U,e)?(n.enumerable?(r(t,P)&&t[P][e]&&(t[P][e]=!1),n=T(n,{enumerable:w(0,!1)})):(r(t,P)||N(t,P,w(1,{})),t[P][e]=!0),X(t,e,n)):N(t,e,n)},q=function(t,e){b(t);for(var n,o=g(e=x(e)),r=0,i=o.length;i>r;)Z(t,n=o[r++],e[n]);return t},J=function(t){var e=j.call(this,t=S(t,!0));return!(this===z&&r(U,t)&&!r(H,t))&&(!(e||!r(this,t)||!r(U,t)||r(this,P)&&this[P][t])||e)},$=function(t,e){if(t=x(t),e=S(e,!0),t!==z||!r(U,e)||r(H,e)){var n=I(t,e);return!n||!r(U,e)||r(t,P)&&t[P][e]||(n.enumerable=!0),n}},Q=function(t){for(var e,n=M(x(t)),o=[],i=0;n.length>i;)r(U,e=n[i++])||e==P||e==c||o.push(e);return o},tt=function(t){for(var e,n=t===z,o=M(n?H:x(t)),i=[],a=0;o.length>a;)!r(U,e=o[a++])||n&&!r(z,e)||i.push(U[e]);return i};W||(s((R=function(){if(this instanceof R)throw TypeError(\"Symbol is not a constructor!\");var t=d(arguments.length>0?arguments[0]:void 0),e=function(n){this===z&&e.call(H,n),r(this,P)&&r(this[P],t)&&(this[P][t]=!1),X(this,t,w(1,n))};return i&&V&&X(z,t,{configurable:!0,set:e}),Y(t)}).prototype,\"toString\",(function(){return this._k})),C.f=$,_.f=Z,n(48).f=E.f=Q,n(63).f=J,B.f=tt,i&&!n(44)&&s(z,\"propertyIsEnumerable\",J,!0),h.f=function(t){return Y(p(t))}),a(a.G+a.W+a.F*!W,{Symbol:R});for(var et=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),nt=0;et.length>nt;)p(et[nt++]);for(var ot=O(p.store),rt=0;ot.length>rt;)v(ot[rt++]);a(a.S+a.F*!W,\"Symbol\",{for:function(t){return r(F,t+=\"\")?F[t]:F[t]=R(t)},keyFor:function(t){if(!K(t))throw TypeError(t+\" is not a symbol!\");for(var e in F)if(F[e]===t)return e},useSetter:function(){V=!0},useSimple:function(){V=!1}}),a(a.S+a.F*!W,\"Object\",{create:function(t,e){return void 0===e?T(t):q(T(t),e)},defineProperty:Z,defineProperties:q,getOwnPropertyDescriptor:$,getOwnPropertyNames:Q,getOwnPropertySymbols:tt});var it=l((function(){B.f(1)}));a(a.S+a.F*it,\"Object\",{getOwnPropertySymbols:function(t){return B.f(k(t))}}),A&&a(a.S+a.F*(!W||l((function(){var t=R();return\"[null]\"!=L([t])||\"{}\"!=L({a:t})||\"{}\"!=L(Object(t))}))),\"JSON\",{stringify:function(t){for(var e,n,o=[t],r=1;arguments.length>r;)o.push(arguments[r++]);if(n=e=o[1],(m(e)||void 0!==t)&&!K(t))return y(e)||(e=function(t,e){if(\"function\"==typeof n&&(e=n.call(this,t,e)),!K(e))return e}),o[1]=e,L.apply(A,o)}}),R.prototype[D]||n(27)(R.prototype,D,R.prototype.valueOf),f(R,\"Symbol\"),f(Math,\"Math\",!0),f(o.JSON,\"JSON\",!0)},function(t,e,n){t.exports=n(67)(\"native-function-to-string\",Function.toString)},function(t,e,n){var o=n(45),r=n(69),i=n(63);t.exports=function(t){var e=o(t),n=r.f;if(n)for(var a,s=n(t),c=i.f,l=0;s.length>l;)c.call(t,a=s[l++])&&e.push(a);return e}},function(t,e,n){var o=n(0);o(o.S,\"Object\",{create:n(47)})},function(t,e,n){var o=n(0);o(o.S+o.F*!n(18),\"Object\",{defineProperty:n(19).f})},function(t,e,n){var o=n(0);o(o.S+o.F*!n(18),\"Object\",{defineProperties:n(112)})},function(t,e,n){var o=n(28),r=n(33).f;n(34)(\"getOwnPropertyDescriptor\",(function(){return function(t,e){return r(o(t),e)}}))},function(t,e,n){var o=n(20),r=n(49);n(34)(\"getPrototypeOf\",(function(){return function(t){return r(o(t))}}))},function(t,e,n){var o=n(20),r=n(45);n(34)(\"keys\",(function(){return function(t){return r(o(t))}}))},function(t,e,n){n(34)(\"getOwnPropertyNames\",(function(){return n(113).f}))},function(t,e,n){var o=n(12),r=n(41).onFreeze;n(34)(\"freeze\",(function(t){return function(e){return t&&o(e)?t(r(e)):e}}))},function(t,e,n){var o=n(12),r=n(41).onFreeze;n(34)(\"seal\",(function(t){return function(e){return t&&o(e)?t(r(e)):e}}))},function(t,e,n){var o=n(12),r=n(41).onFreeze;n(34)(\"preventExtensions\",(function(t){return function(e){return t&&o(e)?t(r(e)):e}}))},function(t,e,n){var o=n(12);n(34)(\"isFrozen\",(function(t){return function(e){return!o(e)||!!t&&t(e)}}))},function(t,e,n){var o=n(12);n(34)(\"isSealed\",(function(t){return function(e){return!o(e)||!!t&&t(e)}}))},function(t,e,n){var o=n(12);n(34)(\"isExtensible\",(function(t){return function(e){return!!o(e)&&(!t||t(e))}}))},function(t,e,n){var o=n(0);o(o.S+o.F,\"Object\",{assign:n(114)})},function(t,e,n){var o=n(0);o(o.S,\"Object\",{is:n(115)})},function(t,e,n){var o=n(0);o(o.S,\"Object\",{setPrototypeOf:n(87).set})},function(t,e,n){\"use strict\";var o=n(64),r={};r[n(14)(\"toStringTag\")]=\"z\",r+\"\"!=\"[object z]\"&&n(23)(Object.prototype,\"toString\",(function(){return\"[object \"+o(this)+\"]\"}),!0)},function(t,e,n){var o=n(0);o(o.P,\"Function\",{bind:n(116)})},function(t,e,n){var o=n(19).f,r=Function.prototype,i=/^\\s*function ([^ (]*)/;\"name\"in r||n(18)&&o(r,\"name\",{configurable:!0,get:function(){try{return(\"\"+this).match(i)[1]}catch(t){return\"\"}}})},function(t,e,n){\"use strict\";var o=n(12),r=n(49),i=n(14)(\"hasInstance\"),a=Function.prototype;i in a||n(19).f(a,i,{value:function(t){if(\"function\"!=typeof this||!o(t))return!1;if(!o(this.prototype))return t instanceof this;for(;t=r(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var o=n(0),r=n(118);o(o.G+o.F*(parseInt!=r),{parseInt:r})},function(t,e,n){var o=n(0),r=n(119);o(o.G+o.F*(parseFloat!=r),{parseFloat:r})},function(t,e,n){\"use strict\";var o=n(9),r=n(26),i=n(36),a=n(89),s=n(40),c=n(10),l=n(48).f,u=n(33).f,f=n(19).f,d=n(53).trim,p=o.Number,h=p,v=p.prototype,g=\"Number\"==i(n(47)(v)),y=\"trim\"in String.prototype,b=function(t){var e=s(t,!1);if(\"string\"==typeof e&&e.length>2){var n,o,r,i=(e=y?e.trim():d(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:o=2,r=49;break;case 79:case 111:o=8,r=55;break;default:return+e}for(var a,c=e.slice(2),l=0,u=c.length;l<u;l++)if((a=c.charCodeAt(l))<48||a>r)return NaN;return parseInt(c,o)}}return+e};if(!p(\" 0o1\")||!p(\"0b1\")||p(\"+0x1\")){p=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof p&&(g?c((function(){v.valueOf.call(n)})):\"Number\"!=i(n))?a(new h(b(e)),n,p):b(e)};for(var m,k=n(18)?l(h):\"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger\".split(\",\"),x=0;k.length>x;x++)r(h,m=k[x])&&!r(p,m)&&f(p,m,u(h,m));p.prototype=v,v.constructor=p,n(23)(o,\"Number\",p)}},function(t,e,n){\"use strict\";var o=n(0),r=n(32),i=n(120),a=n(90),s=1..toFixed,c=Math.floor,l=[0,0,0,0,0,0],u=\"Number.toFixed: incorrect invocation!\",f=function(t,e){for(var n=-1,o=e;++n<6;)o+=t*l[n],l[n]=o%1e7,o=c(o/1e7)},d=function(t){for(var e=6,n=0;--e>=0;)n+=l[e],l[e]=c(n/t),n=n%t*1e7},p=function(){for(var t=6,e=\"\";--t>=0;)if(\"\"!==e||0===t||0!==l[t]){var n=String(l[t]);e=\"\"===e?n:e+a.call(\"0\",7-n.length)+n}return e},h=function(t,e,n){return 0===e?n:e%2==1?h(t,e-1,n*t):h(t*t,e/2,n)};o(o.P+o.F*(!!s&&(\"0.000\"!==8e-5.toFixed(3)||\"1\"!==.9.toFixed(0)||\"1.25\"!==1.255.toFixed(2)||\"1000000000000000128\"!==(0xde0b6b3a7640080).toFixed(0))||!n(10)((function(){s.call({})}))),\"Number\",{toFixed:function(t){var e,n,o,s,c=i(this,u),l=r(t),v=\"\",g=\"0\";if(l<0||l>20)throw RangeError(u);if(c!=c)return\"NaN\";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v=\"-\",c=-c),c>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(c*h(2,69,1))-69)<0?c*h(2,-e,1):c/h(2,e,1),n*=4503599627370496,(e=52-e)>0){for(f(0,n),o=l;o>=7;)f(1e7,0),o-=7;for(f(h(10,o,1),0),o=e-1;o>=23;)d(1<<23),o-=23;d(1<<o),f(1,1),d(2),g=p()}else f(0,n),f(1<<-e,0),g=p()+a.call(\"0\",l);return g=l>0?v+((s=g.length)<=l?\"0.\"+a.call(\"0\",l-s)+g:g.slice(0,s-l)+\".\"+g.slice(s-l)):v+g}})},function(t,e,n){\"use strict\";var o=n(0),r=n(10),i=n(120),a=1..toPrecision;o(o.P+o.F*(r((function(){return\"1\"!==a.call(1,void 0)}))||!r((function(){a.call({})}))),\"Number\",{toPrecision:function(t){var e=i(this,\"Number#toPrecision: incorrect invocation!\");return void 0===t?a.call(e):a.call(e,t)}})},function(t,e,n){var o=n(0);o(o.S,\"Number\",{EPSILON:Math.pow(2,-52)})},function(t,e,n){var o=n(0),r=n(9).isFinite;o(o.S,\"Number\",{isFinite:function(t){return\"number\"==typeof t&&r(t)}})},function(t,e,n){var o=n(0);o(o.S,\"Number\",{isInteger:n(121)})},function(t,e,n){var o=n(0);o(o.S,\"Number\",{isNaN:function(t){return t!=t}})},function(t,e,n){var o=n(0),r=n(121),i=Math.abs;o(o.S,\"Number\",{isSafeInteger:function(t){return r(t)&&i(t)<=9007199254740991}})},function(t,e,n){var o=n(0);o(o.S,\"Number\",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var o=n(0);o(o.S,\"Number\",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var o=n(0),r=n(119);o(o.S+o.F*(Number.parseFloat!=r),\"Number\",{parseFloat:r})},function(t,e,n){var o=n(0),r=n(118);o(o.S+o.F*(Number.parseInt!=r),\"Number\",{parseInt:r})},function(t,e,n){var o=n(0),r=n(122),i=Math.sqrt,a=Math.acosh;o(o.S+o.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),\"Math\",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:r(t-1+i(t-1)*i(t+1))}})},function(t,e,n){var o=n(0),r=Math.asinh;o(o.S+o.F*!(r&&1/r(0)>0),\"Math\",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var o=n(0),r=Math.atanh;o(o.S+o.F*!(r&&1/r(-0)<0),\"Math\",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var o=n(0),r=n(91);o(o.S,\"Math\",{cbrt:function(t){return r(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var o=n(0);o(o.S,\"Math\",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var o=n(0),r=Math.exp;o(o.S,\"Math\",{cosh:function(t){return(r(t=+t)+r(-t))/2}})},function(t,e,n){var o=n(0),r=n(92);o(o.S+o.F*(r!=Math.expm1),\"Math\",{expm1:r})},function(t,e,n){var o=n(0);o(o.S,\"Math\",{fround:n(230)})},function(t,e,n){var o=n(91),r=Math.pow,i=r(2,-52),a=r(2,-23),s=r(2,127)*(2-a),c=r(2,-126);t.exports=Math.fround||function(t){var e,n,r=Math.abs(t),l=o(t);return r<c?l*(r/c/a+1/i-1/i)*c*a:(n=(e=(1+a/i)*r)-(e-r))>s||n!=n?l*(1/0):l*n}},function(t,e,n){var o=n(0),r=Math.abs;o(o.S,\"Math\",{hypot:function(t,e){for(var n,o,i=0,a=0,s=arguments.length,c=0;a<s;)c<(n=r(arguments[a++]))?(i=i*(o=c/n)*o+1,c=n):i+=n>0?(o=n/c)*o:n;return c===1/0?1/0:c*Math.sqrt(i)}})},function(t,e,n){var o=n(0),r=Math.imul;o(o.S+o.F*n(10)((function(){return-5!=r(4294967295,5)||2!=r.length})),\"Math\",{imul:function(t,e){var n=+t,o=+e,r=65535&n,i=65535&o;return 0|r*i+((65535&n>>>16)*i+r*(65535&o>>>16)<<16>>>0)}})},function(t,e,n){var o=n(0);o(o.S,\"Math\",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var o=n(0);o(o.S,\"Math\",{log1p:n(122)})},function(t,e,n){var o=n(0);o(o.S,\"Math\",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var o=n(0);o(o.S,\"Math\",{sign:n(91)})},function(t,e,n){var o=n(0),r=n(92),i=Math.exp;o(o.S+o.F*n(10)((function(){return-2e-17!=!Math.sinh(-2e-17)})),\"Math\",{sinh:function(t){return Math.abs(t=+t)<1?(r(t)-r(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,e,n){var o=n(0),r=n(92),i=Math.exp;o(o.S,\"Math\",{tanh:function(t){var e=r(t=+t),n=r(-t);return e==1/0?1:n==1/0?-1:(e-n)/(i(t)+i(-t))}})},function(t,e,n){var o=n(0);o(o.S,\"Math\",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var o=n(0),r=n(46),i=String.fromCharCode,a=String.fromCodePoint;o(o.S+o.F*(!!a&&1!=a.length),\"String\",{fromCodePoint:function(t){for(var e,n=[],o=arguments.length,a=0;o>a;){if(e=+arguments[a++],r(e,1114111)!==e)throw RangeError(e+\" is not a valid code point\");n.push(e<65536?i(e):i(55296+((e-=65536)>>10),e%1024+56320))}return n.join(\"\")}})},function(t,e,n){var o=n(0),r=n(28),i=n(16);o(o.S,\"String\",{raw:function(t){for(var e=r(t.raw),n=i(e.length),o=arguments.length,a=[],s=0;n>s;)a.push(String(e[s++])),s<o&&a.push(String(arguments[s]));return a.join(\"\")}})},function(t,e,n){\"use strict\";n(53)(\"trim\",(function(t){return function(){return t(this,3)}}))},function(t,e,n){\"use strict\";var o=n(93)(!0);n(94)(String,\"String\",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=o(e,n),this._i+=t.length,{value:t,done:!1})}))},function(t,e,n){\"use strict\";var o=n(0),r=n(93)(!1);o(o.P,\"String\",{codePointAt:function(t){return r(this,t)}})},function(t,e,n){\"use strict\";var o=n(0),r=n(16),i=n(95),a=\"\".endsWith;o(o.P+o.F*n(97)(\"endsWith\"),\"String\",{endsWith:function(t){var e=i(this,t,\"endsWith\"),n=arguments.length>1?arguments[1]:void 0,o=r(e.length),s=void 0===n?o:Math.min(r(n),o),c=String(t);return a?a.call(e,c,s):e.slice(s-c.length,s)===c}})},function(t,e,n){\"use strict\";var o=n(0),r=n(95);o(o.P+o.F*n(97)(\"includes\"),\"String\",{includes:function(t){return!!~r(this,t,\"includes\").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var o=n(0);o(o.P,\"String\",{repeat:n(90)})},function(t,e,n){\"use strict\";var o=n(0),r=n(16),i=n(95),a=\"\".startsWith;o(o.P+o.F*n(97)(\"startsWith\"),\"String\",{startsWith:function(t){var e=i(this,t,\"startsWith\"),n=r(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),o=String(t);return a?a.call(e,o,n):e.slice(n,n+o.length)===o}})},function(t,e,n){\"use strict\";n(24)(\"anchor\",(function(t){return function(e){return t(this,\"a\",\"name\",e)}}))},function(t,e,n){\"use strict\";n(24)(\"big\",(function(t){return function(){return t(this,\"big\",\"\",\"\")}}))},function(t,e,n){\"use strict\";n(24)(\"blink\",(function(t){return function(){return t(this,\"blink\",\"\",\"\")}}))},function(t,e,n){\"use strict\";n(24)(\"bold\",(function(t){return function(){return t(this,\"b\",\"\",\"\")}}))},function(t,e,n){\"use strict\";n(24)(\"fixed\",(function(t){return function(){return t(this,\"tt\",\"\",\"\")}}))},function(t,e,n){\"use strict\";n(24)(\"fontcolor\",(function(t){return function(e){return t(this,\"font\",\"color\",e)}}))},function(t,e,n){\"use strict\";n(24)(\"fontsize\",(function(t){return function(e){return t(this,\"font\",\"size\",e)}}))},function(t,e,n){\"use strict\";n(24)(\"italics\",(function(t){return function(){return t(this,\"i\",\"\",\"\")}}))},function(t,e,n){\"use strict\";n(24)(\"link\",(function(t){return function(e){return t(this,\"a\",\"href\",e)}}))},function(t,e,n){\"use strict\";n(24)(\"small\",(function(t){return function(){return t(this,\"small\",\"\",\"\")}}))},function(t,e,n){\"use strict\";n(24)(\"strike\",(function(t){return function(){return t(this,\"strike\",\"\",\"\")}}))},function(t,e,n){\"use strict\";n(24)(\"sub\",(function(t){return function(){return t(this,\"sub\",\"\",\"\")}}))},function(t,e,n){\"use strict\";n(24)(\"sup\",(function(t){return function(){return t(this,\"sup\",\"\",\"\")}}))},function(t,e,n){var o=n(0);o(o.S,\"Date\",{now:function(){return(new Date).getTime()}})},function(t,e,n){\"use strict\";var o=n(0),r=n(20),i=n(40);o(o.P+o.F*n(10)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),\"Date\",{toJSON:function(t){var e=r(this),n=i(e);return\"number\"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var o=n(0),r=n(265);o(o.P+o.F*(Date.prototype.toISOString!==r),\"Date\",{toISOString:r})},function(t,e,n){\"use strict\";var o=n(10),r=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(t){return t>9?t:\"0\"+t};t.exports=o((function(){return\"0385-07-25T07:06:39.999Z\"!=i.call(new Date(-50000000000001))}))||!o((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(r.call(this)))throw RangeError(\"Invalid time value\");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),o=e<0?\"-\":e>9999?\"+\":\"\";return o+(\"00000\"+Math.abs(e)).slice(o?-6:-4)+\"-\"+a(t.getUTCMonth()+1)+\"-\"+a(t.getUTCDate())+\"T\"+a(t.getUTCHours())+\":\"+a(t.getUTCMinutes())+\":\"+a(t.getUTCSeconds())+\".\"+(n>99?n:\"0\"+a(n))+\"Z\"}:i},function(t,e,n){var o=Date.prototype,r=o.toString,i=o.getTime;new Date(NaN)+\"\"!=\"Invalid Date\"&&n(23)(o,\"toString\",(function(){var t=i.call(this);return t==t?r.call(this):\"Invalid Date\"}))},function(t,e,n){var o=n(14)(\"toPrimitive\"),r=Date.prototype;o in r||n(27)(r,o,n(268))},function(t,e,n){\"use strict\";var o=n(11),r=n(40);t.exports=function(t){if(\"string\"!==t&&\"number\"!==t&&\"default\"!==t)throw TypeError(\"Incorrect hint\");return r(o(this),\"number\"!=t)}},function(t,e,n){var o=n(0);o(o.S,\"Array\",{isArray:n(70)})},function(t,e,n){\"use strict\";var o=n(30),r=n(0),i=n(20),a=n(124),s=n(98),c=n(16),l=n(99),u=n(100);r(r.S+r.F*!n(71)((function(t){Array.from(t)})),\"Array\",{from:function(t){var e,n,r,f,d=i(t),p=\"function\"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,g=void 0!==v,y=0,b=u(d);if(g&&(v=o(v,h>2?arguments[2]:void 0,2)),null==b||p==Array&&s(b))for(n=new p(e=c(d.length));e>y;y++)l(n,y,g?v(d[y],y):d[y]);else for(f=b.call(d),n=new p;!(r=f.next()).done;y++)l(n,y,g?a(f,v,[r.value,y],!0):r.value);return n.length=y,n}})},function(t,e,n){\"use strict\";var o=n(0),r=n(99);o(o.S+o.F*n(10)((function(){function t(){}return!(Array.of.call(t)instanceof t)})),\"Array\",{of:function(){for(var t=0,e=arguments.length,n=new(\"function\"==typeof this?this:Array)(e);e>t;)r(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){\"use strict\";var o=n(0),r=n(28),i=[].join;o(o.P+o.F*(n(62)!=Object||!n(29)(i)),\"Array\",{join:function(t){return i.call(r(this),void 0===t?\",\":t)}})},function(t,e,n){\"use strict\";var o=n(0),r=n(86),i=n(36),a=n(46),s=n(16),c=[].slice;o(o.P+o.F*n(10)((function(){r&&c.call(r)})),\"Array\",{slice:function(t,e){var n=s(this.length),o=i(this);if(e=void 0===e?n:e,\"Array\"==o)return c.call(this,t,e);for(var r=a(t,n),l=a(e,n),u=s(l-r),f=new Array(u),d=0;d<u;d++)f[d]=\"String\"==o?this.charAt(r+d):this[r+d];return f}})},function(t,e,n){\"use strict\";var o=n(0),r=n(31),i=n(20),a=n(10),s=[].sort,c=[1,2,3];o(o.P+o.F*(a((function(){c.sort(void 0)}))||!a((function(){c.sort(null)}))||!n(29)(s)),\"Array\",{sort:function(t){return void 0===t?s.call(i(this)):s.call(i(this),r(t))}})},function(t,e,n){\"use strict\";var o=n(0),r=n(35)(0),i=n(29)([].forEach,!0);o(o.P+o.F*!i,\"Array\",{forEach:function(t){return r(this,t,arguments[1])}})},function(t,e,n){var o=n(12),r=n(70),i=n(14)(\"species\");t.exports=function(t){var e;return r(t)&&(\"function\"!=typeof(e=t.constructor)||e!==Array&&!r(e.prototype)||(e=void 0),o(e)&&null===(e=e[i])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){\"use strict\";var o=n(0),r=n(35)(1);o(o.P+o.F*!n(29)([].map,!0),\"Array\",{map:function(t){return r(this,t,arguments[1])}})},function(t,e,n){\"use strict\";var o=n(0),r=n(35)(2);o(o.P+o.F*!n(29)([].filter,!0),\"Array\",{filter:function(t){return r(this,t,arguments[1])}})},function(t,e,n){\"use strict\";var o=n(0),r=n(35)(3);o(o.P+o.F*!n(29)([].some,!0),\"Array\",{some:function(t){return r(this,t,arguments[1])}})},function(t,e,n){\"use strict\";var o=n(0),r=n(35)(4);o(o.P+o.F*!n(29)([].every,!0),\"Array\",{every:function(t){return r(this,t,arguments[1])}})},function(t,e,n){\"use strict\";var o=n(0),r=n(126);o(o.P+o.F*!n(29)([].reduce,!0),\"Array\",{reduce:function(t){return r(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){\"use strict\";var o=n(0),r=n(126);o(o.P+o.F*!n(29)([].reduceRight,!0),\"Array\",{reduceRight:function(t){return r(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){\"use strict\";var o=n(0),r=n(68)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;o(o.P+o.F*(a||!n(29)(i)),\"Array\",{indexOf:function(t){return a?i.apply(this,arguments)||0:r(this,t,arguments[1])}})},function(t,e,n){\"use strict\";var o=n(0),r=n(28),i=n(32),a=n(16),s=[].lastIndexOf,c=!!s&&1/[1].lastIndexOf(1,-0)<0;o(o.P+o.F*(c||!n(29)(s)),\"Array\",{lastIndexOf:function(t){if(c)return s.apply(this,arguments)||0;var e=r(this),n=a(e.length),o=n-1;for(arguments.length>1&&(o=Math.min(o,i(arguments[1]))),o<0&&(o=n+o);o>=0;o--)if(o in e&&e[o]===t)return o||0;return-1}})},function(t,e,n){var o=n(0);o(o.P,\"Array\",{copyWithin:n(127)}),n(50)(\"copyWithin\")},function(t,e,n){var o=n(0);o(o.P,\"Array\",{fill:n(101)}),n(50)(\"fill\")},function(t,e,n){\"use strict\";var o=n(0),r=n(35)(5),i=!0;\"find\"in[]&&Array(1).find((function(){i=!1})),o(o.P+o.F*i,\"Array\",{find:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),n(50)(\"find\")},function(t,e,n){\"use strict\";var o=n(0),r=n(35)(6),i=\"findIndex\",a=!0;i in[]&&Array(1)[i]((function(){a=!1})),o(o.P+o.F*a,\"Array\",{findIndex:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),n(50)(i)},function(t,e,n){n(55)(\"Array\")},function(t,e,n){var o=n(9),r=n(89),i=n(19).f,a=n(48).f,s=n(96),c=n(72),l=o.RegExp,u=l,f=l.prototype,d=/a/g,p=/a/g,h=new l(d)!==d;if(n(18)&&(!h||n(10)((function(){return p[n(14)(\"match\")]=!1,l(d)!=d||l(p)==p||\"/a/i\"!=l(d,\"i\")})))){l=function(t,e){var n=this instanceof l,o=s(t),i=void 0===e;return!n&&o&&t.constructor===l&&i?t:r(h?new u(o&&!i?t.source:t,e):u((o=t instanceof l)?t.source:t,o&&i?c.call(t):e),n?this:f,l)};for(var v=function(t){t in l||i(l,t,{configurable:!0,get:function(){return u[t]},set:function(e){u[t]=e}})},g=a(u),y=0;g.length>y;)v(g[y++]);f.constructor=l,l.prototype=f,n(23)(o,\"RegExp\",l)}n(55)(\"RegExp\")},function(t,e,n){\"use strict\";n(130);var o=n(11),r=n(72),i=n(18),a=/./.toString,s=function(t){n(23)(RegExp.prototype,\"toString\",t,!0)};n(10)((function(){return\"/a/b\"!=a.call({source:\"a\",flags:\"b\"})}))?s((function(){var t=o(this);return\"/\".concat(t.source,\"/\",\"flags\"in t?t.flags:!i&&t instanceof RegExp?r.call(t):void 0)})):\"toString\"!=a.name&&s((function(){return a.call(this)}))},function(t,e,n){\"use strict\";var o=n(11),r=n(16),i=n(104),a=n(73);n(74)(\"match\",1,(function(t,e,n,s){return[function(n){var o=t(this),r=null==n?void 0:n[e];return void 0!==r?r.call(n,o):new RegExp(n)[e](String(o))},function(t){var e=s(n,t,this);if(e.done)return e.value;var c=o(t),l=String(this);if(!c.global)return a(c,l);var u=c.unicode;c.lastIndex=0;for(var f,d=[],p=0;null!==(f=a(c,l));){var h=String(f[0]);d[p]=h,\"\"===h&&(c.lastIndex=i(l,r(c.lastIndex),u)),p++}return 0===p?null:d}]}))},function(t,e,n){\"use strict\";var o=n(11),r=n(20),i=n(16),a=n(32),s=n(104),c=n(73),l=Math.max,u=Math.min,f=Math.floor,d=/\\$([$&`']|\\d\\d?|<[^>]*>)/g,p=/\\$([$&`']|\\d\\d?)/g;n(74)(\"replace\",2,(function(t,e,n,h){return[function(o,r){var i=t(this),a=null==o?void 0:o[e];return void 0!==a?a.call(o,i,r):n.call(String(i),o,r)},function(t,e){var r=h(n,t,this,e);if(r.done)return r.value;var f=o(t),d=String(this),p=\"function\"==typeof e;p||(e=String(e));var g=f.global;if(g){var y=f.unicode;f.lastIndex=0}for(var b=[];;){var m=c(f,d);if(null===m)break;if(b.push(m),!g)break;\"\"===String(m[0])&&(f.lastIndex=s(d,i(f.lastIndex),y))}for(var k,x=\"\",S=0,w=0;w<b.length;w++){m=b[w];for(var T=String(m[0]),E=l(u(a(m.index),d.length),0),C=[],B=1;B<m.length;B++)C.push(void 0===(k=m[B])?k:String(k));var _=m.groups;if(p){var O=[T].concat(C,E,d);void 0!==_&&O.push(_);var I=String(e.apply(void 0,O))}else I=v(T,d,E,C,_,e);E>=S&&(x+=d.slice(S,E)+I,S=E+T.length)}return x+d.slice(S)}];function v(t,e,o,i,a,s){var c=o+t.length,l=i.length,u=p;return void 0!==a&&(a=r(a),u=d),n.call(s,u,(function(n,r){var s;switch(r.charAt(0)){case\"$\":return\"$\";case\"&\":return t;case\"`\":return e.slice(0,o);case\"'\":return e.slice(c);case\"<\":s=a[r.slice(1,-1)];break;default:var u=+r;if(0===u)return n;if(u>l){var d=f(u/10);return 0===d?n:d<=l?void 0===i[d-1]?r.charAt(1):i[d-1]+r.charAt(1):n}s=i[u-1]}return void 0===s?\"\":s}))}}))},function(t,e,n){\"use strict\";var o=n(11),r=n(115),i=n(73);n(74)(\"search\",1,(function(t,e,n,a){return[function(n){var o=t(this),r=null==n?void 0:n[e];return void 0!==r?r.call(n,o):new RegExp(n)[e](String(o))},function(t){var e=a(n,t,this);if(e.done)return e.value;var s=o(t),c=String(this),l=s.lastIndex;r(l,0)||(s.lastIndex=0);var u=i(s,c);return r(s.lastIndex,l)||(s.lastIndex=l),null===u?-1:u.index}]}))},function(t,e,n){\"use strict\";var o=n(96),r=n(11),i=n(65),a=n(104),s=n(16),c=n(73),l=n(103),u=n(10),f=Math.min,d=[].push,p=\"length\",h=!u((function(){RegExp(4294967295,\"y\")}));n(74)(\"split\",2,(function(t,e,n,u){var v;return v=\"c\"==\"abbc\".split(/(b)*/)[1]||4!=\"test\".split(/(?:)/,-1)[p]||2!=\"ab\".split(/(?:ab)*/)[p]||4!=\".\".split(/(.?)(.?)/)[p]||\".\".split(/()()/)[p]>1||\"\".split(/.?/)[p]?function(t,e){var r=String(this);if(void 0===t&&0===e)return[];if(!o(t))return n.call(r,t,e);for(var i,a,s,c=[],u=(t.ignoreCase?\"i\":\"\")+(t.multiline?\"m\":\"\")+(t.unicode?\"u\":\"\")+(t.sticky?\"y\":\"\"),f=0,h=void 0===e?4294967295:e>>>0,v=new RegExp(t.source,u+\"g\");(i=l.call(v,r))&&!((a=v.lastIndex)>f&&(c.push(r.slice(f,i.index)),i[p]>1&&i.index<r[p]&&d.apply(c,i.slice(1)),s=i[0][p],f=a,c[p]>=h));)v.lastIndex===i.index&&v.lastIndex++;return f===r[p]?!s&&v.test(\"\")||c.push(\"\"):c.push(r.slice(f)),c[p]>h?c.slice(0,h):c}:\"0\".split(void 0,0)[p]?function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}:n,[function(n,o){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r,o):v.call(String(r),n,o)},function(t,e){var o=u(v,t,this,e,v!==n);if(o.done)return o.value;var l=r(t),d=String(this),p=i(l,RegExp),g=l.unicode,y=(l.ignoreCase?\"i\":\"\")+(l.multiline?\"m\":\"\")+(l.unicode?\"u\":\"\")+(h?\"y\":\"g\"),b=new p(h?l:\"^(?:\"+l.source+\")\",y),m=void 0===e?4294967295:e>>>0;if(0===m)return[];if(0===d.length)return null===c(b,d)?[d]:[];for(var k=0,x=0,S=[];x<d.length;){b.lastIndex=h?x:0;var w,T=c(b,h?d:d.slice(x));if(null===T||(w=f(s(b.lastIndex+(h?0:x)),d.length))===k)x=a(d,x,g);else{if(S.push(d.slice(k,x)),S.length===m)return S;for(var E=1;E<=T.length-1;E++)if(S.push(T[E]),S.length===m)return S;x=k=w}}return S.push(d.slice(k)),S}]}))},function(t,e,n){var o=n(9),r=n(105).set,i=o.MutationObserver||o.WebKitMutationObserver,a=o.process,s=o.Promise,c=\"process\"==n(36)(a);t.exports=function(){var t,e,n,l=function(){var o,r;for(c&&(o=a.domain)&&o.exit();t;){r=t.fn,t=t.next;try{r()}catch(o){throw t?n():e=void 0,o}}e=void 0,o&&o.enter()};if(c)n=function(){a.nextTick(l)};else if(!i||o.navigator&&o.navigator.standalone)if(s&&s.resolve){var u=s.resolve(void 0);n=function(){u.then(l)}}else n=function(){r.call(o,l)};else{var f=!0,d=document.createTextNode(\"\");new i(l).observe(d,{characterData:!0}),n=function(){d.data=f=!f}}return function(o){var r={fn:o,next:void 0};e&&(e.next=r),t||(t=r,n()),e=r}}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){\"use strict\";var o=n(134),r=n(51);t.exports=n(77)(\"Map\",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(t){var e=o.getEntry(r(this,\"Map\"),t);return e&&e.v},set:function(t,e){return o.def(r(this,\"Map\"),0===t?0:t,e)}},o,!0)},function(t,e,n){\"use strict\";var o=n(134),r=n(51);t.exports=n(77)(\"Set\",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return o.def(r(this,\"Set\"),t=0===t?0:t,t)}},o)},function(t,e,n){\"use strict\";var o,r=n(9),i=n(35)(0),a=n(23),s=n(41),c=n(114),l=n(135),u=n(12),f=n(51),d=n(51),p=!r.ActiveXObject&&\"ActiveXObject\"in r,h=s.getWeak,v=Object.isExtensible,g=l.ufstore,y=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},b={get:function(t){if(u(t)){var e=h(t);return!0===e?g(f(this,\"WeakMap\")).get(t):e?e[this._i]:void 0}},set:function(t,e){return l.def(f(this,\"WeakMap\"),t,e)}},m=t.exports=n(77)(\"WeakMap\",y,b,l,!0,!0);d&&p&&(c((o=l.getConstructor(y,\"WeakMap\")).prototype,b),s.NEED=!0,i([\"delete\",\"has\",\"get\",\"set\"],(function(t){var e=m.prototype,n=e[t];a(e,t,(function(e,r){if(u(e)&&!v(e)){this._f||(this._f=new o);var i=this._f[t](e,r);return\"set\"==t?this:i}return n.call(this,e,r)}))})))},function(t,e,n){\"use strict\";var o=n(135),r=n(51);n(77)(\"WeakSet\",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return o.def(r(this,\"WeakSet\"),t,!0)}},o,!1,!0)},function(t,e,n){\"use strict\";var o=n(0),r=n(78),i=n(106),a=n(11),s=n(46),c=n(16),l=n(12),u=n(9).ArrayBuffer,f=n(65),d=i.ArrayBuffer,p=i.DataView,h=r.ABV&&u.isView,v=d.prototype.slice,g=r.VIEW;o(o.G+o.W+o.F*(u!==d),{ArrayBuffer:d}),o(o.S+o.F*!r.CONSTR,\"ArrayBuffer\",{isView:function(t){return h&&h(t)||l(t)&&g in t}}),o(o.P+o.U+o.F*n(10)((function(){return!new d(2).slice(1,void 0).byteLength})),\"ArrayBuffer\",{slice:function(t,e){if(void 0!==v&&void 0===e)return v.call(a(this),t);for(var n=a(this).byteLength,o=s(t,n),r=s(void 0===e?n:e,n),i=new(f(this,d))(c(r-o)),l=new p(this),u=new p(i),h=0;o<r;)u.setUint8(h++,l.getUint8(o++));return i}}),n(55)(\"ArrayBuffer\")},function(t,e,n){var o=n(0);o(o.G+o.W+o.F*!n(78).ABV,{DataView:n(106).DataView})},function(t,e,n){n(38)(\"Int8\",1,(function(t){return function(e,n,o){return t(this,e,n,o)}}))},function(t,e,n){n(38)(\"Uint8\",1,(function(t){return function(e,n,o){return t(this,e,n,o)}}))},function(t,e,n){n(38)(\"Uint8\",1,(function(t){return function(e,n,o){return t(this,e,n,o)}}),!0)},function(t,e,n){n(38)(\"Int16\",2,(function(t){return function(e,n,o){return t(this,e,n,o)}}))},function(t,e,n){n(38)(\"Uint16\",2,(function(t){return function(e,n,o){return t(this,e,n,o)}}))},function(t,e,n){n(38)(\"Int32\",4,(function(t){return function(e,n,o){return t(this,e,n,o)}}))},function(t,e,n){n(38)(\"Uint32\",4,(function(t){return function(e,n,o){return t(this,e,n,o)}}))},function(t,e,n){n(38)(\"Float32\",4,(function(t){return function(e,n,o){return t(this,e,n,o)}}))},function(t,e,n){n(38)(\"Float64\",8,(function(t){return function(e,n,o){return t(this,e,n,o)}}))},function(t,e,n){var o=n(0),r=n(31),i=n(11),a=(n(9).Reflect||{}).apply,s=Function.apply;o(o.S+o.F*!n(10)((function(){a((function(){}))})),\"Reflect\",{apply:function(t,e,n){var o=r(t),c=i(n);return a?a(o,e,c):s.call(o,e,c)}})},function(t,e,n){var o=n(0),r=n(47),i=n(31),a=n(11),s=n(12),c=n(10),l=n(116),u=(n(9).Reflect||{}).construct,f=c((function(){function t(){}return!(u((function(){}),[],t)instanceof t)})),d=!c((function(){u((function(){}))}));o(o.S+o.F*(f||d),\"Reflect\",{construct:function(t,e){i(t),a(e);var n=arguments.length<3?t:i(arguments[2]);if(d&&!f)return u(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var o=[null];return o.push.apply(o,e),new(l.apply(t,o))}var c=n.prototype,p=r(s(c)?c:Object.prototype),h=Function.apply.call(t,p,e);return s(h)?h:p}})},function(t,e,n){var o=n(19),r=n(0),i=n(11),a=n(40);r(r.S+r.F*n(10)((function(){Reflect.defineProperty(o.f({},1,{value:1}),1,{value:2})})),\"Reflect\",{defineProperty:function(t,e,n){i(t),e=a(e,!0),i(n);try{return o.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var o=n(0),r=n(33).f,i=n(11);o(o.S,\"Reflect\",{deleteProperty:function(t,e){var n=r(i(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){\"use strict\";var o=n(0),r=n(11),i=function(t){this._t=r(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(123)(i,\"Object\",(function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}})),o(o.S,\"Reflect\",{enumerate:function(t){return new i(t)}})},function(t,e,n){var o=n(33),r=n(49),i=n(26),a=n(0),s=n(12),c=n(11);a(a.S,\"Reflect\",{get:function t(e,n){var a,l,u=arguments.length<3?e:arguments[2];return c(e)===u?e[n]:(a=o.f(e,n))?i(a,\"value\")?a.value:void 0!==a.get?a.get.call(u):void 0:s(l=r(e))?t(l,n,u):void 0}})},function(t,e,n){var o=n(33),r=n(0),i=n(11);r(r.S,\"Reflect\",{getOwnPropertyDescriptor:function(t,e){return o.f(i(t),e)}})},function(t,e,n){var o=n(0),r=n(49),i=n(11);o(o.S,\"Reflect\",{getPrototypeOf:function(t){return r(i(t))}})},function(t,e,n){var o=n(0);o(o.S,\"Reflect\",{has:function(t,e){return e in t}})},function(t,e,n){var o=n(0),r=n(11),i=Object.isExtensible;o(o.S,\"Reflect\",{isExtensible:function(t){return r(t),!i||i(t)}})},function(t,e,n){var o=n(0);o(o.S,\"Reflect\",{ownKeys:n(137)})},function(t,e,n){var o=n(0),r=n(11),i=Object.preventExtensions;o(o.S,\"Reflect\",{preventExtensions:function(t){r(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,e,n){var o=n(19),r=n(33),i=n(49),a=n(26),s=n(0),c=n(42),l=n(11),u=n(12);s(s.S,\"Reflect\",{set:function t(e,n,s){var f,d,p=arguments.length<4?e:arguments[3],h=r.f(l(e),n);if(!h){if(u(d=i(e)))return t(d,n,s,p);h=c(0)}if(a(h,\"value\")){if(!1===h.writable||!u(p))return!1;if(f=r.f(p,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=s,o.f(p,n,f)}else o.f(p,n,c(0,s));return!0}return void 0!==h.set&&(h.set.call(p,s),!0)}})},function(t,e,n){var o=n(0),r=n(87);r&&o(o.S,\"Reflect\",{setPrototypeOf:function(t,e){r.check(t,e);try{return r.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){n(328),t.exports=n(17).Array.includes},function(t,e,n){\"use strict\";var o=n(0),r=n(68)(!0);o(o.P,\"Array\",{includes:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}}),n(50)(\"includes\")},function(t,e,n){n(330),t.exports=n(17).Array.flatMap},function(t,e,n){\"use strict\";var o=n(0),r=n(331),i=n(20),a=n(16),s=n(31),c=n(125);o(o.P,\"Array\",{flatMap:function(t){var e,n,o=i(this);return s(t),e=a(o.length),n=c(o,0),r(n,o,o,e,0,1,t,arguments[1]),n}}),n(50)(\"flatMap\")},function(t,e,n){\"use strict\";var o=n(70),r=n(12),i=n(16),a=n(30),s=n(14)(\"isConcatSpreadable\");t.exports=function t(e,n,c,l,u,f,d,p){for(var h,v,g=u,y=0,b=!!d&&a(d,p,3);y<l;){if(y in c){if(h=b?b(c[y],y,n):c[y],v=!1,r(h)&&(v=void 0!==(v=h[s])?!!v:o(h)),v&&f>0)g=t(e,n,h,i(h.length),g,f-1)-1;else{if(g>=9007199254740991)throw TypeError();e[g]=h}g++}y++}return g}},function(t,e,n){n(333),t.exports=n(17).String.padStart},function(t,e,n){\"use strict\";var o=n(0),r=n(138),i=n(76),a=/Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(i);o(o.P+o.F*a,\"String\",{padStart:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){n(335),t.exports=n(17).String.padEnd},function(t,e,n){\"use strict\";var o=n(0),r=n(138),i=n(76),a=/Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(i);o(o.P+o.F*a,\"String\",{padEnd:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){n(337),t.exports=n(17).String.trimLeft},function(t,e,n){\"use strict\";n(53)(\"trimLeft\",(function(t){return function(){return t(this,1)}}),\"trimStart\")},function(t,e,n){n(339),t.exports=n(17).String.trimRight},function(t,e,n){\"use strict\";n(53)(\"trimRight\",(function(t){return function(){return t(this,2)}}),\"trimEnd\")},function(t,e,n){n(341),t.exports=n(83).f(\"asyncIterator\")},function(t,e,n){n(110)(\"asyncIterator\")},function(t,e,n){n(343),t.exports=n(17).Object.getOwnPropertyDescriptors},function(t,e,n){var o=n(0),r=n(137),i=n(28),a=n(33),s=n(99);o(o.S,\"Object\",{getOwnPropertyDescriptors:function(t){for(var e,n,o=i(t),c=a.f,l=r(o),u={},f=0;l.length>f;)void 0!==(n=c(o,e=l[f++]))&&s(u,e,n);return u}})},function(t,e,n){n(345),t.exports=n(17).Object.values},function(t,e,n){var o=n(0),r=n(139)(!1);o(o.S,\"Object\",{values:function(t){return r(t)}})},function(t,e,n){n(347),t.exports=n(17).Object.entries},function(t,e,n){var o=n(0),r=n(139)(!0);o(o.S,\"Object\",{entries:function(t){return r(t)}})},function(t,e,n){\"use strict\";n(131),n(349),t.exports=n(17).Promise.finally},function(t,e,n){\"use strict\";var o=n(0),r=n(17),i=n(9),a=n(65),s=n(133);o(o.P+o.R,\"Promise\",{finally:function(t){var e=a(this,r.Promise||i.Promise),n=\"function\"==typeof t;return this.then(n?function(n){return s(e,t()).then((function(){return n}))}:t,n?function(n){return s(e,t()).then((function(){throw n}))}:t)}})},function(t,e,n){n(351),n(352),n(353),t.exports=n(17)},function(t,e,n){var o=n(9),r=n(0),i=n(76),a=[].slice,s=/MSIE .\\./.test(i),c=function(t){return function(e,n){var o=arguments.length>2,r=!!o&&a.call(arguments,2);return t(o?function(){(\"function\"==typeof e?e:Function(e)).apply(this,r)}:e,n)}};r(r.G+r.B+r.F*s,{setTimeout:c(o.setTimeout),setInterval:c(o.setInterval)})},function(t,e,n){var o=n(0),r=n(105);o(o.G+o.B,{setImmediate:r.set,clearImmediate:r.clear})},function(t,e,n){for(var o=n(102),r=n(45),i=n(23),a=n(9),s=n(27),c=n(54),l=n(14),u=l(\"iterator\"),f=l(\"toStringTag\"),d=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=r(p),v=0;v<h.length;v++){var g,y=h[v],b=p[y],m=a[y],k=m&&m.prototype;if(k&&(k[u]||s(k,u,d),k[f]||s(k,f,y),c[y]=d,b))for(g in o)k[g]||i(k,g,o[g],!0)}},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(39),n(2),n(3),n(358),n(360),n(361),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u){\"use strict\";var f=n(13),d=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=d(r),i=d(i),a=d(a),l=d(l),u=f(u);var p=function(){function t(e){var n=this;(0,i.default)(this,t);var o=function(){};u.isObject(e)&&u.isFunction(e.onReady)&&(o=e.onReady);var r=new l.default(e);this.isReady=r.isReady.then((function(){n.exportAPI(r),o()}))}return(0,a.default)(t,[{key:\"exportAPI\",value:function(t){var e=this;[\"configuration\"].forEach((function(n){e[n]=t[n]})),this.destroy=function(){for(var n in Object.values(t.moduleInstances).forEach((function(t){u.isFunction(t.destroy)&&t.destroy(),t.listeners.removeAll()})),t=null,e)Object.prototype.hasOwnProperty.call(e,n)&&delete e[n];Object.setPrototypeOf(e,null)},Object.setPrototypeOf(this,t.moduleInstances.API.methods),delete this.exportAPI,Object.entries({blocks:{clear:\"clear\",render:\"render\"},caret:{focus:\"focus\"},events:{on:\"on\",off:\"off\",emit:\"emit\"},saver:{save:\"save\"}}).forEach((function(n){var o=(0,r.default)(n,2),i=o[0],a=o[1];Object.entries(a).forEach((function(n){var o=(0,r.default)(n,2),a=o[0],s=o[1];e[s]=t.moduleInstances.API.methods[i][a]}))}))}}],[{key:\"version\",get:function(){return\"2.19.3\"}}]),t}();o.default=p,p.displayName=\"EditorJS\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},function(t,e){t.exports=function(t,e){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],o=!0,r=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);o=!0);}catch(t){r=!0,i=t}finally{try{o||null==s.return||s.return()}finally{if(r)throw i}}return n}}},function(t,e){t.exports=function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}},function(t,e,n){(e=t.exports=function(...t){return r(...t)}).__esModule=!0;const o=n(359),r=o.default;Object.assign(e,o)},function(t,e,n){\"use strict\";Object.defineProperty(e,\"__esModule\",{value:!0}),e.default=function(){},e.revert=function(){}},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[],void 0===(i=\"function\"==typeof(o=function(){\"use strict\";Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),n=e.length;--n>=0&&e.item(n)!==this;);return n>-1}),Element.prototype.closest||(Element.prototype.closest=function(t){var e=this;if(!document.documentElement.contains(e))return null;do{if(e.matches(t))return e;e=e.parentElement||e.parentNode}while(null!==e);return null}),Element.prototype.prepend||(Element.prototype.prepend=function(t){var e=document.createDocumentFragment();Array.isArray(t)||(t=[t]),t.forEach((function(t){var n=t instanceof Node;e.appendChild(n?t:document.createTextNode(t))})),this.insertBefore(e,this.firstChild)})})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(21),n(22),n(2),n(3),n(15),n(8),n(59),n(145),n(371)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c,l,u,f,d){\"use strict\";var p=n(13),h=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=h(r),i=h(i),a=h(a),s=h(s),c=h(c),l=p(l),u=h(u),d=h(d);var v=n(372),g=[];v.keys().forEach((function(t){t.match(/^\\.\\/[^_][\\w/]*\\.([tj])s$/)&&g.push(v(t))}));var y=function(){function t(e){var n,o,s=this;(0,a.default)(this,t),this.moduleInstances={},this.eventsDispatcher=new d.default,this.isReady=new Promise((function(t,e){n=t,o=e})),Promise.resolve().then((0,i.default)(r.default.mark((function t(){return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return s.configuration=e,t.next=3,s.validate();case 3:return t.next=5,s.init();case 5:return t.next=7,s.start();case 7:l.logLabeled(\"I'm ready! (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧\",\"log\",\"\",\"color: #E24A75\"),setTimeout((0,i.default)(r.default.mark((function t(){var e,o,i;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,s.render();case 2:s.configuration.autofocus&&(e=s.moduleInstances,o=e.BlockManager,(i=e.Caret).setToBlock(o.blocks[0],i.positions.START),o.highlightCurrentNode()),s.moduleInstances.UI.removeLoader(),n();case 5:case\"end\":return t.stop()}}),t)}))),500);case 9:case\"end\":return t.stop()}}),t)})))).catch((function(t){l.log(\"Editor.js is not ready because of \".concat(t),\"error\"),o(t)}))}var e,n;return(0,s.default)(t,[{key:\"validate\",value:(n=(0,i.default)(r.default.mark((function t(){var e,n,o;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(e=this.config,n=e.holderId,o=e.holder,!n||!o){t.next=3;break}throw Error(\"«holderId» and «holder» param can't assign at the same time.\");case 3:if(!l.isString(o)||c.default.get(o)){t.next=5;break}throw Error(\"element with ID «\".concat(o,\"» is missing. Pass correct holder's ID.\"));case 5:if(!o||!l.isObject(o)||c.default.isElement(o)){t.next=7;break}throw Error(\"«holder» value must be an Element node\");case 7:case\"end\":return t.stop()}}),t,this)}))),function(){return n.apply(this,arguments)})},{key:\"init\",value:function(){this.constructModules(),this.configureModules()}},{key:\"start\",value:(e=(0,i.default)(r.default.mark((function t(){var e,n=this;return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=[\"Tools\",\"UI\",\"BlockManager\",\"Paste\",\"BlockSelection\",\"RectangleSelection\",\"CrossBlockSelection\",\"ReadOnly\"],t.next=3,e.reduce((function(t,e){return t.then((0,i.default)(r.default.mark((function t(){return r.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,n.moduleInstances[e].prepare();case 3:t.next=10;break;case 5:if(t.prev=5,t.t0=t.catch(0),!(t.t0 instanceof f.CriticalError)){t.next=9;break}throw new Error(t.t0.message);case 9:l.log(\"Module \".concat(e,\" was skipped because of %o\"),\"warn\",t.t0);case 10:case\"end\":return t.stop()}}),t,null,[[0,5]])}))))}),Promise.resolve());case 3:case\"end\":return t.stop()}}),t)}))),function(){return e.apply(this,arguments)})},{key:\"render\",value:function(){return this.moduleInstances.Renderer.render(this.config.data.blocks)}},{key:\"constructModules\",value:function(){var t=this;g.forEach((function(e){var n=l.isFunction(e)?e:e.default;try{t.moduleInstances[n.displayName]=new n({config:t.configuration,eventsDispatcher:t.eventsDispatcher})}catch(t){l.log(\"Module \".concat(n.displayName,\" skipped because\"),\"warn\",t)}}))}},{key:\"configureModules\",value:function(){for(var t in this.moduleInstances)Object.prototype.hasOwnProperty.call(this.moduleInstances,t)&&(this.moduleInstances[t].state=this.getModulesDiff(t))}},{key:\"getModulesDiff\",value:function(t){var e={};for(var n in this.moduleInstances)n!==t&&(e[n]=this.moduleInstances[n]);return e}},{key:\"configuration\",set:function(t){var e,n;l.isObject(t)?this.config=Object.assign({},t):this.config={holder:t},l.deprecationAssert(!!this.config.holderId,\"config.holderId\",\"config.holder\"),this.config.holderId&&!this.config.holder&&(this.config.holder=this.config.holderId,this.config.holderId=null),null==this.config.holder&&(this.config.holder=\"editorjs\"),this.config.logLevel||(this.config.logLevel=l.LogLevels.VERBOSE),l.setLogLevel(this.config.logLevel),l.deprecationAssert(Boolean(this.config.initialBlock),\"config.initialBlock\",\"config.defaultBlock\"),this.config.defaultBlock=this.config.defaultBlock||this.config.initialBlock||\"paragraph\",this.config.minHeight=void 0!==this.config.minHeight?this.config.minHeight:300;var o={type:this.config.defaultBlock,data:{}};this.config.placeholder=this.config.placeholder||!1,this.config.sanitizer=this.config.sanitizer||{p:!0,b:!0,a:!0},this.config.hideToolbar=!!this.config.hideToolbar&&this.config.hideToolbar,this.config.tools=this.config.tools||{},this.config.i18n=this.config.i18n||{},this.config.data=this.config.data||{blocks:[]},this.config.onReady=this.config.onReady||function(){},this.config.onChange=this.config.onChange||function(){},this.config.inlineToolbar=void 0===this.config.inlineToolbar||this.config.inlineToolbar,!l.isEmpty(this.config.data)&&this.config.data.blocks&&0!==this.config.data.blocks.length||(this.config.data={blocks:[o]}),this.config.readOnly=this.config.readOnly||!1,(null===(e=this.config.i18n)||void 0===e?void 0:e.messages)&&u.default.setDictionary(this.config.i18n.messages),this.config.i18n.direction=(null===(n=this.config.i18n)||void 0===n?void 0:n.direction)||\"ltr\"},get:function(){return this.config}}]),t}();o.default=y,y.displayName=\"Core\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o=n(142);t.exports=function(t){if(Array.isArray(t))return o(t)}},function(t,e){t.exports=function(t){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}},function(t,e){t.exports=function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}},function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return t}},function(t,e,n){var o=n(4),r=n(107),i=n(368),a=n(369);function s(e){var n=\"function\"==typeof Map?new Map:void 0;return t.exports=s=function(t){if(null===t||!i(t))return t;if(\"function\"!=typeof t)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==n){if(n.has(t))return n.get(t);n.set(t,e)}function e(){return a(t,arguments,o(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),r(e,t)},s(e)}t.exports=s},function(t,e){t.exports=function(t){return-1!==Function.toString.call(t).indexOf(\"[native code]\")}},function(t,e,n){var o=n(107),r=n(370);function i(e,n,a){return r()?t.exports=i=Reflect.construct:t.exports=i=function(t,e,n){var r=[null];r.push.apply(r,e);var i=new(Function.bind.apply(t,r));return n&&o(i,n.prototype),i},i.apply(null,arguments)}t.exports=i},function(t,e){t.exports=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3)],void 0===(i=\"function\"==typeof(o=function(o,r,i){\"use strict\";var a=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=a(r),i=a(i);var s=function(){function t(){(0,r.default)(this,t),this.subscribers={}}return(0,i.default)(t,[{key:\"on\",value:function(t,e){t in this.subscribers||(this.subscribers[t]=[]),this.subscribers[t].push(e)}},{key:\"once\",value:function(t,e){var n=this;t in this.subscribers||(this.subscribers[t]=[]),this.subscribers[t].push((function o(r){var i=e(r),a=n.subscribers[t].indexOf(o);return-1!==a&&n.subscribers[t].splice(a,1),i}))}},{key:\"emit\",value:function(t,e){this.subscribers[t]&&this.subscribers[t].reduce((function(t,e){return e(t)||t}),e)}},{key:\"off\",value:function(t,e){for(var n=0;n<this.subscribers[t].length;n++)if(this.subscribers[t][n]===e){delete this.subscribers[t][n];break}}},{key:\"destroy\",value:function(){this.subscribers=null}}]),t}();o.default=s,s.displayName=\"EventsDispatcher\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o={\"./api\":79,\"./api/\":79,\"./api/blocks\":146,\"./api/blocks.ts\":146,\"./api/caret\":148,\"./api/caret.ts\":148,\"./api/events\":149,\"./api/events.ts\":149,\"./api/i18n\":150,\"./api/i18n.ts\":150,\"./api/index\":79,\"./api/index.ts\":79,\"./api/inlineToolbar\":151,\"./api/inlineToolbar.ts\":151,\"./api/listeners\":152,\"./api/listeners.ts\":152,\"./api/notifier\":153,\"./api/notifier.ts\":153,\"./api/readonly\":154,\"./api/readonly.ts\":154,\"./api/sanitizer\":155,\"./api/sanitizer.ts\":155,\"./api/saver\":156,\"./api/saver.ts\":156,\"./api/selection\":157,\"./api/selection.ts\":157,\"./api/styles\":158,\"./api/styles.ts\":158,\"./api/toolbar\":159,\"./api/toolbar.ts\":159,\"./api/tooltip\":160,\"./api/tooltip.ts\":160,\"./blockEvents\":161,\"./blockEvents.ts\":161,\"./blockManager\":162,\"./blockManager.ts\":162,\"./blockSelection\":163,\"./blockSelection.ts\":163,\"./caret\":164,\"./caret.ts\":164,\"./crossBlockSelection\":165,\"./crossBlockSelection.ts\":165,\"./dragNDrop\":166,\"./dragNDrop.ts\":166,\"./modificationsObserver\":167,\"./modificationsObserver.ts\":167,\"./notifier\":168,\"./notifier.ts\":168,\"./paste\":169,\"./paste.ts\":169,\"./readonly\":170,\"./readonly.ts\":170,\"./rectangleSelection\":171,\"./rectangleSelection.ts\":171,\"./renderer\":172,\"./renderer.ts\":172,\"./sanitizer\":173,\"./sanitizer.ts\":173,\"./saver\":174,\"./saver.ts\":174,\"./toolbar\":80,\"./toolbar/\":80,\"./toolbar/blockSettings\":175,\"./toolbar/blockSettings.ts\":175,\"./toolbar/conversion\":176,\"./toolbar/conversion.ts\":176,\"./toolbar/index\":80,\"./toolbar/index.ts\":80,\"./toolbar/inline\":177,\"./toolbar/inline.ts\":177,\"./toolbar/toolbox\":178,\"./toolbar/toolbox.ts\":178,\"./tools\":66,\"./tools.ts\":66,\"./tooltip\":179,\"./tooltip.ts\":179,\"./ui\":180,\"./ui.ts\":180};function r(t){var e=i(t);return n(e)}function i(t){if(!n.o(o,t)){var e=new Error(\"Cannot find module '\"+t+\"'\");throw e.code=\"MODULE_NOT_FOUND\",e}return o[t]}r.keys=function(){return Object.keys(o)},r.resolve=i,t.exports=r,r.id=372},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a){\"use strict\";var s=n(13),c=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=c(r),i=c(i),a=s(a);var l=function(){function t(){(0,r.default)(this,t),this.allListeners=[]}return(0,i.default)(t,[{key:\"on\",value:function(t,e,n){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=a.generateId(\"l\"),i={id:r,element:t,eventType:e,handler:n,options:o},s=this.findOne(t,e,n);if(!s)return this.allListeners.push(i),t.addEventListener(e,n,o),r}},{key:\"off\",value:function(t,e,n,o){var r=this,i=this.findAll(t,e,n);i.forEach((function(t,e){var n=r.allListeners.indexOf(i[e]);n>-1&&(r.allListeners.splice(n,1),t.element.removeEventListener(t.eventType,t.handler,t.options))}))}},{key:\"offById\",value:function(t){var e=this.findById(t);e&&e.element.removeEventListener(e.eventType,e.handler,e.options)}},{key:\"findOne\",value:function(t,e,n){var o=this.findAll(t,e,n);return o.length>0?o[0]:null}},{key:\"findAll\",value:function(t,e,n){var o=t?this.findByEventTarget(t):[];return t&&e&&n?o.filter((function(t){return t.eventType===e&&t.handler===n})):t&&e?o.filter((function(t){return t.eventType===e})):o}},{key:\"removeAll\",value:function(){this.allListeners.map((function(t){t.element.removeEventListener(t.eventType,t.handler,t.options)})),this.allListeners=[]}},{key:\"destroy\",value:function(){this.removeAll()}},{key:\"findByEventTarget\",value:function(t){return this.allListeners.filter((function(e){if(e.element===t)return e}))}},{key:\"findByType\",value:function(t){return this.allListeners.filter((function(e){if(e.eventType===t)return e}))}},{key:\"findByHandler\",value:function(t){return this.allListeners.filter((function(e){if(e.handler===t)return e}))}},{key:\"findById\",value:function(t){return this.allListeners.find((function(e){return e.id===t}))}}]),t}();o.default=l,l.displayName=\"Listeners\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){window,t.exports=function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"/\",n(n.s=0)}([function(t,e,n){function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function r(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}n(1).toString();var i=function(){function t(e){var n=e.data,o=e.config,r=e.api,i=e.readOnly;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.api=r,this.readOnly=i,this._CSS={block:this.api.styles.block,wrapper:\"ce-paragraph\"},this.readOnly||(this.onKeyUp=this.onKeyUp.bind(this)),this._placeholder=o.placeholder?o.placeholder:t.DEFAULT_PLACEHOLDER,this._data={},this._element=this.drawView(),this._preserveBlank=void 0!==o.preserveBlank&&o.preserveBlank,this.data=n}return r(t,null,[{key:\"DEFAULT_PLACEHOLDER\",get:function(){return\"\"}}]),r(t,[{key:\"onKeyUp\",value:function(t){\"Backspace\"!==t.code&&\"Delete\"!==t.code||\"\"===this._element.textContent&&(this._element.innerHTML=\"\")}},{key:\"drawView\",value:function(){var t=document.createElement(\"DIV\");return t.classList.add(this._CSS.wrapper,this._CSS.block),t.contentEditable=!1,t.dataset.placeholder=this.api.i18n.t(this._placeholder),this.readOnly||(t.contentEditable=!0,t.addEventListener(\"keyup\",this.onKeyUp)),t}},{key:\"render\",value:function(){return this._element}},{key:\"merge\",value:function(t){var e={text:this.data.text+t.text};this.data=e}},{key:\"validate\",value:function(t){return!(\"\"===t.text.trim()&&!this._preserveBlank)}},{key:\"save\",value:function(t){return{text:t.innerHTML}}},{key:\"onPaste\",value:function(t){var e={text:t.detail.data.innerHTML};this.data=e}},{key:\"data\",get:function(){var t=this._element.innerHTML;return this._data.text=t,this._data},set:function(t){this._data=t||{},this._element.innerHTML=this._data.text||\"\"}}],[{key:\"conversionConfig\",get:function(){return{export:\"text\",import:\"text\"}}},{key:\"sanitize\",get:function(){return{text:{br:!0}}}},{key:\"isReadOnlySupported\",get:function(){return!0}},{key:\"pasteConfig\",get:function(){return{tags:[\"P\"]}}},{key:\"toolbox\",get:function(){return{icon:n(5).default,title:\"Text\"}}}]),t}();t.exports=i},function(t,e,n){var o=n(2),r=n(3);\"string\"==typeof(r=r.__esModule?r.default:r)&&(r=[[t.i,r,\"\"]]),o(r,{insert:\"head\",singleton:!1}),t.exports=r.locals||{}},function(t,e,n){\"use strict\";var o,r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function a(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},o=[],r=0;r<t.length;r++){var s=t[r],c=e.base?s[0]+e.base:s[0],l=n[c]||0,u=\"\".concat(c,\" \").concat(l);n[c]=l+1;var f=a(u),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:u,updater:v(d,e),references:1}),o.push(u)}return o}function c(t){var e=document.createElement(\"style\"),o=t.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),\"function\"==typeof t.insert)t.insert(e);else{var a=r(t.insert||\"head\");if(!a)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");a.appendChild(e)}return e}var l,u=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join(\"\\n\")});function f(t,e,n,o){var r=n?\"\":o.media?\"@media \".concat(o.media,\" {\").concat(o.css,\"}\"):o.css;if(t.styleSheet)t.styleSheet.cssText=u(e,r);else{var i=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function d(t,e,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?t.setAttribute(\"media\",r):t.removeAttribute(\"media\"),i&&btoa&&(o+=\"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i)))),\" */\")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var p=null,h=0;function v(t,e){var n,o,r;if(e.singleton){var i=h++;n=p||(p=c(e)),o=f.bind(null,n,i,!1),r=f.bind(null,n,i,!0)}else n=c(e),o=d.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||\"boolean\"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=s(t=t||[],e);return function(t){if(t=t||[],\"[object Array]\"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var r=a(n[o]);i[r].references--}for(var c=s(t,e),l=0;l<n.length;l++){var u=a(n[l]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=c}}}},function(t,e,n){(e=n(4)(!1)).push([t.i,\".ce-paragraph {\\n    line-height: 1.6em;\\n    outline: none;\\n}\\n\\n.ce-paragraph[data-placeholder]:empty::before{\\n  content: attr(data-placeholder);\\n  color: #707684;\\n  font-weight: normal;\\n  opacity: 0;\\n}\\n\\n/** Show placeholder at the first paragraph if Editor is empty */\\n.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before {\\n  opacity: 1;\\n}\\n\\n.codex-editor--toolbox-opened .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before,\\n.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:focus::before {\\n  opacity: 0;\\n}\\n\\n.ce-paragraph p:first-of-type{\\n    margin-top: 0;\\n}\\n\\n.ce-paragraph p:last-of-type{\\n    margin-bottom: 0;\\n}\\n\",\"\"]),t.exports=e},function(t,e,n){\"use strict\";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n,o,r,i=t[1]||\"\",a=t[3];if(!a)return i;if(e&&\"function\"==typeof btoa){var s=(n=a,o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r=\"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(o),\"/*# \".concat(r,\" */\")),c=a.sources.map((function(t){return\"/*# sourceURL=\".concat(a.sourceRoot||\"\").concat(t,\" */\")}));return[i].concat(c).concat([s]).join(\"\\n\")}return[i].join(\"\\n\")}(e,t);return e[2]?\"@media \".concat(e[2],\" {\").concat(n,\"}\"):n})).join(\"\")},e.i=function(t,n,o){\"string\"==typeof t&&(t=[[null,t,\"\"]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);o&&r[c[0]]||(n&&(c[2]?c[2]=\"\".concat(n,\" and \").concat(c[2]):c[2]=n),e.push(c))}},e}},function(t,e,n){\"use strict\";n.r(e),e.default='<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0.2 -0.3 9 11.4\" width=\"12\" height=\"14\">\\n  <path d=\"M0 2.77V.92A1 1 0 01.2.28C.35.1.56 0 .83 0h7.66c.28.01.48.1.63.28.14.17.21.38.21.64v1.85c0 .26-.08.48-.23.66-.15.17-.37.26-.66.26-.28 0-.5-.09-.64-.26a1 1 0 01-.21-.66V1.69H5.6v7.58h.5c.25 0 .45.08.6.23.17.16.25.35.25.6s-.08.45-.24.6a.87.87 0 01-.62.22H3.21a.87.87 0 01-.61-.22.78.78 0 01-.24-.6c0-.25.08-.44.24-.6a.85.85 0 01.61-.23h.5V1.7H1.73v1.08c0 .26-.08.48-.23.66-.15.17-.37.26-.66.26-.28 0-.5-.09-.64-.26A1 1 0 010 2.77z\"/>\\n</svg>\\n'}])},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(15)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a){\"use strict\";var s=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=s(r),i=s(i),a=s(a);var c=function(){function t(){(0,r.default)(this,t),this.commandName=\"bold\",this.CSS={button:\"ce-inline-tool\",buttonActive:\"ce-inline-tool--active\",buttonModifier:\"ce-inline-tool--bold\"},this.nodes={button:void 0}}return(0,i.default)(t,[{key:\"render\",value:function(){return this.nodes.button=document.createElement(\"button\"),this.nodes.button.type=\"button\",this.nodes.button.classList.add(this.CSS.button,this.CSS.buttonModifier),this.nodes.button.appendChild(a.default.svg(\"bold\",12,14)),this.nodes.button}},{key:\"surround\",value:function(t){document.execCommand(this.commandName)}},{key:\"checkState\",value:function(t){var e=document.queryCommandState(this.commandName);return this.nodes.button.classList.toggle(this.CSS.buttonActive,e),e}},{key:\"shortcut\",get:function(){return\"CMD+B\"}}],[{key:\"sanitize\",get:function(){return{b:{}}}}]),t}();o.default=c,c.displayName=\"BoldInlineTool\",c.isInline=!0,c.title=\"Bold\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(15)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a){\"use strict\";var s=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=s(r),i=s(i),a=s(a);var c=function(){function t(){(0,r.default)(this,t),this.commandName=\"italic\",this.CSS={button:\"ce-inline-tool\",buttonActive:\"ce-inline-tool--active\",buttonModifier:\"ce-inline-tool--italic\"},this.nodes={button:null}}return(0,i.default)(t,[{key:\"render\",value:function(){return this.nodes.button=document.createElement(\"button\"),this.nodes.button.type=\"button\",this.nodes.button.classList.add(this.CSS.button,this.CSS.buttonModifier),this.nodes.button.appendChild(a.default.svg(\"italic\",4,11)),this.nodes.button}},{key:\"surround\",value:function(t){document.execCommand(this.commandName)}},{key:\"checkState\",value:function(t){var e=document.queryCommandState(this.commandName);return this.nodes.button.classList.toggle(this.CSS.buttonActive,e),e}},{key:\"shortcut\",get:function(){return\"CMD+I\"}}],[{key:\"sanitize\",get:function(){return{i:{}}}}]),t}();o.default=c,c.displayName=\"ItalicInlineTool\",c.isInline=!0,c.title=\"Italic\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(25),n(15),n(8)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c){\"use strict\";var l=n(13),u=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=u(s),c=l(c);var f=function(){function t(e){var n=e.api;(0,r.default)(this,t),this.commandLink=\"createLink\",this.commandUnlink=\"unlink\",this.ENTER_KEY=13,this.CSS={button:\"ce-inline-tool\",buttonActive:\"ce-inline-tool--active\",buttonModifier:\"ce-inline-tool--link\",buttonUnlink:\"ce-inline-tool--unlink\",input:\"ce-inline-tool-input\",inputShowed:\"ce-inline-tool-input--showed\"},this.nodes={button:null,input:null},this.inputOpened=!1,this.toolbar=n.toolbar,this.inlineToolbar=n.inlineToolbar,this.notifier=n.notifier,this.i18n=n.i18n,this.selection=new a.default}return(0,i.default)(t,[{key:\"render\",value:function(){return this.nodes.button=document.createElement(\"button\"),this.nodes.button.type=\"button\",this.nodes.button.classList.add(this.CSS.button,this.CSS.buttonModifier),this.nodes.button.appendChild(s.default.svg(\"link\",14,10)),this.nodes.button.appendChild(s.default.svg(\"unlink\",15,11)),this.nodes.button}},{key:\"renderActions\",value:function(){var t=this;return this.nodes.input=document.createElement(\"input\"),this.nodes.input.placeholder=this.i18n.t(\"Add a link\"),this.nodes.input.classList.add(this.CSS.input),this.nodes.input.addEventListener(\"keydown\",(function(e){e.keyCode===t.ENTER_KEY&&t.enterPressed(e)})),this.nodes.input}},{key:\"surround\",value:function(t){if(t){this.inputOpened?(this.selection.restore(),this.selection.removeFakeBackground()):(this.selection.setFakeBackground(),this.selection.save());var e=this.selection.findParentTag(\"A\");if(e)return this.selection.expandToTag(e),this.unlink(),this.closeActions(),this.checkState(),void this.toolbar.close()}this.toggleActions()}},{key:\"checkState\",value:function(t){var e=this.selection.findParentTag(\"A\");if(e){this.nodes.button.classList.add(this.CSS.buttonUnlink),this.nodes.button.classList.add(this.CSS.buttonActive),this.openActions();var n=e.getAttribute(\"href\");this.nodes.input.value=\"null\"!==n?n:\"\",this.selection.save()}else this.nodes.button.classList.remove(this.CSS.buttonUnlink),this.nodes.button.classList.remove(this.CSS.buttonActive);return!!e}},{key:\"clear\",value:function(){this.closeActions()}},{key:\"toggleActions\",value:function(){this.inputOpened?this.closeActions(!1):this.openActions(!0)}},{key:\"openActions\",value:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.nodes.input.classList.add(this.CSS.inputShowed),t&&this.nodes.input.focus(),this.inputOpened=!0}},{key:\"closeActions\",value:function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(this.selection.isFakeBackgroundEnabled){var e=new a.default;e.save(),this.selection.restore(),this.selection.removeFakeBackground(),e.restore()}this.nodes.input.classList.remove(this.CSS.inputShowed),this.nodes.input.value=\"\",t&&this.selection.clearSaved(),this.inputOpened=!1}},{key:\"enterPressed\",value:function(t){var e=this.nodes.input.value||\"\";return e.trim()?this.validateURL(e)?(e=this.prepareLink(e),this.selection.restore(),this.selection.removeFakeBackground(),this.insertLink(e),t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation(),this.selection.collapseToEnd(),void this.inlineToolbar.close()):(this.notifier.show({message:\"Pasted link is not valid.\",style:\"error\"}),void c.log(\"Incorrect Link pasted\",\"warn\",e)):(this.selection.restore(),this.unlink(),t.preventDefault(),void this.closeActions())}},{key:\"validateURL\",value:function(t){return!/\\s/.test(t)}},{key:\"prepareLink\",value:function(t){return t=t.trim(),t=this.addProtocol(t)}},{key:\"addProtocol\",value:function(t){if(/^(\\w+):(\\/\\/)?/.test(t))return t;var e=/^\\/[^/\\s]/.test(t),n=\"#\"===t.substring(0,1),o=/^\\/\\/[^/\\s]/.test(t);return e||n||o||(t=\"http://\"+t),t}},{key:\"insertLink\",value:function(t){var e=this.selection.findParentTag(\"A\");e&&this.selection.expandToTag(e),document.execCommand(this.commandLink,!1,t)}},{key:\"unlink\",value:function(){document.execCommand(this.commandUnlink)}},{key:\"shortcut\",get:function(){return\"CMD+K\"}}],[{key:\"sanitize\",get:function(){return{a:{href:!0,target:\"_blank\",rel:\"nofollow\"}}}}]),t}();o.default=f,f.displayName=\"LinkInlineTool\",f.isInline=!0,f.title=\"Link\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(15)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a){\"use strict\";var s=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=s(r),i=s(i),a=s(a);var c=function(){function t(e){var n=e.data,o=e.api;(0,r.default)(this,t),this.CSS={wrapper:\"ce-stub\",info:\"ce-stub__info\",title:\"ce-stub__title\",subtitle:\"ce-stub__subtitle\"},this.api=o,this.title=n.title||this.api.i18n.t(\"Error\"),this.subtitle=this.api.i18n.t(\"The block can not be displayed correctly.\"),this.savedData=n.savedData,this.wrapper=this.make()}return(0,i.default)(t,[{key:\"render\",value:function(){return this.wrapper}},{key:\"save\",value:function(){return this.savedData}},{key:\"make\",value:function(){var t=a.default.make(\"div\",this.CSS.wrapper),e=a.default.svg(\"sad-face\",52,52),n=a.default.make(\"div\",this.CSS.info),o=a.default.make(\"div\",this.CSS.title,{textContent:this.title}),r=a.default.make(\"div\",this.CSS.subtitle,{textContent:this.subtitle});return t.appendChild(e),n.appendChild(o),n.appendChild(r),t.appendChild(n),t}}]),t}();o.default=c,c.displayName=\"Stub\",c.isReadOnlySupported=!0,t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(15),n(8),n(25)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c){\"use strict\";var l=n(13),u=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=u(a),s=l(s),c=u(c);var f=function(){function t(e,n){(0,r.default)(this,t),this.cursor=-1,this.items=[],this.items=e||[],this.focusedCssClass=n}return(0,i.default)(t,[{key:\"setItems\",value:function(t){this.items=t}},{key:\"next\",value:function(){this.cursor=this.leafNodesAndReturnIndex(t.directions.RIGHT)}},{key:\"previous\",value:function(){this.cursor=this.leafNodesAndReturnIndex(t.directions.LEFT)}},{key:\"dropCursor\",value:function(){-1!==this.cursor&&(this.items[this.cursor].classList.remove(this.focusedCssClass),this.cursor=-1)}},{key:\"leafNodesAndReturnIndex\",value:function(e){var n=this;if(0===this.items.length)return this.cursor;var o=this.cursor;return-1===o?o=e===t.directions.RIGHT?-1:0:this.items[o].classList.remove(this.focusedCssClass),o=e===t.directions.RIGHT?(o+1)%this.items.length:(this.items.length+o-1)%this.items.length,a.default.canSetCaret(this.items[o])&&s.delay((function(){return c.default.setCursor(n.items[o])}),50)(),this.items[o].classList.add(this.focusedCssClass),o}},{key:\"currentItem\",get:function(){return-1===this.cursor?null:this.items[this.cursor]}}]),t}();o.default=f,f.displayName=\"DomIterator\",f.directions={RIGHT:\"right\",LEFT:\"left\"},t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(15)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a){\"use strict\";var s=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=s(r),i=s(i),a=s(a);var c=function(){function t(e){var n=e.api;(0,r.default)(this,t),this.CSS={button:\"ce-settings__button\",wrapper:\"ce-tune-move-up\",animation:\"wobble\"},this.api=n}return(0,i.default)(t,[{key:\"render\",value:function(){var t=this,e=a.default.make(\"div\",[this.CSS.button,this.CSS.wrapper],{});return e.appendChild(a.default.svg(\"arrow-up\",14,14)),this.api.listeners.on(e,\"click\",(function(n){return t.handleClick(n,e)}),!1),this.api.tooltip.onHover(e,this.api.i18n.t(\"Move up\")),e}},{key:\"handleClick\",value:function(t,e){var n=this,o=this.api.blocks.getCurrentBlockIndex(),r=this.api.blocks.getBlockByIndex(o),i=this.api.blocks.getBlockByIndex(o-1);if(0===o||!r||!i)return e.classList.add(this.CSS.animation),void window.setTimeout((function(){e.classList.remove(n.CSS.animation)}),500);var a,s=r.holder,c=i.holder,l=s.getBoundingClientRect(),u=c.getBoundingClientRect();a=u.top>0?Math.abs(l.top)-Math.abs(u.top):window.innerHeight-Math.abs(l.top)+Math.abs(u.top),window.scrollBy(0,-1*a),this.api.blocks.move(o-1),this.api.tooltip.hide()}}]),t}();o.default=c,c.displayName=\"MoveUpTune\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(15)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a){\"use strict\";var s=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=s(r),i=s(i),a=s(a);var c=function(){function t(e){var n=this,o=e.api;(0,r.default)(this,t),this.CSS={button:\"ce-settings__button\",buttonDelete:\"ce-settings__button--delete\",buttonConfirm:\"ce-settings__button--confirm\"},this.nodes={button:null},this.api=o,this.resetConfirmation=function(){n.setConfirmation(!1)}}return(0,i.default)(t,[{key:\"render\",value:function(){var t=this;return this.nodes.button=a.default.make(\"div\",[this.CSS.button,this.CSS.buttonDelete],{}),this.nodes.button.appendChild(a.default.svg(\"cross\",12,12)),this.api.listeners.on(this.nodes.button,\"click\",(function(e){return t.handleClick(e)}),!1),this.api.tooltip.onHover(this.nodes.button,this.api.i18n.t(\"Delete\")),this.nodes.button}},{key:\"handleClick\",value:function(t){this.needConfirmation?(this.api.events.off(\"block-settings-closed\",this.resetConfirmation),this.api.blocks.delete(),this.api.toolbar.close(),this.api.tooltip.hide(),t.stopPropagation()):(this.setConfirmation(!0),this.api.events.on(\"block-settings-closed\",this.resetConfirmation))}},{key:\"setConfirmation\",value:function(t){this.needConfirmation=t,this.nodes.button.classList.add(this.CSS.buttonConfirm)}}]),t}();o.default=c,c.displayName=\"DeleteTune\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(15)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a){\"use strict\";var s=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=s(r),i=s(i),a=s(a);var c=function(){function t(e){var n=e.api;(0,r.default)(this,t),this.CSS={button:\"ce-settings__button\",wrapper:\"ce-tune-move-down\",animation:\"wobble\"},this.api=n}return(0,i.default)(t,[{key:\"render\",value:function(){var t=this,e=a.default.make(\"div\",[this.CSS.button,this.CSS.wrapper],{});return e.appendChild(a.default.svg(\"arrow-down\",14,14)),this.api.listeners.on(e,\"click\",(function(n){return t.handleClick(n,e)}),!1),this.api.tooltip.onHover(e,this.api.i18n.t(\"Move down\")),e}},{key:\"handleClick\",value:function(t,e){var n=this,o=this.api.blocks.getCurrentBlockIndex(),r=this.api.blocks.getBlockByIndex(o+1);if(!r)return e.classList.add(this.CSS.animation),void window.setTimeout((function(){e.classList.remove(n.CSS.animation)}),500);var i=r.holder,a=i.getBoundingClientRect(),s=Math.abs(window.innerHeight-i.offsetHeight);a.top<window.innerHeight&&(s=window.scrollY+i.offsetHeight),window.scrollTo(0,s),this.api.blocks.move(o+1),this.api.tooltip.hide()}}]),t}();o.default=c,c.displayName=\"MoveDownTune\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){var o,r,i;\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self&&self,r=[e,n(2),n(3),n(8),n(15),n(61)],void 0===(i=\"function\"==typeof(o=function(o,r,i,a,s,c){\"use strict\";var l=n(13),u=n(1);Object.defineProperty(o,\"__esModule\",{value:!0}),o.default=void 0,r=u(r),i=u(i),a=l(a),s=u(s);var f=function(){function t(e){(0,r.default)(this,t),this.blocks=[],this.workingArea=e}return(0,i.default)(t,[{key:\"push\",value:function(t){this.blocks.push(t),this.insertToDOM(t)}},{key:\"swap\",value:function(t,e){var n=this.blocks[e];s.default.swap(this.blocks[t].holder,n.holder),this.blocks[e]=this.blocks[t],this.blocks[t]=n}},{key:\"move\",value:function(t,e){var n=this.blocks.splice(e,1)[0],o=t-1,r=Math.max(0,o),i=this.blocks[r];t>0?this.insertToDOM(n,\"afterend\",i):this.insertToDOM(n,\"beforebegin\",i),this.blocks.splice(t,0,n);var a=this.composeBlockEvent(\"move\",{fromIndex:e,toIndex:t});n.call(c.BlockToolAPI.MOVED,a)}},{key:\"insert\",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(this.length){t>this.length&&(t=this.length),n&&(this.blocks[t].holder.remove(),this.blocks[t].call(c.BlockToolAPI.REMOVED));var o=n?1:0;if(this.blocks.splice(t,o,e),t>0){var r=this.blocks[t-1];this.insertToDOM(e,\"afterend\",r)}else{var i=this.blocks[t+1];i?this.insertToDOM(e,\"beforebegin\",i):this.insertToDOM(e)}}else this.push(e)}},{key:\"remove\",value:function(t){isNaN(t)&&(t=this.length-1),this.blocks[t].holder.remove(),this.blocks[t].call(c.BlockToolAPI.REMOVED),this.blocks.splice(t,1)}},{key:\"removeAll\",value:function(){this.workingArea.innerHTML=\"\",this.blocks.forEach((function(t){return t.call(c.BlockToolAPI.REMOVED)})),this.blocks.length=0}},{key:\"insertAfter\",value:function(t,e){var n=this.blocks.indexOf(t);this.insert(n+1,e)}},{key:\"get\",value:function(t){return this.blocks[t]}},{key:\"indexOf\",value:function(t){return this.blocks.indexOf(t)}},{key:\"insertToDOM\",value:function(t,e,n){e?n.holder.insertAdjacentElement(e,t.holder):this.workingArea.appendChild(t.holder),t.call(c.BlockToolAPI.RENDERED)}},{key:\"composeBlockEvent\",value:function(t,e){return new CustomEvent(t,{detail:e})}},{key:\"length\",get:function(){return this.blocks.length}},{key:\"array\",get:function(){return this.blocks}},{key:\"nodes\",get:function(){return a.array(this.workingArea.children)}}],[{key:\"set\",value:function(t,e,n){return isNaN(Number(e))?(Reflect.set(t,e,n),!0):(t.insert(+e,n),!0)}},{key:\"get\",value:function(t,e){return isNaN(Number(e))?Reflect.get(t,e):t.get(+e)}}]),t}();o.default=f,f.displayName=\"Blocks\",t.exports=e.default})?o.apply(e,r):o)||(t.exports=i)},function(t,e,n){window,t.exports=function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=0)}([function(t,e,n){\"use strict\";function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function r(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}n.r(e);var i=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.commands={},this.keys={},this.name=e.name,this.parseShortcutName(e.name),this.element=e.on,this.callback=e.callback,this.executeShortcut=function(t){n.execute(t)},this.element.addEventListener(\"keydown\",this.executeShortcut,!1)}return r(t,null,[{key:\"supportedCommands\",get:function(){return{SHIFT:[\"SHIFT\"],CMD:[\"CMD\",\"CONTROL\",\"COMMAND\",\"WINDOWS\",\"CTRL\"],ALT:[\"ALT\",\"OPTION\"]}}},{key:\"keyCodes\",get:function(){return{0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,BACKSPACE:8,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,INSERT:45,DELETE:46}}}]),r(t,[{key:\"parseShortcutName\",value:function(e){e=e.split(\"+\");for(var n=0;n<e.length;n++){e[n]=e[n].toUpperCase();var o=!1;for(var r in t.supportedCommands)if(t.supportedCommands[r].includes(e[n])){o=this.commands[r]=!0;break}o||(this.keys[e[n]]=!0)}for(var i in t.supportedCommands)this.commands[i]||(this.commands[i]=!1)}},{key:\"execute\",value:function(e){var n,o={CMD:e.ctrlKey||e.metaKey,SHIFT:e.shiftKey,ALT:e.altKey},r=!0;for(n in this.commands)this.commands[n]!==o[n]&&(r=!1);var i,a=!0;for(i in this.keys)a=a&&e.keyCode===t.keyCodes[i];r&&a&&this.callback(e)}},{key:\"remove\",value:function(){this.element.removeEventListener(\"keydown\",this.executeShortcut)}}]),t}();e.default=i}]).default},function(t,e,n){window,t.exports=function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"/\",n(n.s=0)}([function(t,e,n){\"use strict\";n(1),t.exports=function(){var t=n(6),e=null;return{show:function(n){if(n.message){!function(){if(e)return!0;e=t.getWrapper(),document.body.appendChild(e)}();var o=null,r=n.time||8e3;switch(n.type){case\"confirm\":o=t.confirm(n);break;case\"prompt\":o=t.prompt(n);break;default:o=t.alert(n),window.setTimeout((function(){o.remove()}),r)}e.appendChild(o),o.classList.add(\"cdx-notify--bounce-in\")}}}}()},function(t,e,n){var o=n(2);\"string\"==typeof o&&(o=[[t.i,o,\"\"]]),n(4)(o,{hmr:!0,transform:void 0,insertInto:void 0}),o.locals&&(t.exports=o.locals)},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,'.cdx-notify--error{background:#fffbfb!important}.cdx-notify--error::before{background:#fb5d5d!important}.cdx-notify__input{max-width:130px;padding:5px 10px;background:#f7f7f7;border:0;border-radius:3px;font-size:13px;color:#656b7c;outline:0}.cdx-notify__input:-ms-input-placeholder{color:#656b7c}.cdx-notify__input::placeholder{color:#656b7c}.cdx-notify__input:focus:-ms-input-placeholder{color:rgba(101,107,124,.3)}.cdx-notify__input:focus::placeholder{color:rgba(101,107,124,.3)}.cdx-notify__button{border:none;border-radius:3px;font-size:13px;padding:5px 10px;cursor:pointer}.cdx-notify__button:last-child{margin-left:10px}.cdx-notify__button--cancel{background:#f2f5f7;box-shadow:0 2px 1px 0 rgba(16,19,29,0);color:#656b7c}.cdx-notify__button--cancel:hover{background:#eee}.cdx-notify__button--confirm{background:#34c992;box-shadow:0 1px 1px 0 rgba(18,49,35,.05);color:#fff}.cdx-notify__button--confirm:hover{background:#33b082}.cdx-notify__btns-wrapper{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;margin-top:5px}.cdx-notify__cross{position:absolute;top:5px;right:5px;width:10px;height:10px;padding:5px;opacity:.54;cursor:pointer}.cdx-notify__cross::after,.cdx-notify__cross::before{content:\\'\\';position:absolute;left:9px;top:5px;height:12px;width:2px;background:#575d67}.cdx-notify__cross::before{transform:rotate(-45deg)}.cdx-notify__cross::after{transform:rotate(45deg)}.cdx-notify__cross:hover{opacity:1}.cdx-notifies{position:fixed;z-index:2;bottom:20px;left:20px;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen,Ubuntu,Cantarell,\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",sans-serif}.cdx-notify{position:relative;width:220px;margin-top:15px;padding:13px 16px;background:#fff;box-shadow:0 11px 17px 0 rgba(23,32,61,.13);border-radius:5px;font-size:14px;line-height:1.4em;word-wrap:break-word}.cdx-notify::before{content:\\'\\';position:absolute;display:block;top:0;left:0;width:3px;height:calc(100% - 6px);margin:3px;border-radius:5px;background:0 0}@keyframes bounceIn{0%{opacity:0;transform:scale(.3)}50%{opacity:1;transform:scale(1.05)}70%{transform:scale(.9)}100%{transform:scale(1)}}.cdx-notify--bounce-in{animation-name:bounceIn;animation-duration:.6s;animation-iteration-count:1}.cdx-notify--success{background:#fafffe!important}.cdx-notify--success::before{background:#41ffb1!important}',\"\"])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n,o=t[1]||\"\",r=t[3];if(!r)return o;if(e&&\"function\"==typeof btoa){var i=(n=r,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+\" */\"),a=r.sources.map((function(t){return\"/*# sourceURL=\"+r.sourceRoot+t+\" */\"}));return[o].concat(a).concat([i]).join(\"\\n\")}return[o].join(\"\\n\")}(e,t);return e[2]?\"@media \"+e[2]+\"{\"+n+\"}\":n})).join(\"\")},e.i=function(t,n){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];\"number\"==typeof i&&(o[i]=!0)}for(r=0;r<t.length;r++){var a=t[r];\"number\"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),e.push(a))}},e}},function(t,e,n){var o,r,i={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),s=function(t){var e={};return function(t){if(\"function\"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),c=null,l=0,u=[],f=n(5);function d(t,e){for(var n=0;n<t.length;n++){var o=t[n],r=i[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(b(o.parts[a],e))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(b(o.parts[a],e));i[o.id]={id:o.id,refs:1,parts:s}}}}function p(t,e){for(var n=[],o={},r=0;r<t.length;r++){var i=t[r],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function h(t,e){var n=s(t.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var o=u[u.length-1];if(\"top\"===t.insertAt)o?o.nextSibling?n.insertBefore(e,o.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if(\"bottom\"===t.insertAt)n.appendChild(e);else{if(\"object\"!=typeof t.insertAt||!t.insertAt.before)throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");var r=s(t.insertInto+\" \"+t.insertAt.before);n.insertBefore(e,r)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function g(t){var e=document.createElement(\"style\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),y(e,t.attrs),h(t,e),e}function y(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function b(t,e){var n,o,r,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var a=l++;n=c||(c=g(e)),o=x.bind(null,n,a,!1),r=x.bind(null,n,a,!0)}else t.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=function(t){var e=document.createElement(\"link\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),t.attrs.rel=\"stylesheet\",y(e,t.attrs),h(t,e),e}(e),o=function(t,e,n){var o=n.css,r=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||i)&&(o=f(o)),r&&(o+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+\" */\");var a=new Blob([o],{type:\"text/css\"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,e),r=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(e),o=function(t,e){var n=e.css,o=e.media;if(o&&t.setAttribute(\"media\",o),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){v(n)});return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(e=e||{}).attrs=\"object\"==typeof e.attrs?e.attrs:{},e.singleton||\"boolean\"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto=\"head\"),e.insertAt||(e.insertAt=\"bottom\");var n=p(t,e);return d(n,e),function(t){for(var o=[],r=0;r<n.length;r++){var a=n[r];(s=i[a.id]).refs--,o.push(s)}for(t&&d(p(t,e),e),r=0;r<o.length;r++){var s;if(0===(s=o[r]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete i[s.id]}}}};var m,k=(m=[],function(t,e){return m[t]=e,m.filter(Boolean).join(\"\\n\")});function x(t,e,n,o){var r=n?\"\":o.css;if(t.styleSheet)t.styleSheet.cssText=k(e,r);else{var i=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e=\"undefined\"!=typeof window&&window.location;if(!e)throw new Error(\"fixUrls requires window.location\");if(!t||\"string\"!=typeof t)return t;var n=e.protocol+\"//\"+e.host,o=n+e.pathname.replace(/\\/[^\\/]*$/,\"/\");return t.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,(function(t,e){var r,i=e.trim().replace(/^\"(.*)\"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(i)?t:(r=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:o+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(r)+\")\")}))}},function(t,e,n){\"use strict\";var o,r,i,a,s,c;t.exports=(o=\"cdx-notify\",r=\"cdx-notify__cross\",i=\"cdx-notify__button--confirm\",a=\"cdx-notify__button\",s=\"cdx-notify__btns-wrapper\",{alert:c=function(t){var e=document.createElement(\"DIV\"),n=document.createElement(\"DIV\"),i=t.message,a=t.style;return e.classList.add(o),a&&e.classList.add(o+\"--\"+a),e.innerHTML=i,n.classList.add(r),n.addEventListener(\"click\",e.remove.bind(e)),e.appendChild(n),e},confirm:function(t){var e=c(t),n=document.createElement(\"div\"),o=document.createElement(\"button\"),l=document.createElement(\"button\"),u=e.querySelector(\".\"+r),f=t.cancelHandler,d=t.okHandler;return n.classList.add(s),o.innerHTML=t.okText||\"Confirm\",l.innerHTML=t.cancelText||\"Cancel\",o.classList.add(a),l.classList.add(a),o.classList.add(i),l.classList.add(\"cdx-notify__button--cancel\"),f&&\"function\"==typeof f&&(l.addEventListener(\"click\",f),u.addEventListener(\"click\",f)),d&&\"function\"==typeof d&&o.addEventListener(\"click\",d),o.addEventListener(\"click\",e.remove.bind(e)),l.addEventListener(\"click\",e.remove.bind(e)),n.appendChild(o),n.appendChild(l),e.appendChild(n),e},prompt:function(t){var e=c(t),n=document.createElement(\"div\"),o=document.createElement(\"button\"),l=document.createElement(\"input\"),u=e.querySelector(\".\"+r),f=t.cancelHandler,d=t.okHandler;return n.classList.add(s),o.innerHTML=t.okText||\"Ok\",o.classList.add(a),o.classList.add(i),l.classList.add(\"cdx-notify__input\"),t.placeholder&&l.setAttribute(\"placeholder\",t.placeholder),t.default&&(l.value=t.default),t.inputType&&(l.type=t.inputType),f&&\"function\"==typeof f&&u.addEventListener(\"click\",f),d&&\"function\"==typeof d&&o.addEventListener(\"click\",(function(){d(l.value)})),o.addEventListener(\"click\",e.remove.bind(e)),n.appendChild(l),n.appendChild(o),e.appendChild(n),e},getWrapper:function(){var t=document.createElement(\"DIV\");return t.classList.add(\"cdx-notifies\"),t}})}])},function(t,e,n){var o,r;void 0===(r=\"function\"==typeof(o=function(){function t(t){var e=t.tags;if(!Object.keys(e).map((function(t){return typeof e[t]})).every((function(t){return\"object\"===t||\"boolean\"===t||\"function\"===t})))throw new Error(\"The configuration was invalid\");this.config=t}var e=[\"P\",\"LI\",\"TD\",\"TH\",\"DIV\",\"H1\",\"H2\",\"H3\",\"H4\",\"H5\",\"H6\",\"PRE\"];function n(t){return-1!==e.indexOf(t.nodeName)}var o=[\"A\",\"B\",\"STRONG\",\"I\",\"EM\",\"SUB\",\"SUP\",\"U\",\"STRIKE\"];function r(t){return-1!==o.indexOf(t.nodeName)}function i(t,e,n){return\"function\"==typeof t.tags[e]?t.tags[e](n):t.tags[e]}function a(t,e){return void 0===e||\"boolean\"==typeof e&&!e}function s(t,e,n){var o=t.name.toLowerCase();return!0!==e&&(\"function\"==typeof e[o]?!e[o](t.value,n):void 0===e[o]||!1===e[o]||\"string\"==typeof e[o]&&e[o]!==t.value)}return t.prototype.clean=function(t){const e=document.implementation.createHTMLDocument(),n=e.createElement(\"div\");return n.innerHTML=t,this._sanitize(e,n),n.innerHTML},t.prototype._sanitize=function(t,e){var o=function(t,e){return t.createTreeWalker(e,NodeFilter.SHOW_TEXT|NodeFilter.SHOW_ELEMENT|NodeFilter.SHOW_COMMENT,null,!1)}(t,e),c=o.firstChild();if(c)do{if(c.nodeType!==Node.TEXT_NODE){if(c.nodeType===Node.COMMENT_NODE){e.removeChild(c),this._sanitize(t,e);break}var l,u=r(c);u&&(l=Array.prototype.some.call(c.childNodes,n));var f=!!e.parentNode,d=n(e)&&n(c)&&f,p=c.nodeName.toLowerCase(),h=i(this.config,p,c);if(u&&l||a(0,h)||!this.config.keepNestedBlockElements&&d){if(\"SCRIPT\"!==c.nodeName&&\"STYLE\"!==c.nodeName)for(;c.childNodes.length>0;)e.insertBefore(c.childNodes[0],c);e.removeChild(c),this._sanitize(t,e);break}for(var v=0;v<c.attributes.length;v+=1){var g=c.attributes[v];s(g,h,c)&&(c.removeAttribute(g.name),v-=1)}this._sanitize(t,c)}else if(\"\"===c.data.trim()&&(c.previousElementSibling&&n(c.previousElementSibling)||c.nextElementSibling&&n(c.nextElementSibling))){e.removeChild(c),this._sanitize(t,e);break}}while(c=o.nextSibling())},t})?o.call(e,n,e,t):o)||(t.exports=r)},function(t,e,n){window,t.exports=function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=0)}([function(t,e,n){t.exports=n(1)},function(t,e,n){\"use strict\";n.r(e),n.d(e,\"default\",(function(){return o}));class o{constructor(){this.nodes={wrapper:null,content:null},this.showed=!1,this.offsetTop=10,this.offsetLeft=10,this.offsetRight=10,this.hidingDelay=0,this.loadStyles(),this.prepare(),window.addEventListener(\"scroll\",()=>{this.showed&&this.hide(!0)},{passive:!0})}get CSS(){return{tooltip:\"ct\",tooltipContent:\"ct__content\",tooltipShown:\"ct--shown\",placement:{left:\"ct--left\",bottom:\"ct--bottom\",right:\"ct--right\",top:\"ct--top\"}}}show(t,e,n){this.nodes.wrapper||this.prepare(),this.hidingTimeout&&clearTimeout(this.hidingTimeout);const o=Object.assign({placement:\"bottom\",marginTop:0,marginLeft:0,marginRight:0,marginBottom:0,delay:70,hidingDelay:0},n);if(o.hidingDelay&&(this.hidingDelay=o.hidingDelay),this.nodes.content.innerHTML=\"\",\"string\"==typeof e)this.nodes.content.appendChild(document.createTextNode(e));else{if(!(e instanceof Node))throw Error(\"[CodeX Tooltip] Wrong type of «content» passed. It should be an instance of Node or String. But \"+typeof e+\" given.\");this.nodes.content.appendChild(e)}switch(this.nodes.wrapper.classList.remove(...Object.values(this.CSS.placement)),o.placement){case\"top\":this.placeTop(t,o);break;case\"left\":this.placeLeft(t,o);break;case\"right\":this.placeRight(t,o);break;case\"bottom\":default:this.placeBottom(t,o)}o&&o.delay?this.showingTimeout=setTimeout(()=>{this.nodes.wrapper.classList.add(this.CSS.tooltipShown),this.showed=!0},o.delay):(this.nodes.wrapper.classList.add(this.CSS.tooltipShown),this.showed=!0)}hide(t=!1){if(this.hidingDelay&&!t)return this.hidingTimeout&&clearTimeout(this.hidingTimeout),void(this.hidingTimeout=setTimeout(()=>{this.hide(!0)},this.hidingDelay));this.nodes.wrapper.classList.remove(this.CSS.tooltipShown),this.showed=!1,this.showingTimeout&&clearTimeout(this.showingTimeout)}onHover(t,e,n){t.addEventListener(\"mouseenter\",()=>{this.show(t,e,n)}),t.addEventListener(\"mouseleave\",()=>{this.hide()})}prepare(){this.nodes.wrapper=this.make(\"div\",this.CSS.tooltip),this.nodes.content=this.make(\"div\",this.CSS.tooltipContent),this.append(this.nodes.wrapper,this.nodes.content),this.append(document.body,this.nodes.wrapper)}loadStyles(){const t=\"codex-tooltips-style\";if(document.getElementById(t))return;const e=n(2),o=this.make(\"style\",null,{textContent:e.toString(),id:t});this.prepend(document.head,o)}placeBottom(t,e){const n=t.getBoundingClientRect(),o=n.left+t.clientWidth/2-this.nodes.wrapper.offsetWidth/2,r=n.bottom+window.pageYOffset+this.offsetTop+e.marginTop;this.applyPlacement(\"bottom\",o,r)}placeTop(t,e){const n=t.getBoundingClientRect(),o=n.left+t.clientWidth/2-this.nodes.wrapper.offsetWidth/2,r=n.top+window.pageYOffset-this.nodes.wrapper.clientHeight-this.offsetTop;this.applyPlacement(\"top\",o,r)}placeLeft(t,e){const n=t.getBoundingClientRect(),o=n.left-this.nodes.wrapper.offsetWidth-this.offsetLeft-e.marginLeft,r=n.top+window.pageYOffset+t.clientHeight/2-this.nodes.wrapper.offsetHeight/2;this.applyPlacement(\"left\",o,r)}placeRight(t,e){const n=t.getBoundingClientRect(),o=n.right+this.offsetRight+e.marginRight,r=n.top+window.pageYOffset+t.clientHeight/2-this.nodes.wrapper.offsetHeight/2;this.applyPlacement(\"right\",o,r)}applyPlacement(t,e,n){this.nodes.wrapper.classList.add(this.CSS.placement[t]),this.nodes.wrapper.style.left=e+\"px\",this.nodes.wrapper.style.top=n+\"px\"}make(t,e=null,n={}){const o=document.createElement(t);Array.isArray(e)?o.classList.add(...e):e&&o.classList.add(e);for(const t in n)n.hasOwnProperty(t)&&(o[t]=n[t]);return o}append(t,e){Array.isArray(e)?e.forEach(e=>t.appendChild(e)):t.appendChild(e)}prepend(t,e){Array.isArray(e)?(e=e.reverse()).forEach(e=>t.prepend(e)):t.prepend(e)}}},function(t,e){t.exports='.ct{z-index:999;opacity:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;-webkit-transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1),-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);will-change:opacity,top,left;-webkit-box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);border-radius:9px}.ct,.ct:before{position:absolute;top:0;left:0}.ct:before{content:\"\";bottom:0;right:0;background-color:#1d202b;z-index:-1;border-radius:4px}@supports(-webkit-mask-box-image:url(\"\")){.ct:before{border-radius:0;-webkit-mask-box-image:url(\\'data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\"><path d=\"M10.71 0h2.58c3.02 0 4.64.42 6.1 1.2a8.18 8.18 0 013.4 3.4C23.6 6.07 24 7.7 24 10.71v2.58c0 3.02-.42 4.64-1.2 6.1a8.18 8.18 0 01-3.4 3.4c-1.47.8-3.1 1.21-6.11 1.21H10.7c-3.02 0-4.64-.42-6.1-1.2a8.18 8.18 0 01-3.4-3.4C.4 17.93 0 16.3 0 13.29V10.7c0-3.02.42-4.64 1.2-6.1a8.18 8.18 0 013.4-3.4C6.07.4 7.7 0 10.71 0z\"/></svg>\\') 48% 41% 37.9% 53.3%}}@media (--mobile){.ct{display:none}}.ct__content{padding:6px 10px;color:#cdd1e0;font-size:12px;text-align:center;letter-spacing:.02em;line-height:1em}.ct:after{content:\"\";width:8px;height:8px;position:absolute;background-color:#1d202b;z-index:-1}.ct--bottom{-webkit-transform:translateY(5px);transform:translateY(5px)}.ct--bottom:after{top:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--top{-webkit-transform:translateY(-5px);transform:translateY(-5px)}.ct--top:after{top:auto;bottom:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--left{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.ct--left:after{top:50%;left:auto;right:0;-webkit-transform:translate(41.6%,-50%) rotate(-45deg);transform:translate(41.6%,-50%) rotate(-45deg)}.ct--right{-webkit-transform:translateX(5px);transform:translateX(5px)}.ct--right:after{top:50%;left:0;-webkit-transform:translate(-41.6%,-50%) rotate(-45deg);transform:translate(-41.6%,-50%) rotate(-45deg)}.ct--shown{opacity:1;-webkit-transform:none;transform:none}'}]).default},function(t,e,n){\"use strict\";n.r(e),e.default='<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<svg xmlns=\"http://www.w3.org/2000/svg\">\\n<symbol id=\"arrow-down\" viewBox=\"0 0 14 14\">\\n  <path transform=\"matrix(1 0 0 -1 0 14)\" d=\"M8.024 4.1v8.6a1.125 1.125 0 0 1-2.25 0V4.1L2.18 7.695A1.125 1.125 0 1 1 .59 6.104L6.103.588c.44-.439 1.151-.439 1.59 0l5.516 5.516a1.125 1.125 0 0 1-1.59 1.59L8.023 4.1z\"/>\\n\\n</symbol>\\n<symbol id=\"arrow-up\" viewBox=\"0 0 14 14\">\\n    <path d=\"M8.024 4.1v8.6a1.125 1.125 0 0 1-2.25 0V4.1L2.18 7.695A1.125 1.125 0 1 1 .59 6.104L6.103.588c.44-.439 1.151-.439 1.59 0l5.516 5.516a1.125 1.125 0 0 1-1.59 1.59L8.023 4.1z\"/>\\n\\n</symbol>\\n<symbol id=\"bold\" viewBox=\"0 0 12 14\"><path d=\"M5.997 14H1.72c-.618 0-1.058-.138-1.323-.415C.132 13.308 0 12.867 0 12.262V1.738C0 1.121.135.676.406.406.676.136 1.114 0 1.719 0h4.536c.669 0 1.248.041 1.738.124.49.083.93.242 1.318.478a3.458 3.458 0 0 1 1.461 1.752c.134.366.2.753.2 1.16 0 1.401-.7 2.426-2.1 3.075 1.84.586 2.76 1.726 2.76 3.42 0 .782-.2 1.487-.602 2.114a3.61 3.61 0 0 1-1.623 1.39 5.772 5.772 0 0 1-1.471.377c-.554.073-1.2.11-1.939.11zm-.21-6.217h-2.95v4.087h3.046c1.916 0 2.874-.69 2.874-2.072 0-.707-.248-1.22-.745-1.537-.496-.319-1.238-.478-2.225-.478zM2.837 2.13v3.619h2.597c.707 0 1.252-.067 1.638-.2.385-.134.68-.389.883-.765.16-.267.239-.566.239-.897 0-.707-.252-1.176-.755-1.409-.503-.232-1.27-.348-2.301-.348H2.836z\"/>\\n</symbol>\\n<symbol id=\"cross\" viewBox=\"0 0 237 237\">\\n  <path transform=\"rotate(45 280.675 51.325)\" d=\"M191 191V73c0-5.523 4.477-10 10-10h25c5.523 0 10 4.477 10 10v118h118c5.523 0 10 4.477 10 10v25c0 5.523-4.477 10-10 10H236v118c0 5.523-4.477 10-10 10h-25c-5.523 0-10-4.477-10-10V236H73c-5.523 0-10-4.477-10-10v-25c0-5.523 4.477-10 10-10h118z\"/>\\n\\n</symbol>\\n<symbol id=\"dots\" viewBox=\"0 0 8 8\">\\n  <circle cx=\"6.5\" cy=\"1.5\" r=\"1.5\"/>\\n  <circle cx=\"6.5\" cy=\"6.5\" r=\"1.5\"/>\\n  <circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"/>\\n  <circle cx=\"1.5\" cy=\"6.5\" r=\"1.5\"/>\\n\\n</symbol>\\n<symbol id=\"italic\" viewBox=\"0 0 4 11\">\\n    <path d=\"M3.289 4.17L2.164 9.713c-.078.384-.238.674-.48.87-.243.198-.52.296-.831.296-.312 0-.545-.1-.699-.302-.153-.202-.192-.49-.116-.864L1.15 4.225c.077-.38.232-.665.466-.857a1.25 1.25 0 01.818-.288c.312 0 .55.096.713.288.163.192.21.46.141.801zm-.667-2.09c-.295 0-.53-.09-.706-.273-.176-.181-.233-.439-.173-.77.055-.302.207-.55.457-.745C2.45.097 2.716 0 3 0c.273 0 .5.088.68.265.179.176.238.434.177.771-.06.327-.21.583-.45.767-.24.185-.502.277-.785.277z\"/>\\n\\n</symbol>\\n<symbol id=\"link\" viewBox=\"0 0 14 10\">\\n  <path d=\"M6 0v2H5a3 3 0 000 6h1v2H5A5 5 0 115 0h1zm2 0h1a5 5 0 110 10H8V8h1a3 3 0 000-6H8V0zM5 4h4a1 1 0 110 2H5a1 1 0 110-2z\"/>\\n\\n</symbol>\\n<symbol id=\"plus\" viewBox=\"0 0 14 14\">\\n    <path d=\"M8.05 5.8h4.625a1.125 1.125 0 0 1 0 2.25H8.05v4.625a1.125 1.125 0 0 1-2.25 0V8.05H1.125a1.125 1.125 0 0 1 0-2.25H5.8V1.125a1.125 1.125 0 0 1 2.25 0V5.8z\"/>\\n\\n</symbol>\\n<symbol id=\"sad-face\" viewBox=\"0 0 52 52\">\\n    <path fill=\"#D76B6B\" fill-rule=\"nonzero\" d=\"M26 52C11.64 52 0 40.36 0 26S11.64 0 26 0s26 11.64 26 26-11.64 26-26 26zm0-3.25c12.564 0 22.75-10.186 22.75-22.75S38.564 3.25 26 3.25 3.25 13.436 3.25 26 13.436 48.75 26 48.75zM15.708 33.042a2.167 2.167 0 1 1 0-4.334 2.167 2.167 0 0 1 0 4.334zm23.834 0a2.167 2.167 0 1 1 0-4.334 2.167 2.167 0 0 1 0 4.334zm-15.875 5.452a1.083 1.083 0 1 1-1.834-1.155c1.331-2.114 3.49-3.179 6.334-3.179 2.844 0 5.002 1.065 6.333 3.18a1.083 1.083 0 1 1-1.833 1.154c-.913-1.45-2.366-2.167-4.5-2.167s-3.587.717-4.5 2.167z\"/>\\n\\n</symbol>\\n<symbol id=\"toggler-down\">\\n  <path d=\"M6.5 9.294a.792.792 0 01-.562-.232L2.233 5.356a.794.794 0 011.123-1.123L6.5 7.377l3.144-3.144a.794.794 0 011.123 1.123L7.062 9.062a.792.792 0 01-.562.232z\"/>\\n\\n</symbol>\\n<symbol id=\"unlink\" viewBox=\"0 0 15 11\">\\n  <path d=\"M13.073 2.099l-1.448 1.448A3 3 0 009 2H8V0h1c1.68 0 3.166.828 4.073 2.099zM6.929 4l-.879.879L7.172 6H5a1 1 0 110-2h1.929zM6 0v2H5a3 3 0 100 6h1v2H5A5 5 0 115 0h1zm6.414 7l2.122 2.121-1.415 1.415L11 8.414l-2.121 2.122L7.464 9.12 9.586 7 7.464 4.879 8.88 3.464 11 5.586l2.121-2.122 1.415 1.415L12.414 7z\"/>\\n\\n</symbol></svg>'},function(t,e){t.exports='.codex-editor{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;z-index:1}.codex-editor .hide,.codex-editor__redactor--hidden{display:none}.codex-editor__redactor [contenteditable]:empty:after{content:\"\\\\feff \"}@media (min-width:651px){.codex-editor--narrow .codex-editor__redactor{margin-right:50px}}@media (min-width:651px){.codex-editor--narrow.codex-editor--rtl .codex-editor__redactor{margin-left:50px;margin-right:0}}@media (min-width:651px){.codex-editor--narrow .ce-toolbar__actions{right:-5px}}.codex-editor__loader{position:relative;height:30vh}.codex-editor__loader:before{content:\"\";position:absolute;left:50%;top:50%;width:30px;height:30px;margin-top:-15px;margin-left:-15px;border-radius:50%;border:2px solid rgba(201,201,204,.48);border-top-color:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-animation:editor-loader-spin .8s linear infinite;animation:editor-loader-spin .8s linear infinite;will-change:transform}.codex-editor-copyable{position:absolute;height:1px;width:1px;top:-400%;opacity:.001}.codex-editor-overlay{position:fixed;top:0;left:0;right:0;bottom:0;z-index:999;pointer-events:none;overflow:hidden}.codex-editor-overlay__container{position:relative;pointer-events:auto;z-index:0}.codex-editor-overlay__rectangle{position:absolute;pointer-events:none;background-color:rgba(46,170,220,.2);border:1px solid transparent}.codex-editor svg{fill:currentColor;vertical-align:middle;max-height:100%}::-moz-selection{background-color:#d4ecff}::selection{background-color:#d4ecff}.codex-editor--toolbox-opened [contentEditable=true][data-placeholder]:focus:before{opacity:0!important}@-webkit-keyframes editor-loader-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes editor-loader-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}.ce-toolbar{position:absolute;left:0;right:0;top:0;-webkit-transition:opacity .1s ease;transition:opacity .1s ease;will-change:opacity,transform;display:none}@media (max-width:650px){.ce-toolbar{position:absolute;background-color:#fff;border:1px solid #eaeaea;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px rgba(13,20,33,.13);border-radius:4px;z-index:2}}@media (max-width:650px) and (max-width:650px){.ce-toolbar{-webkit-box-shadow:0 13px 7px -5px rgba(26,38,49,.09),6px 15px 34px -6px rgba(33,48,73,.29);box-shadow:0 13px 7px -5px rgba(26,38,49,.09),6px 15px 34px -6px rgba(33,48,73,.29);border-bottom-color:#d5d7db}}@media (max-width:650px){.ce-toolbar{padding:3px;margin-top:5px}.ce-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar--opened{display:block}@media (max-width:650px){.ce-toolbar--opened{display:-webkit-box;display:-ms-flexbox;display:flex}}.ce-toolbar__content{max-width:650px;margin:0 auto;position:relative}@media (max-width:650px){.ce-toolbar__content{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-line-pack:center;align-content:center;margin:0;max-width:calc(100% - 35px)}}.ce-toolbar__plus{color:#707684;cursor:pointer;width:34px;height:34px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:absolute;left:-34px;-ms-flex-negative:0;flex-shrink:0}.ce-toolbar__plus--active,.ce-toolbar__plus:hover{color:#388ae5}.ce-toolbar__plus--active{-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-toolbar__plus-shortcut{opacity:.6;word-spacing:-2px;margin-top:5px}.ce-toolbar__plus--hidden{display:none}@media (max-width:650px){.ce-toolbar__plus{display:-webkit-inline-box!important;display:-ms-inline-flexbox!important;display:inline-flex!important;position:static;-webkit-transform:none!important;transform:none!important}}.ce-toolbar .ce-toolbox,.ce-toolbar__plus{top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.ce-toolbar__actions{position:absolute;right:-30px;top:5px;opacity:0}@media (max-width:650px){.ce-toolbar__actions{position:absolute;right:-28px;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}}.ce-toolbar__actions--opened{opacity:1}.ce-toolbar__actions-buttons{text-align:right}.ce-toolbar__settings-btn{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:18px;height:18px;color:#707684;cursor:pointer;background:#eff2f5;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ce-toolbar__settings-btn:hover{color:#1d202b}@media (max-width:650px){.ce-toolbar__settings-btn{background:transparent}}@media (min-width:651px){.codex-editor--narrow .ce-toolbar__plus{left:5px}}.ce-toolbox{position:absolute;visibility:hidden;-webkit-transition:opacity .1s ease;transition:opacity .1s ease;will-change:opacity;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}@media (max-width:650px){.ce-toolbox{position:static;-webkit-transform:none!important;transform:none!important;-webkit-box-align:center;-ms-flex-align:center;align-items:center;overflow-x:auto}}.ce-toolbox--opened{opacity:1;visibility:visible}.ce-toolbox__button{color:#707684;cursor:pointer;width:34px;height:34px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-ms-flex-negative:0;flex-shrink:0}.ce-toolbox__button--active,.ce-toolbox__button:hover{color:#388ae5}.ce-toolbox__button--active{-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-toolbox-button-tooltip__shortcut{opacity:.6;word-spacing:-3px;margin-top:3px}@media (min-width:651px){.codex-editor--narrow .ce-toolbox{background:#fff;z-index:2}}.ce-inline-toolbar{position:absolute;background-color:#fff;border:1px solid #eaeaea;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px rgba(13,20,33,.13);border-radius:4px;z-index:2}@media (max-width:650px){.ce-inline-toolbar{-webkit-box-shadow:0 13px 7px -5px rgba(26,38,49,.09),6px 15px 34px -6px rgba(33,48,73,.29);box-shadow:0 13px 7px -5px rgba(26,38,49,.09),6px 15px 34px -6px rgba(33,48,73,.29);border-bottom-color:#d5d7db}}.ce-inline-toolbar{-webkit-transform:translateX(-50%) translateY(8px) scale(.9);transform:translateX(-50%) translateY(8px) scale(.9);opacity:0;visibility:hidden;-webkit-transition:opacity .25s ease,-webkit-transform .15s ease;transition:opacity .25s ease,-webkit-transform .15s ease;transition:transform .15s ease,opacity .25s ease;transition:transform .15s ease,opacity .25s ease,-webkit-transform .15s ease;will-change:transform,opacity;top:0;left:0}.ce-inline-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-inline-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-inline-toolbar--showed{opacity:1;visibility:visible;-webkit-transform:translateX(-50%);transform:translateX(-50%)}.ce-inline-toolbar--left-oriented{-webkit-transform:translateX(-23px) translateY(8px) scale(.9);transform:translateX(-23px) translateY(8px) scale(.9)}.ce-inline-toolbar--left-oriented.ce-inline-toolbar--showed{-webkit-transform:translateX(-23px);transform:translateX(-23px)}.ce-inline-toolbar--right-oriented{-webkit-transform:translateX(-100%) translateY(8px) scale(.9);transform:translateX(-100%) translateY(8px) scale(.9);margin-left:23px}.ce-inline-toolbar--right-oriented.ce-inline-toolbar--showed{-webkit-transform:translateX(-100%);transform:translateX(-100%)}.ce-inline-toolbar [hidden]{display:none!important}.ce-inline-toolbar__toggler-and-button-wrapper{width:100%;padding:0 6px}.ce-inline-toolbar__buttons,.ce-inline-toolbar__toggler-and-button-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;height:34px;padding:0 9px 0 10px;margin:0 6px 0 -6px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;border-right:1px solid rgba(201,201,204,.48)}.ce-inline-toolbar__dropdown:hover{background:#eff2f5}.ce-inline-toolbar__dropdown--hidden{display:none}.ce-inline-toolbar__dropdown-content{display:-webkit-box;display:-ms-flexbox;display:flex;font-weight:500;font-size:14px}.ce-inline-toolbar__dropdown-content svg{height:12px}.ce-inline-toolbar__dropdown .icon--toggler-down{margin-left:4px}.ce-inline-toolbar__shortcut{opacity:.6;word-spacing:-3px;margin-top:3px}.ce-inline-tool{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:34px;height:34px;line-height:34px;padding:0!important;text-align:center;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:#000;margin:0}.ce-inline-tool:hover{background-color:#eff2f5}.ce-inline-tool{border-radius:0;line-height:normal;width:auto;padding:0 5px!important;min-width:24px}.ce-inline-tool--active{color:#388ae5}.ce-inline-tool--focused{-webkit-box-shadow:inset 0 0 0 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px rgba(7,161,227,.08);background:rgba(34,186,255,.08)!important}.ce-inline-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-inline-tool:not(:last-of-type){margin-right:2px}.ce-inline-tool .icon{height:12px}.ce-inline-tool--link .icon--unlink,.ce-inline-tool--unlink .icon--link{display:none}.ce-inline-tool--unlink .icon--unlink{display:inline-block;margin-bottom:-1px}.ce-inline-tool-input{outline:none;border:0;border-radius:0 0 4px 4px;margin:0;font-size:13px;padding:10px;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;display:none;font-weight:500;border-top:1px solid rgba(201,201,204,.48)}.ce-inline-tool-input::-webkit-input-placeholder{color:#707684}.ce-inline-tool-input::-moz-placeholder{color:#707684}.ce-inline-tool-input:-ms-input-placeholder{color:#707684}.ce-inline-tool-input::-ms-input-placeholder{color:#707684}.ce-inline-tool-input::placeholder{color:#707684}.ce-inline-tool-input--showed{display:block}.ce-conversion-toolbar{position:absolute;background-color:#fff;border:1px solid #eaeaea;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px rgba(13,20,33,.13);border-radius:4px;z-index:2}@media (max-width:650px){.ce-conversion-toolbar{-webkit-box-shadow:0 13px 7px -5px rgba(26,38,49,.09),6px 15px 34px -6px rgba(33,48,73,.29);box-shadow:0 13px 7px -5px rgba(26,38,49,.09),6px 15px 34px -6px rgba(33,48,73,.29);border-bottom-color:#d5d7db}}.ce-conversion-toolbar{opacity:0;visibility:hidden;will-change:transform,opacity;-webkit-transition:opacity .1s ease,-webkit-transform .1s ease;transition:opacity .1s ease,-webkit-transform .1s ease;transition:transform .1s ease,opacity .1s ease;transition:transform .1s ease,opacity .1s ease,-webkit-transform .1s ease;-webkit-transform:translateY(-8px);transform:translateY(-8px);left:-1px;width:150px;margin-top:5px;-webkit-box-sizing:content-box;box-sizing:content-box}.ce-conversion-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-conversion-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-conversion-toolbar--showed{opacity:1;visibility:visible;-webkit-transform:none;transform:none}.ce-conversion-toolbar [hidden]{display:none!important}.ce-conversion-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-conversion-toolbar__label{color:#707684;font-size:11px;font-weight:500;letter-spacing:.33px;padding:10px 10px 5px;text-transform:uppercase}.ce-conversion-tool{display:-webkit-box;display:-ms-flexbox;display:flex;padding:5px 10px;font-size:14px;line-height:20px;font-weight:500;cursor:pointer;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-conversion-tool--hidden{display:none}.ce-conversion-tool--focused{-webkit-box-shadow:inset 0 0 0 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px rgba(7,161,227,.08);background:rgba(34,186,255,.08)!important}.ce-conversion-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-conversion-tool:hover{background:#eff2f5}.ce-conversion-tool__icon{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;width:20px;height:20px;border:1px solid rgba(201,201,204,.48);border-radius:3px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:10px;background:#fff}.ce-conversion-tool__icon svg{width:11px;height:11px}.ce-conversion-tool--last{margin-right:0!important}.ce-conversion-tool--active{color:#388ae5!important;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-settings{position:absolute;background-color:#fff;border:1px solid #eaeaea;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px rgba(13,20,33,.13);border-radius:4px;z-index:2}@media (max-width:650px){.ce-settings{-webkit-box-shadow:0 13px 7px -5px rgba(26,38,49,.09),6px 15px 34px -6px rgba(33,48,73,.29);box-shadow:0 13px 7px -5px rgba(26,38,49,.09),6px 15px 34px -6px rgba(33,48,73,.29);border-bottom-color:#d5d7db}}.ce-settings{right:-1px;top:30px;min-width:114px;-webkit-box-sizing:content-box;box-sizing:content-box}.ce-settings--left-oriented:before{left:15px;margin-left:0}.ce-settings--right-oriented:before{left:auto;right:15px;margin-left:0}@media (max-width:650px){.ce-settings{bottom:40px;right:-11px;top:auto}}.ce-settings:before{left:auto;right:12px}@media (max-width:650px){.ce-settings:before{bottom:-5px;top:auto}}.ce-settings{display:none}.ce-settings--opened{display:block;-webkit-animation-duration:.1s;animation-duration:.1s;-webkit-animation-name:panelShowing;animation-name:panelShowing}.ce-settings__plugin-zone:not(:empty){padding:3px 3px 0}.ce-settings__default-zone:not(:empty){padding:3px}.ce-settings__button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:34px;height:34px;line-height:34px;padding:0!important;text-align:center;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:#000;margin:0}.ce-settings__button:hover{background-color:#eff2f5}.ce-settings__button--active{color:#388ae5}.ce-settings__button--focused{-webkit-box-shadow:inset 0 0 0 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px rgba(7,161,227,.08);background:rgba(34,186,255,.08)!important}.ce-settings__button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-settings__button:not(:nth-child(3n+3)){margin-right:3px}.ce-settings__button:nth-child(n+4){margin-top:3px}.ce-settings__button{line-height:32px}.ce-settings__button--disabled{cursor:not-allowed!important;opacity:.3}.ce-settings__button--selected{color:#388ae5}.ce-settings__button--delete{-webkit-transition:background-color .3s ease;transition:background-color .3s ease;will-change:background-color}.ce-settings__button--delete .icon{-webkit-transition:-webkit-transform .2s ease-out;transition:-webkit-transform .2s ease-out;transition:transform .2s ease-out;transition:transform .2s ease-out,-webkit-transform .2s ease-out;will-change:transform}.ce-settings__button--confirm{background-color:#e24a4a!important;color:#fff}.ce-settings__button--confirm:hover{background-color:#d54a4a!important}.ce-settings__button--confirm .icon{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.ce-block:first-of-type{margin-top:0}.ce-block--selected .ce-block__content{background:#e1f2ff}.ce-block--selected .ce-block__content [contenteditable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ce-block--selected .ce-block__content .ce-stub,.ce-block--selected .ce-block__content img{opacity:.55}.ce-block--stretched .ce-block__content{max-width:none}.ce-block__content{position:relative;max-width:650px;margin:0 auto;-webkit-transition:background-color .15s ease;transition:background-color .15s ease}.ce-block--drop-target .ce-block__content:before{content:\"\";position:absolute;top:100%;left:-20px;margin-top:-1px;height:8px;width:8px;border:solid #388ae5;border-width:1px 1px 0 0;-webkit-transform-origin:right;transform-origin:right;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ce-block--drop-target .ce-block__content:after{content:\"\";position:absolute;top:100%;height:1px;width:100%;color:#388ae5;background:repeating-linear-gradient(90deg,#388ae5,#388ae5 1px,#fff 0,#fff 6px)}.ce-block a{cursor:pointer;text-decoration:underline}.ce-block b{font-weight:700}.ce-block i{font-style:italic}@media (min-width:651px){.codex-editor--narrow .ce-block--focused{margin-right:-50px;padding-right:50px}}.wobble{-webkit-animation-name:wobble;animation-name:wobble;-webkit-animation-duration:.4s;animation-duration:.4s}@-webkit-keyframes wobble{0%{-webkit-transform:translateZ(0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-5%,0,0) rotate(-5deg);transform:translate3d(-5%,0,0) rotate(-5deg)}30%{-webkit-transform:translate3d(2%,0,0) rotate(3deg);transform:translate3d(2%,0,0) rotate(3deg)}45%{-webkit-transform:translate3d(-3%,0,0) rotate(-3deg);transform:translate3d(-3%,0,0) rotate(-3deg)}60%{-webkit-transform:translate3d(2%,0,0) rotate(2deg);transform:translate3d(2%,0,0) rotate(2deg)}75%{-webkit-transform:translate3d(-1%,0,0) rotate(-1deg);transform:translate3d(-1%,0,0) rotate(-1deg)}to{-webkit-transform:translateZ(0);transform:translateZ(0)}}@keyframes wobble{0%{-webkit-transform:translateZ(0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-5%,0,0) rotate(-5deg);transform:translate3d(-5%,0,0) rotate(-5deg)}30%{-webkit-transform:translate3d(2%,0,0) rotate(3deg);transform:translate3d(2%,0,0) rotate(3deg)}45%{-webkit-transform:translate3d(-3%,0,0) rotate(-3deg);transform:translate3d(-3%,0,0) rotate(-3deg)}60%{-webkit-transform:translate3d(2%,0,0) rotate(2deg);transform:translate3d(2%,0,0) rotate(2deg)}75%{-webkit-transform:translate3d(-1%,0,0) rotate(-1deg);transform:translate3d(-1%,0,0) rotate(-1deg)}to{-webkit-transform:translateZ(0);transform:translateZ(0)}}@-webkit-keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scaleX(1);transform:scaleX(1)}}@keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scaleX(1);transform:scaleX(1)}}@-webkit-keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scaleX(1);transform:scaleX(1)}}@keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scaleX(1);transform:scaleX(1)}}@-webkit-keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scaleX(1);transform:scaleX(1)}}@keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scaleX(1);transform:scaleX(1)}}@-webkit-keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}.cdx-block{padding:.4em 0}.cdx-input{border:1px solid rgba(201,201,204,.48);-webkit-box-shadow:inset 0 1px 2px 0 rgba(35,44,72,.06);box-shadow:inset 0 1px 2px 0 rgba(35,44,72,.06);border-radius:3px;padding:10px 12px;outline:none;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.cdx-input[data-placeholder]:before{position:static!important;display:inline-block;width:0;white-space:nowrap;pointer-events:none}.cdx-settings-button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:34px;height:34px;line-height:34px;padding:0!important;text-align:center;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:#000;margin:0}.cdx-settings-button:hover{background-color:#eff2f5}.cdx-settings-button--focused{-webkit-box-shadow:inset 0 0 0 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px rgba(7,161,227,.08);background:rgba(34,186,255,.08)!important}.cdx-settings-button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.cdx-settings-button:not(:nth-child(3n+3)){margin-right:3px}.cdx-settings-button:nth-child(n+4){margin-top:3px}.cdx-settings-button--active{color:#388ae5}.cdx-loader{position:relative;border:1px solid rgba(201,201,204,.48)}.cdx-loader:before{content:\"\";position:absolute;left:50%;top:50%;width:18px;height:18px;margin:-11px 0 0 -11px;border:2px solid rgba(201,201,204,.48);border-left-color:#388ae5;border-radius:50%;-webkit-animation:cdxRotation 1.2s linear infinite;animation:cdxRotation 1.2s linear infinite}@-webkit-keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}.cdx-button{padding:13px;border-radius:3px;border:1px solid rgba(201,201,204,.48);font-size:14.9px;background:#fff;-webkit-box-shadow:0 2px 2px 0 rgba(18,30,57,.04);box-shadow:0 2px 2px 0 rgba(18,30,57,.04);color:#707684;text-align:center;cursor:pointer}.cdx-button:hover{background:#fbfcfe;-webkit-box-shadow:0 1px 3px 0 rgba(18,30,57,.08);box-shadow:0 1px 3px 0 rgba(18,30,57,.08)}.cdx-button svg{height:20px;margin-right:.2em;margin-top:-2px}.ce-stub{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;width:100%;padding:3.5em 0;margin:17px 0;border-radius:3px;background:#fcf7f7;color:#b46262}.ce-stub__info{margin-left:20px}.ce-stub__title{margin-bottom:3px;font-weight:600;font-size:18px;text-transform:capitalize}.ce-stub__subtitle{font-size:16px}.codex-editor.codex-editor--rtl{direction:rtl}.codex-editor.codex-editor--rtl .cdx-list{padding-left:0;padding-right:40px}.codex-editor.codex-editor--rtl .ce-toolbar__plus{right:-34px;left:auto}.codex-editor.codex-editor--rtl .ce-toolbar__actions{right:auto;left:-34px}@media (max-width:650px){.codex-editor.codex-editor--rtl .ce-toolbar__actions{margin-left:0;margin-right:auto;padding-right:0;padding-left:10px}}.codex-editor.codex-editor--rtl .ce-settings{left:5px;right:auto}.codex-editor.codex-editor--rtl .ce-settings:before{right:auto;left:25px}.codex-editor.codex-editor--rtl .ce-settings__button:not(:nth-child(3n+3)){margin-left:3px;margin-right:0}.codex-editor.codex-editor--rtl .ce-conversion-tool__icon{margin-right:0;margin-left:10px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown{border-right:0 solid transparent;border-left:1px solid rgba(201,201,204,.48);margin:0 -6px 0 6px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown .icon--toggler-down{margin-left:0;margin-right:4px}@media (min-width:651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__plus{left:0;right:5px}}@media (min-width:651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__actions{left:-5px}}'}])}));","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Embed=t():e.Embed=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=14)}([function(e,t,n){var r=n(5),i=n(6),o=n(7),a=n(9);e.exports=function(e,t){return r(e)||i(e,t)||o(e,t)||a()}},function(e,t){function n(t){return\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?e.exports=n=function(e){return typeof e}:e.exports=n=function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},n(t)}e.exports=n},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t){function n(e,t,n){var r,i,o,a,l;function c(){var s=Date.now()-a;s<t&&s>=0?r=setTimeout(c,t-s):(r=null,n||(l=e.apply(o,i),o=i=null))}null==t&&(t=100);var s=function(){o=this,i=arguments,a=Date.now();var s=n&&!r;return r||(r=setTimeout(c,t)),s&&(l=e.apply(o,i),o=i=null),l};return s.clear=function(){r&&(clearTimeout(r),r=null)},s.flush=function(){r&&(l=e.apply(o,i),o=i=null,clearTimeout(r),r=null)},s}n.debounce=n,e.exports=n},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(i)throw o}}return n}}},function(e,t,n){var r=n(8);e.exports=function(e,t){if(e){if(\"string\"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(n):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}},function(e,t){e.exports=function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}},function(e,t,n){var r=n(11),i=n(12);\"string\"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,\"\"]]);var o={insert:\"head\",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){\"use strict\";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function l(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],c=t.base?o[0]+t.base:o[0],s=n[c]||0,d=\"\".concat(c,\" \").concat(s);n[c]=s+1;var u=l(d),h={css:o[1],media:o[2],sourceMap:o[3]};-1!==u?(a[u].references++,a[u].updater(h)):a.push({identifier:d,updater:b(h,t),references:1}),r.push(d)}return r}function s(e){var t=document.createElement(\"style\"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),\"function\"==typeof e.insert)e.insert(t);else{var a=o(e.insert||\"head\");if(!a)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");a.appendChild(t)}return t}var d,u=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join(\"\\n\")});function h(e,t,n,r){var i=n?\"\":r.media?\"@media \".concat(r.media,\" {\").concat(r.css,\"}\"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute(\"media\",i):e.removeAttribute(\"media\"),o&&btoa&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o)))),\" */\")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,p=0;function b(e,t){var n,r,i;if(t.singleton){var o=p++;n=m||(m=s(t)),r=h.bind(null,n,o,!1),i=h.bind(null,n,o,!0)}else n=s(t),r=f.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||\"boolean\"==typeof t.singleton||(t.singleton=i());var n=c(e=e||[],t);return function(e){if(e=e||[],\"[object Array]\"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=l(n[r]);a[i].references--}for(var o=c(e,t),s=0;s<n.length;s++){var d=l(n[s]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}n=o}}}},function(e,t,n){(t=n(13)(!1)).push([e.i,\".embed-tool--loading .embed-tool__caption {\\n      display: none;\\n    }\\n\\n    .embed-tool--loading .embed-tool__preloader {\\n      display: block;\\n    }\\n\\n    .embed-tool--loading .embed-tool__content {\\n      display: none;\\n    }\\n  .embed-tool__preloader {\\n    display: none;\\n    position: relative;\\n    height: 200px;\\n    box-sizing: border-box;\\n    border-radius: 5px;\\n    border: 1px solid #e6e9eb;\\n  }\\n  .embed-tool__preloader::before {\\n      content: '';\\n      position: absolute;\\n      z-index: 3;\\n      left: 50%;\\n      top: 50%;\\n      width: 30px;\\n      height: 30px;\\n      margin-top: -25px;\\n      margin-left: -15px;\\n      border-radius: 50%;\\n      border: 2px solid #cdd1e0;\\n      border-top-color: #388ae5;\\n      box-sizing: border-box;\\n      animation: embed-preloader-spin 2s infinite linear;\\n    }\\n  .embed-tool__url {\\n    position: absolute;\\n    bottom: 20px;\\n    left: 50%;\\n    transform: translateX(-50%);\\n    max-width: 250px;\\n    color: #7b7e89;\\n    font-size: 11px;\\n    white-space: nowrap;\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n  }\\n  .embed-tool__content {\\n    width: 100%;\\n  }\\n  .embed-tool__caption {\\n    margin-top: 7px;\\n  }\\n  .embed-tool__caption[contentEditable=true][data-placeholder]::before{\\n      position: absolute;\\n      content: attr(data-placeholder);\\n      color: #707684;\\n      font-weight: normal;\\n      opacity: 0;\\n    }\\n  .embed-tool__caption[contentEditable=true][data-placeholder]:empty::before {\\n         opacity: 1;\\n      }\\n  .embed-tool__caption[contentEditable=true][data-placeholder]:empty:focus::before {\\n        opacity: 0;\\n      }\\n\\n@keyframes embed-preloader-spin {\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n}\\n\",\"\"]),e.exports=t},function(e,t,n){\"use strict\";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||\"\",r=e[3];if(!r)return n;if(t&&\"function\"==typeof btoa){var i=(a=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c=\"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(l),\"/*# \".concat(c,\" */\")),o=r.sources.map((function(e){return\"/*# sourceURL=\".concat(r.sourceRoot||\"\").concat(e,\" */\")}));return[n].concat(o).concat([i]).join(\"\\n\")}var a,l,c;return[n].join(\"\\n\")}(t,e);return t[2]?\"@media \".concat(t[2],\" {\").concat(n,\"}\"):n})).join(\"\")},t.i=function(e,n,r){\"string\"==typeof e&&(e=[[null,e,\"\"]]);var i={};if(r)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&i[c[0]]||(n&&(c[2]?c[2]=\"\".concat(n,\" and \").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return f}));var r=n(1),i=n.n(r),o=n(0),a=n.n(o),l=n(2),c=n.n(l),s=n(3),d=n.n(s),u={vimeo:{regex:/(?:http[s]?:\\/\\/)?(?:www.)?vimeo\\.co(?:.+\\/([^\\/]\\d+)(?:#t=[\\d]+)?s?$)/,embedUrl:\"https://player.vimeo.com/video/<%= remote_id %>?title=0&byline=0\",html:'<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\"></iframe>',height:320,width:580},youtube:{regex:/(?:https?:\\/\\/)?(?:www\\.)?(?:(?:youtu\\.be\\/)|(?:youtube\\.com)\\/(?:v\\/|u\\/\\w\\/|embed\\/|watch))(?:(?:\\?v=)?([^#&?=]*))?((?:[?&]\\w*=\\w*)*)/,embedUrl:\"https://www.youtube.com/embed/<%= remote_id %>\",html:'<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\" allowfullscreen></iframe>',height:320,width:580,id:function(e){var t=a()(e,2),n=t[0],r=t[1];if(!r&&n)return n;var i={start:\"start\",end:\"end\",t:\"start\",time_continue:\"start\",list:\"list\"};return r=r.slice(1).split(\"&\").map((function(e){var t=e.split(\"=\"),r=a()(t,2),o=r[0],l=r[1];if(n||\"v\"!==o){if(i[o])return\"\".concat(i[o],\"=\").concat(l)}else n=l})).filter((function(e){return!!e})),n+\"?\"+r.join(\"&\")}},coub:{regex:/https?:\\/\\/coub\\.com\\/view\\/([^\\/\\?\\&]+)/,embedUrl:\"https://coub.com/embed/<%= remote_id %>\",html:'<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\" allowfullscreen></iframe>',height:320,width:580},vine:{regex:/https?:\\/\\/vine\\.co\\/v\\/([^\\/\\?\\&]+)/,embedUrl:\"https://vine.co/v/<%= remote_id %>/embed/simple/\",html:'<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\" allowfullscreen></iframe>',height:320,width:580},imgur:{regex:/https?:\\/\\/(?:i\\.)?imgur\\.com.*\\/([a-zA-Z0-9]+)(?:\\.gifv)?/,embedUrl:\"http://imgur.com/<%= remote_id %>/embed\",html:'<iframe allowfullscreen=\"true\" scrolling=\"no\" id=\"imgur-embed-iframe-pub-<%= remote_id %>\" class=\"imgur-embed-iframe-pub\" style=\"height: 500px; width: 100%; border: 1px solid #000\"></iframe>',height:500,width:540},gfycat:{regex:/https?:\\/\\/gfycat\\.com(?:\\/detail)?\\/([a-zA-Z]+)/,embedUrl:\"https://gfycat.com/ifr/<%= remote_id %>\",html:\"<iframe frameborder='0' scrolling='no' style=\\\"width:100%;\\\" height='436' allowfullscreen ></iframe>\",height:436,width:580},\"twitch-channel\":{regex:/https?:\\/\\/www\\.twitch\\.tv\\/([^\\/\\?\\&]*)\\/?$/,embedUrl:\"https://player.twitch.tv/?channel=<%= remote_id %>\",html:'<iframe frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\" height=\"366\" style=\"width:100%;\"></iframe>',height:366,width:600},\"twitch-video\":{regex:/https?:\\/\\/www\\.twitch\\.tv\\/(?:[^\\/\\?\\&]*\\/v|videos)\\/([0-9]*)/,embedUrl:\"https://player.twitch.tv/?video=v<%= remote_id %>\",html:'<iframe frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\" height=\"366\" style=\"width:100%;\"></iframe>',height:366,width:600},\"yandex-music-album\":{regex:/https?:\\/\\/music\\.yandex\\.ru\\/album\\/([0-9]*)\\/?$/,embedUrl:\"https://music.yandex.ru/iframe/#album/<%= remote_id %>/\",html:'<iframe frameborder=\"0\" style=\"border:none;width:540px;height:400px;\" style=\"width:100%;\" height=\"400\"></iframe>',height:400,width:540},\"yandex-music-track\":{regex:/https?:\\/\\/music\\.yandex\\.ru\\/album\\/([0-9]*)\\/track\\/([0-9]*)/,embedUrl:\"https://music.yandex.ru/iframe/#track/<%= remote_id %>/\",html:'<iframe frameborder=\"0\" style=\"border:none;width:540px;height:100px;\" style=\"width:100%;\" height=\"100\"></iframe>',height:100,width:540,id:function(e){return e.join(\"/\")}},\"yandex-music-playlist\":{regex:/https?:\\/\\/music\\.yandex\\.ru\\/users\\/([^\\/\\?\\&]*)\\/playlists\\/([0-9]*)/,embedUrl:\"https://music.yandex.ru/iframe/#playlist/<%= remote_id %>/show/cover/description/\",html:'<iframe frameborder=\"0\" style=\"border:none;width:540px;height:400px;\" width=\"540\" height=\"400\"></iframe>',height:400,width:540,id:function(e){return e.join(\"/\")}},codepen:{regex:/https?:\\/\\/codepen\\.io\\/([^\\/\\?\\&]*)\\/pen\\/([^\\/\\?\\&]*)/,embedUrl:\"https://codepen.io/<%= remote_id %>?height=300&theme-id=0&default-tab=css,result&embed-version=2\",html:\"<iframe height='300' scrolling='no' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'></iframe>\",height:300,width:600,id:function(e){return e.join(\"/embed/\")}},instagram:{regex:/https?:\\/\\/www\\.instagram\\.com\\/p\\/([^\\/\\?\\&]+)\\/?/,embedUrl:\"https://www.instagram.com/p/<%= remote_id %>/embed\",html:'<iframe width=\"400\" height=\"505\" style=\"margin: 0 auto;\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>',height:505,width:400},twitter:{regex:/^https?:\\/\\/twitter\\.com\\/(?:#!\\/)?(\\w+)\\/status(?:es)?\\/(\\d+)(?:\\/.*)?$/,embedUrl:\"https://twitframe.com/show?url=https://twitter.com/<%= remote_id %>\",html:'<iframe width=\"600\" height=\"600\" style=\"margin: 0 auto;\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>',height:300,width:600,id:function(e){return e.join(\"/status/\")}}},h=(n(10),n(4)),f=function(){function e(t){var n=t.data,r=t.api,i=t.readOnly;c()(this,e),this.api=r,this._data={},this.element=null,this.readOnly=i,this.data=n}return d()(e,[{key:\"render\",value:function(){var t=this;if(!this.data.service){var n=document.createElement(\"div\");return this.element=n,n}var r=e.services[this.data.service].html,i=document.createElement(\"div\"),o=document.createElement(\"div\"),a=document.createElement(\"template\"),l=this.createPreloader();i.classList.add(this.CSS.baseClass,this.CSS.container,this.CSS.containerLoading),o.classList.add(this.CSS.input,this.CSS.caption),i.appendChild(l),o.contentEditable=!this.readOnly,o.dataset.placeholder=\"Enter a caption\",o.innerHTML=this.data.caption||\"\",a.innerHTML=r,a.content.firstChild.setAttribute(\"src\",this.data.embed),a.content.firstChild.classList.add(this.CSS.content);var c=this.embedIsReady(i);return i.appendChild(a.content.firstChild),i.appendChild(o),c.then((function(){i.classList.remove(t.CSS.containerLoading)})),this.element=i,i}},{key:\"createPreloader\",value:function(){var e=document.createElement(\"preloader\"),t=document.createElement(\"div\");return t.textContent=this.data.source,e.classList.add(this.CSS.preloader),t.classList.add(this.CSS.url),e.appendChild(t),e}},{key:\"save\",value:function(){return this.data}},{key:\"onPaste\",value:function(t){var n=t.detail,r=n.key,i=n.data,o=e.services[r],a=o.regex,l=o.embedUrl,c=o.width,s=o.height,d=o.id,u=void 0===d?function(e){return e.shift()}:d,h=a.exec(i).slice(1),f=l.replace(/<\\%\\= remote\\_id \\%\\>/g,u(h));this.data={service:r,source:i,embed:f,width:c,height:s}}},{key:\"embedIsReady\",value:function(e){var t=null;return new Promise((function(n,r){(t=new MutationObserver(Object(h.debounce)(n,450))).observe(e,{childList:!0,subtree:!0})})).then((function(){t.disconnect()}))}},{key:\"data\",set:function(e){if(!(e instanceof Object))throw Error(\"Embed Tool data should be object\");var t=e.service,n=e.source,r=e.embed,i=e.width,o=e.height,a=e.caption,l=void 0===a?\"\":a;this._data={service:t||this.data.service,source:n||this.data.source,embed:r||this.data.embed,width:i||this.data.width,height:o||this.data.height,caption:l||this.data.caption||\"\"};var c=this.element;c&&c.parentNode.replaceChild(this.render(),c)},get:function(){if(this.element){var e=this.element.querySelector(\".\".concat(this.api.styles.input));this._data.caption=e?e.innerHTML:\"\"}return this._data}},{key:\"CSS\",get:function(){return{baseClass:this.api.styles.block,input:this.api.styles.input,container:\"embed-tool\",containerLoading:\"embed-tool--loading\",preloader:\"embed-tool__preloader\",caption:\"embed-tool__caption\",url:\"embed-tool__url\",content:\"embed-tool__content\"}}}],[{key:\"prepare\",value:function(t){var n=t.config,r=(void 0===n?{}:n).services,o=void 0===r?{}:r,l=Object.entries(u),c=Object.entries(o).filter((function(e){var t=a()(e,2),n=(t[0],t[1]);return\"boolean\"==typeof n&&!0===n})).map((function(e){return a()(e,1)[0]})),s=Object.entries(o).filter((function(e){var t=a()(e,2),n=(t[0],t[1]);return\"object\"===i()(n)})).filter((function(t){var n=a()(t,2),r=(n[0],n[1]);return e.checkServiceConfig(r)})).map((function(e){var t=a()(e,2),n=t[0],r=t[1];return[n,{regex:r.regex,embedUrl:r.embedUrl,html:r.html,height:r.height,width:r.width,id:r.id}]}));c.length&&(l=l.filter((function(e){var t=a()(e,1)[0];return c.includes(t)}))),l=l.concat(s),e.services=l.reduce((function(e,t){var n=a()(t,2),r=n[0],i=n[1];return r in e?(e[r]=Object.assign({},e[r],i),e):(e[r]=i,e)}),{}),e.patterns=l.reduce((function(e,t){var n=a()(t,2),r=n[0],i=n[1];return e[r]=i.regex,e}),{})}},{key:\"checkServiceConfig\",value:function(e){var t=e.regex,n=e.embedUrl,r=e.html,i=e.height,o=e.width,a=e.id,l=t&&t instanceof RegExp&&n&&\"string\"==typeof n&&r&&\"string\"==typeof r;return l=(l=(l=l&&(void 0===a||a instanceof Function))&&(void 0===i||Number.isFinite(i)))&&(void 0===o||Number.isFinite(o))}},{key:\"pasteConfig\",get:function(){return{patterns:e.patterns}}},{key:\"isReadOnlySupported\",get:function(){return!0}}]),e}()}]).default}));","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Header=t():e.Header=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=0)}([function(e,t,n){function r(e){return(r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}n(1).toString();\n/**\n * Header block for the Editor.js.\n *\n * @author CodeX (team@ifmo.su)\n * @copyright CodeX 2018\n * @license MIT\n * @version 2.0.0\n */\nvar a=function(){function e(t){var n=t.data,r=t.config,i=t.api,a=t.readOnly;!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this.api=i,this.readOnly=a,this._CSS={block:this.api.styles.block,settingsButton:this.api.styles.settingsButton,settingsButtonActive:this.api.styles.settingsButtonActive,wrapper:\"ce-header\"},this._settings=r,this._data=this.normalizeData(n),this.settingsButtons=[],this._element=this.getTag()}var t,a,o;return t=e,o=[{key:\"conversionConfig\",get:function(){return{export:\"text\",import:\"text\"}}},{key:\"sanitize\",get:function(){return{level:!1,text:{}}}},{key:\"isReadOnlySupported\",get:function(){return!0}},{key:\"pasteConfig\",get:function(){return{tags:[\"H1\",\"H2\",\"H3\",\"H4\",\"H5\",\"H6\"]}}},{key:\"toolbox\",get:function(){return{icon:n(6).default,title:\"Heading\"}}}],(a=[{key:\"normalizeData\",value:function(e){var t={};return\"object\"!==r(e)&&(e={}),t.text=e.text||\"\",t.level=parseInt(e.level)||this.defaultLevel.number,t}},{key:\"render\",value:function(){return this._element}},{key:\"renderSettings\",value:function(){var e=this,t=document.createElement(\"DIV\");return this.levels.length<=1||this.levels.forEach((function(n){var r=document.createElement(\"SPAN\");r.classList.add(e._CSS.settingsButton),e.currentLevel.number===n.number&&r.classList.add(e._CSS.settingsButtonActive),r.innerHTML=n.svg,r.dataset.level=n.number,r.addEventListener(\"click\",(function(){e.setLevel(n.number)})),t.appendChild(r),e.settingsButtons.push(r)})),t}},{key:\"setLevel\",value:function(e){var t=this;this.data={level:e,text:this.data.text},this.settingsButtons.forEach((function(n){n.classList.toggle(t._CSS.settingsButtonActive,parseInt(n.dataset.level)===e)}))}},{key:\"merge\",value:function(e){var t={text:this.data.text+e.text,level:this.data.level};this.data=t}},{key:\"validate\",value:function(e){return\"\"!==e.text.trim()}},{key:\"save\",value:function(e){return{text:e.innerHTML,level:this.currentLevel.number}}},{key:\"getTag\",value:function(){var e=document.createElement(this.currentLevel.tag);return e.innerHTML=this._data.text||\"\",e.classList.add(this._CSS.wrapper),e.contentEditable=this.readOnly?\"false\":\"true\",e.dataset.placeholder=this.api.i18n.t(this._settings.placeholder||\"\"),e}},{key:\"onPaste\",value:function(e){var t=e.detail.data,n=this.defaultLevel.number;switch(t.tagName){case\"H1\":n=1;break;case\"H2\":n=2;break;case\"H3\":n=3;break;case\"H4\":n=4;break;case\"H5\":n=5;break;case\"H6\":n=6}this._settings.levels&&(n=this._settings.levels.reduce((function(e,t){return Math.abs(t-n)<Math.abs(e-n)?t:e}))),this.data={level:n,text:t.innerHTML}}},{key:\"data\",get:function(){return this._data.text=this._element.innerHTML,this._data.level=this.currentLevel.number,this._data},set:function(e){if(this._data=this.normalizeData(e),void 0!==e.level&&this._element.parentNode){var t=this.getTag();t.innerHTML=this._element.innerHTML,this._element.parentNode.replaceChild(t,this._element),this._element=t}void 0!==e.text&&(this._element.innerHTML=this._data.text||\"\")}},{key:\"currentLevel\",get:function(){var e=this,t=this.levels.find((function(t){return t.number===e._data.level}));return t||(t=this.defaultLevel),t}},{key:\"defaultLevel\",get:function(){var e=this;if(this._settings.defaultLevel){var t=this.levels.find((function(t){return t.number===e._settings.defaultLevel}));if(t)return t;console.warn(\"(ง'̀-'́)ง Heading Tool: the default level specified was not found in available levels\")}return this.levels[1]}},{key:\"levels\",get:function(){var e=this,t=[{number:1,tag:\"H1\",svg:'<svg width=\"16\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.14 1.494V4.98h4.62V1.494c0-.498.098-.871.293-1.12A.927.927 0 0 1 7.82 0c.322 0 .583.123.782.37.2.246.3.62.3 1.124v9.588c0 .503-.101.88-.303 1.128a.957.957 0 0 1-.779.374.921.921 0 0 1-.77-.378c-.193-.251-.29-.626-.29-1.124V6.989H2.14v4.093c0 .503-.1.88-.302 1.128a.957.957 0 0 1-.778.374.921.921 0 0 1-.772-.378C.096 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.285.374A.922.922 0 0 1 1.06 0c.321 0 .582.123.782.37.199.246.299.62.299 1.124zm11.653 9.985V5.27c-1.279.887-2.14 1.33-2.583 1.33a.802.802 0 0 1-.563-.228.703.703 0 0 1-.245-.529c0-.232.08-.402.241-.511.161-.11.446-.25.854-.424.61-.259 1.096-.532 1.462-.818a5.84 5.84 0 0 0 .97-.962c.282-.355.466-.573.552-.655.085-.082.246-.123.483-.123.267 0 .481.093.642.28.161.186.242.443.242.77v7.813c0 .914-.345 1.371-1.035 1.371-.307 0-.554-.093-.74-.28-.187-.186-.28-.461-.28-.825z\"/></svg>'},{number:2,tag:\"H2\",svg:'<svg width=\"18\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.152 1.494V4.98h4.646V1.494c0-.498.097-.871.293-1.12A.934.934 0 0 1 7.863 0c.324 0 .586.123.786.37.2.246.301.62.301 1.124v9.588c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378c-.194-.251-.29-.626-.29-1.124V6.989H2.152v4.093c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378C.097 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.286.374A.929.929 0 0 1 1.066 0c.323 0 .585.123.786.37.2.246.3.62.3 1.124zm10.99 9.288h3.527c.351 0 .62.072.804.216.185.144.277.34.277.588 0 .22-.073.408-.22.56-.146.154-.368.23-.665.23h-4.972c-.338 0-.601-.093-.79-.28a.896.896 0 0 1-.284-.659c0-.162.06-.377.182-.645s.255-.478.399-.631a38.617 38.617 0 0 1 1.621-1.598c.482-.444.827-.735 1.034-.875.369-.261.676-.523.922-.787.245-.263.432-.534.56-.81.129-.278.193-.549.193-.815 0-.288-.069-.546-.206-.773a1.428 1.428 0 0 0-.56-.53 1.618 1.618 0 0 0-.774-.19c-.59 0-1.054.26-1.392.777-.045.068-.12.252-.226.554-.106.302-.225.534-.358.696-.133.162-.328.243-.585.243a.76.76 0 0 1-.56-.223c-.149-.148-.223-.351-.223-.608 0-.31.07-.635.21-.972.139-.338.347-.645.624-.92a3.093 3.093 0 0 1 1.054-.665c.426-.169.924-.253 1.496-.253.69 0 1.277.108 1.764.324.315.144.592.343.83.595.24.252.425.544.558.875.133.33.2.674.2 1.03 0 .558-.14 1.066-.416 1.523-.277.457-.56.815-.848 1.074-.288.26-.771.666-1.45 1.22-.677.554-1.142.984-1.394 1.29a3.836 3.836 0 0 0-.331.44z\"/></svg>'},{number:3,tag:\"H3\",svg:'<svg width=\"18\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.152 1.494V4.98h4.646V1.494c0-.498.097-.871.293-1.12A.934.934 0 0 1 7.863 0c.324 0 .586.123.786.37.2.246.301.62.301 1.124v9.588c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378c-.194-.251-.29-.626-.29-1.124V6.989H2.152v4.093c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378C.097 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.286.374A.929.929 0 0 1 1.066 0c.323 0 .585.123.786.37.2.246.3.62.3 1.124zm11.61 4.919c.418 0 .778-.123 1.08-.368.301-.245.452-.597.452-1.055 0-.35-.12-.65-.36-.902-.241-.252-.566-.378-.974-.378-.277 0-.505.038-.684.116a1.1 1.1 0 0 0-.426.306 2.31 2.31 0 0 0-.296.49c-.093.2-.178.388-.255.565a.479.479 0 0 1-.245.225.965.965 0 0 1-.409.081.706.706 0 0 1-.5-.22c-.152-.148-.228-.345-.228-.59 0-.236.071-.484.214-.745a2.72 2.72 0 0 1 .627-.746 3.149 3.149 0 0 1 1.024-.568 4.122 4.122 0 0 1 1.368-.214c.44 0 .842.06 1.205.18.364.12.679.294.947.52.267.228.47.49.606.79.136.3.204.622.204.967 0 .454-.099.843-.296 1.168-.198.324-.48.64-.848.95.354.19.653.408.895.653.243.245.426.516.548.813.123.298.184.619.184.964 0 .413-.083.812-.248 1.198-.166.386-.41.73-.732 1.031a3.49 3.49 0 0 1-1.147.708c-.443.17-.932.256-1.467.256a3.512 3.512 0 0 1-1.464-.293 3.332 3.332 0 0 1-1.699-1.64c-.142-.314-.214-.573-.214-.777 0-.263.085-.475.255-.636a.89.89 0 0 1 .637-.242c.127 0 .25.037.367.112a.53.53 0 0 1 .232.27c.236.63.489 1.099.759 1.405.27.306.65.46 1.14.46a1.714 1.714 0 0 0 1.46-.824c.17-.273.256-.588.256-.947 0-.53-.145-.947-.436-1.249-.29-.302-.694-.453-1.212-.453-.09 0-.231.01-.422.028-.19.018-.313.027-.367.027-.25 0-.443-.062-.579-.187-.136-.125-.204-.299-.204-.521 0-.218.081-.394.245-.528.163-.134.406-.2.728-.2h.28z\"/></svg>'},{number:4,tag:\"H4\",svg:'<svg width=\"20\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.152 1.494V4.98h4.646V1.494c0-.498.097-.871.293-1.12A.934.934 0 0 1 7.863 0c.324 0 .586.123.786.37.2.246.301.62.301 1.124v9.588c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378c-.194-.251-.29-.626-.29-1.124V6.989H2.152v4.093c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378C.097 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.286.374A.929.929 0 0 1 1.066 0c.323 0 .585.123.786.37.2.246.3.62.3 1.124zm13.003 10.09v-1.252h-3.38c-.427 0-.746-.097-.96-.29-.213-.193-.32-.456-.32-.788 0-.085.016-.171.048-.259.031-.088.078-.18.141-.276.063-.097.128-.19.195-.28.068-.09.15-.2.25-.33l3.568-4.774a5.44 5.44 0 0 1 .576-.683.763.763 0 0 1 .542-.212c.682 0 1.023.39 1.023 1.171v5.212h.29c.346 0 .623.047.832.142.208.094.313.3.313.62 0 .26-.086.45-.256.568-.17.12-.427.179-.768.179h-.41v1.252c0 .346-.077.603-.23.771-.152.168-.356.253-.612.253a.78.78 0 0 1-.61-.26c-.154-.173-.232-.427-.232-.764zm-2.895-2.76h2.895V4.91L12.26 8.823z\"/></svg>'},{number:5,tag:\"H5\",svg:'<svg width=\"18\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.152 1.494V4.98h4.646V1.494c0-.498.097-.871.293-1.12A.934.934 0 0 1 7.863 0c.324 0 .586.123.786.37.2.246.301.62.301 1.124v9.588c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378c-.194-.251-.29-.626-.29-1.124V6.989H2.152v4.093c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378C.097 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.286.374A.929.929 0 0 1 1.066 0c.323 0 .585.123.786.37.2.246.3.62.3 1.124zm14.16 2.645h-3.234l-.388 2.205c.644-.344 1.239-.517 1.783-.517.436 0 .843.082 1.222.245.38.164.712.39.998.677.286.289.51.63.674 1.025.163.395.245.82.245 1.273 0 .658-.148 1.257-.443 1.797-.295.54-.72.97-1.276 1.287-.556.318-1.197.477-1.923.477-.813 0-1.472-.15-1.978-.45-.506-.3-.865-.643-1.076-1.031-.21-.388-.316-.727-.316-1.018 0-.177.073-.345.22-.504a.725.725 0 0 1 .556-.238c.381 0 .665.22.85.66.182.404.427.719.736.943.309.225.654.337 1.035.337.35 0 .656-.09.919-.272.263-.182.466-.431.61-.749.142-.318.214-.678.214-1.082 0-.436-.078-.808-.232-1.117a1.607 1.607 0 0 0-.62-.69 1.674 1.674 0 0 0-.864-.229c-.39 0-.67.048-.837.143-.168.095-.41.262-.725.5-.316.239-.576.358-.78.358a.843.843 0 0 1-.592-.242c-.173-.16-.259-.344-.259-.548 0-.022.025-.177.075-.463l.572-3.26c.063-.39.181-.675.354-.852.172-.177.454-.265.844-.265h3.595c.708 0 1.062.27 1.062.81a.711.711 0 0 1-.26.572c-.172.145-.426.218-.762.218z\"/></svg>'},{number:6,tag:\"H6\",svg:'<svg width=\"18\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M2.152 1.494V4.98h4.646V1.494c0-.498.097-.871.293-1.12A.934.934 0 0 1 7.863 0c.324 0 .586.123.786.37.2.246.301.62.301 1.124v9.588c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378c-.194-.251-.29-.626-.29-1.124V6.989H2.152v4.093c0 .503-.101.88-.304 1.128a.964.964 0 0 1-.783.374.928.928 0 0 1-.775-.378C.097 11.955 0 11.58 0 11.082V1.494C0 .996.095.623.286.374A.929.929 0 0 1 1.066 0c.323 0 .585.123.786.37.2.246.3.62.3 1.124zM12.53 7.058a3.093 3.093 0 0 1 1.004-.814 2.734 2.734 0 0 1 1.214-.264c.43 0 .827.08 1.19.24.365.161.684.39.957.686.274.296.485.645.635 1.048a3.6 3.6 0 0 1 .223 1.262c0 .637-.145 1.216-.437 1.736-.292.52-.699.926-1.221 1.218-.522.292-1.114.438-1.774.438-.76 0-1.416-.186-1.967-.557-.552-.37-.974-.919-1.265-1.645-.292-.726-.438-1.613-.438-2.662 0-.855.088-1.62.265-2.293.176-.674.43-1.233.76-1.676.33-.443.73-.778 1.2-1.004.47-.226 1.006-.339 1.608-.339.579 0 1.089.113 1.53.34.44.225.773.506.997.84.224.335.335.656.335.964 0 .185-.07.354-.21.505a.698.698 0 0 1-.536.227.874.874 0 0 1-.529-.18 1.039 1.039 0 0 1-.36-.498 1.42 1.42 0 0 0-.495-.655 1.3 1.3 0 0 0-.786-.247c-.24 0-.479.069-.716.207a1.863 1.863 0 0 0-.6.56c-.33.479-.525 1.333-.584 2.563zm1.832 4.213c.456 0 .834-.186 1.133-.56.298-.373.447-.862.447-1.468 0-.412-.07-.766-.21-1.062a1.584 1.584 0 0 0-.577-.678 1.47 1.47 0 0 0-.807-.234c-.28 0-.548.074-.804.224-.255.149-.461.365-.617.647a2.024 2.024 0 0 0-.234.994c0 .61.158 1.12.475 1.527.316.407.714.61 1.194.61z\"/></svg>'}];return this._settings.levels?t.filter((function(t){return e._settings.levels.includes(t.number)})):t}}])&&i(t.prototype,a),o&&i(t,o),e}();e.exports=a},function(e,t,n){var r=n(2);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,\"/**\\n * Plugin styles\\n */\\n.ce-header {\\n  padding: 1em 0;\\n  margin: 0;\\n  margin-bottom: -0.9em;\\n  line-height: 1.5em;\\n  outline: none;\\n}\\n\\n.ce-header p,\\n.ce-header div{\\n  padding: 0 !important;\\n  margin: 0 !important;\\n}\\n\\n/**\\n * Styles for Plugin icon in Toolbar\\n */\\n.ce-header__icon {}\\n\\n.ce-header[contentEditable=true][data-placeholder]::before{\\n  position: absolute;\\n  content: attr(data-placeholder);\\n  color: #707684;\\n  font-weight: normal;\\n  display: none;\\n  cursor: text;\\n}\\n\\n.ce-header[contentEditable=true][data-placeholder]:empty::before {\\n  display: block;\\n}\\n\\n.ce-header[contentEditable=true][data-placeholder]:empty:focus::before {\\n  display: none;\\n}\\n\",\"\"])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||\"\",r=e[3];if(!r)return n;if(t&&\"function\"==typeof btoa){var i=(o=r,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\"),a=r.sources.map((function(e){return\"/*# sourceURL=\"+r.sourceRoot+e+\" */\"}));return[n].concat(a).concat([i]).join(\"\\n\")}var o;return[n].join(\"\\n\")}(t,e);return t[2]?\"@media \"+t[2]+\"{\"+n+\"}\":n})).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];\"number\"==typeof a&&(r[a]=!0)}for(i=0;i<e.length;i++){var o=e[i];\"number\"==typeof o[0]&&r[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]=\"(\"+o[2]+\") and (\"+n+\")\"),t.push(o))}},t}},function(e,t,n){var r,i,a={},o=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(e){return document.querySelector(e)},c=function(e){var t={};return function(e){if(\"function\"==typeof e)return e();if(void 0===t[e]){var n=s.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,u=0,f=[],d=n(5);function h(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=a[r.id];if(i){i.refs++;for(var o=0;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(y(r.parts[o],t))}else{var s=[];for(o=0;o<r.parts.length;o++)s.push(y(r.parts[o],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function v(e,t){for(var n=[],r={},i=0;i<e.length;i++){var a=e[i],o=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function p(e,t){var n=c(e.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=f[f.length-1];if(\"top\"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if(\"bottom\"===e.insertAt)n.appendChild(t);else{if(\"object\"!=typeof e.insertAt||!e.insertAt.before)throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");var i=c(e.insertInto+\" \"+e.insertAt.before);n.insertBefore(t,i)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function m(e){var t=document.createElement(\"style\");return void 0===e.attrs.type&&(e.attrs.type=\"text/css\"),b(t,e.attrs),p(e,t),t}function b(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function y(e,t){var n,r,i,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var o=u++;n=l||(l=m(t)),r=L.bind(null,n,o,!1),i=L.bind(null,n,o,!0)}else e.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=function(e){var t=document.createElement(\"link\");return void 0===e.attrs.type&&(e.attrs.type=\"text/css\"),e.attrs.rel=\"stylesheet\",b(t,e.attrs),p(e,t),t}(t),r=_.bind(null,n,t),i=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=H.bind(null,n),i=function(){g(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(t=t||{}).attrs=\"object\"==typeof t.attrs?t.attrs:{},t.singleton||\"boolean\"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto=\"head\"),t.insertAt||(t.insertAt=\"bottom\");var n=v(e,t);return h(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var o=n[i];(s=a[o.id]).refs--,r.push(s)}e&&h(v(e,t),t);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete a[s.id]}}}};var w,x=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join(\"\\n\")});function L(e,t,n,r){var i=n?\"\":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,i);else{var a=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function H(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute(\"media\",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function _(e,t,n){var r=n.css,i=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||a)&&(r=d(r)),i&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+\" */\");var o=new Blob([r],{type:\"text/css\"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}},function(e,t){e.exports=function(e){var t=\"undefined\"!=typeof window&&window.location;if(!t)throw new Error(\"fixUrls requires window.location\");if(!e||\"string\"!=typeof e)return e;var n=t.protocol+\"//\"+t.host,r=n+t.pathname.replace(/\\/[^\\/]*$/,\"/\");return e.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,(function(e,t){var i,a=t.trim().replace(/^\"(.*)\"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(a)?e:(i=0===a.indexOf(\"//\")?a:0===a.indexOf(\"/\")?n+a:r+a.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(i)+\")\")}))}},function(e,t,n){\"use strict\";n.r(t),t.default='<svg width=\"10\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 14\">\\n  <path d=\"M7.6 8.15H2.25v4.525a1.125 1.125 0 0 1-2.25 0V1.125a1.125 1.125 0 1 1 2.25 0V5.9H7.6V1.125a1.125 1.125 0 0 1 2.25 0v11.55a1.125 1.125 0 0 1-2.25 0V8.15z\"/>\\n</svg>\\n'}])}));","!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.InlineCode=e():t.InlineCode=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"/\",n(n.s=0)}([function(t,e,n){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}n(1).toString();var i=function(){function t(e){var n=e.api;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.api=n,this.button=null,this.tag=\"CODE\",this.iconClasses={base:this.api.styles.inlineToolButton,active:this.api.styles.inlineToolButtonActive}}return o(t,null,[{key:\"CSS\",get:function(){return\"inline-code\"}}]),o(t,[{key:\"render\",value:function(){return this.button=document.createElement(\"button\"),this.button.type=\"button\",this.button.classList.add(this.iconClasses.base),this.button.innerHTML=this.toolboxIcon,this.button}},{key:\"surround\",value:function(e){if(e){var n=this.api.selection.findParentTag(this.tag,t.CSS);n?this.unwrap(n):this.wrap(e)}}},{key:\"wrap\",value:function(e){var n=document.createElement(this.tag);n.classList.add(t.CSS),n.appendChild(e.extractContents()),e.insertNode(n),this.api.selection.expandToTag(n)}},{key:\"unwrap\",value:function(t){this.api.selection.expandToTag(t);var e=window.getSelection(),n=e.getRangeAt(0),r=n.extractContents();t.parentNode.removeChild(t),n.insertNode(r),e.removeAllRanges(),e.addRange(n)}},{key:\"checkState\",value:function(){var e=this.api.selection.findParentTag(this.tag,t.CSS);this.button.classList.toggle(this.iconClasses.active,!!e)}},{key:\"toolboxIcon\",get:function(){return n(6).default}}],[{key:\"isInline\",get:function(){return!0}},{key:\"sanitize\",get:function(){return{code:{class:t.CSS}}}}]),t}();t.exports=i},function(t,e,n){var r=n(2);\"string\"==typeof r&&(r=[[t.i,r,\"\"]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,\".inline-code {\\n  background: rgba(250, 239, 240, 0.78);\\n  color: #b44437;\\n  padding: 3px 4px;\\n  border-radius: 5px;\\n  margin: 0 1px;\\n  font-family: inherit;\\n  font-size: 0.86em;\\n  font-weight: 500;\\n  letter-spacing: 0.3px;\\n}\\n\",\"\"])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||\"\",r=t[3];if(!r)return n;if(e&&\"function\"==typeof btoa){var o=(a=r,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+\" */\"),i=r.sources.map(function(t){return\"/*# sourceURL=\"+r.sourceRoot+t+\" */\"});return[n].concat(i).concat([o]).join(\"\\n\")}var a;return[n].join(\"\\n\")}(e,t);return e[2]?\"@media \"+e[2]+\"{\"+n+\"}\":n}).join(\"\")},e.i=function(t,n){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];\"number\"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];\"number\"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),e.push(a))}},e}},function(t,e,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(t){var e={};return function(t){if(\"function\"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),u=null,c=0,f=[],l=n(5);function p(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(g(r.parts[a],e))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(g(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(t,e){var n=s(t.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=f[f.length-1];if(\"top\"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),f.push(e);else if(\"bottom\"===t.insertAt)n.appendChild(e);else{if(\"object\"!=typeof t.insertAt||!t.insertAt.before)throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");var o=s(t.insertInto+\" \"+t.insertAt.before);n.insertBefore(e,o)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=f.indexOf(t);e>=0&&f.splice(e,1)}function b(t){var e=document.createElement(\"style\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),y(e,t.attrs),h(t,e),e}function y(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function g(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var a=c++;n=u||(u=b(e)),r=x.bind(null,n,a,!1),o=x.bind(null,n,a,!0)}else t.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=function(t){var e=document.createElement(\"link\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),t.attrs.rel=\"stylesheet\",y(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=l(r));o&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\");var a=new Blob([r],{type:\"text/css\"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,e),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute(\"media\",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){v(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(e=e||{}).attrs=\"object\"==typeof e.attrs?e.attrs:{},e.singleton||\"boolean\"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto=\"head\"),e.insertAt||(e.insertAt=\"bottom\");var n=d(t,e);return p(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}t&&p(d(t,e),e);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var m,w=(m=[],function(t,e){return m[t]=e,m.filter(Boolean).join(\"\\n\")});function x(t,e,n,r){var o=n?\"\":r.css;if(t.styleSheet)t.styleSheet.cssText=w(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e=\"undefined\"!=typeof window&&window.location;if(!e)throw new Error(\"fixUrls requires window.location\");if(!t||\"string\"!=typeof t)return t;var n=e.protocol+\"//\"+e.host,r=n+e.pathname.replace(/\\/[^\\/]*$/,\"/\");return t.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(t,e){var o,i=e.trim().replace(/^\"(.*)\"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(i)?t:(o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\")})}},function(t,e,n){\"use strict\";n.r(e),e.default='<svg width=\"17\" height=\"12\" viewBox=\"1 -1 16 15\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17.839 5.525a1.105 1.105 0 0 1-.015 1.547l-4.943 4.943a1.105 1.105 0 1 1-1.562-1.562l4.137-4.137-4.078-4.078A1.125 1.125 0 1 1 12.97.648l4.796 4.796c.026.026.05.053.074.08zm-14.952.791l4.137 4.137a1.105 1.105 0 1 1-1.562 1.562L.519 7.072a1.105 1.105 0 0 1-.015-1.547c.023-.028.048-.055.074-.081L5.374.647a1.125 1.125 0 0 1 1.591 1.591L2.887 6.316z\" id=\"a\"/></svg>\\n'}])});","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.List=t():e.List=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=0)}([function(e,t,n){function r(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if(\"string\"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),e}n(1).toString();var s=function(){function e(t){var n=t.data,r=(t.config,t.api),i=t.readOnly;!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this._elements={wrapper:null},this.api=r,this.readOnly=i,this.settings=[{name:\"unordered\",title:this.api.i18n.t(\"Unordered\"),icon:'<svg width=\"17\" height=\"13\" viewBox=\"0 0 17 13\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M5.625 4.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm0-4.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm0 9.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm-4.5-5a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25zm0-4.85a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25zm0 9.85a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25z\"/></svg>',default:!1},{name:\"ordered\",title:this.api.i18n.t(\"Ordered\"),icon:'<svg width=\"17\" height=\"13\" viewBox=\"0 0 17 13\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M5.819 4.607h9.362a1.069 1.069 0 0 1 0 2.138H5.82a1.069 1.069 0 1 1 0-2.138zm0-4.607h9.362a1.069 1.069 0 0 1 0 2.138H5.82a1.069 1.069 0 1 1 0-2.138zm0 9.357h9.362a1.069 1.069 0 0 1 0 2.138H5.82a1.069 1.069 0 0 1 0-2.137zM1.468 4.155V1.33c-.554.404-.926.606-1.118.606a.338.338 0 0 1-.244-.104A.327.327 0 0 1 0 1.59c0-.107.035-.184.105-.234.07-.05.192-.114.369-.192.264-.118.475-.243.633-.373.158-.13.298-.276.42-.438a3.94 3.94 0 0 1 .238-.298C1.802.019 1.872 0 1.975 0c.115 0 .208.042.277.127.07.085.105.202.105.351v3.556c0 .416-.15.624-.448.624a.421.421 0 0 1-.32-.127c-.08-.085-.121-.21-.121-.376zm-.283 6.664h1.572c.156 0 .275.03.358.091a.294.294 0 0 1 .123.25.323.323 0 0 1-.098.238c-.065.065-.164.097-.296.097H.629a.494.494 0 0 1-.353-.119.372.372 0 0 1-.126-.28c0-.068.027-.16.081-.273a.977.977 0 0 1 .178-.268c.267-.264.507-.49.722-.678.215-.188.368-.312.46-.371.165-.11.302-.222.412-.334.109-.112.192-.226.25-.344a.786.786 0 0 0 .085-.345.6.6 0 0 0-.341-.553.75.75 0 0 0-.345-.08c-.263 0-.47.11-.62.329-.02.029-.054.107-.101.235a.966.966 0 0 1-.16.295c-.059.069-.145.103-.26.103a.348.348 0 0 1-.25-.094.34.34 0 0 1-.099-.258c0-.132.031-.27.093-.413.063-.143.155-.273.279-.39.123-.116.28-.21.47-.282.189-.072.411-.107.666-.107.307 0 .569.045.786.137a1.182 1.182 0 0 1 .618.623 1.18 1.18 0 0 1-.096 1.083 2.03 2.03 0 0 1-.378.457c-.128.11-.344.282-.646.517-.302.235-.509.417-.621.547a1.637 1.637 0 0 0-.148.187z\"/></svg>',default:!0}],this._data={style:this.settings.find((function(e){return!0===e.default})).name,items:[]},this.data=n}return o(e,null,[{key:\"isReadOnlySupported\",get:function(){return!0}},{key:\"enableLineBreaks\",get:function(){return!0}},{key:\"toolbox\",get:function(){return{icon:'<svg width=\"17\" height=\"13\" viewBox=\"0 0 17 13\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M5.625 4.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm0-4.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm0 9.85h9.25a1.125 1.125 0 0 1 0 2.25h-9.25a1.125 1.125 0 0 1 0-2.25zm-4.5-5a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25zm0-4.85a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25zm0 9.85a1.125 1.125 0 1 1 0 2.25 1.125 1.125 0 0 1 0-2.25z\"/></svg>',title:\"List\"}}}]),o(e,[{key:\"render\",value:function(){var e=this;return this._elements.wrapper=this.makeMainTag(this._data.style),this._data.items.length?this._data.items.forEach((function(t){e._elements.wrapper.appendChild(e._make(\"li\",e.CSS.item,{innerHTML:t}))})):this._elements.wrapper.appendChild(this._make(\"li\",this.CSS.item)),this.readOnly||this._elements.wrapper.addEventListener(\"keydown\",(function(t){switch(t.keyCode){case 13:e.getOutofList(t);break;case 8:e.backspace(t)}}),!1),this._elements.wrapper}},{key:\"save\",value:function(){return this.data}},{key:\"renderSettings\",value:function(){var e=this,t=this._make(\"div\",[this.CSS.settingsWrapper],{});return this.settings.forEach((function(n){var r=e._make(\"div\",e.CSS.settingsButton,{innerHTML:n.icon});r.addEventListener(\"click\",(function(){e.toggleTune(n.name);var t=r.parentNode.querySelectorAll(\".\"+e.CSS.settingsButton);Array.from(t).forEach((function(t){return t.classList.remove(e.CSS.settingsButtonActive)})),r.classList.toggle(e.CSS.settingsButtonActive)})),e.api.tooltip.onHover(r,n.title,{placement:\"top\",hidingDelay:500}),e._data.style===n.name&&r.classList.add(e.CSS.settingsButtonActive),t.appendChild(r)})),t}},{key:\"onPaste\",value:function(e){var t=e.detail.data;this.data=this.pasteHandler(t)}},{key:\"makeMainTag\",value:function(e){var t=\"ordered\"===e?this.CSS.wrapperOrdered:this.CSS.wrapperUnordered,n=\"ordered\"===e?\"ol\":\"ul\";return this._make(n,[this.CSS.baseBlock,this.CSS.wrapper,t],{contentEditable:!this.readOnly})}},{key:\"toggleTune\",value:function(e){for(var t=this.makeMainTag(e);this._elements.wrapper.hasChildNodes();)t.appendChild(this._elements.wrapper.firstChild);this._elements.wrapper.replaceWith(t),this._elements.wrapper=t,this._data.style=e}},{key:\"_make\",value:function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=document.createElement(e);Array.isArray(n)?(t=a.classList).add.apply(t,r(n)):n&&a.classList.add(n);for(var o in i)a[o]=i[o];return a}},{key:\"getOutofList\",value:function(e){var t=this._elements.wrapper.querySelectorAll(\".\"+this.CSS.item);if(!(t.length<2)){var n=t[t.length-1],r=this.currentItem;r!==n||n.textContent.trim().length||(r.parentElement.removeChild(r),this.api.blocks.insert(),this.api.caret.setToBlock(this.api.blocks.getCurrentBlockIndex()),e.preventDefault(),e.stopPropagation())}}},{key:\"backspace\",value:function(e){var t=this._elements.wrapper.querySelectorAll(\".\"+this.CSS.item),n=t[0];n&&t.length<2&&!n.innerHTML.replace(\"<br>\",\" \").trim()&&e.preventDefault()}},{key:\"selectItem\",value:function(e){e.preventDefault();var t=window.getSelection(),n=t.anchorNode.parentNode.closest(\".\"+this.CSS.item),r=new Range;r.selectNodeContents(n),t.removeAllRanges(),t.addRange(r)}},{key:\"pasteHandler\",value:function(e){var t,n=e.tagName;switch(n){case\"OL\":t=\"ordered\";break;case\"UL\":case\"LI\":t=\"unordered\"}var r={style:t,items:[]};if(\"LI\"===n)r.items=[e.innerHTML];else{var i=Array.from(e.querySelectorAll(\"LI\"));r.items=i.map((function(e){return e.innerHTML})).filter((function(e){return!!e.trim()}))}return r}},{key:\"CSS\",get:function(){return{baseBlock:this.api.styles.block,wrapper:\"cdx-list\",wrapperOrdered:\"cdx-list--ordered\",wrapperUnordered:\"cdx-list--unordered\",item:\"cdx-list__item\",settingsWrapper:\"cdx-list-settings\",settingsButton:this.api.styles.settingsButton,settingsButtonActive:this.api.styles.settingsButtonActive}}},{key:\"data\",set:function(e){e||(e={}),this._data.style=e.style||this.settings.find((function(e){return!0===e.default})).name,this._data.items=e.items||[];var t=this._elements.wrapper;t&&t.parentNode.replaceChild(this.render(),t)},get:function(){this._data.items=[];for(var e=this._elements.wrapper.querySelectorAll(\".\".concat(this.CSS.item)),t=0;t<e.length;t++){e[t].innerHTML.replace(\"<br>\",\" \").trim()&&this._data.items.push(e[t].innerHTML)}return this._data}},{key:\"currentItem\",get:function(){var e=window.getSelection().anchorNode;return e.nodeType!==Node.ELEMENT_NODE&&(e=e.parentNode),e.closest(\".\".concat(this.CSS.item))}}],[{key:\"conversionConfig\",get:function(){return{export:function(e){return e.items.join(\". \")},import:function(e){return{items:[e],style:\"unordered\"}}}}},{key:\"sanitize\",get:function(){return{style:{},items:{br:!0}}}},{key:\"pasteConfig\",get:function(){return{tags:[\"OL\",\"UL\",\"LI\"]}}}]),e}();e.exports=s},function(e,t,n){var r=n(2),i=n(3);\"string\"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,\"\"]]);var a={insert:\"head\",singleton:!1};r(i,a);e.exports=i.locals||{}},function(e,t,n){\"use strict\";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function s(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],i=0;i<e.length;i++){var a=e[i],c=t.base?a[0]+t.base:a[0],l=n[c]||0,u=\"\".concat(c,\" \").concat(l);n[c]=l+1;var d=s(u),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(o[d].references++,o[d].updater(f)):o.push({identifier:u,updater:v(f,t),references:1}),r.push(u)}return r}function l(e){var t=document.createElement(\"style\"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),\"function\"==typeof e.insert)e.insert(t);else{var o=a(e.insert||\"head\");if(!o)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");o.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join(\"\\n\")});function f(e,t,n,r){var i=n?\"\":r.media?\"@media \".concat(r.media,\" {\").concat(r.css,\"}\"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,i);else{var a=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,i=n.media,a=n.sourceMap;if(i?e.setAttribute(\"media\",i):e.removeAttribute(\"media\"),a&&btoa&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))),\" */\")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function v(e,t){var n,r,i;if(t.singleton){var a=m++;n=h||(h=l(t)),r=f.bind(null,n,a,!1),i=f.bind(null,n,a,!0)}else n=l(t),r=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||\"boolean\"==typeof t.singleton||(t.singleton=i());var n=c(e=e||[],t);return function(e){if(e=e||[],\"[object Array]\"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=s(n[r]);o[i].references--}for(var a=c(e,t),l=0;l<n.length;l++){var u=s(n[l]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}n=a}}}},function(e,t,n){(t=n(4)(!1)).push([e.i,\".cdx-list {\\n    margin: 0;\\n    padding-left: 40px;\\n    outline: none;\\n}\\n\\n    .cdx-list__item {\\n        padding: 5.5px 0 5.5px 3px;\\n        line-height: 1.6em;\\n    }\\n\\n    .cdx-list--unordered {\\n        list-style: disc;\\n    }\\n\\n    .cdx-list--ordered {\\n        list-style: decimal;\\n    }\\n\\n    .cdx-list-settings {\\n        display: flex;\\n    }\\n\\n    .cdx-list-settings .cdx-settings-button {\\n            width: 50%;\\n        }\\n\",\"\"]),e.exports=t},function(e,t,n){\"use strict\";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||\"\",r=e[3];if(!r)return n;if(t&&\"function\"==typeof btoa){var i=(o=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c=\"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(s),\"/*# \".concat(c,\" */\")),a=r.sources.map((function(e){return\"/*# sourceURL=\".concat(r.sourceRoot||\"\").concat(e,\" */\")}));return[n].concat(a).concat([i]).join(\"\\n\")}var o,s,c;return[n].join(\"\\n\")}(t,e);return t[2]?\"@media \".concat(t[2],\" {\").concat(n,\"}\"):n})).join(\"\")},t.i=function(e,n,r){\"string\"==typeof e&&(e=[[null,e,\"\"]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(n&&(c[2]?c[2]=\"\".concat(n,\" and \").concat(c[2]):c[2]=n),t.push(c))}},t}}])}));","!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.Marker=e():t.Marker=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"/\",n(n.s=0)}([function(t,e,n){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}n(1).toString();var i=function(){function t(e){var n=e.api;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t),this.api=n,this.button=null,this.tag=\"MARK\",this.iconClasses={base:this.api.styles.inlineToolButton,active:this.api.styles.inlineToolButtonActive}}return o(t,null,[{key:\"CSS\",get:function(){return\"cdx-marker\"}}]),o(t,[{key:\"render\",value:function(){return this.button=document.createElement(\"button\"),this.button.type=\"button\",this.button.classList.add(this.iconClasses.base),this.button.innerHTML=this.toolboxIcon,this.button}},{key:\"surround\",value:function(e){if(e){var n=this.api.selection.findParentTag(this.tag,t.CSS);n?this.unwrap(n):this.wrap(e)}}},{key:\"wrap\",value:function(e){var n=document.createElement(this.tag);n.classList.add(t.CSS),n.appendChild(e.extractContents()),e.insertNode(n),this.api.selection.expandToTag(n)}},{key:\"unwrap\",value:function(t){this.api.selection.expandToTag(t);var e=window.getSelection(),n=e.getRangeAt(0),r=n.extractContents();t.parentNode.removeChild(t),n.insertNode(r),e.removeAllRanges(),e.addRange(n)}},{key:\"checkState\",value:function(){var e=this.api.selection.findParentTag(this.tag,t.CSS);this.button.classList.toggle(this.iconClasses.active,!!e)}},{key:\"toolboxIcon\",get:function(){return n(6).default}}],[{key:\"isInline\",get:function(){return!0}},{key:\"sanitize\",get:function(){return{mark:{class:t.CSS}}}}]),t}();t.exports=i},function(t,e,n){var r=n(2);\"string\"==typeof r&&(r=[[t.i,r,\"\"]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,\".cdx-marker {\\n  background: rgba(245,235,111,0.29);\\n  padding: 3px 0;\\n}\",\"\"])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||\"\",r=t[3];if(!r)return n;if(e&&\"function\"==typeof btoa){var o=(a=r,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+\" */\"),i=r.sources.map(function(t){return\"/*# sourceURL=\"+r.sourceRoot+t+\" */\"});return[n].concat(i).concat([o]).join(\"\\n\")}var a;return[n].join(\"\\n\")}(e,t);return e[2]?\"@media \"+e[2]+\"{\"+n+\"}\":n}).join(\"\")},e.i=function(t,n){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];\"number\"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];\"number\"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),e.push(a))}},e}},function(t,e,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(t){var e={};return function(t){if(\"function\"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),u=null,c=0,f=[],l=n(5);function p(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(g(r.parts[a],e))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(g(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(t,e){var n=s(t.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=f[f.length-1];if(\"top\"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),f.push(e);else if(\"bottom\"===t.insertAt)n.appendChild(e);else{if(\"object\"!=typeof t.insertAt||!t.insertAt.before)throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");var o=s(t.insertInto+\" \"+t.insertAt.before);n.insertBefore(e,o)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=f.indexOf(t);e>=0&&f.splice(e,1)}function b(t){var e=document.createElement(\"style\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),y(e,t.attrs),h(t,e),e}function y(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function g(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var a=c++;n=u||(u=b(e)),r=x.bind(null,n,a,!1),o=x.bind(null,n,a,!0)}else t.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=function(t){var e=document.createElement(\"link\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),t.attrs.rel=\"stylesheet\",y(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=l(r));o&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\");var a=new Blob([r],{type:\"text/css\"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,e),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=b(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute(\"media\",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){v(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(e=e||{}).attrs=\"object\"==typeof e.attrs?e.attrs:{},e.singleton||\"boolean\"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto=\"head\"),e.insertAt||(e.insertAt=\"bottom\");var n=d(t,e);return p(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}t&&p(d(t,e),e);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var m,w=(m=[],function(t,e){return m[t]=e,m.filter(Boolean).join(\"\\n\")});function x(t,e,n,r){var o=n?\"\":r.css;if(t.styleSheet)t.styleSheet.cssText=w(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e=\"undefined\"!=typeof window&&window.location;if(!e)throw new Error(\"fixUrls requires window.location\");if(!t||\"string\"!=typeof t)return t;var n=e.protocol+\"//\"+e.host,r=n+e.pathname.replace(/\\/[^\\/]*$/,\"/\");return t.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(t,e){var o,i=e.trim().replace(/^\"(.*)\"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(i)?t:(o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\")})}},function(t,e,n){\"use strict\";n.r(e),e.default='<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"1 2 13 12\" width=\"13\" height=\"12\"><path d=\"M8.367 9.633L10.7 10.98l-.624 1.135-.787-.025-.78 1.35H6.94l1.193-2.066-.407-.62.642-1.121zm.436-.763l2.899-5.061a1.278 1.278 0 011.746-.472c.617.355.835 1.138.492 1.76l-2.815 5.114-2.322-1.34zM2.62 11.644H5.39a.899.899 0 110 1.798H2.619a.899.899 0 010-1.798z\"/></svg>\\n'}])});","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Paragraph=t():e.Paragraph=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=0)}([function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}n(1).toString();\n/**\n * Base Paragraph Block for the Editor.js.\n * Represents simple paragraph\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */\nvar a=function(){function e(t){var n=t.data,r=t.config,o=t.api,a=t.readOnly;!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this.api=o,this.readOnly=a,this._CSS={block:this.api.styles.block,wrapper:\"ce-paragraph\"},this.readOnly||(this.onKeyUp=this.onKeyUp.bind(this)),this._placeholder=r.placeholder?r.placeholder:e.DEFAULT_PLACEHOLDER,this._data={},this._element=this.drawView(),this._preserveBlank=void 0!==r.preserveBlank&&r.preserveBlank,this.data=n}return o(e,null,[{key:\"DEFAULT_PLACEHOLDER\",get:function(){return\"\"}}]),o(e,[{key:\"onKeyUp\",value:function(e){\"Backspace\"!==e.code&&\"Delete\"!==e.code||\"\"===this._element.textContent&&(this._element.innerHTML=\"\")}},{key:\"drawView\",value:function(){var e=document.createElement(\"DIV\");return e.classList.add(this._CSS.wrapper,this._CSS.block),e.contentEditable=!1,e.dataset.placeholder=this.api.i18n.t(this._placeholder),this.readOnly||(e.contentEditable=!0,e.addEventListener(\"keyup\",this.onKeyUp)),e}},{key:\"render\",value:function(){return this._element}},{key:\"merge\",value:function(e){var t={text:this.data.text+e.text};this.data=t}},{key:\"validate\",value:function(e){return!(\"\"===e.text.trim()&&!this._preserveBlank)}},{key:\"save\",value:function(e){return{text:e.innerHTML}}},{key:\"onPaste\",value:function(e){var t={text:e.detail.data.innerHTML};this.data=t}},{key:\"data\",get:function(){var e=this._element.innerHTML;return this._data.text=e,this._data},set:function(e){this._data=e||{},this._element.innerHTML=this._data.text||\"\"}}],[{key:\"conversionConfig\",get:function(){return{export:\"text\",import:\"text\"}}},{key:\"sanitize\",get:function(){return{text:{br:!0}}}},{key:\"isReadOnlySupported\",get:function(){return!0}},{key:\"pasteConfig\",get:function(){return{tags:[\"P\"]}}},{key:\"toolbox\",get:function(){return{icon:n(5).default,title:\"Text\"}}}]),e}();e.exports=a},function(e,t,n){var r=n(2),o=n(3);\"string\"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,\"\"]]);var a={insert:\"head\",singleton:!1};r(o,a);e.exports=o.locals||{}},function(e,t,n){\"use strict\";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function c(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var a=e[o],u=t.base?a[0]+t.base:a[0],s=n[u]||0,l=\"\".concat(u,\" \").concat(s);n[u]=s+1;var f=c(l),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(i[f].references++,i[f].updater(d)):i.push({identifier:l,updater:y(d,t),references:1}),r.push(l)}return r}function s(e){var t=document.createElement(\"style\"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),\"function\"==typeof e.insert)e.insert(t);else{var i=a(e.insert||\"head\");if(!i)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");i.appendChild(t)}return t}var l,f=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join(\"\\n\")});function d(e,t,n,r){var o=n?\"\":r.media?\"@media \".concat(r.media,\" {\").concat(r.css,\"}\"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute(\"media\",o):e.removeAttribute(\"media\"),a&&btoa&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a)))),\" */\")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,v=0;function y(e,t){var n,r,o;if(t.singleton){var a=v++;n=h||(h=s(t)),r=d.bind(null,n,a,!1),o=d.bind(null,n,a,!0)}else n=s(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||\"boolean\"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],\"[object Array]\"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=c(n[r]);i[o].references--}for(var a=u(e,t),s=0;s<n.length;s++){var l=c(n[s]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}n=a}}}},function(e,t,n){(t=n(4)(!1)).push([e.i,\".ce-paragraph {\\n    line-height: 1.6em;\\n    outline: none;\\n}\\n\\n.ce-paragraph[data-placeholder]:empty::before{\\n  content: attr(data-placeholder);\\n  color: #707684;\\n  font-weight: normal;\\n  opacity: 0;\\n}\\n\\n/** Show placeholder at the first paragraph if Editor is empty */\\n.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before {\\n  opacity: 1;\\n}\\n\\n.codex-editor--toolbox-opened .ce-block:first-child .ce-paragraph[data-placeholder]:empty::before,\\n.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:focus::before {\\n  opacity: 0;\\n}\\n\\n.ce-paragraph p:first-of-type{\\n    margin-top: 0;\\n}\\n\\n.ce-paragraph p:last-of-type{\\n    margin-bottom: 0;\\n}\\n\",\"\"]),e.exports=t},function(e,t,n){\"use strict\";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||\"\",r=e[3];if(!r)return n;if(t&&\"function\"==typeof btoa){var o=(i=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u=\"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(c),\"/*# \".concat(u,\" */\")),a=r.sources.map((function(e){return\"/*# sourceURL=\".concat(r.sourceRoot||\"\").concat(e,\" */\")}));return[n].concat(a).concat([o]).join(\"\\n\")}var i,c,u;return[n].join(\"\\n\")}(t,e);return t[2]?\"@media \".concat(t[2],\" {\").concat(n,\"}\"):n})).join(\"\")},t.i=function(e,n,r){\"string\"==typeof e&&(e=[[null,e,\"\"]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(n&&(u[2]?u[2]=\"\".concat(n,\" and \").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){\"use strict\";n.r(t),t.default='<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0.2 -0.3 9 11.4\" width=\"12\" height=\"14\">\\n  <path d=\"M0 2.77V.92A1 1 0 01.2.28C.35.1.56 0 .83 0h7.66c.28.01.48.1.63.28.14.17.21.38.21.64v1.85c0 .26-.08.48-.23.66-.15.17-.37.26-.66.26-.28 0-.5-.09-.64-.26a1 1 0 01-.21-.66V1.69H5.6v7.58h.5c.25 0 .45.08.6.23.17.16.25.35.25.6s-.08.45-.24.6a.87.87 0 01-.62.22H3.21a.87.87 0 01-.61-.22.78.78 0 01-.24-.6c0-.25.08-.44.24-.6a.85.85 0 01.61-.23h.5V1.7H1.73v1.08c0 .26-.08.48-.23.66-.15.17-.37.26-.66.26-.28 0-.5-.09-.64-.26A1 1 0 010 2.77z\"/>\\n</svg>\\n'}])}));","!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.Quote=e():t.Quote=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"/\",n(n.s=0)}([function(t,e,n){function r(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||\"[object Arguments]\"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\")}()}function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}n(1).toString();var a=function(){function t(e){var n=e.data,r=e.config,o=e.api,i=e.readOnly;!function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,t);var a=t.ALIGNMENTS,s=t.DEFAULT_ALIGNMENT;this.api=o,this.readOnly=i,this.quotePlaceholder=r.quotePlaceholder||t.DEFAULT_QUOTE_PLACEHOLDER,this.captionPlaceholder=r.captionPlaceholder||t.DEFAULT_CAPTION_PLACEHOLDER,this.data={text:n.text||\"\",caption:n.caption||\"\",alignment:Object.values(a).includes(n.alignment)&&n.alignment||r.defaultAlignment||s}}return i(t,[{key:\"CSS\",get:function(){return{baseClass:this.api.styles.block,wrapper:\"cdx-quote\",text:\"cdx-quote__text\",input:this.api.styles.input,caption:\"cdx-quote__caption\",settingsWrapper:\"cdx-quote-settings\",settingsButton:this.api.styles.settingsButton,settingsButtonActive:this.api.styles.settingsButtonActive}}},{key:\"settings\",get:function(){return[{name:\"left\",icon:'<svg width=\"16\" height=\"11\" viewBox=\"0 0 16 11\" xmlns=\"http://www.w3.org/2000/svg\" ><path d=\"M1.069 0H13.33a1.069 1.069 0 0 1 0 2.138H1.07a1.069 1.069 0 1 1 0-2.138zm0 4.275H9.03a1.069 1.069 0 1 1 0 2.137H1.07a1.069 1.069 0 1 1 0-2.137zm0 4.275h9.812a1.069 1.069 0 0 1 0 2.137H1.07a1.069 1.069 0 0 1 0-2.137z\" /></svg>'},{name:\"center\",icon:'<svg width=\"16\" height=\"11\" viewBox=\"0 0 16 11\" xmlns=\"http://www.w3.org/2000/svg\" ><path d=\"M1.069 0H13.33a1.069 1.069 0 0 1 0 2.138H1.07a1.069 1.069 0 1 1 0-2.138zm3.15 4.275h5.962a1.069 1.069 0 0 1 0 2.137H4.22a1.069 1.069 0 1 1 0-2.137zM1.069 8.55H13.33a1.069 1.069 0 0 1 0 2.137H1.07a1.069 1.069 0 0 1 0-2.137z\"/></svg>'}]}}],[{key:\"isReadOnlySupported\",get:function(){return!0}},{key:\"toolbox\",get:function(){return{icon:'<svg width=\"15\" height=\"14\" viewBox=\"0 0 15 14\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.53 6.185l.027.025a1.109 1.109 0 0 1 0 1.568l-5.644 5.644a1.109 1.109 0 1 1-1.569-1.568l4.838-4.837L6.396 2.23A1.125 1.125 0 1 1 7.986.64l5.52 5.518.025.027zm-5.815 0l.026.025a1.109 1.109 0 0 1 0 1.568l-5.644 5.644a1.109 1.109 0 1 1-1.568-1.568l4.837-4.837L.58 2.23A1.125 1.125 0 0 1 2.171.64L7.69 6.158l.025.027z\" /></svg>',title:\"Quote\"}}},{key:\"contentless\",get:function(){return!0}},{key:\"enableLineBreaks\",get:function(){return!0}},{key:\"DEFAULT_QUOTE_PLACEHOLDER\",get:function(){return\"Enter a quote\"}},{key:\"DEFAULT_CAPTION_PLACEHOLDER\",get:function(){return\"Enter a caption\"}},{key:\"ALIGNMENTS\",get:function(){return{left:\"left\",center:\"center\"}}},{key:\"DEFAULT_ALIGNMENT\",get:function(){return t.ALIGNMENTS.left}},{key:\"conversionConfig\",get:function(){return{import:\"text\",export:function(t){return t.caption?\"\".concat(t.text,\" — \").concat(t.caption):t.text}}}}]),i(t,[{key:\"render\",value:function(){var t=this._make(\"blockquote\",[this.CSS.baseClass,this.CSS.wrapper]),e=this._make(\"div\",[this.CSS.input,this.CSS.text],{contentEditable:!this.readOnly,innerHTML:this.data.text}),n=this._make(\"div\",[this.CSS.input,this.CSS.caption],{contentEditable:!this.readOnly,innerHTML:this.data.caption});return e.dataset.placeholder=this.quotePlaceholder,n.dataset.placeholder=this.captionPlaceholder,t.appendChild(e),t.appendChild(n),t}},{key:\"save\",value:function(t){var e=t.querySelector(\".\".concat(this.CSS.text)),n=t.querySelector(\".\".concat(this.CSS.caption));return Object.assign(this.data,{text:e.innerHTML,caption:n.innerHTML})}},{key:\"renderSettings\",value:function(){var t=this,e=this._make(\"div\",[this.CSS.settingsWrapper],{});return this.settings.map(function(n){var r,o=t._make(\"div\",t.CSS.settingsButton,{innerHTML:n.icon,title:\"\".concat((r=n.name,r[0].toUpperCase()+r.substr(1)),\" alignment\")});return o.classList.toggle(t.CSS.settingsButtonActive,n.name===t.data.alignment),e.appendChild(o),o}).forEach(function(e,n,r){e.addEventListener(\"click\",function(){t._toggleTune(t.settings[n].name),r.forEach(function(e,n){var r=t.settings[n].name;e.classList.toggle(t.CSS.settingsButtonActive,r===t.data.alignment)})})}),e}},{key:\"_toggleTune\",value:function(t){this.data.alignment=t}},{key:\"_make\",value:function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=document.createElement(t);Array.isArray(n)?(e=i.classList).add.apply(e,r(n)):n&&i.classList.add(n);for(var a in o)i[a]=o[a];return i}}],[{key:\"sanitize\",get:function(){return{text:{br:!0},caption:{br:!0},alignment:{}}}}]),t}();t.exports=a},function(t,e,n){var r=n(2);\"string\"==typeof r&&(r=[[t.i,r,\"\"]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,\".cdx-quote-icon svg {\\n  transform: rotate(180deg);\\n}\\n\\n.cdx-quote {\\n  margin: 0;\\n}\\n\\n.cdx-quote__text {\\n  min-height: 158px;\\n  margin-bottom: 10px;\\n}\\n\\n.cdx-quote__caption {}\\n\\n.cdx-quote [contentEditable=true][data-placeholder]::before{\\n  position: absolute;\\n  content: attr(data-placeholder);\\n  color: #707684;\\n  font-weight: normal;\\n  opacity: 0;\\n}\\n\\n.cdx-quote [contentEditable=true][data-placeholder]:empty::before {\\n  opacity: 1;\\n}\\n\\n.cdx-quote [contentEditable=true][data-placeholder]:empty:focus::before {\\n  opacity: 0;\\n}\\n\\n\\n.cdx-quote-settings {\\n  display: flex;\\n}\\n\\n.cdx-quote-settings .cdx-settings-button {\\n  width: 50%;\\n}\\n\",\"\"])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||\"\",r=t[3];if(!r)return n;if(e&&\"function\"==typeof btoa){var o=(a=r,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+\" */\"),i=r.sources.map(function(t){return\"/*# sourceURL=\"+r.sourceRoot+t+\" */\"});return[n].concat(i).concat([o]).join(\"\\n\")}var a;return[n].join(\"\\n\")}(e,t);return e[2]?\"@media \"+e[2]+\"{\"+n+\"}\":n}).join(\"\")},e.i=function(t,n){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];\"number\"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];\"number\"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),e.push(a))}},e}},function(t,e,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(t){var e={};return function(t){if(\"function\"==typeof t)return t();if(void 0===e[t]){var n=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),c=null,u=0,l=[],f=n(5);function p(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(m(r.parts[a],e))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(m(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:s}}}}function d(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],a=e.base?i[0]+e.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function h(t,e){var n=s(t.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=l[l.length-1];if(\"top\"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),l.push(e);else if(\"bottom\"===t.insertAt)n.appendChild(e);else{if(\"object\"!=typeof t.insertAt||!t.insertAt.before)throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");var o=s(t.insertInto+\" \"+t.insertAt.before);n.insertBefore(e,o)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function v(t){var e=document.createElement(\"style\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),y(e,t.attrs),h(t,e),e}function y(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function m(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=e.transform(t.css)))return function(){};t.css=i}if(e.singleton){var a=u++;n=c||(c=v(e)),r=w.bind(null,n,a,!1),o=w.bind(null,n,a,!0)}else t.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=function(t){var e=document.createElement(\"link\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),t.attrs.rel=\"stylesheet\",y(e,t.attrs),h(t,e),e}(e),r=function(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\");var a=new Blob([r],{type:\"text/css\"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,e),o=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(e),r=function(t,e){var n=e.css,r=e.media;r&&t.setAttribute(\"media\",r);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){g(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(e=e||{}).attrs=\"object\"==typeof e.attrs?e.attrs:{},e.singleton||\"boolean\"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto=\"head\"),e.insertAt||(e.insertAt=\"bottom\");var n=d(t,e);return p(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}t&&p(d(t,e),e);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete i[s.id]}}}};var b,x=(b=[],function(t,e){return b[t]=e,b.filter(Boolean).join(\"\\n\")});function w(t,e,n,r){var o=n?\"\":r.css;if(t.styleSheet)t.styleSheet.cssText=x(e,o);else{var i=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}},function(t,e){t.exports=function(t){var e=\"undefined\"!=typeof window&&window.location;if(!e)throw new Error(\"fixUrls requires window.location\");if(!t||\"string\"!=typeof t)return t;var n=e.protocol+\"//\"+e.host,r=n+e.pathname.replace(/\\/[^\\/]*$/,\"/\");return t.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(t,e){var o,i=e.trim().replace(/^\"(.*)\"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(i)?t:(o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\")})}}])});","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.RawTool=t():e.RawTool=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=0)}([function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return i}));n(1);function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}\n/**\n * Raw HTML Tool for CodeX Editor\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */var i=function(){function e(t){var n=t.data,r=t.config,o=t.api,i=t.readOnly;!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this.api=o,this.readOnly=i,this.placeholder=r.placeholder||e.DEFAULT_PLACEHOLDER,this.CSS={baseClass:this.api.styles.block,input:this.api.styles.input,wrapper:\"ce-rawtool\",textarea:\"ce-rawtool__textarea\"},this.data={html:n.html||\"\"},this.textarea=null,this.resizeDebounce=null}return o(e,null,[{key:\"isReadOnlySupported\",get:function(){return!0}},{key:\"displayInToolbox\",get:function(){return!0}},{key:\"enableLineBreaks\",get:function(){return!0}},{key:\"toolbox\",get:function(){return{icon:'<svg width=\"19\" height=\"13\"><path d=\"M18.004 5.794c.24.422.18.968-.18 1.328l-4.943 4.943a1.105 1.105 0 1 1-1.562-1.562l4.162-4.162-4.103-4.103A1.125 1.125 0 1 1 12.97.648l4.796 4.796c.104.104.184.223.239.35zm-15.142.547l4.162 4.162a1.105 1.105 0 1 1-1.562 1.562L.519 7.122c-.36-.36-.42-.906-.18-1.328a1.13 1.13 0 0 1 .239-.35L5.374.647a1.125 1.125 0 0 1 1.591 1.591L2.862 6.341z\"/></svg>',title:\"Raw HTML\"}}}]),o(e,[{key:\"render\",value:function(){var e=this,t=document.createElement(\"div\");return this.textarea=document.createElement(\"textarea\"),t.classList.add(this.CSS.baseClass,this.CSS.wrapper),this.textarea.classList.add(this.CSS.textarea,this.CSS.input),this.textarea.textContent=this.data.html,this.textarea.placeholder=this.placeholder,this.readOnly?this.textarea.disabled=!0:this.textarea.addEventListener(\"input\",(function(){e.onInput()})),t.appendChild(this.textarea),setTimeout((function(){e.resize()}),100),t}},{key:\"save\",value:function(e){return{html:e.querySelector(\"textarea\").value}}},{key:\"onInput\",value:function(){var e=this;this.resizeDebounce&&clearTimeout(this.resizeDebounce),this.resizeDebounce=setTimeout((function(){e.resize()}),200)}},{key:\"resize\",value:function(){this.textarea.style.height=\"auto\",this.textarea.style.height=this.textarea.scrollHeight+\"px\"}}],[{key:\"DEFAULT_PLACEHOLDER\",get:function(){return\"Enter HTML code\"}},{key:\"sanitize\",get:function(){return{html:!0}}}]),e}()},function(e,t,n){var r=n(2);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,\".ce-rawtool__textarea {\\n  min-height: 200px;\\n  resize: vertical;\\n  border-radius: 8px;\\n  border: 0;\\n  background-color: #1e2128;\\n  font-family: Menlo, Monaco, Consolas, Courier New, monospace;\\n  font-size: 12px;\\n  line-height: 1.6;\\n  letter-spacing: -0.2px;\\n  color: #a1a7b6;\\n  overscroll-behavior: contain;\\n}\\n\",\"\"])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||\"\",r=e[3];if(!r)return n;if(t&&\"function\"==typeof btoa){var o=(a=r,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+\" */\"),i=r.sources.map((function(e){return\"/*# sourceURL=\"+r.sourceRoot+e+\" */\"}));return[n].concat(i).concat([o]).join(\"\\n\")}var a;return[n].join(\"\\n\")}(t,e);return t[2]?\"@media \"+t[2]+\"{\"+n+\"}\":n})).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];\"number\"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];\"number\"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),t.push(a))}},t}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){return document.querySelector(e)},u=function(e){var t={};return function(e){if(\"function\"==typeof e)return e();if(void 0===t[e]){var n=s.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,l=0,f=[],p=n(5);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(g(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(g(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function v(e,t){var n=u(e.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=f[f.length-1];if(\"top\"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if(\"bottom\"===e.insertAt)n.appendChild(t);else{if(\"object\"!=typeof e.insertAt||!e.insertAt.before)throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");var o=u(e.insertInto+\" \"+e.insertAt.before);n.insertBefore(t,o)}}function b(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function y(e){var t=document.createElement(\"style\");return void 0===e.attrs.type&&(e.attrs.type=\"text/css\"),m(t,e.attrs),v(e,t),t}function m(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function g(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=l++;n=c||(c=y(t)),r=L.bind(null,n,a,!1),o=L.bind(null,n,a,!0)}else e.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=function(e){var t=document.createElement(\"link\");return void 0===e.attrs.type&&(e.attrs.type=\"text/css\"),e.attrs.rel=\"stylesheet\",m(t,e.attrs),v(e,t),t}(t),r=j.bind(null,n,t),o=function(){b(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=S.bind(null,n),o=function(){b(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(t=t||{}).attrs=\"object\"==typeof t.attrs?t.attrs:{},t.singleton||\"boolean\"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto=\"head\"),t.insertAt||(t.insertAt=\"bottom\");var n=h(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&d(h(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete i[s.id]}}}};var x,w=(x=[],function(e,t){return x[e]=t,x.filter(Boolean).join(\"\\n\")});function L(e,t,n,r){var o=n?\"\":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function S(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute(\"media\",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function j(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=p(r)),o&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\");var a=new Blob([r],{type:\"text/css\"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},function(e,t){e.exports=function(e){var t=\"undefined\"!=typeof window&&window.location;if(!t)throw new Error(\"fixUrls requires window.location\");if(!e||\"string\"!=typeof e)return e;var n=t.protocol+\"//\"+t.host,r=n+t.pathname.replace(/\\/[^\\/]*$/,\"/\");return e.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,(function(e,t){var o,i=t.trim().replace(/^\"(.*)\"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(i)?e:(o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\")}))}}]).default}));","!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.Table=e():t.Table=e()}(window,function(){return function(t){var e={};function o(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}return o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,\"a\",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p=\"\",o(o.s=3)}([function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var o=function(t,e){var o=t[1]||\"\",n=t[3];if(!n)return o;if(e&&\"function\"==typeof btoa){var i=(l=n,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(l))))+\" */\"),r=n.sources.map(function(t){return\"/*# sourceURL=\"+n.sourceRoot+t+\" */\"});return[o].concat(r).concat([i]).join(\"\\n\")}var l;return[o].join(\"\\n\")}(e,t);return e[2]?\"@media \"+e[2]+\"{\"+o+\"}\":o}).join(\"\")},e.i=function(t,o){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var n={},i=0;i<this.length;i++){var r=this[i][0];\"number\"==typeof r&&(n[r]=!0)}for(i=0;i<t.length;i++){var l=t[i];\"number\"==typeof l[0]&&n[l[0]]||(o&&!l[2]?l[2]=o:o&&(l[2]=\"(\"+l[2]+\") and (\"+o+\")\"),e.push(l))}},e}},function(t,e,o){var n,i,r={},l=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=n.apply(this,arguments)),i}),s=function(t){var e={};return function(t,o){if(\"function\"==typeof t)return t();if(void 0===e[t]){var n=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,o);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),a=null,c=0,h=[],d=o(6);function u(t,e){for(var o=0;o<t.length;o++){var n=t[o],i=r[n.id];if(i){i.refs++;for(var l=0;l<i.parts.length;l++)i.parts[l](n.parts[l]);for(;l<n.parts.length;l++)i.parts.push(g(n.parts[l],e))}else{var s=[];for(l=0;l<n.parts.length;l++)s.push(g(n.parts[l],e));r[n.id]={id:n.id,refs:1,parts:s}}}}function f(t,e){for(var o=[],n={},i=0;i<t.length;i++){var r=t[i],l=e.base?r[0]+e.base:r[0],s={css:r[1],media:r[2],sourceMap:r[3]};n[l]?n[l].parts.push(s):o.push(n[l]={id:l,parts:[s]})}return o}function p(t,e){var o=s(t.insertInto);if(!o)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var n=h[h.length-1];if(\"top\"===t.insertAt)n?n.nextSibling?o.insertBefore(e,n.nextSibling):o.appendChild(e):o.insertBefore(e,o.firstChild),h.push(e);else if(\"bottom\"===t.insertAt)o.appendChild(e);else{if(\"object\"!=typeof t.insertAt||!t.insertAt.before)throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");var i=s(t.insertAt.before,o);o.insertBefore(e,i)}}function _(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=h.indexOf(t);e>=0&&h.splice(e,1)}function b(t){var e=document.createElement(\"style\");if(void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),void 0===t.attrs.nonce){var n=function(){0;return o.nc}();n&&(t.attrs.nonce=n)}return v(e,t.attrs),p(t,e),e}function v(t,e){Object.keys(e).forEach(function(o){t.setAttribute(o,e[o])})}function g(t,e){var o,n,i,r;if(e.transform&&t.css){if(!(r=\"function\"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=r}if(e.singleton){var l=c++;o=a||(a=b(e)),n=w.bind(null,o,l,!1),i=w.bind(null,o,l,!0)}else t.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(o=function(t){var e=document.createElement(\"link\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),t.attrs.rel=\"stylesheet\",v(e,t.attrs),p(t,e),e}(e),n=function(t,e,o){var n=o.css,i=o.sourceMap,r=void 0===e.convertToAbsoluteUrls&&i;(e.convertToAbsoluteUrls||r)&&(n=d(n));i&&(n+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+\" */\");var l=new Blob([n],{type:\"text/css\"}),s=t.href;t.href=URL.createObjectURL(l),s&&URL.revokeObjectURL(s)}.bind(null,o,e),i=function(){_(o),o.href&&URL.revokeObjectURL(o.href)}):(o=b(e),n=function(t,e){var o=e.css,n=e.media;n&&t.setAttribute(\"media\",n);if(t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}.bind(null,o),i=function(){_(o)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else i()}}t.exports=function(t,e){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(e=e||{}).attrs=\"object\"==typeof e.attrs?e.attrs:{},e.singleton||\"boolean\"==typeof e.singleton||(e.singleton=l()),e.insertInto||(e.insertInto=\"head\"),e.insertAt||(e.insertAt=\"bottom\");var o=f(t,e);return u(o,e),function(t){for(var n=[],i=0;i<o.length;i++){var l=o[i];(s=r[l.id]).refs--,n.push(s)}t&&u(f(t,e),e);for(i=0;i<n.length;i++){var s;if(0===(s=n[i]).refs){for(var a=0;a<s.parts.length;a++)s.parts[a]();delete r[s.id]}}}};var m,y=(m=[],function(t,e){return m[t]=e,m.filter(Boolean).join(\"\\n\")});function w(t,e,o,n){var i=o?\"\":n.css;if(t.styleSheet)t.styleSheet.cssText=y(e,i);else{var r=document.createTextNode(i),l=t.childNodes;l[e]&&t.removeChild(l[e]),l.length?t.insertBefore(r,l[e]):t.appendChild(r)}}},function(t,e){t.exports='<svg viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"10\" fill=\"#388AE5\"></circle><path fill=\"#FFF\" d=\"M10.9 9.1h3.7a.9.9 0 1 1 0 1.8h-3.7v3.7a.9.9 0 1 1-1.8 0v-3.7H5.4a.9.9 0 0 1 0-1.8h3.7V5.4a.9.9 0 0 1 1.8 0v3.7z\"></path></svg>'},function(t,e,o){const n=o(12).TableConstructor,i=o(11),r={input:\"tc-table__inp\"};t.exports=class{static get isReadOnlySupported(){return!0}static get enableLineBreaks(){return!0}static get toolbox(){return{icon:i,title:\"Table\"}}constructor({data:t,config:e,api:o,readOnly:i}){this.api=o,this.readOnly=i,this._tableConstructor=new n(t,e,o,i)}render(){return this._tableConstructor.htmlElement}save(t){const e=[],o=t.querySelector(\"table\").rows;for(let t=0;t<o.length;t++){const n=o[t],i=Array.from(n.cells).map(t=>t.querySelector(\".\"+r.input));i.every(this._isEmpty)||e.push(i.map(t=>t.innerHTML))}return{content:e}}_isEmpty(t){return!t.textContent.trim()}}},function(t,e,o){var n=o(5);\"string\"==typeof n&&(n=[[t.i,n,\"\"]]);var i={hmr:!0,transform:void 0,insertInto:void 0};o(1)(n,i);n.locals&&(t.exports=n.locals)},function(t,e,o){(t.exports=o(0)(!1)).push([t.i,\".tc-editor{padding:10px;position:relative;box-sizing:content-box;width:100%;left:-10px}\",\"\"])},function(t,e){t.exports=function(t){var e=\"undefined\"!=typeof window&&window.location;if(!e)throw new Error(\"fixUrls requires window.location\");if(!t||\"string\"!=typeof t)return t;var o=e.protocol+\"//\"+e.host,n=o+e.pathname.replace(/\\/[^\\/]*$/,\"/\");return t.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,function(t,e){var i,r=e.trim().replace(/^\"(.*)\"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(r)?t:(i=0===r.indexOf(\"//\")?r:0===r.indexOf(\"/\")?o+r:n+r.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(i)+\")\")})}},function(t,e,o){var n=o(8);\"string\"==typeof n&&(n=[[t.i,n,\"\"]]);var i={hmr:!0,transform:void 0,insertInto:void 0};o(1)(n,i);n.locals&&(t.exports=n.locals)},function(t,e,o){(t.exports=o(0)(!1)).push([t.i,\".tc-toolbar{background:#368be6;}.tc-toolbar--hidden{visibility:hidden}.tc-toolbar--hor{width:100%;height:21px;flex-direction:row;left:0;top:1px}.tc-toolbar--hor,.tc-toolbar--ver{display:flex;align-items:center;position:absolute;z-index:100}.tc-toolbar--ver{height:100%;width:21px;flex-direction:column;top:0;left:-1px}.tc-toolbar__plus{height:21px;width:21px;margin-top:0;}.tc-toolbar__plus--hor{margin-left:-10px}.tc-toolbar__plus--ver{margin-top:-10px}.tc-toolbar__shine-line--hor{min-height:1px;width:100%}.tc-toolbar__shine-line--ver{min-width:1px;height:100%}\",\"\"])},function(t,e,o){var n=o(10);\"string\"==typeof n&&(n=[[t.i,n,\"\"]]);var i={hmr:!0,transform:void 0,insertInto:void 0};o(1)(n,i);n.locals&&(t.exports=n.locals)},function(t,e,o){(t.exports=o(0)(!1)).push([t.i,\".tc-table{width:100%;height:100%;border-collapse:collapse;table-layout:fixed;}.tc-table__wrap{border:1px solid #dbdbe2;border-radius:3px;position:relative;height:100%;width:100%;box-sizing:border-box}.tc-table__cell{border:1px solid #dbdbe2;padding:0;vertical-align:top}.tc-table__area{padding:10px;height:100%}.tc-table__inp{outline:none;flex-grow:100;min-height:1.5em;height:100%;overflow:hidden}.tc-table tbody tr:first-child td{border-top:none}.tc-table tbody tr:last-child td{border-bottom:none}.tc-table tbody tr td:last-child{border-right:none}.tc-table tbody tr td:first-child{border-left:none}\",\"\"])},function(t,e){t.exports='<svg width=\"18\" height=\"14\"><path d=\"M2.833 8v1.95a1.7 1.7 0 0 0 1.7 1.7h3.45V8h-5.15zm0-2h5.15V2.35h-3.45a1.7 1.7 0 0 0-1.7 1.7V6zm12.3 2h-5.15v3.65h3.45a1.7 1.7 0 0 0 1.7-1.7V8zm0-2V4.05a1.7 1.7 0 0 0-1.7-1.7h-3.45V6h5.15zM4.533.1h8.9a3.95 3.95 0 0 1 3.95 3.95v5.9a3.95 3.95 0 0 1-3.95 3.95h-8.9a3.95 3.95 0 0 1-3.95-3.95v-5.9A3.95 3.95 0 0 1 4.533.1z\"></path></svg>'},function(t,e,o){\"use strict\";o.r(e);o(4);function n(t){return!(null==t)}function i(t,e=null,o=null,i=null){const r=document.createElement(t);if(n(e))for(let t=0;t<e.length;t++)n(e[t])&&r.classList.add(e[t]);if(n(o))for(let t in o)r.setAttribute(t,o[t]);if(n(i))for(let t=0;t<i.length;t++)n(i[t])&&r.appendChild(i[t]);return r}function r(t){const e=t.getBoundingClientRect();return{y1:Math.floor(e.top+window.pageYOffset),x1:Math.floor(e.left+window.pageXOffset),x2:Math.floor(e.right+window.pageXOffset),y2:Math.floor(e.bottom+window.pageYOffset)}}function l(t,e,o){let n;return e-t.x1>=-1&&e-t.x1<=11&&(n=\"left\"),t.x2-e>=-1&&t.x2-e<=11&&(n=\"right\"),o-t.y1>=-1&&o-t.y1<=11&&(n=\"top\"),t.y2-o>=-1&&t.y2-o<=11&&(n=\"bottom\"),n}o(7);var s=o(2),a=o.n(s);const c={highlightingLine:\"tc-toolbar\",hidden:\"tc-toolbar--hidden\",horizontalToolBar:\"tc-toolbar--hor\",horizontalHighlightingLine:\"tc-toolbar__shine-line--hor\",verticalToolBar:\"tc-toolbar--ver\",verticalHighlightingLine:\"tc-toolbar__shine-line--ver\",plusButton:\"tc-toolbar__plus\",horizontalPlusButton:\"tc-toolbar__plus--hor\",verticalPlusButton:\"tc-toolbar__plus--ver\",area:\"tc-table__area\"};class h{constructor(){this._plusButton=this._generatePlusButton(),this._highlightingLine=this._generateHighlightingLine(),this._toolbar=this._generateToolBar([this._plusButton,this._highlightingLine])}hide(){this._toolbar.classList.add(c.hidden)}show(){this._toolbar.classList.remove(c.hidden),this._highlightingLine.classList.remove(c.hidden)}hideLine(){this._highlightingLine.classList.add(c.hidden)}get htmlElement(){return this._toolbar}_generatePlusButton(){const t=i(\"div\",[c.plusButton]);return t.innerHTML=a.a,t.addEventListener(\"click\",t=>{t.stopPropagation();const e=new CustomEvent(\"click\",{detail:{x:t.pageX,y:t.pageY},bubbles:!0});this._toolbar.dispatchEvent(e)}),t}_generateHighlightingLine(){const t=i(\"div\",[c.highlightingLine]);return t.addEventListener(\"click\",t=>{t.stopPropagation();const e=new CustomEvent(\"click\",{bubbles:!0});this._toolbar.dispatchEvent(e)}),t}_generateToolBar(t){const e=i(\"div\",[c.hidden],null,t);return e.addEventListener(\"mouseleave\",t=>{this._recalcMousePos(t)}),e}_recalcMousePos(t){this.hide();const e=document.elementFromPoint(t.pageX,t.pageY);if(null!==e&&e.classList.contains(c.area)){const o=new MouseEvent(\"mouseover\",{clientX:t.pageX,clientY:t.pageY});e.dispatchEvent(o)}}}class d extends h{constructor(){super(),this._toolbar.classList.add(c.horizontalToolBar),this._plusButton.classList.add(c.horizontalPlusButton),this._highlightingLine.classList.add(c.horizontalHighlightingLine)}showIn(t){const e=Math.floor(Number.parseInt(window.getComputedStyle(this._toolbar).height)/2);this._toolbar.style.top=t-e+\"px\",this.show()}}class u extends h{constructor(){super(),this._toolbar.classList.add(c.verticalToolBar),this._plusButton.classList.add(c.verticalPlusButton),this._highlightingLine.classList.add(c.verticalHighlightingLine)}showIn(t){const e=Math.floor(Number.parseInt(window.getComputedStyle(this._toolbar).width)/2);this._toolbar.style.left=t-e+\"px\",this.show()}}o(9);const f={table:\"tc-table\",inputField:\"tc-table__inp\",cell:\"tc-table__cell\",wrapper:\"tc-table__wrap\",area:\"tc-table__area\"};class p{constructor(t){this.readOnly=t,this._numberOfColumns=0,this._numberOfRows=0,this._element=this._createTableWrapper(),this._table=this._element.querySelector(\"table\"),this.readOnly||this._hangEvents()}addColumn(t=-1){this._numberOfColumns++;const e=this._table.rows;for(let o=0;o<e.length;o++){const n=e[o].insertCell(t);this._fillCell(n)}}addRow(t=-1){this._numberOfRows++;const e=this._table.insertRow(t);return this._fillRow(e),e}get htmlElement(){return this._element}get body(){return this._table}get selectedCell(){return this._selectedCell}_createTableWrapper(){return i(\"div\",[f.wrapper],null,[i(\"table\",[f.table])])}_createContenteditableArea(){return i(\"div\",[f.inputField],{contenteditable:!this.readOnly})}_fillCell(t){t.classList.add(f.cell);const e=this._createContenteditableArea();t.appendChild(i(\"div\",[f.area],null,[e]))}_fillRow(t){for(let e=0;e<this._numberOfColumns;e++){const e=t.insertCell();this._fillCell(e)}}_hangEvents(){this._table.addEventListener(\"focus\",t=>{this._focusEditField(t)},!0),this._table.addEventListener(\"blur\",t=>{this._blurEditField(t)},!0),this._table.addEventListener(\"keydown\",t=>{this._pressedEnterInEditField(t)}),this._table.addEventListener(\"click\",t=>{this._clickedOnCell(t)}),this._table.addEventListener(\"mouseover\",t=>{this._mouseEnterInDetectArea(t),t.stopPropagation()},!0)}_focusEditField(t){t.target.classList.contains(f.inputField)&&(this._selectedCell=t.target.closest(\".\"+f.cell))}_blurEditField(t){t.target.classList.contains(f.inputField)&&(this._selectedCell=null)}_pressedEnterInEditField(t){t.target.classList.contains(f.inputField)&&(13!==t.keyCode||t.shiftKey||t.preventDefault())}_clickedOnCell(t){if(!t.target.classList.contains(f.cell))return;t.target.querySelector(\".\"+f.inputField).focus()}_mouseEnterInDetectArea(t){if(!t.target.classList.contains(f.area))return;const e=l(r(t.target.closest(\"TD\")),t.pageX,t.pageY);t.target.dispatchEvent(new CustomEvent(\"mouseInActivatingArea\",{detail:{side:e},bubbles:!0}))}}o.d(e,\"TableConstructor\",function(){return b});const _={editor:\"tc-editor\",toolBarHor:\"tc-toolbar--hor\",toolBarVer:\"tc-toolbar--ver\",inputField:\"tc-table__inp\"};class b{constructor(t,e,o,n){this.readOnly=n,this._table=new p(n);const r=this._resizeTable(t,e);this._fillTable(t,r),this._container=i(\"div\",[_.editor,o.styles.block],null,[this._table.htmlElement]),this._verticalToolBar=new u,this._horizontalToolBar=new d,this._table.htmlElement.appendChild(this._horizontalToolBar.htmlElement),this._table.htmlElement.appendChild(this._verticalToolBar.htmlElement),this._hoveredCell=null,this._activatedToolBar=null,this._hoveredCellSide=null,this._plusButDelay=null,this._toolbarShowDelay=null,this.readOnly||this._hangEvents()}get htmlElement(){return this._container}_fillTable(t,e){if(void 0!==t.content)for(let o=0;o<e.rows&&o<t.content.length;o++)for(let n=0;n<e.cols&&n<t.content[o].length;n++){this._table.body.rows[o].cells[n].querySelector(\".\"+_.inputField).innerHTML=t.content[o][n]}}_resizeTable(t,e){const o=Array.isArray(t.content),n=!!o&&t.content.length,i=o?t.content.length:void 0,r=n?t.content[0].length:void 0,l=Number.parseInt(e.rows),s=Number.parseInt(e.cols),a=!isNaN(l)&&l>0?l:void 0,c=!isNaN(s)&&s>0?s:void 0,h=i||a||2,d=r||c||2;for(let t=0;t<h;t++)this._table.addRow();for(let t=0;t<d;t++)this._table.addColumn();return{rows:h,cols:d}}_showToolBar(t,e){this._hideToolBar(),this._activatedToolBar=t,t.showIn(e)}_hideToolBar(){null!==this._activatedToolBar&&this._activatedToolBar.hide()}_hangEvents(){this._container.addEventListener(\"mouseInActivatingArea\",t=>{this._toolbarCalling(t)}),this._container.addEventListener(\"click\",t=>{this._clickToolbar(t)}),this._container.addEventListener(\"input\",()=>{this._hideToolBar()}),this._container.addEventListener(\"keydown\",t=>{this._containerKeydown(t)}),this._container.addEventListener(\"mouseout\",t=>{this._leaveDetectArea(t)}),this._container.addEventListener(\"mouseover\",t=>{this._mouseEnterInDetectArea(t)})}_mouseInActivatingAreaListener(t){this._hoveredCellSide=t.detail.side;const e=r(t.target),o=r(this._table.htmlElement);if(this._hoveredCell=t.target.closest(\"TD\"),null===this._hoveredCell){const t=11;this._hoveredCell=this._container,e.x1+=t,e.y1+=t,e.x2-=t,e.y2-=t}\"top\"===this._hoveredCellSide&&this._showToolBar(this._horizontalToolBar,e.y1-o.y1-2),\"bottom\"===this._hoveredCellSide&&this._showToolBar(this._horizontalToolBar,e.y2-o.y1-1),\"left\"===this._hoveredCellSide&&this._showToolBar(this._verticalToolBar,e.x1-o.x1-2),\"right\"===this._hoveredCellSide&&this._showToolBar(this._verticalToolBar,e.x2-o.x1-1)}_isToolbar(t){return!(!t.closest(\".\"+_.toolBarHor)&&!t.closest(\".\"+_.toolBarVer))}_leaveDetectArea(t){this._isToolbar(t.relatedTarget)||(clearTimeout(this._toolbarShowDelay),this._hideToolBar())}_toolbarCalling(t){this._isToolbar(t.target)||(clearTimeout(this._toolbarShowDelay),this._toolbarShowDelay=setTimeout(()=>{this._mouseInActivatingAreaListener(t)},125))}_clickToolbar(t){if(!this._isToolbar(t.target))return;let e;if(this._activatedToolBar===this._horizontalToolBar?(this._addRow(),e=\"y\"):(this._addColumn(),e=\"x\"),isNaN(t.detail)&&null!==t.detail){const o=r(this._table.htmlElement);let n;n=\"x\"===e?t.detail.x-o.x1:t.detail.y-o.y1,this._delayAddButtonForMultiClickingNearMouse(n)}else this._hideToolBar()}_containerKeydown(t){13===t.keyCode&&this._containerEnterPressed(t)}_delayAddButtonForMultiClickingNearMouse(t){this._showToolBar(this._activatedToolBar,t),this._activatedToolBar.hideLine(),clearTimeout(this._plusButDelay),this._plusButDelay=setTimeout(()=>{this._hideToolBar()},500)}_getHoveredSideOfContainer(){return this._hoveredCell===this._container?this._isBottomOrRight()?0:-1:1}_isBottomOrRight(){return\"bottom\"===this._hoveredCellSide||\"right\"===this._hoveredCellSide}_addRow(){const t=this._hoveredCell.closest(\"TR\");let e=this._getHoveredSideOfContainer();1===e&&(e=t.sectionRowIndex,e+=this._isBottomOrRight()),this._table.addRow(e)}_addColumn(){let t=this._getHoveredSideOfContainer();1===t&&(t=this._hoveredCell.cellIndex,t+=this._isBottomOrRight()),this._table.addColumn(t)}_containerEnterPressed(t){if(null===this._table.selectedCell||t.shiftKey)return;const e=this._table.selectedCell.closest(\"TR\");let o=this._getHoveredSideOfContainer();1===o&&(o=e.sectionRowIndex+1),this._table.addRow(o).cells[0].click()}_mouseEnterInDetectArea(t){let e=l(r(this._container),t.pageX,t.pageY);t.target.dispatchEvent(new CustomEvent(\"mouseInActivatingArea\",{detail:{side:e},bubbles:!0}))}}}])});","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar DEFAULT_SIZE = 24;\n\nexports.default = function (_ref) {\n  var _ref$fill = _ref.fill,\n      fill = _ref$fill === undefined ? 'currentColor' : _ref$fill,\n      _ref$width = _ref.width,\n      width = _ref$width === undefined ? DEFAULT_SIZE : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === undefined ? DEFAULT_SIZE : _ref$height,\n      _ref$style = _ref.style,\n      style = _ref$style === undefined ? {} : _ref$style,\n      props = _objectWithoutProperties(_ref, ['fill', 'width', 'height', 'style']);\n\n  return _react2.default.createElement(\n    'svg',\n    _extends({\n      viewBox: '0 0 ' + DEFAULT_SIZE + ' ' + DEFAULT_SIZE,\n      style: _extends({ fill: fill, width: width, height: height }, style)\n    }, props),\n    _react2.default.createElement('path', { d: 'M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z' })\n  );\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar DEFAULT_SIZE = 24;\n\nexports.default = function (_ref) {\n  var _ref$fill = _ref.fill,\n      fill = _ref$fill === undefined ? 'currentColor' : _ref$fill,\n      _ref$width = _ref.width,\n      width = _ref$width === undefined ? DEFAULT_SIZE : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === undefined ? DEFAULT_SIZE : _ref$height,\n      _ref$style = _ref.style,\n      style = _ref$style === undefined ? {} : _ref$style,\n      props = _objectWithoutProperties(_ref, ['fill', 'width', 'height', 'style']);\n\n  return _react2.default.createElement(\n    'svg',\n    _extends({\n      viewBox: '0 0 ' + DEFAULT_SIZE + ' ' + DEFAULT_SIZE,\n      style: _extends({ fill: fill, width: width, height: height }, style)\n    }, props),\n    _react2.default.createElement('path', { d: 'M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z' })\n  );\n};","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    if (\n      (utils.isBlob(requestData) || utils.isFile(requestData)) &&\n      requestData.type\n    ) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = unescape(encodeURIComponent(config.auth.password)) || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',\n    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n  ];\n  var directMergeKeys = ['validateStatus'];\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  utils.forEach(directMergeKeys, function merge(prop) {\n    if (prop in config2) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys)\n    .concat(directMergeKeys);\n\n  var otherKeys = Object\n    .keys(config1)\n    .concat(Object.keys(config2))\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, mergeDeepProperties);\n\n  return config;\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar bind = require('./helpers/bind');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n","var MapCache = require('./_MapCache'),\n    setCacheAdd = require('./_setCacheAdd'),\n    setCacheHas = require('./_setCacheHas');\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n","var ListCache = require('./_ListCache'),\n    stackClear = require('./_stackClear'),\n    stackDelete = require('./_stackDelete'),\n    stackGet = require('./_stackGet'),\n    stackHas = require('./_stackHas'),\n    stackSet = require('./_stackSet');\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignMergeValue;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var arrayPush = require('./_arrayPush'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n","var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n","var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData'),\n    matchesStrictComparable = require('./_matchesStrictComparable');\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n","var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n","var Stack = require('./_Stack'),\n    assignMergeValue = require('./_assignMergeValue'),\n    baseFor = require('./_baseFor'),\n    baseMergeDeep = require('./_baseMergeDeep'),\n    isObject = require('./isObject'),\n    keysIn = require('./keysIn'),\n    safeGet = require('./_safeGet');\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nmodule.exports = baseMerge;\n","var assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n","var baseGet = require('./_baseGet');\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var Uint8Array = require('./_Uint8Array');\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n","var root = require('./_root');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n","var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n","var assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n","var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n","var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","var baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n","var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n","var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n","var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbols = require('./_getSymbols'),\n    keys = require('./keys');\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var overArg = require('./_overArg');\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","var arrayFilter = require('./_arrayFilter'),\n    stubArray = require('./stubArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n","var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n","var DataView = require('./_DataView'),\n    Map = require('./_Map'),\n    Promise = require('./_Promise'),\n    Set = require('./_Set'),\n    WeakMap = require('./_WeakMap'),\n    baseGetTag = require('./_baseGetTag'),\n    toSource = require('./_toSource');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var castPath = require('./_castPath'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isIndex = require('./_isIndex'),\n    isLength = require('./isLength'),\n    toKey = require('./_toKey');\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n","var baseCreate = require('./_baseCreate'),\n    getPrototype = require('./_getPrototype'),\n    isPrototype = require('./_isPrototype');\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","var isObject = require('./isObject');\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\nmodule.exports = safeGet;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n","var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n","var ListCache = require('./_ListCache');\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n","var ListCache = require('./_ListCache'),\n    Map = require('./_Map'),\n    MapCache = require('./_MapCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","module.exports = require('./forEach');\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var arrayEach = require('./_arrayEach'),\n    baseEach = require('./_baseEach'),\n    castFunction = require('./_castFunction'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection` and invokes `iteratee` for each element.\n * The iteratee is invoked with three arguments: (value, index|key, collection).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n * property are iterated like arrays. To avoid this behavior use `_.forIn`\n * or `_.forOwn` for object iteration.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias each\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n * @see _.forEachRight\n * @example\n *\n * _.forEach([1, 2], function(value) {\n *   console.log(value);\n * });\n * // => Logs `1` then `2`.\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forEach(collection, iteratee) {\n  var func = isArray(collection) ? arrayEach : baseEach;\n  return func(collection, castFunction(iteratee));\n}\n\nmodule.exports = forEach;\n","var baseForOwn = require('./_baseForOwn'),\n    castFunction = require('./_castFunction');\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nmodule.exports = forOwn;\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","var baseHasIn = require('./_baseHasIn'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","var isArrayLike = require('./isArrayLike'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nmodule.exports = isArrayLikeObject;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    getPrototype = require('./_getPrototype'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;\n","var baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n","var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nmodule.exports = isUndefined;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var baseMerge = require('./_baseMerge'),\n    createAssigner = require('./_createAssigner');\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nmodule.exports = merge;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","var baseProperty = require('./_baseProperty'),\n    basePropertyDeep = require('./_basePropertyDeep'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","var debounce = require('./debounce'),\n    isObject = require('./isObject');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nmodule.exports = throttle;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nmodule.exports = toPlainObject;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.materialColors = factory();\n  }\n})(this, function() {\n  return {\"red\":{\"50\":\"#ffebee\",\"100\":\"#ffcdd2\",\"200\":\"#ef9a9a\",\"300\":\"#e57373\",\"400\":\"#ef5350\",\"500\":\"#f44336\",\"600\":\"#e53935\",\"700\":\"#d32f2f\",\"800\":\"#c62828\",\"900\":\"#b71c1c\",\"a100\":\"#ff8a80\",\"a200\":\"#ff5252\",\"a400\":\"#ff1744\",\"a700\":\"#d50000\"},\"pink\":{\"50\":\"#fce4ec\",\"100\":\"#f8bbd0\",\"200\":\"#f48fb1\",\"300\":\"#f06292\",\"400\":\"#ec407a\",\"500\":\"#e91e63\",\"600\":\"#d81b60\",\"700\":\"#c2185b\",\"800\":\"#ad1457\",\"900\":\"#880e4f\",\"a100\":\"#ff80ab\",\"a200\":\"#ff4081\",\"a400\":\"#f50057\",\"a700\":\"#c51162\"},\"purple\":{\"50\":\"#f3e5f5\",\"100\":\"#e1bee7\",\"200\":\"#ce93d8\",\"300\":\"#ba68c8\",\"400\":\"#ab47bc\",\"500\":\"#9c27b0\",\"600\":\"#8e24aa\",\"700\":\"#7b1fa2\",\"800\":\"#6a1b9a\",\"900\":\"#4a148c\",\"a100\":\"#ea80fc\",\"a200\":\"#e040fb\",\"a400\":\"#d500f9\",\"a700\":\"#aa00ff\"},\"deepPurple\":{\"50\":\"#ede7f6\",\"100\":\"#d1c4e9\",\"200\":\"#b39ddb\",\"300\":\"#9575cd\",\"400\":\"#7e57c2\",\"500\":\"#673ab7\",\"600\":\"#5e35b1\",\"700\":\"#512da8\",\"800\":\"#4527a0\",\"900\":\"#311b92\",\"a100\":\"#b388ff\",\"a200\":\"#7c4dff\",\"a400\":\"#651fff\",\"a700\":\"#6200ea\"},\"indigo\":{\"50\":\"#e8eaf6\",\"100\":\"#c5cae9\",\"200\":\"#9fa8da\",\"300\":\"#7986cb\",\"400\":\"#5c6bc0\",\"500\":\"#3f51b5\",\"600\":\"#3949ab\",\"700\":\"#303f9f\",\"800\":\"#283593\",\"900\":\"#1a237e\",\"a100\":\"#8c9eff\",\"a200\":\"#536dfe\",\"a400\":\"#3d5afe\",\"a700\":\"#304ffe\"},\"blue\":{\"50\":\"#e3f2fd\",\"100\":\"#bbdefb\",\"200\":\"#90caf9\",\"300\":\"#64b5f6\",\"400\":\"#42a5f5\",\"500\":\"#2196f3\",\"600\":\"#1e88e5\",\"700\":\"#1976d2\",\"800\":\"#1565c0\",\"900\":\"#0d47a1\",\"a100\":\"#82b1ff\",\"a200\":\"#448aff\",\"a400\":\"#2979ff\",\"a700\":\"#2962ff\"},\"lightBlue\":{\"50\":\"#e1f5fe\",\"100\":\"#b3e5fc\",\"200\":\"#81d4fa\",\"300\":\"#4fc3f7\",\"400\":\"#29b6f6\",\"500\":\"#03a9f4\",\"600\":\"#039be5\",\"700\":\"#0288d1\",\"800\":\"#0277bd\",\"900\":\"#01579b\",\"a100\":\"#80d8ff\",\"a200\":\"#40c4ff\",\"a400\":\"#00b0ff\",\"a700\":\"#0091ea\"},\"cyan\":{\"50\":\"#e0f7fa\",\"100\":\"#b2ebf2\",\"200\":\"#80deea\",\"300\":\"#4dd0e1\",\"400\":\"#26c6da\",\"500\":\"#00bcd4\",\"600\":\"#00acc1\",\"700\":\"#0097a7\",\"800\":\"#00838f\",\"900\":\"#006064\",\"a100\":\"#84ffff\",\"a200\":\"#18ffff\",\"a400\":\"#00e5ff\",\"a700\":\"#00b8d4\"},\"teal\":{\"50\":\"#e0f2f1\",\"100\":\"#b2dfdb\",\"200\":\"#80cbc4\",\"300\":\"#4db6ac\",\"400\":\"#26a69a\",\"500\":\"#009688\",\"600\":\"#00897b\",\"700\":\"#00796b\",\"800\":\"#00695c\",\"900\":\"#004d40\",\"a100\":\"#a7ffeb\",\"a200\":\"#64ffda\",\"a400\":\"#1de9b6\",\"a700\":\"#00bfa5\"},\"green\":{\"50\":\"#e8f5e9\",\"100\":\"#c8e6c9\",\"200\":\"#a5d6a7\",\"300\":\"#81c784\",\"400\":\"#66bb6a\",\"500\":\"#4caf50\",\"600\":\"#43a047\",\"700\":\"#388e3c\",\"800\":\"#2e7d32\",\"900\":\"#1b5e20\",\"a100\":\"#b9f6ca\",\"a200\":\"#69f0ae\",\"a400\":\"#00e676\",\"a700\":\"#00c853\"},\"lightGreen\":{\"50\":\"#f1f8e9\",\"100\":\"#dcedc8\",\"200\":\"#c5e1a5\",\"300\":\"#aed581\",\"400\":\"#9ccc65\",\"500\":\"#8bc34a\",\"600\":\"#7cb342\",\"700\":\"#689f38\",\"800\":\"#558b2f\",\"900\":\"#33691e\",\"a100\":\"#ccff90\",\"a200\":\"#b2ff59\",\"a400\":\"#76ff03\",\"a700\":\"#64dd17\"},\"lime\":{\"50\":\"#f9fbe7\",\"100\":\"#f0f4c3\",\"200\":\"#e6ee9c\",\"300\":\"#dce775\",\"400\":\"#d4e157\",\"500\":\"#cddc39\",\"600\":\"#c0ca33\",\"700\":\"#afb42b\",\"800\":\"#9e9d24\",\"900\":\"#827717\",\"a100\":\"#f4ff81\",\"a200\":\"#eeff41\",\"a400\":\"#c6ff00\",\"a700\":\"#aeea00\"},\"yellow\":{\"50\":\"#fffde7\",\"100\":\"#fff9c4\",\"200\":\"#fff59d\",\"300\":\"#fff176\",\"400\":\"#ffee58\",\"500\":\"#ffeb3b\",\"600\":\"#fdd835\",\"700\":\"#fbc02d\",\"800\":\"#f9a825\",\"900\":\"#f57f17\",\"a100\":\"#ffff8d\",\"a200\":\"#ffff00\",\"a400\":\"#ffea00\",\"a700\":\"#ffd600\"},\"amber\":{\"50\":\"#fff8e1\",\"100\":\"#ffecb3\",\"200\":\"#ffe082\",\"300\":\"#ffd54f\",\"400\":\"#ffca28\",\"500\":\"#ffc107\",\"600\":\"#ffb300\",\"700\":\"#ffa000\",\"800\":\"#ff8f00\",\"900\":\"#ff6f00\",\"a100\":\"#ffe57f\",\"a200\":\"#ffd740\",\"a400\":\"#ffc400\",\"a700\":\"#ffab00\"},\"orange\":{\"50\":\"#fff3e0\",\"100\":\"#ffe0b2\",\"200\":\"#ffcc80\",\"300\":\"#ffb74d\",\"400\":\"#ffa726\",\"500\":\"#ff9800\",\"600\":\"#fb8c00\",\"700\":\"#f57c00\",\"800\":\"#ef6c00\",\"900\":\"#e65100\",\"a100\":\"#ffd180\",\"a200\":\"#ffab40\",\"a400\":\"#ff9100\",\"a700\":\"#ff6d00\"},\"deepOrange\":{\"50\":\"#fbe9e7\",\"100\":\"#ffccbc\",\"200\":\"#ffab91\",\"300\":\"#ff8a65\",\"400\":\"#ff7043\",\"500\":\"#ff5722\",\"600\":\"#f4511e\",\"700\":\"#e64a19\",\"800\":\"#d84315\",\"900\":\"#bf360c\",\"a100\":\"#ff9e80\",\"a200\":\"#ff6e40\",\"a400\":\"#ff3d00\",\"a700\":\"#dd2c00\"},\"brown\":{\"50\":\"#efebe9\",\"100\":\"#d7ccc8\",\"200\":\"#bcaaa4\",\"300\":\"#a1887f\",\"400\":\"#8d6e63\",\"500\":\"#795548\",\"600\":\"#6d4c41\",\"700\":\"#5d4037\",\"800\":\"#4e342e\",\"900\":\"#3e2723\"},\"grey\":{\"50\":\"#fafafa\",\"100\":\"#f5f5f5\",\"200\":\"#eeeeee\",\"300\":\"#e0e0e0\",\"400\":\"#bdbdbd\",\"500\":\"#9e9e9e\",\"600\":\"#757575\",\"700\":\"#616161\",\"800\":\"#424242\",\"900\":\"#212121\"},\"blueGrey\":{\"50\":\"#eceff1\",\"100\":\"#cfd8dc\",\"200\":\"#b0bec5\",\"300\":\"#90a4ae\",\"400\":\"#78909c\",\"500\":\"#607d8b\",\"600\":\"#546e7a\",\"700\":\"#455a64\",\"800\":\"#37474f\",\"900\":\"#263238\"},\"darkText\":{\"primary\":\"rgba(0, 0, 0, 0.87)\",\"secondary\":\"rgba(0, 0, 0, 0.54)\",\"disabled\":\"rgba(0, 0, 0, 0.38)\",\"dividers\":\"rgba(0, 0, 0, 0.12)\"},\"lightText\":{\"primary\":\"rgba(255, 255, 255, 1)\",\"secondary\":\"rgba(255, 255, 255, 0.7)\",\"disabled\":\"rgba(255, 255, 255, 0.5)\",\"dividers\":\"rgba(255, 255, 255, 0.12)\"},\"darkIcons\":{\"active\":\"rgba(0, 0, 0, 0.54)\",\"inactive\":\"rgba(0, 0, 0, 0.38)\"},\"lightIcons\":{\"active\":\"rgba(255, 255, 255, 1)\",\"inactive\":\"rgba(255, 255, 255, 0.5)\"},\"white\":\"#ffffff\",\"black\":\"#000000\"};\n});\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactIs = require('react-is');\nvar assign = require('object-assign');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar checkPropTypes = require('./checkPropTypes');\n\nvar has = Function.call.bind(Object.prototype.hasOwnProperty);\nvar printWarning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    elementType: createElementTypeTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (process.env.NODE_ENV !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            printWarning(\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!ReactIs.isValidElementType(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (arguments.length > 1) {\n          printWarning(\n            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +\n            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'\n          );\n        } else {\n          printWarning('Invalid argument supplied to oneOf, expected an array.');\n        }\n      }\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n        var type = getPreciseType(value);\n        if (type === 'symbol') {\n          return String(value);\n        }\n        return value;\n      });\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (has(propValue, key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // falsy value can't be a Symbol\n    if (!propValue) {\n      return false;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlphaPicker = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _common = require('../common');\n\nvar _AlphaPointer = require('./AlphaPointer');\n\nvar _AlphaPointer2 = _interopRequireDefault(_AlphaPointer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AlphaPicker = exports.AlphaPicker = function AlphaPicker(_ref) {\n  var rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      width = _ref.width,\n      height = _ref.height,\n      onChange = _ref.onChange,\n      direction = _ref.direction,\n      style = _ref.style,\n      renderers = _ref.renderers,\n      pointer = _ref.pointer,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      picker: {\n        position: 'relative',\n        width: width,\n        height: height\n      },\n      alpha: {\n        radius: '2px',\n        style: style\n      }\n    }\n  });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.picker, className: 'alpha-picker ' + className },\n    _react2.default.createElement(_common.Alpha, _extends({}, styles.alpha, {\n      rgb: rgb,\n      hsl: hsl,\n      pointer: pointer,\n      renderers: renderers,\n      onChange: onChange,\n      direction: direction\n    }))\n  );\n};\n\nAlphaPicker.defaultProps = {\n  width: '316px',\n  height: '16px',\n  direction: 'horizontal',\n  pointer: _AlphaPointer2.default\n};\n\nexports.default = (0, _common.ColorWrap)(AlphaPicker);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlphaPointer = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AlphaPointer = exports.AlphaPointer = function AlphaPointer(_ref) {\n  var direction = _ref.direction;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      picker: {\n        width: '18px',\n        height: '18px',\n        borderRadius: '50%',\n        transform: 'translate(-9px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    },\n    'vertical': {\n      picker: {\n        transform: 'translate(-3px, -9px)'\n      }\n    }\n  }, { vertical: direction === 'vertical' });\n\n  return _react2.default.createElement('div', { style: styles.picker });\n};\n\nexports.default = AlphaPointer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Block = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _color = require('../../helpers/color');\n\nvar color = _interopRequireWildcard(_color);\n\nvar _common = require('../common');\n\nvar _BlockSwatches = require('./BlockSwatches');\n\nvar _BlockSwatches2 = _interopRequireDefault(_BlockSwatches);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Block = exports.Block = function Block(_ref) {\n  var onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      hex = _ref.hex,\n      colors = _ref.colors,\n      width = _ref.width,\n      triangle = _ref.triangle,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var transparent = hex === 'transparent';\n  var handleChange = function handleChange(hexCode, e) {\n    color.isValidHex(hexCode) && onChange({\n      hex: hexCode,\n      source: 'hex'\n    }, e);\n  };\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      card: {\n        width: width,\n        background: '#fff',\n        boxShadow: '0 1px rgba(0,0,0,.1)',\n        borderRadius: '6px',\n        position: 'relative'\n      },\n      head: {\n        height: '110px',\n        background: hex,\n        borderRadius: '6px 6px 0 0',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        position: 'relative'\n      },\n      body: {\n        padding: '10px'\n      },\n      label: {\n        fontSize: '18px',\n        color: color.getContrastingColor(hex),\n        position: 'relative'\n      },\n      triangle: {\n        width: '0px',\n        height: '0px',\n        borderStyle: 'solid',\n        borderWidth: '0 10px 10px 10px',\n        borderColor: 'transparent transparent ' + hex + ' transparent',\n        position: 'absolute',\n        top: '-10px',\n        left: '50%',\n        marginLeft: '-10px'\n      },\n      input: {\n        width: '100%',\n        fontSize: '12px',\n        color: '#666',\n        border: '0px',\n        outline: 'none',\n        height: '22px',\n        boxShadow: 'inset 0 0 0 1px #ddd',\n        borderRadius: '4px',\n        padding: '0 7px',\n        boxSizing: 'border-box'\n      }\n    },\n    'hide-triangle': {\n      triangle: {\n        display: 'none'\n      }\n    }\n  }, passedStyles), { 'hide-triangle': triangle === 'hide' });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.card, className: 'block-picker ' + className },\n    _react2.default.createElement('div', { style: styles.triangle }),\n    _react2.default.createElement(\n      'div',\n      { style: styles.head },\n      transparent && _react2.default.createElement(_common.Checkboard, { borderRadius: '6px 6px 0 0' }),\n      _react2.default.createElement(\n        'div',\n        { style: styles.label },\n        hex\n      )\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.body },\n      _react2.default.createElement(_BlockSwatches2.default, { colors: colors, onClick: handleChange, onSwatchHover: onSwatchHover }),\n      _react2.default.createElement(_common.EditableInput, {\n        style: { input: styles.input },\n        value: hex,\n        onChange: handleChange\n      })\n    )\n  );\n};\n\nBlock.propTypes = {\n  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  colors: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  triangle: _propTypes2.default.oneOf(['top', 'hide']),\n  styles: _propTypes2.default.object\n};\n\nBlock.defaultProps = {\n  width: 170,\n  colors: ['#D9E3F0', '#F47373', '#697689', '#37D67A', '#2CCCE4', '#555555', '#dce775', '#ff8a65', '#ba68c8'],\n  triangle: 'top',\n  styles: {}\n};\n\nexports.default = (0, _common.ColorWrap)(Block);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BlockSwatches = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _common = require('../common');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar BlockSwatches = exports.BlockSwatches = function BlockSwatches(_ref) {\n  var colors = _ref.colors,\n      onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      swatches: {\n        marginRight: '-10px'\n      },\n      swatch: {\n        width: '22px',\n        height: '22px',\n        float: 'left',\n        marginRight: '10px',\n        marginBottom: '10px',\n        borderRadius: '4px'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.swatches },\n    (0, _map2.default)(colors, function (c) {\n      return _react2.default.createElement(_common.Swatch, {\n        key: c,\n        color: c,\n        style: styles.swatch,\n        onClick: onClick,\n        onHover: onSwatchHover,\n        focusStyle: {\n          boxShadow: '0 0 4px ' + c\n        }\n      });\n    }),\n    _react2.default.createElement('div', { style: styles.clear })\n  );\n};\n\nexports.default = BlockSwatches;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Chrome = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _common = require('../common');\n\nvar _ChromeFields = require('./ChromeFields');\n\nvar _ChromeFields2 = _interopRequireDefault(_ChromeFields);\n\nvar _ChromePointer = require('./ChromePointer');\n\nvar _ChromePointer2 = _interopRequireDefault(_ChromePointer);\n\nvar _ChromePointerCircle = require('./ChromePointerCircle');\n\nvar _ChromePointerCircle2 = _interopRequireDefault(_ChromePointerCircle);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Chrome = exports.Chrome = function Chrome(_ref) {\n  var width = _ref.width,\n      onChange = _ref.onChange,\n      disableAlpha = _ref.disableAlpha,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hsv = _ref.hsv,\n      hex = _ref.hex,\n      renderers = _ref.renderers,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className,\n      defaultView = _ref.defaultView;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      picker: {\n        width: width,\n        background: '#fff',\n        borderRadius: '2px',\n        boxShadow: '0 0 2px rgba(0,0,0,.3), 0 4px 8px rgba(0,0,0,.3)',\n        boxSizing: 'initial',\n        fontFamily: 'Menlo'\n      },\n      saturation: {\n        width: '100%',\n        paddingBottom: '55%',\n        position: 'relative',\n        borderRadius: '2px 2px 0 0',\n        overflow: 'hidden'\n      },\n      Saturation: {\n        radius: '2px 2px 0 0'\n      },\n      body: {\n        padding: '16px 16px 12px'\n      },\n      controls: {\n        display: 'flex'\n      },\n      color: {\n        width: '32px'\n      },\n      swatch: {\n        marginTop: '6px',\n        width: '16px',\n        height: '16px',\n        borderRadius: '8px',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      active: {\n        absolute: '0px 0px 0px 0px',\n        borderRadius: '8px',\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.1)',\n        background: 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + rgb.a + ')',\n        zIndex: '2'\n      },\n      toggles: {\n        flex: '1'\n      },\n      hue: {\n        height: '10px',\n        position: 'relative',\n        marginBottom: '8px'\n      },\n      Hue: {\n        radius: '2px'\n      },\n      alpha: {\n        height: '10px',\n        position: 'relative'\n      },\n      Alpha: {\n        radius: '2px'\n      }\n    },\n    'disableAlpha': {\n      color: {\n        width: '22px'\n      },\n      alpha: {\n        display: 'none'\n      },\n      hue: {\n        marginBottom: '0px'\n      },\n      swatch: {\n        width: '10px',\n        height: '10px',\n        marginTop: '0px'\n      }\n    }\n  }, passedStyles), { disableAlpha: disableAlpha });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.picker, className: 'chrome-picker ' + className },\n    _react2.default.createElement(\n      'div',\n      { style: styles.saturation },\n      _react2.default.createElement(_common.Saturation, {\n        style: styles.Saturation,\n        hsl: hsl,\n        hsv: hsv,\n        pointer: _ChromePointerCircle2.default,\n        onChange: onChange\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.body },\n      _react2.default.createElement(\n        'div',\n        { style: styles.controls, className: 'flexbox-fix' },\n        _react2.default.createElement(\n          'div',\n          { style: styles.color },\n          _react2.default.createElement(\n            'div',\n            { style: styles.swatch },\n            _react2.default.createElement('div', { style: styles.active }),\n            _react2.default.createElement(_common.Checkboard, { renderers: renderers })\n          )\n        ),\n        _react2.default.createElement(\n          'div',\n          { style: styles.toggles },\n          _react2.default.createElement(\n            'div',\n            { style: styles.hue },\n            _react2.default.createElement(_common.Hue, {\n              style: styles.Hue,\n              hsl: hsl,\n              pointer: _ChromePointer2.default,\n              onChange: onChange\n            })\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: styles.alpha },\n            _react2.default.createElement(_common.Alpha, {\n              style: styles.Alpha,\n              rgb: rgb,\n              hsl: hsl,\n              pointer: _ChromePointer2.default,\n              renderers: renderers,\n              onChange: onChange\n            })\n          )\n        )\n      ),\n      _react2.default.createElement(_ChromeFields2.default, {\n        rgb: rgb,\n        hsl: hsl,\n        hex: hex,\n        view: defaultView,\n        onChange: onChange,\n        disableAlpha: disableAlpha\n      })\n    )\n  );\n};\n\nChrome.propTypes = {\n  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  disableAlpha: _propTypes2.default.bool,\n  styles: _propTypes2.default.object,\n  defaultView: _propTypes2.default.oneOf([\"hex\", \"rgb\", \"hsl\"])\n};\n\nChrome.defaultProps = {\n  width: 225,\n  disableAlpha: false,\n  styles: {}\n};\n\nexports.default = (0, _common.ColorWrap)(Chrome);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChromeFields = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _color = require('../../helpers/color');\n\nvar color = _interopRequireWildcard(_color);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _common = require('../common');\n\nvar _UnfoldMoreHorizontalIcon = require('@icons/material/UnfoldMoreHorizontalIcon');\n\nvar _UnfoldMoreHorizontalIcon2 = _interopRequireDefault(_UnfoldMoreHorizontalIcon);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/no-did-mount-set-state, no-param-reassign */\n\nvar ChromeFields = exports.ChromeFields = function (_React$Component) {\n  _inherits(ChromeFields, _React$Component);\n\n  function ChromeFields(props) {\n    _classCallCheck(this, ChromeFields);\n\n    var _this = _possibleConstructorReturn(this, (ChromeFields.__proto__ || Object.getPrototypeOf(ChromeFields)).call(this));\n\n    _this.toggleViews = function () {\n      if (_this.state.view === 'hex') {\n        _this.setState({ view: 'rgb' });\n      } else if (_this.state.view === 'rgb') {\n        _this.setState({ view: 'hsl' });\n      } else if (_this.state.view === 'hsl') {\n        if (_this.props.hsl.a === 1) {\n          _this.setState({ view: 'hex' });\n        } else {\n          _this.setState({ view: 'rgb' });\n        }\n      }\n    };\n\n    _this.handleChange = function (data, e) {\n      if (data.hex) {\n        color.isValidHex(data.hex) && _this.props.onChange({\n          hex: data.hex,\n          source: 'hex'\n        }, e);\n      } else if (data.r || data.g || data.b) {\n        _this.props.onChange({\n          r: data.r || _this.props.rgb.r,\n          g: data.g || _this.props.rgb.g,\n          b: data.b || _this.props.rgb.b,\n          source: 'rgb'\n        }, e);\n      } else if (data.a) {\n        if (data.a < 0) {\n          data.a = 0;\n        } else if (data.a > 1) {\n          data.a = 1;\n        }\n\n        _this.props.onChange({\n          h: _this.props.hsl.h,\n          s: _this.props.hsl.s,\n          l: _this.props.hsl.l,\n          a: Math.round(data.a * 100) / 100,\n          source: 'rgb'\n        }, e);\n      } else if (data.h || data.s || data.l) {\n        // Remove any occurances of '%'.\n        if (typeof data.s === 'string' && data.s.includes('%')) {\n          data.s = data.s.replace('%', '');\n        }\n        if (typeof data.l === 'string' && data.l.includes('%')) {\n          data.l = data.l.replace('%', '');\n        }\n\n        // We store HSL as a unit interval so we need to override the 1 input to 0.01\n        if (data.s == 1) {\n          data.s = 0.01;\n        } else if (data.l == 1) {\n          data.l = 0.01;\n        }\n\n        _this.props.onChange({\n          h: data.h || _this.props.hsl.h,\n          s: Number(!(0, _isUndefined2.default)(data.s) ? data.s : _this.props.hsl.s),\n          l: Number(!(0, _isUndefined2.default)(data.l) ? data.l : _this.props.hsl.l),\n          source: 'hsl'\n        }, e);\n      }\n    };\n\n    _this.showHighlight = function (e) {\n      e.currentTarget.style.background = '#eee';\n    };\n\n    _this.hideHighlight = function (e) {\n      e.currentTarget.style.background = 'transparent';\n    };\n\n    if (props.hsl.a !== 1 && props.view === \"hex\") {\n      _this.state = {\n        view: \"rgb\"\n      };\n    } else {\n      _this.state = {\n        view: props.view\n      };\n    }\n    return _this;\n  }\n\n  _createClass(ChromeFields, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var styles = (0, _reactcss2.default)({\n        'default': {\n          wrap: {\n            paddingTop: '16px',\n            display: 'flex'\n          },\n          fields: {\n            flex: '1',\n            display: 'flex',\n            marginLeft: '-6px'\n          },\n          field: {\n            paddingLeft: '6px',\n            width: '100%'\n          },\n          alpha: {\n            paddingLeft: '6px',\n            width: '100%'\n          },\n          toggle: {\n            width: '32px',\n            textAlign: 'right',\n            position: 'relative'\n          },\n          icon: {\n            marginRight: '-4px',\n            marginTop: '12px',\n            cursor: 'pointer',\n            position: 'relative'\n          },\n          iconHighlight: {\n            position: 'absolute',\n            width: '24px',\n            height: '28px',\n            background: '#eee',\n            borderRadius: '4px',\n            top: '10px',\n            left: '12px',\n            display: 'none'\n          },\n          input: {\n            fontSize: '11px',\n            color: '#333',\n            width: '100%',\n            borderRadius: '2px',\n            border: 'none',\n            boxShadow: 'inset 0 0 0 1px #dadada',\n            height: '21px',\n            textAlign: 'center'\n          },\n          label: {\n            textTransform: 'uppercase',\n            fontSize: '11px',\n            lineHeight: '11px',\n            color: '#969696',\n            textAlign: 'center',\n            display: 'block',\n            marginTop: '12px'\n          },\n          svg: {\n            fill: '#333',\n            width: '24px',\n            height: '24px',\n            border: '1px transparent solid',\n            borderRadius: '5px'\n          }\n        },\n        'disableAlpha': {\n          alpha: {\n            display: 'none'\n          }\n        }\n      }, this.props, this.state);\n\n      var fields = void 0;\n      if (this.state.view === 'hex') {\n        fields = _react2.default.createElement(\n          'div',\n          { style: styles.fields, className: 'flexbox-fix' },\n          _react2.default.createElement(\n            'div',\n            { style: styles.field },\n            _react2.default.createElement(_common.EditableInput, {\n              style: { input: styles.input, label: styles.label },\n              label: 'hex', value: this.props.hex,\n              onChange: this.handleChange\n            })\n          )\n        );\n      } else if (this.state.view === 'rgb') {\n        fields = _react2.default.createElement(\n          'div',\n          { style: styles.fields, className: 'flexbox-fix' },\n          _react2.default.createElement(\n            'div',\n            { style: styles.field },\n            _react2.default.createElement(_common.EditableInput, {\n              style: { input: styles.input, label: styles.label },\n              label: 'r',\n              value: this.props.rgb.r,\n              onChange: this.handleChange\n            })\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: styles.field },\n            _react2.default.createElement(_common.EditableInput, {\n              style: { input: styles.input, label: styles.label },\n              label: 'g',\n              value: this.props.rgb.g,\n              onChange: this.handleChange\n            })\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: styles.field },\n            _react2.default.createElement(_common.EditableInput, {\n              style: { input: styles.input, label: styles.label },\n              label: 'b',\n              value: this.props.rgb.b,\n              onChange: this.handleChange\n            })\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: styles.alpha },\n            _react2.default.createElement(_common.EditableInput, {\n              style: { input: styles.input, label: styles.label },\n              label: 'a',\n              value: this.props.rgb.a,\n              arrowOffset: 0.01,\n              onChange: this.handleChange\n            })\n          )\n        );\n      } else if (this.state.view === 'hsl') {\n        fields = _react2.default.createElement(\n          'div',\n          { style: styles.fields, className: 'flexbox-fix' },\n          _react2.default.createElement(\n            'div',\n            { style: styles.field },\n            _react2.default.createElement(_common.EditableInput, {\n              style: { input: styles.input, label: styles.label },\n              label: 'h',\n              value: Math.round(this.props.hsl.h),\n              onChange: this.handleChange\n            })\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: styles.field },\n            _react2.default.createElement(_common.EditableInput, {\n              style: { input: styles.input, label: styles.label },\n              label: 's',\n              value: Math.round(this.props.hsl.s * 100) + '%',\n              onChange: this.handleChange\n            })\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: styles.field },\n            _react2.default.createElement(_common.EditableInput, {\n              style: { input: styles.input, label: styles.label },\n              label: 'l',\n              value: Math.round(this.props.hsl.l * 100) + '%',\n              onChange: this.handleChange\n            })\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: styles.alpha },\n            _react2.default.createElement(_common.EditableInput, {\n              style: { input: styles.input, label: styles.label },\n              label: 'a',\n              value: this.props.hsl.a,\n              arrowOffset: 0.01,\n              onChange: this.handleChange\n            })\n          )\n        );\n      }\n\n      return _react2.default.createElement(\n        'div',\n        { style: styles.wrap, className: 'flexbox-fix' },\n        fields,\n        _react2.default.createElement(\n          'div',\n          { style: styles.toggle },\n          _react2.default.createElement(\n            'div',\n            { style: styles.icon, onClick: this.toggleViews, ref: function ref(icon) {\n                return _this2.icon = icon;\n              } },\n            _react2.default.createElement(_UnfoldMoreHorizontalIcon2.default, {\n              style: styles.svg,\n              onMouseOver: this.showHighlight,\n              onMouseEnter: this.showHighlight,\n              onMouseOut: this.hideHighlight\n            })\n          )\n        )\n      );\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, state) {\n      if (nextProps.hsl.a !== 1 && state.view === 'hex') {\n        return { view: 'rgb' };\n      }\n      return null;\n    }\n  }]);\n\n  return ChromeFields;\n}(_react2.default.Component);\n\nChromeFields.defaultProps = {\n  view: \"hex\"\n};\n\nexports.default = ChromeFields;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChromePointer = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ChromePointer = exports.ChromePointer = function ChromePointer() {\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      picker: {\n        width: '12px',\n        height: '12px',\n        borderRadius: '6px',\n        transform: 'translate(-6px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    }\n  });\n\n  return _react2.default.createElement('div', { style: styles.picker });\n};\n\nexports.default = ChromePointer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChromePointerCircle = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ChromePointerCircle = exports.ChromePointerCircle = function ChromePointerCircle() {\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      picker: {\n        width: '12px',\n        height: '12px',\n        borderRadius: '6px',\n        boxShadow: 'inset 0 0 0 1px #fff',\n        transform: 'translate(-6px, -6px)'\n      }\n    }\n  });\n\n  return _react2.default.createElement('div', { style: styles.picker });\n};\n\nexports.default = ChromePointerCircle;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Circle = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _materialColors = require('material-colors');\n\nvar material = _interopRequireWildcard(_materialColors);\n\nvar _common = require('../common');\n\nvar _CircleSwatch = require('./CircleSwatch');\n\nvar _CircleSwatch2 = _interopRequireDefault(_CircleSwatch);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Circle = exports.Circle = function Circle(_ref) {\n  var width = _ref.width,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      colors = _ref.colors,\n      hex = _ref.hex,\n      circleSize = _ref.circleSize,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      circleSpacing = _ref.circleSpacing,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      card: {\n        width: width,\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginRight: -circleSpacing,\n        marginBottom: -circleSpacing\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(hexCode, e) {\n    return onChange({ hex: hexCode, source: 'hex' }, e);\n  };\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.card, className: 'circle-picker ' + className },\n    (0, _map2.default)(colors, function (c) {\n      return _react2.default.createElement(_CircleSwatch2.default, {\n        key: c,\n        color: c,\n        onClick: handleChange,\n        onSwatchHover: onSwatchHover,\n        active: hex === c.toLowerCase(),\n        circleSize: circleSize,\n        circleSpacing: circleSpacing\n      });\n    })\n  );\n};\n\nCircle.propTypes = {\n  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  circleSize: _propTypes2.default.number,\n  circleSpacing: _propTypes2.default.number,\n  styles: _propTypes2.default.object\n};\n\nCircle.defaultProps = {\n  width: 252,\n  circleSize: 28,\n  circleSpacing: 14,\n  colors: [material.red['500'], material.pink['500'], material.purple['500'], material.deepPurple['500'], material.indigo['500'], material.blue['500'], material.lightBlue['500'], material.cyan['500'], material.teal['500'], material.green['500'], material.lightGreen['500'], material.lime['500'], material.yellow['500'], material.amber['500'], material.orange['500'], material.deepOrange['500'], material.brown['500'], material.blueGrey['500']],\n  styles: {}\n};\n\nexports.default = (0, _common.ColorWrap)(Circle);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CircleSwatch = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _common = require('../common');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CircleSwatch = exports.CircleSwatch = function CircleSwatch(_ref) {\n  var color = _ref.color,\n      onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      hover = _ref.hover,\n      active = _ref.active,\n      circleSize = _ref.circleSize,\n      circleSpacing = _ref.circleSpacing;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      swatch: {\n        width: circleSize,\n        height: circleSize,\n        marginRight: circleSpacing,\n        marginBottom: circleSpacing,\n        transform: 'scale(1)',\n        transition: '100ms transform ease'\n      },\n      Swatch: {\n        borderRadius: '50%',\n        background: 'transparent',\n        boxShadow: 'inset 0 0 0 ' + (circleSize / 2 + 1) + 'px ' + color,\n        transition: '100ms box-shadow ease'\n      }\n    },\n    'hover': {\n      swatch: {\n        transform: 'scale(1.2)'\n      }\n    },\n    'active': {\n      Swatch: {\n        boxShadow: 'inset 0 0 0 3px ' + color\n      }\n    }\n  }, { hover: hover, active: active });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.swatch },\n    _react2.default.createElement(_common.Swatch, {\n      style: styles.Swatch,\n      color: color,\n      onClick: onClick,\n      onHover: onSwatchHover,\n      focusStyle: { boxShadow: styles.Swatch.boxShadow + ', 0 0 5px ' + color }\n    })\n  );\n};\n\nCircleSwatch.defaultProps = {\n  circleSize: 28,\n  circleSpacing: 14\n};\n\nexports.default = (0, _reactcss.handleHover)(CircleSwatch);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Alpha = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _alpha = require('../../helpers/alpha');\n\nvar alpha = _interopRequireWildcard(_alpha);\n\nvar _Checkboard = require('./Checkboard');\n\nvar _Checkboard2 = _interopRequireDefault(_Checkboard);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Alpha = exports.Alpha = function (_ref) {\n  _inherits(Alpha, _ref);\n\n  function Alpha() {\n    var _ref2;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Alpha);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Alpha.__proto__ || Object.getPrototypeOf(Alpha)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e) {\n      var change = alpha.calculateChange(e, _this.props.hsl, _this.props.direction, _this.props.a, _this.container);\n      change && typeof _this.props.onChange === 'function' && _this.props.onChange(change, e);\n    }, _this.handleMouseDown = function (e) {\n      _this.handleChange(e);\n      window.addEventListener('mousemove', _this.handleChange);\n      window.addEventListener('mouseup', _this.handleMouseUp);\n    }, _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    }, _this.unbindEventListeners = function () {\n      window.removeEventListener('mousemove', _this.handleChange);\n      window.removeEventListener('mouseup', _this.handleMouseUp);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Alpha, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var rgb = this.props.rgb;\n      var styles = (0, _reactcss2.default)({\n        'default': {\n          alpha: {\n            absolute: '0px 0px 0px 0px',\n            borderRadius: this.props.radius\n          },\n          checkboard: {\n            absolute: '0px 0px 0px 0px',\n            overflow: 'hidden',\n            borderRadius: this.props.radius\n          },\n          gradient: {\n            absolute: '0px 0px 0px 0px',\n            background: 'linear-gradient(to right, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)',\n            boxShadow: this.props.shadow,\n            borderRadius: this.props.radius\n          },\n          container: {\n            position: 'relative',\n            height: '100%',\n            margin: '0 3px'\n          },\n          pointer: {\n            position: 'absolute',\n            left: rgb.a * 100 + '%'\n          },\n          slider: {\n            width: '4px',\n            borderRadius: '1px',\n            height: '8px',\n            boxShadow: '0 0 2px rgba(0, 0, 0, .6)',\n            background: '#fff',\n            marginTop: '1px',\n            transform: 'translateX(-2px)'\n          }\n        },\n        'vertical': {\n          gradient: {\n            background: 'linear-gradient(to bottom, rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 0) 0%,\\n           rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ', 1) 100%)'\n          },\n          pointer: {\n            left: 0,\n            top: rgb.a * 100 + '%'\n          }\n        },\n        'overwrite': _extends({}, this.props.style)\n      }, {\n        vertical: this.props.direction === 'vertical',\n        overwrite: true\n      });\n\n      return _react2.default.createElement(\n        'div',\n        { style: styles.alpha },\n        _react2.default.createElement(\n          'div',\n          { style: styles.checkboard },\n          _react2.default.createElement(_Checkboard2.default, { renderers: this.props.renderers })\n        ),\n        _react2.default.createElement('div', { style: styles.gradient }),\n        _react2.default.createElement(\n          'div',\n          {\n            style: styles.container,\n            ref: function ref(container) {\n              return _this2.container = container;\n            },\n            onMouseDown: this.handleMouseDown,\n            onTouchMove: this.handleChange,\n            onTouchStart: this.handleChange\n          },\n          _react2.default.createElement(\n            'div',\n            { style: styles.pointer },\n            this.props.pointer ? _react2.default.createElement(this.props.pointer, this.props) : _react2.default.createElement('div', { style: styles.slider })\n          )\n        )\n      );\n    }\n  }]);\n\n  return Alpha;\n}(_react.PureComponent || _react.Component);\n\nexports.default = Alpha;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Checkboard = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _checkboard = require('../../helpers/checkboard');\n\nvar checkboard = _interopRequireWildcard(_checkboard);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Checkboard = exports.Checkboard = function Checkboard(_ref) {\n  var white = _ref.white,\n      grey = _ref.grey,\n      size = _ref.size,\n      renderers = _ref.renderers,\n      borderRadius = _ref.borderRadius,\n      boxShadow = _ref.boxShadow,\n      children = _ref.children;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      grid: {\n        borderRadius: borderRadius,\n        boxShadow: boxShadow,\n        absolute: '0px 0px 0px 0px',\n        background: 'url(' + checkboard.get(white, grey, size, renderers.canvas) + ') center left'\n      }\n    }\n  });\n  return (0, _react.isValidElement)(children) ? _react2.default.cloneElement(children, _extends({}, children.props, { style: _extends({}, children.props.style, styles.grid) })) : _react2.default.createElement('div', { style: styles.grid });\n};\n\nCheckboard.defaultProps = {\n  size: 8,\n  white: 'transparent',\n  grey: 'rgba(0,0,0,.08)',\n  renderers: {}\n};\n\nexports.default = Checkboard;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorWrap = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _debounce = require('lodash/debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nvar _color = require('../../helpers/color');\n\nvar color = _interopRequireWildcard(_color);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ColorWrap = exports.ColorWrap = function ColorWrap(Picker) {\n  var ColorPicker = function (_ref) {\n    _inherits(ColorPicker, _ref);\n\n    function ColorPicker(props) {\n      _classCallCheck(this, ColorPicker);\n\n      var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this));\n\n      _this.handleChange = function (data, event) {\n        var isValidColor = color.simpleCheckForValidColor(data);\n        if (isValidColor) {\n          var colors = color.toState(data, data.h || _this.state.oldHue);\n          _this.setState(colors);\n          _this.props.onChangeComplete && _this.debounce(_this.props.onChangeComplete, colors, event);\n          _this.props.onChange && _this.props.onChange(colors, event);\n        }\n      };\n\n      _this.handleSwatchHover = function (data, event) {\n        var isValidColor = color.simpleCheckForValidColor(data);\n        if (isValidColor) {\n          var colors = color.toState(data, data.h || _this.state.oldHue);\n          _this.props.onSwatchHover && _this.props.onSwatchHover(colors, event);\n        }\n      };\n\n      _this.state = _extends({}, color.toState(props.color, 0));\n\n      _this.debounce = (0, _debounce2.default)(function (fn, data, event) {\n        fn(data, event);\n      }, 100);\n      return _this;\n    }\n\n    _createClass(ColorPicker, [{\n      key: 'render',\n      value: function render() {\n        var optionalEvents = {};\n        if (this.props.onSwatchHover) {\n          optionalEvents.onSwatchHover = this.handleSwatchHover;\n        }\n\n        return _react2.default.createElement(Picker, _extends({}, this.props, this.state, {\n          onChange: this.handleChange\n        }, optionalEvents));\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      value: function getDerivedStateFromProps(nextProps, state) {\n        return _extends({}, color.toState(nextProps.color, state.oldHue));\n      }\n    }]);\n\n    return ColorPicker;\n  }(_react.PureComponent || _react.Component);\n\n  ColorPicker.propTypes = _extends({}, Picker.propTypes);\n\n  ColorPicker.defaultProps = _extends({}, Picker.defaultProps, {\n    color: {\n      h: 250,\n      s: 0.50,\n      l: 0.20,\n      a: 1\n    }\n  });\n\n  return ColorPicker;\n};\n\nexports.default = ColorWrap;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EditableInput = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DEFAULT_ARROW_OFFSET = 1;\n\nvar UP_KEY_CODE = 38;\nvar DOWN_KEY_CODE = 40;\nvar VALID_KEY_CODES = [UP_KEY_CODE, DOWN_KEY_CODE];\nvar isValidKeyCode = function isValidKeyCode(keyCode) {\n  return VALID_KEY_CODES.indexOf(keyCode) > -1;\n};\nvar getNumberValue = function getNumberValue(value) {\n  return Number(String(value).replace(/%/g, ''));\n};\n\nvar idCounter = 1;\n\nvar EditableInput = exports.EditableInput = function (_ref) {\n  _inherits(EditableInput, _ref);\n\n  function EditableInput(props) {\n    _classCallCheck(this, EditableInput);\n\n    var _this = _possibleConstructorReturn(this, (EditableInput.__proto__ || Object.getPrototypeOf(EditableInput)).call(this));\n\n    _this.handleBlur = function () {\n      if (_this.state.blurValue) {\n        _this.setState({ value: _this.state.blurValue, blurValue: null });\n      }\n    };\n\n    _this.handleChange = function (e) {\n      _this.setUpdatedValue(e.target.value, e);\n    };\n\n    _this.handleKeyDown = function (e) {\n      // In case `e.target.value` is a percentage remove the `%` character\n      // and update accordingly with a percentage\n      // https://github.com/casesandberg/react-color/issues/383\n      var value = getNumberValue(e.target.value);\n      if (!isNaN(value) && isValidKeyCode(e.keyCode)) {\n        var offset = _this.getArrowOffset();\n        var updatedValue = e.keyCode === UP_KEY_CODE ? value + offset : value - offset;\n\n        _this.setUpdatedValue(updatedValue, e);\n      }\n    };\n\n    _this.handleDrag = function (e) {\n      if (_this.props.dragLabel) {\n        var newValue = Math.round(_this.props.value + e.movementX);\n        if (newValue >= 0 && newValue <= _this.props.dragMax) {\n          _this.props.onChange && _this.props.onChange(_this.getValueObjectWithLabel(newValue), e);\n        }\n      }\n    };\n\n    _this.handleMouseDown = function (e) {\n      if (_this.props.dragLabel) {\n        e.preventDefault();\n        _this.handleDrag(e);\n        window.addEventListener('mousemove', _this.handleDrag);\n        window.addEventListener('mouseup', _this.handleMouseUp);\n      }\n    };\n\n    _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    };\n\n    _this.unbindEventListeners = function () {\n      window.removeEventListener('mousemove', _this.handleDrag);\n      window.removeEventListener('mouseup', _this.handleMouseUp);\n    };\n\n    _this.state = {\n      value: String(props.value).toUpperCase(),\n      blurValue: String(props.value).toUpperCase()\n    };\n\n    _this.inputId = 'rc-editable-input-' + idCounter++;\n    return _this;\n  }\n\n  _createClass(EditableInput, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.value !== this.state.value && (prevProps.value !== this.props.value || prevState.value !== this.state.value)) {\n        if (this.input === document.activeElement) {\n          this.setState({ blurValue: String(this.props.value).toUpperCase() });\n        } else {\n          this.setState({ value: String(this.props.value).toUpperCase(), blurValue: !this.state.blurValue && String(this.props.value).toUpperCase() });\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'getValueObjectWithLabel',\n    value: function getValueObjectWithLabel(value) {\n      return _defineProperty({}, this.props.label, value);\n    }\n  }, {\n    key: 'getArrowOffset',\n    value: function getArrowOffset() {\n      return this.props.arrowOffset || DEFAULT_ARROW_OFFSET;\n    }\n  }, {\n    key: 'setUpdatedValue',\n    value: function setUpdatedValue(value, e) {\n      var onChangeValue = this.props.label ? this.getValueObjectWithLabel(value) : value;\n      this.props.onChange && this.props.onChange(onChangeValue, e);\n\n      this.setState({ value: value });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var styles = (0, _reactcss2.default)({\n        'default': {\n          wrap: {\n            position: 'relative'\n          }\n        },\n        'user-override': {\n          wrap: this.props.style && this.props.style.wrap ? this.props.style.wrap : {},\n          input: this.props.style && this.props.style.input ? this.props.style.input : {},\n          label: this.props.style && this.props.style.label ? this.props.style.label : {}\n        },\n        'dragLabel-true': {\n          label: {\n            cursor: 'ew-resize'\n          }\n        }\n      }, {\n        'user-override': true\n      }, this.props);\n\n      return _react2.default.createElement(\n        'div',\n        { style: styles.wrap },\n        _react2.default.createElement('input', {\n          id: this.inputId,\n          style: styles.input,\n          ref: function ref(input) {\n            return _this2.input = input;\n          },\n          value: this.state.value,\n          onKeyDown: this.handleKeyDown,\n          onChange: this.handleChange,\n          onBlur: this.handleBlur,\n          placeholder: this.props.placeholder,\n          spellCheck: 'false'\n        }),\n        this.props.label && !this.props.hideLabel ? _react2.default.createElement(\n          'label',\n          {\n            htmlFor: this.inputId,\n            style: styles.label,\n            onMouseDown: this.handleMouseDown\n          },\n          this.props.label\n        ) : null\n      );\n    }\n  }]);\n\n  return EditableInput;\n}(_react.PureComponent || _react.Component);\n\nexports.default = EditableInput;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Hue = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _hue = require('../../helpers/hue');\n\nvar hue = _interopRequireWildcard(_hue);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Hue = exports.Hue = function (_ref) {\n  _inherits(Hue, _ref);\n\n  function Hue() {\n    var _ref2;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Hue);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Hue.__proto__ || Object.getPrototypeOf(Hue)).call.apply(_ref2, [this].concat(args))), _this), _this.handleChange = function (e) {\n      var change = hue.calculateChange(e, _this.props.direction, _this.props.hsl, _this.container);\n      change && typeof _this.props.onChange === 'function' && _this.props.onChange(change, e);\n    }, _this.handleMouseDown = function (e) {\n      _this.handleChange(e);\n      window.addEventListener('mousemove', _this.handleChange);\n      window.addEventListener('mouseup', _this.handleMouseUp);\n    }, _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Hue, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'unbindEventListeners',\n    value: function unbindEventListeners() {\n      window.removeEventListener('mousemove', this.handleChange);\n      window.removeEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props$direction = this.props.direction,\n          direction = _props$direction === undefined ? 'horizontal' : _props$direction;\n\n\n      var styles = (0, _reactcss2.default)({\n        'default': {\n          hue: {\n            absolute: '0px 0px 0px 0px',\n            borderRadius: this.props.radius,\n            boxShadow: this.props.shadow\n          },\n          container: {\n            padding: '0 2px',\n            position: 'relative',\n            height: '100%',\n            borderRadius: this.props.radius\n          },\n          pointer: {\n            position: 'absolute',\n            left: this.props.hsl.h * 100 / 360 + '%'\n          },\n          slider: {\n            marginTop: '1px',\n            width: '4px',\n            borderRadius: '1px',\n            height: '8px',\n            boxShadow: '0 0 2px rgba(0, 0, 0, .6)',\n            background: '#fff',\n            transform: 'translateX(-2px)'\n          }\n        },\n        'vertical': {\n          pointer: {\n            left: '0px',\n            top: -(this.props.hsl.h * 100 / 360) + 100 + '%'\n          }\n        }\n      }, { vertical: direction === 'vertical' });\n\n      return _react2.default.createElement(\n        'div',\n        { style: styles.hue },\n        _react2.default.createElement(\n          'div',\n          {\n            className: 'hue-' + direction,\n            style: styles.container,\n            ref: function ref(container) {\n              return _this2.container = container;\n            },\n            onMouseDown: this.handleMouseDown,\n            onTouchMove: this.handleChange,\n            onTouchStart: this.handleChange\n          },\n          _react2.default.createElement(\n            'style',\n            null,\n            '\\n            .hue-horizontal {\\n              background: linear-gradient(to right, #f00 0%, #ff0 17%, #0f0\\n                33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n              background: -webkit-linear-gradient(to right, #f00 0%, #ff0\\n                17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n            }\\n\\n            .hue-vertical {\\n              background: linear-gradient(to top, #f00 0%, #ff0 17%, #0f0 33%,\\n                #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n              background: -webkit-linear-gradient(to top, #f00 0%, #ff0 17%,\\n                #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%);\\n            }\\n          '\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: styles.pointer },\n            this.props.pointer ? _react2.default.createElement(this.props.pointer, this.props) : _react2.default.createElement('div', { style: styles.slider })\n          )\n        )\n      );\n    }\n  }]);\n\n  return Hue;\n}(_react.PureComponent || _react.Component);\n\nexports.default = Hue;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Raised = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Raised = exports.Raised = function Raised(_ref) {\n  var zDepth = _ref.zDepth,\n      radius = _ref.radius,\n      background = _ref.background,\n      children = _ref.children,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      wrap: {\n        position: 'relative',\n        display: 'inline-block'\n      },\n      content: {\n        position: 'relative'\n      },\n      bg: {\n        absolute: '0px 0px 0px 0px',\n        boxShadow: '0 ' + zDepth + 'px ' + zDepth * 4 + 'px rgba(0,0,0,.24)',\n        borderRadius: radius,\n        background: background\n      }\n    },\n    'zDepth-0': {\n      bg: {\n        boxShadow: 'none'\n      }\n    },\n\n    'zDepth-1': {\n      bg: {\n        boxShadow: '0 2px 10px rgba(0,0,0,.12), 0 2px 5px rgba(0,0,0,.16)'\n      }\n    },\n    'zDepth-2': {\n      bg: {\n        boxShadow: '0 6px 20px rgba(0,0,0,.19), 0 8px 17px rgba(0,0,0,.2)'\n      }\n    },\n    'zDepth-3': {\n      bg: {\n        boxShadow: '0 17px 50px rgba(0,0,0,.19), 0 12px 15px rgba(0,0,0,.24)'\n      }\n    },\n    'zDepth-4': {\n      bg: {\n        boxShadow: '0 25px 55px rgba(0,0,0,.21), 0 16px 28px rgba(0,0,0,.22)'\n      }\n    },\n    'zDepth-5': {\n      bg: {\n        boxShadow: '0 40px 77px rgba(0,0,0,.22), 0 27px 24px rgba(0,0,0,.2)'\n      }\n    },\n    'square': {\n      bg: {\n        borderRadius: '0'\n      }\n    },\n    'circle': {\n      bg: {\n        borderRadius: '50%'\n      }\n    }\n  }, passedStyles), { 'zDepth-1': zDepth === 1 });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.wrap },\n    _react2.default.createElement('div', { style: styles.bg }),\n    _react2.default.createElement(\n      'div',\n      { style: styles.content },\n      children\n    )\n  );\n};\n\nRaised.propTypes = {\n  background: _propTypes2.default.string,\n  zDepth: _propTypes2.default.oneOf([0, 1, 2, 3, 4, 5]),\n  radius: _propTypes2.default.number,\n  styles: _propTypes2.default.object\n};\n\nRaised.defaultProps = {\n  background: '#fff',\n  zDepth: 1,\n  radius: 2,\n  styles: {}\n};\n\nexports.default = Raised;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Saturation = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _throttle = require('lodash/throttle');\n\nvar _throttle2 = _interopRequireDefault(_throttle);\n\nvar _saturation = require('../../helpers/saturation');\n\nvar saturation = _interopRequireWildcard(_saturation);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Saturation = exports.Saturation = function (_ref) {\n  _inherits(Saturation, _ref);\n\n  function Saturation(props) {\n    _classCallCheck(this, Saturation);\n\n    var _this = _possibleConstructorReturn(this, (Saturation.__proto__ || Object.getPrototypeOf(Saturation)).call(this, props));\n\n    _this.handleChange = function (e) {\n      typeof _this.props.onChange === 'function' && _this.throttle(_this.props.onChange, saturation.calculateChange(e, _this.props.hsl, _this.container), e);\n    };\n\n    _this.handleMouseDown = function (e) {\n      _this.handleChange(e);\n      var renderWindow = _this.getContainerRenderWindow();\n      renderWindow.addEventListener('mousemove', _this.handleChange);\n      renderWindow.addEventListener('mouseup', _this.handleMouseUp);\n    };\n\n    _this.handleMouseUp = function () {\n      _this.unbindEventListeners();\n    };\n\n    _this.throttle = (0, _throttle2.default)(function (fn, data, e) {\n      fn(data, e);\n    }, 50);\n    return _this;\n  }\n\n  _createClass(Saturation, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.throttle.cancel();\n      this.unbindEventListeners();\n    }\n  }, {\n    key: 'getContainerRenderWindow',\n    value: function getContainerRenderWindow() {\n      var container = this.container;\n\n      var renderWindow = window;\n      while (!renderWindow.document.contains(container) && renderWindow.parent !== renderWindow) {\n        renderWindow = renderWindow.parent;\n      }\n      return renderWindow;\n    }\n  }, {\n    key: 'unbindEventListeners',\n    value: function unbindEventListeners() {\n      var renderWindow = this.getContainerRenderWindow();\n      renderWindow.removeEventListener('mousemove', this.handleChange);\n      renderWindow.removeEventListener('mouseup', this.handleMouseUp);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _ref2 = this.props.style || {},\n          color = _ref2.color,\n          white = _ref2.white,\n          black = _ref2.black,\n          pointer = _ref2.pointer,\n          circle = _ref2.circle;\n\n      var styles = (0, _reactcss2.default)({\n        'default': {\n          color: {\n            absolute: '0px 0px 0px 0px',\n            background: 'hsl(' + this.props.hsl.h + ',100%, 50%)',\n            borderRadius: this.props.radius\n          },\n          white: {\n            absolute: '0px 0px 0px 0px',\n            borderRadius: this.props.radius\n          },\n          black: {\n            absolute: '0px 0px 0px 0px',\n            boxShadow: this.props.shadow,\n            borderRadius: this.props.radius\n          },\n          pointer: {\n            position: 'absolute',\n            top: -(this.props.hsv.v * 100) + 100 + '%',\n            left: this.props.hsv.s * 100 + '%',\n            cursor: 'default'\n          },\n          circle: {\n            width: '4px',\n            height: '4px',\n            boxShadow: '0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\\n            0 0 1px 2px rgba(0,0,0,.4)',\n            borderRadius: '50%',\n            cursor: 'hand',\n            transform: 'translate(-2px, -2px)'\n          }\n        },\n        'custom': {\n          color: color,\n          white: white,\n          black: black,\n          pointer: pointer,\n          circle: circle\n        }\n      }, { 'custom': !!this.props.style });\n\n      return _react2.default.createElement(\n        'div',\n        {\n          style: styles.color,\n          ref: function ref(container) {\n            return _this2.container = container;\n          },\n          onMouseDown: this.handleMouseDown,\n          onTouchMove: this.handleChange,\n          onTouchStart: this.handleChange\n        },\n        _react2.default.createElement(\n          'style',\n          null,\n          '\\n          .saturation-white {\\n            background: -webkit-linear-gradient(to right, #fff, rgba(255,255,255,0));\\n            background: linear-gradient(to right, #fff, rgba(255,255,255,0));\\n          }\\n          .saturation-black {\\n            background: -webkit-linear-gradient(to top, #000, rgba(0,0,0,0));\\n            background: linear-gradient(to top, #000, rgba(0,0,0,0));\\n          }\\n        '\n        ),\n        _react2.default.createElement(\n          'div',\n          { style: styles.white, className: 'saturation-white' },\n          _react2.default.createElement('div', { style: styles.black, className: 'saturation-black' }),\n          _react2.default.createElement(\n            'div',\n            { style: styles.pointer },\n            this.props.pointer ? _react2.default.createElement(this.props.pointer, this.props) : _react2.default.createElement('div', { style: styles.circle })\n          )\n        )\n      );\n    }\n  }]);\n\n  return Saturation;\n}(_react.PureComponent || _react.Component);\n\nexports.default = Saturation;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Swatch = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _interaction = require('../../helpers/interaction');\n\nvar _Checkboard = require('./Checkboard');\n\nvar _Checkboard2 = _interopRequireDefault(_Checkboard);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ENTER = 13;\n\nvar Swatch = exports.Swatch = function Swatch(_ref) {\n  var color = _ref.color,\n      style = _ref.style,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onHover = _ref.onHover,\n      _ref$title = _ref.title,\n      title = _ref$title === undefined ? color : _ref$title,\n      children = _ref.children,\n      focus = _ref.focus,\n      _ref$focusStyle = _ref.focusStyle,\n      focusStyle = _ref$focusStyle === undefined ? {} : _ref$focusStyle;\n\n  var transparent = color === 'transparent';\n  var styles = (0, _reactcss2.default)({\n    default: {\n      swatch: _extends({\n        background: color,\n        height: '100%',\n        width: '100%',\n        cursor: 'pointer',\n        position: 'relative',\n        outline: 'none'\n      }, style, focus ? focusStyle : {})\n    }\n  });\n\n  var handleClick = function handleClick(e) {\n    return onClick(color, e);\n  };\n  var handleKeyDown = function handleKeyDown(e) {\n    return e.keyCode === ENTER && onClick(color, e);\n  };\n  var handleHover = function handleHover(e) {\n    return onHover(color, e);\n  };\n\n  var optionalEvents = {};\n  if (onHover) {\n    optionalEvents.onMouseOver = handleHover;\n  }\n\n  return _react2.default.createElement(\n    'div',\n    _extends({\n      style: styles.swatch,\n      onClick: handleClick,\n      title: title,\n      tabIndex: 0,\n      onKeyDown: handleKeyDown\n    }, optionalEvents),\n    children,\n    transparent && _react2.default.createElement(_Checkboard2.default, {\n      borderRadius: styles.swatch.borderRadius,\n      boxShadow: 'inset 0 0 0 1px rgba(0,0,0,0.1)'\n    })\n  );\n};\n\nexports.default = (0, _interaction.handleFocus)(Swatch);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Alpha = require('./Alpha');\n\nObject.defineProperty(exports, 'Alpha', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Alpha).default;\n  }\n});\n\nvar _Checkboard = require('./Checkboard');\n\nObject.defineProperty(exports, 'Checkboard', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Checkboard).default;\n  }\n});\n\nvar _EditableInput = require('./EditableInput');\n\nObject.defineProperty(exports, 'EditableInput', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_EditableInput).default;\n  }\n});\n\nvar _Hue = require('./Hue');\n\nObject.defineProperty(exports, 'Hue', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Hue).default;\n  }\n});\n\nvar _Raised = require('./Raised');\n\nObject.defineProperty(exports, 'Raised', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Raised).default;\n  }\n});\n\nvar _Saturation = require('./Saturation');\n\nObject.defineProperty(exports, 'Saturation', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Saturation).default;\n  }\n});\n\nvar _ColorWrap = require('./ColorWrap');\n\nObject.defineProperty(exports, 'ColorWrap', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ColorWrap).default;\n  }\n});\n\nvar _Swatch = require('./Swatch');\n\nObject.defineProperty(exports, 'Swatch', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Swatch).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Compact = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _color = require('../../helpers/color');\n\nvar color = _interopRequireWildcard(_color);\n\nvar _common = require('../common');\n\nvar _CompactColor = require('./CompactColor');\n\nvar _CompactColor2 = _interopRequireDefault(_CompactColor);\n\nvar _CompactFields = require('./CompactFields');\n\nvar _CompactFields2 = _interopRequireDefault(_CompactFields);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Compact = exports.Compact = function Compact(_ref) {\n  var onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      colors = _ref.colors,\n      hex = _ref.hex,\n      rgb = _ref.rgb,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      Compact: {\n        background: '#f6f6f6',\n        radius: '4px'\n      },\n      compact: {\n        paddingTop: '5px',\n        paddingLeft: '5px',\n        boxSizing: 'initial',\n        width: '240px'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color.isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else {\n      onChange(data, e);\n    }\n  };\n\n  return _react2.default.createElement(\n    _common.Raised,\n    { style: styles.Compact, styles: passedStyles },\n    _react2.default.createElement(\n      'div',\n      { style: styles.compact, className: 'compact-picker ' + className },\n      _react2.default.createElement(\n        'div',\n        null,\n        (0, _map2.default)(colors, function (c) {\n          return _react2.default.createElement(_CompactColor2.default, {\n            key: c,\n            color: c,\n            active: c.toLowerCase() === hex,\n            onClick: handleChange,\n            onSwatchHover: onSwatchHover\n          });\n        }),\n        _react2.default.createElement('div', { style: styles.clear })\n      ),\n      _react2.default.createElement(_CompactFields2.default, { hex: hex, rgb: rgb, onChange: handleChange })\n    )\n  );\n};\n\nCompact.propTypes = {\n  colors: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  styles: _propTypes2.default.object\n};\n\nCompact.defaultProps = {\n  colors: ['#4D4D4D', '#999999', '#FFFFFF', '#F44E3B', '#FE9200', '#FCDC00', '#DBDF00', '#A4DD00', '#68CCCA', '#73D8FF', '#AEA1FF', '#FDA1FF', '#333333', '#808080', '#cccccc', '#D33115', '#E27300', '#FCC400', '#B0BC00', '#68BC00', '#16A5A5', '#009CE0', '#7B64FF', '#FA28FF', '#000000', '#666666', '#B3B3B3', '#9F0500', '#C45100', '#FB9E00', '#808900', '#194D33', '#0C797D', '#0062B1', '#653294', '#AB149E'],\n  styles: {}\n};\n\nexports.default = (0, _common.ColorWrap)(Compact);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompactColor = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _color = require('../../helpers/color');\n\nvar colorUtils = _interopRequireWildcard(_color);\n\nvar _common = require('../common');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CompactColor = exports.CompactColor = function CompactColor(_ref) {\n  var color = _ref.color,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      active = _ref.active;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      color: {\n        background: color,\n        width: '15px',\n        height: '15px',\n        float: 'left',\n        marginRight: '5px',\n        marginBottom: '5px',\n        position: 'relative',\n        cursor: 'pointer'\n      },\n      dot: {\n        absolute: '5px 5px 5px 5px',\n        background: colorUtils.getContrastingColor(color),\n        borderRadius: '50%',\n        opacity: '0'\n      }\n    },\n    'active': {\n      dot: {\n        opacity: '1'\n      }\n    },\n    'color-#FFFFFF': {\n      color: {\n        boxShadow: 'inset 0 0 0 1px #ddd'\n      },\n      dot: {\n        background: '#000'\n      }\n    },\n    'transparent': {\n      dot: {\n        background: '#000'\n      }\n    }\n  }, { active: active, 'color-#FFFFFF': color === '#FFFFFF', 'transparent': color === 'transparent' });\n\n  return _react2.default.createElement(\n    _common.Swatch,\n    {\n      style: styles.color,\n      color: color,\n      onClick: onClick,\n      onHover: onSwatchHover,\n      focusStyle: { boxShadow: '0 0 4px ' + color }\n    },\n    _react2.default.createElement('div', { style: styles.dot })\n  );\n};\n\nexports.default = CompactColor;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompactFields = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _common = require('../common');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CompactFields = exports.CompactFields = function CompactFields(_ref) {\n  var hex = _ref.hex,\n      rgb = _ref.rgb,\n      onChange = _ref.onChange;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      fields: {\n        display: 'flex',\n        paddingBottom: '6px',\n        paddingRight: '5px',\n        position: 'relative'\n      },\n      active: {\n        position: 'absolute',\n        top: '6px',\n        left: '5px',\n        height: '9px',\n        width: '9px',\n        background: hex\n      },\n      HEXwrap: {\n        flex: '6',\n        position: 'relative'\n      },\n      HEXinput: {\n        width: '80%',\n        padding: '0px',\n        paddingLeft: '20%',\n        border: 'none',\n        outline: 'none',\n        background: 'none',\n        fontSize: '12px',\n        color: '#333',\n        height: '16px'\n      },\n      HEXlabel: {\n        display: 'none'\n      },\n      RGBwrap: {\n        flex: '3',\n        position: 'relative'\n      },\n      RGBinput: {\n        width: '70%',\n        padding: '0px',\n        paddingLeft: '30%',\n        border: 'none',\n        outline: 'none',\n        background: 'none',\n        fontSize: '12px',\n        color: '#333',\n        height: '16px'\n      },\n      RGBlabel: {\n        position: 'absolute',\n        top: '3px',\n        left: '0px',\n        lineHeight: '16px',\n        textTransform: 'uppercase',\n        fontSize: '12px',\n        color: '#999'\n      }\n    }\n  });\n\n  var handleChange = function handleChange(data, e) {\n    if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        source: 'rgb'\n      }, e);\n    } else {\n      onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    }\n  };\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.fields, className: 'flexbox-fix' },\n    _react2.default.createElement('div', { style: styles.active }),\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.HEXwrap, input: styles.HEXinput, label: styles.HEXlabel },\n      label: 'hex',\n      value: hex,\n      onChange: handleChange\n    }),\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n      label: 'r',\n      value: rgb.r,\n      onChange: handleChange\n    }),\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n      label: 'g',\n      value: rgb.g,\n      onChange: handleChange\n    }),\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n      label: 'b',\n      value: rgb.b,\n      onChange: handleChange\n    })\n  );\n};\n\nexports.default = CompactFields;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Github = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _common = require('../common');\n\nvar _GithubSwatch = require('./GithubSwatch');\n\nvar _GithubSwatch2 = _interopRequireDefault(_GithubSwatch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Github = exports.Github = function Github(_ref) {\n  var width = _ref.width,\n      colors = _ref.colors,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      triangle = _ref.triangle,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      card: {\n        width: width,\n        background: '#fff',\n        border: '1px solid rgba(0,0,0,0.2)',\n        boxShadow: '0 3px 12px rgba(0,0,0,0.15)',\n        borderRadius: '4px',\n        position: 'relative',\n        padding: '5px',\n        display: 'flex',\n        flexWrap: 'wrap'\n      },\n      triangle: {\n        position: 'absolute',\n        border: '7px solid transparent',\n        borderBottomColor: '#fff'\n      },\n      triangleShadow: {\n        position: 'absolute',\n        border: '8px solid transparent',\n        borderBottomColor: 'rgba(0,0,0,0.15)'\n      }\n    },\n    'hide-triangle': {\n      triangle: {\n        display: 'none'\n      },\n      triangleShadow: {\n        display: 'none'\n      }\n    },\n    'top-left-triangle': {\n      triangle: {\n        top: '-14px',\n        left: '10px'\n      },\n      triangleShadow: {\n        top: '-16px',\n        left: '9px'\n      }\n    },\n    'top-right-triangle': {\n      triangle: {\n        top: '-14px',\n        right: '10px'\n      },\n      triangleShadow: {\n        top: '-16px',\n        right: '9px'\n      }\n    },\n    'bottom-left-triangle': {\n      triangle: {\n        top: '35px',\n        left: '10px',\n        transform: 'rotate(180deg)'\n      },\n      triangleShadow: {\n        top: '37px',\n        left: '9px',\n        transform: 'rotate(180deg)'\n      }\n    },\n    'bottom-right-triangle': {\n      triangle: {\n        top: '35px',\n        right: '10px',\n        transform: 'rotate(180deg)'\n      },\n      triangleShadow: {\n        top: '37px',\n        right: '9px',\n        transform: 'rotate(180deg)'\n      }\n    }\n  }, passedStyles), {\n    'hide-triangle': triangle === 'hide',\n    'top-left-triangle': triangle === 'top-left',\n    'top-right-triangle': triangle === 'top-right',\n    'bottom-left-triangle': triangle === 'bottom-left',\n    'bottom-right-triangle': triangle === 'bottom-right'\n  });\n\n  var handleChange = function handleChange(hex, e) {\n    return onChange({ hex: hex, source: 'hex' }, e);\n  };\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.card, className: 'github-picker ' + className },\n    _react2.default.createElement('div', { style: styles.triangleShadow }),\n    _react2.default.createElement('div', { style: styles.triangle }),\n    (0, _map2.default)(colors, function (c) {\n      return _react2.default.createElement(_GithubSwatch2.default, {\n        color: c,\n        key: c,\n        onClick: handleChange,\n        onSwatchHover: onSwatchHover\n      });\n    })\n  );\n};\n\nGithub.propTypes = {\n  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  colors: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  triangle: _propTypes2.default.oneOf(['hide', 'top-left', 'top-right', 'bottom-left', 'bottom-right']),\n  styles: _propTypes2.default.object\n};\n\nGithub.defaultProps = {\n  width: 200,\n  colors: ['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#004DCF', '#5300EB', '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB'],\n  triangle: 'top-left',\n  styles: {}\n};\n\nexports.default = (0, _common.ColorWrap)(Github);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GithubSwatch = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _common = require('../common');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar GithubSwatch = exports.GithubSwatch = function GithubSwatch(_ref) {\n  var hover = _ref.hover,\n      color = _ref.color,\n      onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover;\n\n  var hoverSwatch = {\n    position: 'relative',\n    zIndex: '2',\n    outline: '2px solid #fff',\n    boxShadow: '0 0 5px 2px rgba(0,0,0,0.25)'\n  };\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      swatch: {\n        width: '25px',\n        height: '25px',\n        fontSize: '0'\n      }\n    },\n    'hover': {\n      swatch: hoverSwatch\n    }\n  }, { hover: hover });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.swatch },\n    _react2.default.createElement(_common.Swatch, {\n      color: color,\n      onClick: onClick,\n      onHover: onSwatchHover,\n      focusStyle: hoverSwatch\n    })\n  );\n};\n\nexports.default = (0, _reactcss.handleHover)(GithubSwatch);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Google = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _common = require('../common');\n\nvar _GooglePointerCircle = require('./GooglePointerCircle');\n\nvar _GooglePointerCircle2 = _interopRequireDefault(_GooglePointerCircle);\n\nvar _GooglePointer = require('./GooglePointer');\n\nvar _GooglePointer2 = _interopRequireDefault(_GooglePointer);\n\nvar _GoogleFields = require('./GoogleFields');\n\nvar _GoogleFields2 = _interopRequireDefault(_GoogleFields);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Google = exports.Google = function Google(_ref) {\n  var width = _ref.width,\n      onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hsv = _ref.hsv,\n      hex = _ref.hex,\n      header = _ref.header,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      picker: {\n        width: width,\n        background: '#fff',\n        border: '1px solid #dfe1e5',\n        boxSizing: 'initial',\n        display: 'flex',\n        flexWrap: 'wrap',\n        borderRadius: '8px 8px 0px 0px'\n      },\n      head: {\n        height: '57px',\n        width: '100%',\n        paddingTop: '16px',\n        paddingBottom: '16px',\n        paddingLeft: '16px',\n        fontSize: '20px',\n        boxSizing: 'border-box',\n        fontFamily: 'Roboto-Regular,HelveticaNeue,Arial,sans-serif'\n      },\n      saturation: {\n        width: '70%',\n        padding: '0px',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      swatch: {\n        width: '30%',\n        height: '228px',\n        padding: '0px',\n        background: 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', 1)',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      body: {\n        margin: 'auto',\n        width: '95%'\n      },\n      controls: {\n        display: 'flex',\n        boxSizing: 'border-box',\n        height: '52px',\n        paddingTop: '22px'\n      },\n      color: {\n        width: '32px'\n      },\n      hue: {\n        height: '8px',\n        position: 'relative',\n        margin: '0px 16px 0px 16px',\n        width: '100%'\n      },\n      Hue: {\n        radius: '2px'\n      }\n    }\n  }, passedStyles));\n  return _react2.default.createElement(\n    'div',\n    { style: styles.picker, className: 'google-picker ' + className },\n    _react2.default.createElement(\n      'div',\n      { style: styles.head },\n      header\n    ),\n    _react2.default.createElement('div', { style: styles.swatch }),\n    _react2.default.createElement(\n      'div',\n      { style: styles.saturation },\n      _react2.default.createElement(_common.Saturation, {\n        hsl: hsl,\n        hsv: hsv,\n        pointer: _GooglePointerCircle2.default,\n        onChange: onChange\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.body },\n      _react2.default.createElement(\n        'div',\n        { style: styles.controls, className: 'flexbox-fix' },\n        _react2.default.createElement(\n          'div',\n          { style: styles.hue },\n          _react2.default.createElement(_common.Hue, {\n            style: styles.Hue,\n            hsl: hsl,\n            radius: '4px',\n            pointer: _GooglePointer2.default,\n            onChange: onChange\n          })\n        )\n      ),\n      _react2.default.createElement(_GoogleFields2.default, {\n        rgb: rgb,\n        hsl: hsl,\n        hex: hex,\n        hsv: hsv,\n        onChange: onChange\n      })\n    )\n  );\n};\n\nGoogle.propTypes = {\n  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  styles: _propTypes2.default.object,\n  header: _propTypes2.default.string\n\n};\n\nGoogle.defaultProps = {\n  width: 652,\n  styles: {},\n  header: 'Color picker'\n};\n\nexports.default = (0, _common.ColorWrap)(Google);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleFields = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _color = require('../../helpers/color');\n\nvar color = _interopRequireWildcard(_color);\n\nvar _common = require('../common');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar GoogleFields = exports.GoogleFields = function GoogleFields(_ref) {\n  var onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hex = _ref.hex,\n      hsv = _ref.hsv;\n\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color.isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else if (data.rgb) {\n      var values = data.rgb.split(',');\n      color.isvalidColorString(data.rgb, 'rgb') && onChange({\n        r: values[0],\n        g: values[1],\n        b: values[2],\n        a: 1,\n        source: 'rgb'\n      }, e);\n    } else if (data.hsv) {\n      var _values = data.hsv.split(',');\n      if (color.isvalidColorString(data.hsv, 'hsv')) {\n        _values[2] = _values[2].replace('%', '');\n        _values[1] = _values[1].replace('%', '');\n        _values[0] = _values[0].replace('°', '');\n        if (_values[1] == 1) {\n          _values[1] = 0.01;\n        } else if (_values[2] == 1) {\n          _values[2] = 0.01;\n        }\n        onChange({\n          h: Number(_values[0]),\n          s: Number(_values[1]),\n          v: Number(_values[2]),\n          source: 'hsv'\n        }, e);\n      }\n    } else if (data.hsl) {\n      var _values2 = data.hsl.split(',');\n      if (color.isvalidColorString(data.hsl, 'hsl')) {\n        _values2[2] = _values2[2].replace('%', '');\n        _values2[1] = _values2[1].replace('%', '');\n        _values2[0] = _values2[0].replace('°', '');\n        if (hsvValue[1] == 1) {\n          hsvValue[1] = 0.01;\n        } else if (hsvValue[2] == 1) {\n          hsvValue[2] = 0.01;\n        }\n        onChange({\n          h: Number(_values2[0]),\n          s: Number(_values2[1]),\n          v: Number(_values2[2]),\n          source: 'hsl'\n        }, e);\n      }\n    }\n  };\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      wrap: {\n        display: 'flex',\n        height: '100px',\n        marginTop: '4px'\n      },\n      fields: {\n        width: '100%'\n      },\n      column: {\n        paddingTop: '10px',\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      double: {\n        padding: '0px 4.4px',\n        boxSizing: 'border-box'\n      },\n      input: {\n        width: '100%',\n        height: '38px',\n        boxSizing: 'border-box',\n        padding: '4px 10% 3px',\n        textAlign: 'center',\n        border: '1px solid #dadce0',\n        fontSize: '11px',\n        textTransform: 'lowercase',\n        borderRadius: '5px',\n        outline: 'none',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      input2: {\n        height: '38px',\n        width: '100%',\n        border: '1px solid #dadce0',\n        boxSizing: 'border-box',\n        fontSize: '11px',\n        textTransform: 'lowercase',\n        borderRadius: '5px',\n        outline: 'none',\n        paddingLeft: '10px',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      label: {\n        textAlign: 'center',\n        fontSize: '12px',\n        background: '#fff',\n        position: 'absolute',\n        textTransform: 'uppercase',\n        color: '#3c4043',\n        width: '35px',\n        top: '-6px',\n        left: '0',\n        right: '0',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      label2: {\n        left: '10px',\n        textAlign: 'center',\n        fontSize: '12px',\n        background: '#fff',\n        position: 'absolute',\n        textTransform: 'uppercase',\n        color: '#3c4043',\n        width: '32px',\n        top: '-6px',\n        fontFamily: 'Roboto,Arial,sans-serif'\n      },\n      single: {\n        flexGrow: '1',\n        margin: '0px 4.4px'\n      }\n    }\n  });\n\n  var rgbValue = rgb.r + ', ' + rgb.g + ', ' + rgb.b;\n  var hslValue = Math.round(hsl.h) + '\\xB0, ' + Math.round(hsl.s * 100) + '%, ' + Math.round(hsl.l * 100) + '%';\n  var hsvValue = Math.round(hsv.h) + '\\xB0, ' + Math.round(hsv.s * 100) + '%, ' + Math.round(hsv.v * 100) + '%';\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.wrap, className: 'flexbox-fix' },\n    _react2.default.createElement(\n      'div',\n      { style: styles.fields },\n      _react2.default.createElement(\n        'div',\n        { style: styles.double },\n        _react2.default.createElement(_common.EditableInput, {\n          style: { input: styles.input, label: styles.label },\n          label: 'hex',\n          value: hex,\n          onChange: handleChange\n        })\n      ),\n      _react2.default.createElement(\n        'div',\n        { style: styles.column },\n        _react2.default.createElement(\n          'div',\n          { style: styles.single },\n          _react2.default.createElement(_common.EditableInput, {\n            style: { input: styles.input2, label: styles.label2 },\n            label: 'rgb',\n            value: rgbValue,\n            onChange: handleChange\n          })\n        ),\n        _react2.default.createElement(\n          'div',\n          { style: styles.single },\n          _react2.default.createElement(_common.EditableInput, {\n            style: { input: styles.input2, label: styles.label2 },\n            label: 'hsv',\n            value: hsvValue,\n            onChange: handleChange\n          })\n        ),\n        _react2.default.createElement(\n          'div',\n          { style: styles.single },\n          _react2.default.createElement(_common.EditableInput, {\n            style: { input: styles.input2, label: styles.label2 },\n            label: 'hsl',\n            value: hslValue,\n            onChange: handleChange\n          })\n        )\n      )\n    )\n  );\n};\n\nexports.default = GoogleFields;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GooglePointer = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar GooglePointer = exports.GooglePointer = function GooglePointer(props) {\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      picker: {\n        width: '20px',\n        height: '20px',\n        borderRadius: '22px',\n        transform: 'translate(-10px, -7px)',\n        background: 'hsl(' + Math.round(props.hsl.h) + ', 100%, 50%)',\n        border: '2px white solid'\n      }\n    }\n  });\n\n  return _react2.default.createElement('div', { style: styles.picker });\n};\n\nGooglePointer.propTypes = {\n  hsl: _propTypes2.default.shape({\n    h: _propTypes2.default.number,\n    s: _propTypes2.default.number,\n    l: _propTypes2.default.number,\n    a: _propTypes2.default.number\n  })\n};\n\nGooglePointer.defaultProps = {\n  hsl: { a: 1, h: 249.94, l: 0.2, s: 0.50 }\n};\n\nexports.default = GooglePointer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GooglePointerCircle = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar GooglePointerCircle = exports.GooglePointerCircle = function GooglePointerCircle(props) {\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      picker: {\n        width: '20px',\n        height: '20px',\n        borderRadius: '22px',\n        border: '2px #fff solid',\n        transform: 'translate(-12px, -13px)',\n        background: 'hsl(' + Math.round(props.hsl.h) + ', ' + Math.round(props.hsl.s * 100) + '%, ' + Math.round(props.hsl.l * 100) + '%)'\n      }\n    }\n  });\n\n  return _react2.default.createElement('div', { style: styles.picker });\n};\n\nGooglePointerCircle.propTypes = {\n  hsl: _propTypes2.default.shape({\n    h: _propTypes2.default.number,\n    s: _propTypes2.default.number,\n    l: _propTypes2.default.number,\n    a: _propTypes2.default.number\n  })\n};\n\nGooglePointerCircle.defaultProps = {\n  hsl: { a: 1, h: 249.94, l: 0.2, s: 0.50 }\n};\n\nexports.default = GooglePointerCircle;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HuePicker = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _common = require('../common');\n\nvar _HuePointer = require('./HuePointer');\n\nvar _HuePointer2 = _interopRequireDefault(_HuePointer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar HuePicker = exports.HuePicker = function HuePicker(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      onChange = _ref.onChange,\n      hsl = _ref.hsl,\n      direction = _ref.direction,\n      pointer = _ref.pointer,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      picker: {\n        position: 'relative',\n        width: width,\n        height: height\n      },\n      hue: {\n        radius: '2px'\n      }\n    }\n  }, passedStyles));\n\n  // Overwrite to provide pure hue color\n  var handleChange = function handleChange(data) {\n    return onChange({ a: 1, h: data.h, l: 0.5, s: 1 });\n  };\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.picker, className: 'hue-picker ' + className },\n    _react2.default.createElement(_common.Hue, _extends({}, styles.hue, {\n      hsl: hsl,\n      pointer: pointer,\n      onChange: handleChange,\n      direction: direction\n    }))\n  );\n};\n\nHuePicker.propTypes = {\n  styles: _propTypes2.default.object\n};\nHuePicker.defaultProps = {\n  width: '316px',\n  height: '16px',\n  direction: 'horizontal',\n  pointer: _HuePointer2.default,\n  styles: {}\n};\n\nexports.default = (0, _common.ColorWrap)(HuePicker);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SliderPointer = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SliderPointer = exports.SliderPointer = function SliderPointer(_ref) {\n  var direction = _ref.direction;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      picker: {\n        width: '18px',\n        height: '18px',\n        borderRadius: '50%',\n        transform: 'translate(-9px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    },\n    'vertical': {\n      picker: {\n        transform: 'translate(-3px, -9px)'\n      }\n    }\n  }, { vertical: direction === 'vertical' });\n\n  return _react2.default.createElement('div', { style: styles.picker });\n};\n\nexports.default = SliderPointer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Material = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _color = require('../../helpers/color');\n\nvar color = _interopRequireWildcard(_color);\n\nvar _common = require('../common');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Material = exports.Material = function Material(_ref) {\n  var onChange = _ref.onChange,\n      hex = _ref.hex,\n      rgb = _ref.rgb,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      material: {\n        width: '98px',\n        height: '98px',\n        padding: '16px',\n        fontFamily: 'Roboto'\n      },\n      HEXwrap: {\n        position: 'relative'\n      },\n      HEXinput: {\n        width: '100%',\n        marginTop: '12px',\n        fontSize: '15px',\n        color: '#333',\n        padding: '0px',\n        border: '0px',\n        borderBottom: '2px solid ' + hex,\n        outline: 'none',\n        height: '30px'\n      },\n      HEXlabel: {\n        position: 'absolute',\n        top: '0px',\n        left: '0px',\n        fontSize: '11px',\n        color: '#999999',\n        textTransform: 'capitalize'\n      },\n      Hex: {\n        style: {}\n      },\n      RGBwrap: {\n        position: 'relative'\n      },\n      RGBinput: {\n        width: '100%',\n        marginTop: '12px',\n        fontSize: '15px',\n        color: '#333',\n        padding: '0px',\n        border: '0px',\n        borderBottom: '1px solid #eee',\n        outline: 'none',\n        height: '30px'\n      },\n      RGBlabel: {\n        position: 'absolute',\n        top: '0px',\n        left: '0px',\n        fontSize: '11px',\n        color: '#999999',\n        textTransform: 'capitalize'\n      },\n      split: {\n        display: 'flex',\n        marginRight: '-10px',\n        paddingTop: '11px'\n      },\n      third: {\n        flex: '1',\n        paddingRight: '10px'\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color.isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        source: 'rgb'\n      }, e);\n    }\n  };\n\n  return _react2.default.createElement(\n    _common.Raised,\n    { styles: passedStyles },\n    _react2.default.createElement(\n      'div',\n      { style: styles.material, className: 'material-picker ' + className },\n      _react2.default.createElement(_common.EditableInput, {\n        style: { wrap: styles.HEXwrap, input: styles.HEXinput, label: styles.HEXlabel },\n        label: 'hex',\n        value: hex,\n        onChange: handleChange\n      }),\n      _react2.default.createElement(\n        'div',\n        { style: styles.split, className: 'flexbox-fix' },\n        _react2.default.createElement(\n          'div',\n          { style: styles.third },\n          _react2.default.createElement(_common.EditableInput, {\n            style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n            label: 'r', value: rgb.r,\n            onChange: handleChange\n          })\n        ),\n        _react2.default.createElement(\n          'div',\n          { style: styles.third },\n          _react2.default.createElement(_common.EditableInput, {\n            style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n            label: 'g',\n            value: rgb.g,\n            onChange: handleChange\n          })\n        ),\n        _react2.default.createElement(\n          'div',\n          { style: styles.third },\n          _react2.default.createElement(_common.EditableInput, {\n            style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n            label: 'b',\n            value: rgb.b,\n            onChange: handleChange\n          })\n        )\n      )\n    )\n  );\n};\n\nexports.default = (0, _common.ColorWrap)(Material);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Photoshop = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _common = require('../common');\n\nvar _PhotoshopFields = require('./PhotoshopFields');\n\nvar _PhotoshopFields2 = _interopRequireDefault(_PhotoshopFields);\n\nvar _PhotoshopPointerCircle = require('./PhotoshopPointerCircle');\n\nvar _PhotoshopPointerCircle2 = _interopRequireDefault(_PhotoshopPointerCircle);\n\nvar _PhotoshopPointer = require('./PhotoshopPointer');\n\nvar _PhotoshopPointer2 = _interopRequireDefault(_PhotoshopPointer);\n\nvar _PhotoshopButton = require('./PhotoshopButton');\n\nvar _PhotoshopButton2 = _interopRequireDefault(_PhotoshopButton);\n\nvar _PhotoshopPreviews = require('./PhotoshopPreviews');\n\nvar _PhotoshopPreviews2 = _interopRequireDefault(_PhotoshopPreviews);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Photoshop = exports.Photoshop = function (_React$Component) {\n  _inherits(Photoshop, _React$Component);\n\n  function Photoshop(props) {\n    _classCallCheck(this, Photoshop);\n\n    var _this = _possibleConstructorReturn(this, (Photoshop.__proto__ || Object.getPrototypeOf(Photoshop)).call(this));\n\n    _this.state = {\n      currentColor: props.hex\n    };\n    return _this;\n  }\n\n  _createClass(Photoshop, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          _props$styles = _props.styles,\n          passedStyles = _props$styles === undefined ? {} : _props$styles,\n          _props$className = _props.className,\n          className = _props$className === undefined ? '' : _props$className;\n\n      var styles = (0, _reactcss2.default)((0, _merge2.default)({\n        'default': {\n          picker: {\n            background: '#DCDCDC',\n            borderRadius: '4px',\n            boxShadow: '0 0 0 1px rgba(0,0,0,.25), 0 8px 16px rgba(0,0,0,.15)',\n            boxSizing: 'initial',\n            width: '513px'\n          },\n          head: {\n            backgroundImage: 'linear-gradient(-180deg, #F0F0F0 0%, #D4D4D4 100%)',\n            borderBottom: '1px solid #B1B1B1',\n            boxShadow: 'inset 0 1px 0 0 rgba(255,255,255,.2), inset 0 -1px 0 0 rgba(0,0,0,.02)',\n            height: '23px',\n            lineHeight: '24px',\n            borderRadius: '4px 4px 0 0',\n            fontSize: '13px',\n            color: '#4D4D4D',\n            textAlign: 'center'\n          },\n          body: {\n            padding: '15px 15px 0',\n            display: 'flex'\n          },\n          saturation: {\n            width: '256px',\n            height: '256px',\n            position: 'relative',\n            border: '2px solid #B3B3B3',\n            borderBottom: '2px solid #F0F0F0',\n            overflow: 'hidden'\n          },\n          hue: {\n            position: 'relative',\n            height: '256px',\n            width: '19px',\n            marginLeft: '10px',\n            border: '2px solid #B3B3B3',\n            borderBottom: '2px solid #F0F0F0'\n          },\n          controls: {\n            width: '180px',\n            marginLeft: '10px'\n          },\n          top: {\n            display: 'flex'\n          },\n          previews: {\n            width: '60px'\n          },\n          actions: {\n            flex: '1',\n            marginLeft: '20px'\n          }\n        }\n      }, passedStyles));\n\n      return _react2.default.createElement(\n        'div',\n        { style: styles.picker, className: 'photoshop-picker ' + className },\n        _react2.default.createElement(\n          'div',\n          { style: styles.head },\n          this.props.header\n        ),\n        _react2.default.createElement(\n          'div',\n          { style: styles.body, className: 'flexbox-fix' },\n          _react2.default.createElement(\n            'div',\n            { style: styles.saturation },\n            _react2.default.createElement(_common.Saturation, {\n              hsl: this.props.hsl,\n              hsv: this.props.hsv,\n              pointer: _PhotoshopPointerCircle2.default,\n              onChange: this.props.onChange\n            })\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: styles.hue },\n            _react2.default.createElement(_common.Hue, {\n              direction: 'vertical',\n              hsl: this.props.hsl,\n              pointer: _PhotoshopPointer2.default,\n              onChange: this.props.onChange\n            })\n          ),\n          _react2.default.createElement(\n            'div',\n            { style: styles.controls },\n            _react2.default.createElement(\n              'div',\n              { style: styles.top, className: 'flexbox-fix' },\n              _react2.default.createElement(\n                'div',\n                { style: styles.previews },\n                _react2.default.createElement(_PhotoshopPreviews2.default, {\n                  rgb: this.props.rgb,\n                  currentColor: this.state.currentColor\n                })\n              ),\n              _react2.default.createElement(\n                'div',\n                { style: styles.actions },\n                _react2.default.createElement(_PhotoshopButton2.default, { label: 'OK', onClick: this.props.onAccept, active: true }),\n                _react2.default.createElement(_PhotoshopButton2.default, { label: 'Cancel', onClick: this.props.onCancel }),\n                _react2.default.createElement(_PhotoshopFields2.default, {\n                  onChange: this.props.onChange,\n                  rgb: this.props.rgb,\n                  hsv: this.props.hsv,\n                  hex: this.props.hex\n                })\n              )\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return Photoshop;\n}(_react2.default.Component);\n\nPhotoshop.propTypes = {\n  header: _propTypes2.default.string,\n  styles: _propTypes2.default.object\n};\n\nPhotoshop.defaultProps = {\n  header: 'Color Picker',\n  styles: {}\n};\n\nexports.default = (0, _common.ColorWrap)(Photoshop);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PhotoshopButton = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PhotoshopButton = exports.PhotoshopButton = function PhotoshopButton(_ref) {\n  var onClick = _ref.onClick,\n      label = _ref.label,\n      children = _ref.children,\n      active = _ref.active;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      button: {\n        backgroundImage: 'linear-gradient(-180deg, #FFFFFF 0%, #E6E6E6 100%)',\n        border: '1px solid #878787',\n        borderRadius: '2px',\n        height: '20px',\n        boxShadow: '0 1px 0 0 #EAEAEA',\n        fontSize: '14px',\n        color: '#000',\n        lineHeight: '20px',\n        textAlign: 'center',\n        marginBottom: '10px',\n        cursor: 'pointer'\n      }\n    },\n    'active': {\n      button: {\n        boxShadow: '0 0 0 1px #878787'\n      }\n    }\n  }, { active: active });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.button, onClick: onClick },\n    label || children\n  );\n};\n\nexports.default = PhotoshopButton;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PhotoshopPicker = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _color = require('../../helpers/color');\n\nvar color = _interopRequireWildcard(_color);\n\nvar _common = require('../common');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PhotoshopPicker = exports.PhotoshopPicker = function PhotoshopPicker(_ref) {\n  var onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsv = _ref.hsv,\n      hex = _ref.hex;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      fields: {\n        paddingTop: '5px',\n        paddingBottom: '9px',\n        width: '80px',\n        position: 'relative'\n      },\n      divider: {\n        height: '5px'\n      },\n      RGBwrap: {\n        position: 'relative'\n      },\n      RGBinput: {\n        marginLeft: '40%',\n        width: '40%',\n        height: '18px',\n        border: '1px solid #888888',\n        boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',\n        marginBottom: '5px',\n        fontSize: '13px',\n        paddingLeft: '3px',\n        marginRight: '10px'\n      },\n      RGBlabel: {\n        left: '0px',\n        top: '0px',\n        width: '34px',\n        textTransform: 'uppercase',\n        fontSize: '13px',\n        height: '18px',\n        lineHeight: '22px',\n        position: 'absolute'\n      },\n      HEXwrap: {\n        position: 'relative'\n      },\n      HEXinput: {\n        marginLeft: '20%',\n        width: '80%',\n        height: '18px',\n        border: '1px solid #888888',\n        boxShadow: 'inset 0 1px 1px rgba(0,0,0,.1), 0 1px 0 0 #ECECEC',\n        marginBottom: '6px',\n        fontSize: '13px',\n        paddingLeft: '3px'\n      },\n      HEXlabel: {\n        position: 'absolute',\n        top: '0px',\n        left: '0px',\n        width: '14px',\n        textTransform: 'uppercase',\n        fontSize: '13px',\n        height: '18px',\n        lineHeight: '22px'\n      },\n      fieldSymbols: {\n        position: 'absolute',\n        top: '5px',\n        right: '-7px',\n        fontSize: '13px'\n      },\n      symbol: {\n        height: '20px',\n        lineHeight: '22px',\n        paddingBottom: '7px'\n      }\n    }\n  });\n\n  var handleChange = function handleChange(data, e) {\n    if (data['#']) {\n      color.isValidHex(data['#']) && onChange({\n        hex: data['#'],\n        source: 'hex'\n      }, e);\n    } else if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        source: 'rgb'\n      }, e);\n    } else if (data.h || data.s || data.v) {\n      onChange({\n        h: data.h || hsv.h,\n        s: data.s || hsv.s,\n        v: data.v || hsv.v,\n        source: 'hsv'\n      }, e);\n    }\n  };\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.fields },\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n      label: 'h',\n      value: Math.round(hsv.h),\n      onChange: handleChange\n    }),\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n      label: 's',\n      value: Math.round(hsv.s * 100),\n      onChange: handleChange\n    }),\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n      label: 'v',\n      value: Math.round(hsv.v * 100),\n      onChange: handleChange\n    }),\n    _react2.default.createElement('div', { style: styles.divider }),\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n      label: 'r',\n      value: rgb.r,\n      onChange: handleChange\n    }),\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n      label: 'g',\n      value: rgb.g,\n      onChange: handleChange\n    }),\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.RGBwrap, input: styles.RGBinput, label: styles.RGBlabel },\n      label: 'b',\n      value: rgb.b,\n      onChange: handleChange\n    }),\n    _react2.default.createElement('div', { style: styles.divider }),\n    _react2.default.createElement(_common.EditableInput, {\n      style: { wrap: styles.HEXwrap, input: styles.HEXinput, label: styles.HEXlabel },\n      label: '#',\n      value: hex.replace('#', ''),\n      onChange: handleChange\n    }),\n    _react2.default.createElement(\n      'div',\n      { style: styles.fieldSymbols },\n      _react2.default.createElement(\n        'div',\n        { style: styles.symbol },\n        '\\xB0'\n      ),\n      _react2.default.createElement(\n        'div',\n        { style: styles.symbol },\n        '%'\n      ),\n      _react2.default.createElement(\n        'div',\n        { style: styles.symbol },\n        '%'\n      )\n    )\n  );\n};\n\nexports.default = PhotoshopPicker;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PhotoshopPointerCircle = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PhotoshopPointerCircle = exports.PhotoshopPointerCircle = function PhotoshopPointerCircle() {\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      triangle: {\n        width: 0,\n        height: 0,\n        borderStyle: 'solid',\n        borderWidth: '4px 0 4px 6px',\n        borderColor: 'transparent transparent transparent #fff',\n        position: 'absolute',\n        top: '1px',\n        left: '1px'\n      },\n      triangleBorder: {\n        width: 0,\n        height: 0,\n        borderStyle: 'solid',\n        borderWidth: '5px 0 5px 8px',\n        borderColor: 'transparent transparent transparent #555'\n      },\n\n      left: {\n        Extend: 'triangleBorder',\n        transform: 'translate(-13px, -4px)'\n      },\n      leftInside: {\n        Extend: 'triangle',\n        transform: 'translate(-8px, -5px)'\n      },\n\n      right: {\n        Extend: 'triangleBorder',\n        transform: 'translate(20px, -14px) rotate(180deg)'\n      },\n      rightInside: {\n        Extend: 'triangle',\n        transform: 'translate(-8px, -5px)'\n      }\n    }\n  });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.pointer },\n    _react2.default.createElement(\n      'div',\n      { style: styles.left },\n      _react2.default.createElement('div', { style: styles.leftInside })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.right },\n      _react2.default.createElement('div', { style: styles.rightInside })\n    )\n  );\n};\n\nexports.default = PhotoshopPointerCircle;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PhotoshopPointerCircle = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PhotoshopPointerCircle = exports.PhotoshopPointerCircle = function PhotoshopPointerCircle(_ref) {\n  var hsl = _ref.hsl;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      picker: {\n        width: '12px',\n        height: '12px',\n        borderRadius: '6px',\n        boxShadow: 'inset 0 0 0 1px #fff',\n        transform: 'translate(-6px, -6px)'\n      }\n    },\n    'black-outline': {\n      picker: {\n        boxShadow: 'inset 0 0 0 1px #000'\n      }\n    }\n  }, { 'black-outline': hsl.l > 0.5 });\n\n  return _react2.default.createElement('div', { style: styles.picker });\n};\n\nexports.default = PhotoshopPointerCircle;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PhotoshopPreviews = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PhotoshopPreviews = exports.PhotoshopPreviews = function PhotoshopPreviews(_ref) {\n  var rgb = _ref.rgb,\n      currentColor = _ref.currentColor;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      swatches: {\n        border: '1px solid #B3B3B3',\n        borderBottom: '1px solid #F0F0F0',\n        marginBottom: '2px',\n        marginTop: '1px'\n      },\n      new: {\n        height: '34px',\n        background: 'rgb(' + rgb.r + ',' + rgb.g + ', ' + rgb.b + ')',\n        boxShadow: 'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 1px 0 #000'\n      },\n      current: {\n        height: '34px',\n        background: currentColor,\n        boxShadow: 'inset 1px 0 0 #000, inset -1px 0 0 #000, inset 0 -1px 0 #000'\n      },\n      label: {\n        fontSize: '14px',\n        color: '#000',\n        textAlign: 'center'\n      }\n    }\n  });\n\n  return _react2.default.createElement(\n    'div',\n    null,\n    _react2.default.createElement(\n      'div',\n      { style: styles.label },\n      'new'\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.swatches },\n      _react2.default.createElement('div', { style: styles.new }),\n      _react2.default.createElement('div', { style: styles.current })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.label },\n      'current'\n    )\n  );\n};\n\nexports.default = PhotoshopPreviews;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sketch = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _common = require('../common');\n\nvar _SketchFields = require('./SketchFields');\n\nvar _SketchFields2 = _interopRequireDefault(_SketchFields);\n\nvar _SketchPresetColors = require('./SketchPresetColors');\n\nvar _SketchPresetColors2 = _interopRequireDefault(_SketchPresetColors);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Sketch = exports.Sketch = function Sketch(_ref) {\n  var width = _ref.width,\n      rgb = _ref.rgb,\n      hex = _ref.hex,\n      hsv = _ref.hsv,\n      hsl = _ref.hsl,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      disableAlpha = _ref.disableAlpha,\n      presetColors = _ref.presetColors,\n      renderers = _ref.renderers,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': _extends({\n      picker: {\n        width: width,\n        padding: '10px 10px 0',\n        boxSizing: 'initial',\n        background: '#fff',\n        borderRadius: '4px',\n        boxShadow: '0 0 0 1px rgba(0,0,0,.15), 0 8px 16px rgba(0,0,0,.15)'\n      },\n      saturation: {\n        width: '100%',\n        paddingBottom: '75%',\n        position: 'relative',\n        overflow: 'hidden'\n      },\n      Saturation: {\n        radius: '3px',\n        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      },\n      controls: {\n        display: 'flex'\n      },\n      sliders: {\n        padding: '4px 0',\n        flex: '1'\n      },\n      color: {\n        width: '24px',\n        height: '24px',\n        position: 'relative',\n        marginTop: '4px',\n        marginLeft: '4px',\n        borderRadius: '3px'\n      },\n      activeColor: {\n        absolute: '0px 0px 0px 0px',\n        borderRadius: '2px',\n        background: 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')',\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      },\n      hue: {\n        position: 'relative',\n        height: '10px',\n        overflow: 'hidden'\n      },\n      Hue: {\n        radius: '2px',\n        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      },\n\n      alpha: {\n        position: 'relative',\n        height: '10px',\n        marginTop: '4px',\n        overflow: 'hidden'\n      },\n      Alpha: {\n        radius: '2px',\n        shadow: 'inset 0 0 0 1px rgba(0,0,0,.15), inset 0 0 4px rgba(0,0,0,.25)'\n      }\n    }, passedStyles),\n    'disableAlpha': {\n      color: {\n        height: '10px'\n      },\n      hue: {\n        height: '10px'\n      },\n      alpha: {\n        display: 'none'\n      }\n    }\n  }, passedStyles), { disableAlpha: disableAlpha });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.picker, className: 'sketch-picker ' + className },\n    _react2.default.createElement(\n      'div',\n      { style: styles.saturation },\n      _react2.default.createElement(_common.Saturation, {\n        style: styles.Saturation,\n        hsl: hsl,\n        hsv: hsv,\n        onChange: onChange\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.controls, className: 'flexbox-fix' },\n      _react2.default.createElement(\n        'div',\n        { style: styles.sliders },\n        _react2.default.createElement(\n          'div',\n          { style: styles.hue },\n          _react2.default.createElement(_common.Hue, {\n            style: styles.Hue,\n            hsl: hsl,\n            onChange: onChange\n          })\n        ),\n        _react2.default.createElement(\n          'div',\n          { style: styles.alpha },\n          _react2.default.createElement(_common.Alpha, {\n            style: styles.Alpha,\n            rgb: rgb,\n            hsl: hsl,\n            renderers: renderers,\n            onChange: onChange\n          })\n        )\n      ),\n      _react2.default.createElement(\n        'div',\n        { style: styles.color },\n        _react2.default.createElement(_common.Checkboard, null),\n        _react2.default.createElement('div', { style: styles.activeColor })\n      )\n    ),\n    _react2.default.createElement(_SketchFields2.default, {\n      rgb: rgb,\n      hsl: hsl,\n      hex: hex,\n      onChange: onChange,\n      disableAlpha: disableAlpha\n    }),\n    _react2.default.createElement(_SketchPresetColors2.default, {\n      colors: presetColors,\n      onClick: onChange,\n      onSwatchHover: onSwatchHover\n    })\n  );\n};\n\nSketch.propTypes = {\n  disableAlpha: _propTypes2.default.bool,\n  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  styles: _propTypes2.default.object\n};\n\nSketch.defaultProps = {\n  disableAlpha: false,\n  width: 200,\n  styles: {},\n  presetColors: ['#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505', '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000', '#4A4A4A', '#9B9B9B', '#FFFFFF']\n};\n\nexports.default = (0, _common.ColorWrap)(Sketch);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SketchFields = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _color = require('../../helpers/color');\n\nvar color = _interopRequireWildcard(_color);\n\nvar _common = require('../common');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable no-param-reassign */\n\nvar SketchFields = exports.SketchFields = function SketchFields(_ref) {\n  var onChange = _ref.onChange,\n      rgb = _ref.rgb,\n      hsl = _ref.hsl,\n      hex = _ref.hex,\n      disableAlpha = _ref.disableAlpha;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      fields: {\n        display: 'flex',\n        paddingTop: '4px'\n      },\n      single: {\n        flex: '1',\n        paddingLeft: '6px'\n      },\n      alpha: {\n        flex: '1',\n        paddingLeft: '6px'\n      },\n      double: {\n        flex: '2'\n      },\n      input: {\n        width: '80%',\n        padding: '4px 10% 3px',\n        border: 'none',\n        boxShadow: 'inset 0 0 0 1px #ccc',\n        fontSize: '11px'\n      },\n      label: {\n        display: 'block',\n        textAlign: 'center',\n        fontSize: '11px',\n        color: '#222',\n        paddingTop: '3px',\n        paddingBottom: '4px',\n        textTransform: 'capitalize'\n      }\n    },\n    'disableAlpha': {\n      alpha: {\n        display: 'none'\n      }\n    }\n  }, { disableAlpha: disableAlpha });\n\n  var handleChange = function handleChange(data, e) {\n    if (data.hex) {\n      color.isValidHex(data.hex) && onChange({\n        hex: data.hex,\n        source: 'hex'\n      }, e);\n    } else if (data.r || data.g || data.b) {\n      onChange({\n        r: data.r || rgb.r,\n        g: data.g || rgb.g,\n        b: data.b || rgb.b,\n        a: rgb.a,\n        source: 'rgb'\n      }, e);\n    } else if (data.a) {\n      if (data.a < 0) {\n        data.a = 0;\n      } else if (data.a > 100) {\n        data.a = 100;\n      }\n\n      data.a /= 100;\n      onChange({\n        h: hsl.h,\n        s: hsl.s,\n        l: hsl.l,\n        a: data.a,\n        source: 'rgb'\n      }, e);\n    }\n  };\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.fields, className: 'flexbox-fix' },\n    _react2.default.createElement(\n      'div',\n      { style: styles.double },\n      _react2.default.createElement(_common.EditableInput, {\n        style: { input: styles.input, label: styles.label },\n        label: 'hex',\n        value: hex.replace('#', ''),\n        onChange: handleChange\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.single },\n      _react2.default.createElement(_common.EditableInput, {\n        style: { input: styles.input, label: styles.label },\n        label: 'r',\n        value: rgb.r,\n        onChange: handleChange,\n        dragLabel: 'true',\n        dragMax: '255'\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.single },\n      _react2.default.createElement(_common.EditableInput, {\n        style: { input: styles.input, label: styles.label },\n        label: 'g',\n        value: rgb.g,\n        onChange: handleChange,\n        dragLabel: 'true',\n        dragMax: '255'\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.single },\n      _react2.default.createElement(_common.EditableInput, {\n        style: { input: styles.input, label: styles.label },\n        label: 'b',\n        value: rgb.b,\n        onChange: handleChange,\n        dragLabel: 'true',\n        dragMax: '255'\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.alpha },\n      _react2.default.createElement(_common.EditableInput, {\n        style: { input: styles.input, label: styles.label },\n        label: 'a',\n        value: Math.round(rgb.a * 100),\n        onChange: handleChange,\n        dragLabel: 'true',\n        dragMax: '100'\n      })\n    )\n  );\n};\n\nexports.default = SketchFields;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SketchPresetColors = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _common = require('../common');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SketchPresetColors = exports.SketchPresetColors = function SketchPresetColors(_ref) {\n  var colors = _ref.colors,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onSwatchHover = _ref.onSwatchHover;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      colors: {\n        margin: '0 -10px',\n        padding: '10px 0 0 10px',\n        borderTop: '1px solid #eee',\n        display: 'flex',\n        flexWrap: 'wrap',\n        position: 'relative'\n      },\n      swatchWrap: {\n        width: '16px',\n        height: '16px',\n        margin: '0 10px 10px 0'\n      },\n      swatch: {\n        borderRadius: '3px',\n        boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)'\n      }\n    },\n    'no-presets': {\n      colors: {\n        display: 'none'\n      }\n    }\n  }, {\n    'no-presets': !colors || !colors.length\n  });\n\n  var handleClick = function handleClick(hex, e) {\n    onClick({\n      hex: hex,\n      source: 'hex'\n    }, e);\n  };\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.colors, className: 'flexbox-fix' },\n    colors.map(function (colorObjOrString) {\n      var c = typeof colorObjOrString === 'string' ? { color: colorObjOrString } : colorObjOrString;\n      var key = '' + c.color + (c.title || '');\n      return _react2.default.createElement(\n        'div',\n        { key: key, style: styles.swatchWrap },\n        _react2.default.createElement(_common.Swatch, _extends({}, c, {\n          style: styles.swatch,\n          onClick: handleClick,\n          onHover: onSwatchHover,\n          focusStyle: {\n            boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ' + c.color\n          }\n        }))\n      );\n    })\n  );\n};\n\nSketchPresetColors.propTypes = {\n  colors: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({\n    color: _propTypes2.default.string,\n    title: _propTypes2.default.string\n  })])).isRequired\n};\n\nexports.default = SketchPresetColors;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Slider = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _common = require('../common');\n\nvar _SliderSwatches = require('./SliderSwatches');\n\nvar _SliderSwatches2 = _interopRequireDefault(_SliderSwatches);\n\nvar _SliderPointer = require('./SliderPointer');\n\nvar _SliderPointer2 = _interopRequireDefault(_SliderPointer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Slider = exports.Slider = function Slider(_ref) {\n  var hsl = _ref.hsl,\n      onChange = _ref.onChange,\n      pointer = _ref.pointer,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      hue: {\n        height: '12px',\n        position: 'relative'\n      },\n      Hue: {\n        radius: '2px'\n      }\n    }\n  }, passedStyles));\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.wrap || {}, className: 'slider-picker ' + className },\n    _react2.default.createElement(\n      'div',\n      { style: styles.hue },\n      _react2.default.createElement(_common.Hue, {\n        style: styles.Hue,\n        hsl: hsl,\n        pointer: pointer,\n        onChange: onChange\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.swatches },\n      _react2.default.createElement(_SliderSwatches2.default, { hsl: hsl, onClick: onChange })\n    )\n  );\n};\n\nSlider.propTypes = {\n  styles: _propTypes2.default.object\n};\nSlider.defaultProps = {\n  pointer: _SliderPointer2.default,\n  styles: {}\n};\n\nexports.default = (0, _common.ColorWrap)(Slider);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SliderPointer = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SliderPointer = exports.SliderPointer = function SliderPointer() {\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      picker: {\n        width: '14px',\n        height: '14px',\n        borderRadius: '6px',\n        transform: 'translate(-7px, -1px)',\n        backgroundColor: 'rgb(248, 248, 248)',\n        boxShadow: '0 1px 4px 0 rgba(0, 0, 0, 0.37)'\n      }\n    }\n  });\n\n  return _react2.default.createElement('div', { style: styles.picker });\n};\n\nexports.default = SliderPointer;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SliderSwatch = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SliderSwatch = exports.SliderSwatch = function SliderSwatch(_ref) {\n  var hsl = _ref.hsl,\n      offset = _ref.offset,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      active = _ref.active,\n      first = _ref.first,\n      last = _ref.last;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      swatch: {\n        height: '12px',\n        background: 'hsl(' + hsl.h + ', 50%, ' + offset * 100 + '%)',\n        cursor: 'pointer'\n      }\n    },\n    'first': {\n      swatch: {\n        borderRadius: '2px 0 0 2px'\n      }\n    },\n    'last': {\n      swatch: {\n        borderRadius: '0 2px 2px 0'\n      }\n    },\n    'active': {\n      swatch: {\n        transform: 'scaleY(1.8)',\n        borderRadius: '3.6px/2px'\n      }\n    }\n  }, { active: active, first: first, last: last });\n\n  var handleClick = function handleClick(e) {\n    return onClick({\n      h: hsl.h,\n      s: 0.5,\n      l: offset,\n      source: 'hsl'\n    }, e);\n  };\n\n  return _react2.default.createElement('div', { style: styles.swatch, onClick: handleClick });\n};\n\nexports.default = SliderSwatch;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SliderSwatches = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _SliderSwatch = require('./SliderSwatch');\n\nvar _SliderSwatch2 = _interopRequireDefault(_SliderSwatch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SliderSwatches = exports.SliderSwatches = function SliderSwatches(_ref) {\n  var onClick = _ref.onClick,\n      hsl = _ref.hsl;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      swatches: {\n        marginTop: '20px'\n      },\n      swatch: {\n        boxSizing: 'border-box',\n        width: '20%',\n        paddingRight: '1px',\n        float: 'left'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  });\n\n  // Acceptible difference in floating point equality\n  var epsilon = 0.1;\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.swatches },\n    _react2.default.createElement(\n      'div',\n      { style: styles.swatch },\n      _react2.default.createElement(_SliderSwatch2.default, {\n        hsl: hsl,\n        offset: '.80',\n        active: Math.abs(hsl.l - 0.80) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n        onClick: onClick,\n        first: true\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.swatch },\n      _react2.default.createElement(_SliderSwatch2.default, {\n        hsl: hsl,\n        offset: '.65',\n        active: Math.abs(hsl.l - 0.65) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n        onClick: onClick\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.swatch },\n      _react2.default.createElement(_SliderSwatch2.default, {\n        hsl: hsl,\n        offset: '.50',\n        active: Math.abs(hsl.l - 0.50) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n        onClick: onClick\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.swatch },\n      _react2.default.createElement(_SliderSwatch2.default, {\n        hsl: hsl,\n        offset: '.35',\n        active: Math.abs(hsl.l - 0.35) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n        onClick: onClick\n      })\n    ),\n    _react2.default.createElement(\n      'div',\n      { style: styles.swatch },\n      _react2.default.createElement(_SliderSwatch2.default, {\n        hsl: hsl,\n        offset: '.20',\n        active: Math.abs(hsl.l - 0.20) < epsilon && Math.abs(hsl.s - 0.50) < epsilon,\n        onClick: onClick,\n        last: true\n      })\n    ),\n    _react2.default.createElement('div', { style: styles.clear })\n  );\n};\n\nexports.default = SliderSwatches;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Swatches = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _materialColors = require('material-colors');\n\nvar material = _interopRequireWildcard(_materialColors);\n\nvar _common = require('../common');\n\nvar _SwatchesGroup = require('./SwatchesGroup');\n\nvar _SwatchesGroup2 = _interopRequireDefault(_SwatchesGroup);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Swatches = exports.Swatches = function Swatches(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      colors = _ref.colors,\n      hex = _ref.hex,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      picker: {\n        width: width,\n        height: height\n      },\n      overflow: {\n        height: height,\n        overflowY: 'scroll'\n      },\n      body: {\n        padding: '16px 0 6px 16px'\n      },\n      clear: {\n        clear: 'both'\n      }\n    }\n  }, passedStyles));\n\n  var handleChange = function handleChange(data, e) {\n    return onChange({ hex: data, source: 'hex' }, e);\n  };\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.picker, className: 'swatches-picker ' + className },\n    _react2.default.createElement(\n      _common.Raised,\n      null,\n      _react2.default.createElement(\n        'div',\n        { style: styles.overflow },\n        _react2.default.createElement(\n          'div',\n          { style: styles.body },\n          (0, _map2.default)(colors, function (group) {\n            return _react2.default.createElement(_SwatchesGroup2.default, {\n              key: group.toString(),\n              group: group,\n              active: hex,\n              onClick: handleChange,\n              onSwatchHover: onSwatchHover\n            });\n          }),\n          _react2.default.createElement('div', { style: styles.clear })\n        )\n      )\n    )\n  );\n};\n\nSwatches.propTypes = {\n  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  colors: _propTypes2.default.arrayOf(_propTypes2.default.arrayOf(_propTypes2.default.string)),\n  styles: _propTypes2.default.object\n\n  /* eslint-disable max-len */\n};Swatches.defaultProps = {\n  width: 320,\n  height: 240,\n  colors: [[material.red['900'], material.red['700'], material.red['500'], material.red['300'], material.red['100']], [material.pink['900'], material.pink['700'], material.pink['500'], material.pink['300'], material.pink['100']], [material.purple['900'], material.purple['700'], material.purple['500'], material.purple['300'], material.purple['100']], [material.deepPurple['900'], material.deepPurple['700'], material.deepPurple['500'], material.deepPurple['300'], material.deepPurple['100']], [material.indigo['900'], material.indigo['700'], material.indigo['500'], material.indigo['300'], material.indigo['100']], [material.blue['900'], material.blue['700'], material.blue['500'], material.blue['300'], material.blue['100']], [material.lightBlue['900'], material.lightBlue['700'], material.lightBlue['500'], material.lightBlue['300'], material.lightBlue['100']], [material.cyan['900'], material.cyan['700'], material.cyan['500'], material.cyan['300'], material.cyan['100']], [material.teal['900'], material.teal['700'], material.teal['500'], material.teal['300'], material.teal['100']], ['#194D33', material.green['700'], material.green['500'], material.green['300'], material.green['100']], [material.lightGreen['900'], material.lightGreen['700'], material.lightGreen['500'], material.lightGreen['300'], material.lightGreen['100']], [material.lime['900'], material.lime['700'], material.lime['500'], material.lime['300'], material.lime['100']], [material.yellow['900'], material.yellow['700'], material.yellow['500'], material.yellow['300'], material.yellow['100']], [material.amber['900'], material.amber['700'], material.amber['500'], material.amber['300'], material.amber['100']], [material.orange['900'], material.orange['700'], material.orange['500'], material.orange['300'], material.orange['100']], [material.deepOrange['900'], material.deepOrange['700'], material.deepOrange['500'], material.deepOrange['300'], material.deepOrange['100']], [material.brown['900'], material.brown['700'], material.brown['500'], material.brown['300'], material.brown['100']], [material.blueGrey['900'], material.blueGrey['700'], material.blueGrey['500'], material.blueGrey['300'], material.blueGrey['100']], ['#000000', '#525252', '#969696', '#D9D9D9', '#FFFFFF']],\n  styles: {}\n};\n\nexports.default = (0, _common.ColorWrap)(Swatches);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SwatchesColor = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _color = require('../../helpers/color');\n\nvar colorUtils = _interopRequireWildcard(_color);\n\nvar _common = require('../common');\n\nvar _CheckIcon = require('@icons/material/CheckIcon');\n\nvar _CheckIcon2 = _interopRequireDefault(_CheckIcon);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SwatchesColor = exports.SwatchesColor = function SwatchesColor(_ref) {\n  var color = _ref.color,\n      _ref$onClick = _ref.onClick,\n      onClick = _ref$onClick === undefined ? function () {} : _ref$onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      first = _ref.first,\n      last = _ref.last,\n      active = _ref.active;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      color: {\n        width: '40px',\n        height: '24px',\n        cursor: 'pointer',\n        background: color,\n        marginBottom: '1px'\n      },\n      check: {\n        color: colorUtils.getContrastingColor(color),\n        marginLeft: '8px',\n        display: 'none'\n      }\n    },\n    'first': {\n      color: {\n        overflow: 'hidden',\n        borderRadius: '2px 2px 0 0'\n      }\n    },\n    'last': {\n      color: {\n        overflow: 'hidden',\n        borderRadius: '0 0 2px 2px'\n      }\n    },\n    'active': {\n      check: {\n        display: 'block'\n      }\n    },\n    'color-#FFFFFF': {\n      color: {\n        boxShadow: 'inset 0 0 0 1px #ddd'\n      },\n      check: {\n        color: '#333'\n      }\n    },\n    'transparent': {\n      check: {\n        color: '#333'\n      }\n    }\n  }, {\n    first: first,\n    last: last,\n    active: active,\n    'color-#FFFFFF': color === '#FFFFFF',\n    'transparent': color === 'transparent'\n  });\n\n  return _react2.default.createElement(\n    _common.Swatch,\n    {\n      color: color,\n      style: styles.color,\n      onClick: onClick,\n      onHover: onSwatchHover,\n      focusStyle: { boxShadow: '0 0 4px ' + color }\n    },\n    _react2.default.createElement(\n      'div',\n      { style: styles.check },\n      _react2.default.createElement(_CheckIcon2.default, null)\n    )\n  );\n};\n\nexports.default = SwatchesColor;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SwatchesGroup = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _SwatchesColor = require('./SwatchesColor');\n\nvar _SwatchesColor2 = _interopRequireDefault(_SwatchesColor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SwatchesGroup = exports.SwatchesGroup = function SwatchesGroup(_ref) {\n  var onClick = _ref.onClick,\n      onSwatchHover = _ref.onSwatchHover,\n      group = _ref.group,\n      active = _ref.active;\n\n  var styles = (0, _reactcss2.default)({\n    'default': {\n      group: {\n        paddingBottom: '10px',\n        width: '40px',\n        float: 'left',\n        marginRight: '10px'\n      }\n    }\n  });\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.group },\n    (0, _map2.default)(group, function (color, i) {\n      return _react2.default.createElement(_SwatchesColor2.default, {\n        key: color,\n        color: color,\n        active: color.toLowerCase() === active,\n        first: i === 0,\n        last: i === group.length - 1,\n        onClick: onClick,\n        onSwatchHover: onSwatchHover\n      });\n    })\n  );\n};\n\nexports.default = SwatchesGroup;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Twitter = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactcss = require('reactcss');\n\nvar _reactcss2 = _interopRequireDefault(_reactcss);\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _color = require('../../helpers/color');\n\nvar color = _interopRequireWildcard(_color);\n\nvar _common = require('../common');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Twitter = exports.Twitter = function Twitter(_ref) {\n  var onChange = _ref.onChange,\n      onSwatchHover = _ref.onSwatchHover,\n      hex = _ref.hex,\n      colors = _ref.colors,\n      width = _ref.width,\n      triangle = _ref.triangle,\n      _ref$styles = _ref.styles,\n      passedStyles = _ref$styles === undefined ? {} : _ref$styles,\n      _ref$className = _ref.className,\n      className = _ref$className === undefined ? '' : _ref$className;\n\n  var styles = (0, _reactcss2.default)((0, _merge2.default)({\n    'default': {\n      card: {\n        width: width,\n        background: '#fff',\n        border: '0 solid rgba(0,0,0,0.25)',\n        boxShadow: '0 1px 4px rgba(0,0,0,0.25)',\n        borderRadius: '4px',\n        position: 'relative'\n      },\n      body: {\n        padding: '15px 9px 9px 15px'\n      },\n      label: {\n        fontSize: '18px',\n        color: '#fff'\n      },\n      triangle: {\n        width: '0px',\n        height: '0px',\n        borderStyle: 'solid',\n        borderWidth: '0 9px 10px 9px',\n        borderColor: 'transparent transparent #fff transparent',\n        position: 'absolute'\n      },\n      triangleShadow: {\n        width: '0px',\n        height: '0px',\n        borderStyle: 'solid',\n        borderWidth: '0 9px 10px 9px',\n        borderColor: 'transparent transparent rgba(0,0,0,.1) transparent',\n        position: 'absolute'\n      },\n      hash: {\n        background: '#F0F0F0',\n        height: '30px',\n        width: '30px',\n        borderRadius: '4px 0 0 4px',\n        float: 'left',\n        color: '#98A1A4',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      input: {\n        width: '100px',\n        fontSize: '14px',\n        color: '#666',\n        border: '0px',\n        outline: 'none',\n        height: '28px',\n        boxShadow: 'inset 0 0 0 1px #F0F0F0',\n        boxSizing: 'content-box',\n        borderRadius: '0 4px 4px 0',\n        float: 'left',\n        paddingLeft: '8px'\n      },\n      swatch: {\n        width: '30px',\n        height: '30px',\n        float: 'left',\n        borderRadius: '4px',\n        margin: '0 6px 6px 0'\n      },\n      clear: {\n        clear: 'both'\n      }\n    },\n    'hide-triangle': {\n      triangle: {\n        display: 'none'\n      },\n      triangleShadow: {\n        display: 'none'\n      }\n    },\n    'top-left-triangle': {\n      triangle: {\n        top: '-10px',\n        left: '12px'\n      },\n      triangleShadow: {\n        top: '-11px',\n        left: '12px'\n      }\n    },\n    'top-right-triangle': {\n      triangle: {\n        top: '-10px',\n        right: '12px'\n      },\n      triangleShadow: {\n        top: '-11px',\n        right: '12px'\n      }\n    }\n  }, passedStyles), {\n    'hide-triangle': triangle === 'hide',\n    'top-left-triangle': triangle === 'top-left',\n    'top-right-triangle': triangle === 'top-right'\n  });\n\n  var handleChange = function handleChange(hexcode, e) {\n    color.isValidHex(hexcode) && onChange({\n      hex: hexcode,\n      source: 'hex'\n    }, e);\n  };\n\n  return _react2.default.createElement(\n    'div',\n    { style: styles.card, className: 'twitter-picker ' + className },\n    _react2.default.createElement('div', { style: styles.triangleShadow }),\n    _react2.default.createElement('div', { style: styles.triangle }),\n    _react2.default.createElement(\n      'div',\n      { style: styles.body },\n      (0, _map2.default)(colors, function (c, i) {\n        return _react2.default.createElement(_common.Swatch, {\n          key: i,\n          color: c,\n          hex: c,\n          style: styles.swatch,\n          onClick: handleChange,\n          onHover: onSwatchHover,\n          focusStyle: {\n            boxShadow: '0 0 4px ' + c\n          }\n        });\n      }),\n      _react2.default.createElement(\n        'div',\n        { style: styles.hash },\n        '#'\n      ),\n      _react2.default.createElement(_common.EditableInput, {\n        label: null,\n        style: { input: styles.input },\n        value: hex.replace('#', ''),\n        onChange: handleChange\n      }),\n      _react2.default.createElement('div', { style: styles.clear })\n    )\n  );\n};\n\nTwitter.propTypes = {\n  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  triangle: _propTypes2.default.oneOf(['hide', 'top-left', 'top-right']),\n  colors: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  styles: _propTypes2.default.object\n};\n\nTwitter.defaultProps = {\n  width: 276,\n  colors: ['#FF6900', '#FCB900', '#7BDCB5', '#00D084', '#8ED1FC', '#0693E3', '#ABB8C3', '#EB144C', '#F78DA7', '#9900EF'],\n  triangle: 'top-left',\n  styles: {}\n};\n\nexports.default = (0, _common.ColorWrap)(Twitter);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar calculateChange = exports.calculateChange = function calculateChange(e, hsl, direction, initialA, container) {\n  var containerWidth = container.clientWidth;\n  var containerHeight = container.clientHeight;\n  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;\n  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;\n  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);\n  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);\n\n  if (direction === 'vertical') {\n    var a = void 0;\n    if (top < 0) {\n      a = 0;\n    } else if (top > containerHeight) {\n      a = 1;\n    } else {\n      a = Math.round(top * 100 / containerHeight) / 100;\n    }\n\n    if (hsl.a !== a) {\n      return {\n        h: hsl.h,\n        s: hsl.s,\n        l: hsl.l,\n        a: a,\n        source: 'rgb'\n      };\n    }\n  } else {\n    var _a = void 0;\n    if (left < 0) {\n      _a = 0;\n    } else if (left > containerWidth) {\n      _a = 1;\n    } else {\n      _a = Math.round(left * 100 / containerWidth) / 100;\n    }\n\n    if (initialA !== _a) {\n      return {\n        h: hsl.h,\n        s: hsl.s,\n        l: hsl.l,\n        a: _a,\n        source: 'rgb'\n      };\n    }\n  }\n  return null;\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar checkboardCache = {};\n\nvar render = exports.render = function render(c1, c2, size, serverCanvas) {\n  if (typeof document === 'undefined' && !serverCanvas) {\n    return null;\n  }\n  var canvas = serverCanvas ? new serverCanvas() : document.createElement('canvas');\n  canvas.width = size * 2;\n  canvas.height = size * 2;\n  var ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return null;\n  } // If no context can be found, return early.\n  ctx.fillStyle = c1;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = c2;\n  ctx.fillRect(0, 0, size, size);\n  ctx.translate(size, size);\n  ctx.fillRect(0, 0, size, size);\n  return canvas.toDataURL();\n};\n\nvar get = exports.get = function get(c1, c2, size, serverCanvas) {\n  var key = c1 + '-' + c2 + '-' + size + (serverCanvas ? '-server' : '');\n\n  if (checkboardCache[key]) {\n    return checkboardCache[key];\n  }\n\n  var checkboard = render(c1, c2, size, serverCanvas);\n  checkboardCache[key] = checkboard;\n  return checkboard;\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isvalidColorString = exports.red = exports.getContrastingColor = exports.isValidHex = exports.toState = exports.simpleCheckForValidColor = undefined;\n\nvar _each = require('lodash/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nvar _tinycolor = require('tinycolor2');\n\nvar _tinycolor2 = _interopRequireDefault(_tinycolor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar simpleCheckForValidColor = exports.simpleCheckForValidColor = function simpleCheckForValidColor(data) {\n  var keysToCheck = ['r', 'g', 'b', 'a', 'h', 's', 'l', 'v'];\n  var checked = 0;\n  var passed = 0;\n  (0, _each2.default)(keysToCheck, function (letter) {\n    if (data[letter]) {\n      checked += 1;\n      if (!isNaN(data[letter])) {\n        passed += 1;\n      }\n      if (letter === 's' || letter === 'l') {\n        var percentPatt = /^\\d+%$/;\n        if (percentPatt.test(data[letter])) {\n          passed += 1;\n        }\n      }\n    }\n  });\n  return checked === passed ? data : false;\n};\n\nvar toState = exports.toState = function toState(data, oldHue) {\n  var color = data.hex ? (0, _tinycolor2.default)(data.hex) : (0, _tinycolor2.default)(data);\n  var hsl = color.toHsl();\n  var hsv = color.toHsv();\n  var rgb = color.toRgb();\n  var hex = color.toHex();\n  if (hsl.s === 0) {\n    hsl.h = oldHue || 0;\n    hsv.h = oldHue || 0;\n  }\n  var transparent = hex === '000000' && rgb.a === 0;\n\n  return {\n    hsl: hsl,\n    hex: transparent ? 'transparent' : '#' + hex,\n    rgb: rgb,\n    hsv: hsv,\n    oldHue: data.h || oldHue || hsl.h,\n    source: data.source\n  };\n};\n\nvar isValidHex = exports.isValidHex = function isValidHex(hex) {\n  if (hex === 'transparent') {\n    return true;\n  }\n  // disable hex4 and hex8\n  var lh = String(hex).charAt(0) === '#' ? 1 : 0;\n  return hex.length !== 4 + lh && hex.length < 7 + lh && (0, _tinycolor2.default)(hex).isValid();\n};\n\nvar getContrastingColor = exports.getContrastingColor = function getContrastingColor(data) {\n  if (!data) {\n    return '#fff';\n  }\n  var col = toState(data);\n  if (col.hex === 'transparent') {\n    return 'rgba(0,0,0,0.4)';\n  }\n  var yiq = (col.rgb.r * 299 + col.rgb.g * 587 + col.rgb.b * 114) / 1000;\n  return yiq >= 128 ? '#000' : '#fff';\n};\n\nvar red = exports.red = {\n  hsl: { a: 1, h: 0, l: 0.5, s: 1 },\n  hex: '#ff0000',\n  rgb: { r: 255, g: 0, b: 0, a: 1 },\n  hsv: { h: 0, s: 1, v: 1, a: 1 }\n};\n\nvar isvalidColorString = exports.isvalidColorString = function isvalidColorString(string, type) {\n  var stringWithoutDegree = string.replace('°', '');\n  return (0, _tinycolor2.default)(type + ' (' + stringWithoutDegree + ')')._ok;\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar calculateChange = exports.calculateChange = function calculateChange(e, direction, hsl, container) {\n  var containerWidth = container.clientWidth;\n  var containerHeight = container.clientHeight;\n  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;\n  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;\n  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);\n  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);\n\n  if (direction === 'vertical') {\n    var h = void 0;\n    if (top < 0) {\n      h = 359;\n    } else if (top > containerHeight) {\n      h = 0;\n    } else {\n      var percent = -(top * 100 / containerHeight) + 100;\n      h = 360 * percent / 100;\n    }\n\n    if (hsl.h !== h) {\n      return {\n        h: h,\n        s: hsl.s,\n        l: hsl.l,\n        a: hsl.a,\n        source: 'hsl'\n      };\n    }\n  } else {\n    var _h = void 0;\n    if (left < 0) {\n      _h = 0;\n    } else if (left > containerWidth) {\n      _h = 359;\n    } else {\n      var _percent = left * 100 / containerWidth;\n      _h = 360 * _percent / 100;\n    }\n\n    if (hsl.h !== _h) {\n      return {\n        h: _h,\n        s: hsl.s,\n        l: hsl.l,\n        a: hsl.a,\n        source: 'hsl'\n      };\n    }\n  }\n  return null;\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleFocus = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-invalid-this */\n\n\nvar handleFocus = exports.handleFocus = function handleFocus(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';\n  return function (_React$Component) {\n    _inherits(Focus, _React$Component);\n\n    function Focus() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Focus);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Focus.__proto__ || Object.getPrototypeOf(Focus)).call.apply(_ref, [this].concat(args))), _this), _this.state = { focus: false }, _this.handleFocus = function () {\n        return _this.setState({ focus: true });\n      }, _this.handleBlur = function () {\n        return _this.setState({ focus: false });\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(Focus, [{\n      key: 'render',\n      value: function render() {\n        return _react2.default.createElement(\n          Span,\n          { onFocus: this.handleFocus, onBlur: this.handleBlur },\n          _react2.default.createElement(Component, _extends({}, this.props, this.state))\n        );\n      }\n    }]);\n\n    return Focus;\n  }(_react2.default.Component);\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar calculateChange = exports.calculateChange = function calculateChange(e, hsl, container) {\n  var _container$getBoundin = container.getBoundingClientRect(),\n      containerWidth = _container$getBoundin.width,\n      containerHeight = _container$getBoundin.height;\n\n  var x = typeof e.pageX === 'number' ? e.pageX : e.touches[0].pageX;\n  var y = typeof e.pageY === 'number' ? e.pageY : e.touches[0].pageY;\n  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);\n  var top = y - (container.getBoundingClientRect().top + window.pageYOffset);\n\n  if (left < 0) {\n    left = 0;\n  } else if (left > containerWidth) {\n    left = containerWidth;\n  }\n\n  if (top < 0) {\n    top = 0;\n  } else if (top > containerHeight) {\n    top = containerHeight;\n  }\n\n  var saturation = left / containerWidth;\n  var bright = 1 - top / containerHeight;\n\n  return {\n    h: hsl.h,\n    s: saturation,\n    v: bright,\n    a: hsl.a,\n    source: 'hsv'\n  };\n};","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CustomPicker = exports.GooglePicker = exports.TwitterPicker = exports.SwatchesPicker = exports.SliderPicker = exports.SketchPicker = exports.PhotoshopPicker = exports.MaterialPicker = exports.HuePicker = exports.GithubPicker = exports.CompactPicker = exports.ChromePicker = exports.default = exports.CirclePicker = exports.BlockPicker = exports.AlphaPicker = undefined;\n\nvar _Alpha = require('./components/alpha/Alpha');\n\nObject.defineProperty(exports, 'AlphaPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Alpha).default;\n  }\n});\n\nvar _Block = require('./components/block/Block');\n\nObject.defineProperty(exports, 'BlockPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Block).default;\n  }\n});\n\nvar _Circle = require('./components/circle/Circle');\n\nObject.defineProperty(exports, 'CirclePicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Circle).default;\n  }\n});\n\nvar _Chrome = require('./components/chrome/Chrome');\n\nObject.defineProperty(exports, 'ChromePicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Chrome).default;\n  }\n});\n\nvar _Compact = require('./components/compact/Compact');\n\nObject.defineProperty(exports, 'CompactPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Compact).default;\n  }\n});\n\nvar _Github = require('./components/github/Github');\n\nObject.defineProperty(exports, 'GithubPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Github).default;\n  }\n});\n\nvar _Hue = require('./components/hue/Hue');\n\nObject.defineProperty(exports, 'HuePicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Hue).default;\n  }\n});\n\nvar _Material = require('./components/material/Material');\n\nObject.defineProperty(exports, 'MaterialPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Material).default;\n  }\n});\n\nvar _Photoshop = require('./components/photoshop/Photoshop');\n\nObject.defineProperty(exports, 'PhotoshopPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Photoshop).default;\n  }\n});\n\nvar _Sketch = require('./components/sketch/Sketch');\n\nObject.defineProperty(exports, 'SketchPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Sketch).default;\n  }\n});\n\nvar _Slider = require('./components/slider/Slider');\n\nObject.defineProperty(exports, 'SliderPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Slider).default;\n  }\n});\n\nvar _Swatches = require('./components/swatches/Swatches');\n\nObject.defineProperty(exports, 'SwatchesPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Swatches).default;\n  }\n});\n\nvar _Twitter = require('./components/twitter/Twitter');\n\nObject.defineProperty(exports, 'TwitterPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Twitter).default;\n  }\n});\n\nvar _Google = require('./components/google/Google');\n\nObject.defineProperty(exports, 'GooglePicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Google).default;\n  }\n});\n\nvar _ColorWrap = require('./components/common/ColorWrap');\n\nObject.defineProperty(exports, 'CustomPicker', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_ColorWrap).default;\n  }\n});\n\nvar _Chrome2 = _interopRequireDefault(_Chrome);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _Chrome2.default;","/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n} // AsyncMode is deprecated along with isAsyncMode\n\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"prop-types\"),require(\"react\"),require(\"signature_pad\"),require(\"trim-canvas\")):\"function\"==typeof define&&define.amd?define([\"prop-types\",\"react\",\"signature_pad\",\"trim-canvas\"],t):\"object\"==typeof exports?exports.SignatureCanvas=t(require(\"prop-types\"),require(\"react\"),require(\"signature_pad\"),require(\"trim-canvas\")):e.SignatureCanvas=t(e[\"prop-types\"],e.react,e.signature_pad,e[\"trim-canvas\"])}(this,function(e,t,n,r){return function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return e[r].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var n={};return t.m=e,t.c=n,t.p=\"\",t(0)}([function(e,t,n){\"use strict\";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}function o(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function i(e,t){if(!e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return!t||\"object\"!=typeof t&&\"function\"!=typeof t?e:t}function u(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function, not \"+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,\"__esModule\",{value:!0});var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(1),p=r(f),l=n(2),d=r(l),v=n(3),h=r(v),_=n(4),g=r(_),m=function(e){function t(){var e,n,r,u;o(this,t);for(var s=arguments.length,c=Array(s),f=0;f<s;f++)c[f]=arguments[f];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),r._sigPad=null,r._excludeOurProps=function(){var e=r.props,t=(e.canvasProps,e.clearOnResize,a(e,[\"canvasProps\",\"clearOnResize\"]));return t},r.getCanvas=function(){return r._canvas},r.getTrimmedCanvas=function(){var e=document.createElement(\"canvas\");return e.width=r._canvas.width,e.height=r._canvas.height,e.getContext(\"2d\").drawImage(r._canvas,0,0),(0,g.default)(e)},r.getSignaturePad=function(){return r._sigPad},r._checkClearOnResize=function(){r.props.clearOnResize&&r._resizeCanvas()},r._resizeCanvas=function(){var e=r.props.canvasProps||{},t=e.width,n=e.height;if(!t||!n){var a=r._canvas,o=Math.max(window.devicePixelRatio||1,1);t||(a.width=a.offsetWidth*o),n||(a.height=a.offsetHeight*o),a.getContext(\"2d\").scale(o,o),r.clear()}},r.on=function(){return window.addEventListener(\"resize\",r._checkClearOnResize),r._sigPad.on()},r.off=function(){return window.removeEventListener(\"resize\",r._checkClearOnResize),r._sigPad.off()},r.clear=function(){return r._sigPad.clear()},r.isEmpty=function(){return r._sigPad.isEmpty()},r.fromDataURL=function(e,t){return r._sigPad.fromDataURL(e,t)},r.toDataURL=function(e,t){return r._sigPad.toDataURL(e,t)},r.fromData=function(e){return r._sigPad.fromData(e)},r.toData=function(){return r._sigPad.toData()},u=n,i(r,u)}return u(t,e),c(t,[{key:\"componentDidMount\",value:function(){this._sigPad=new h.default(this._canvas,this._excludeOurProps()),this._resizeCanvas(),this.on()}},{key:\"componentWillUnmount\",value:function(){this.off()}},{key:\"componentDidUpdate\",value:function(){Object.assign(this._sigPad,this._excludeOurProps())}},{key:\"render\",value:function(){var e=this,t=this.props.canvasProps;return d.default.createElement(\"canvas\",s({ref:function(t){e._canvas=t}},t))}}]),t}(l.Component);m.propTypes={velocityFilterWeight:p.default.number,minWidth:p.default.number,maxWidth:p.default.number,minDistance:p.default.number,dotSize:p.default.oneOfType([p.default.number,p.default.func]),penColor:p.default.string,throttle:p.default.number,onEnd:p.default.func,onBegin:p.default.func,canvasProps:p.default.object,clearOnResize:p.default.bool},m.defaultProps={clearOnResize:!0},t.default=m},function(t,n){t.exports=e},function(e,n){e.exports=t},function(e,t){e.exports=n},function(e,t){e.exports=r}])});","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.autoprefix = undefined;\n\nvar _forOwn2 = require('lodash/forOwn');\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar transforms = {\n  borderRadius: function borderRadius(value) {\n    return {\n      msBorderRadius: value,\n      MozBorderRadius: value,\n      OBorderRadius: value,\n      WebkitBorderRadius: value,\n      borderRadius: value\n    };\n  },\n  boxShadow: function boxShadow(value) {\n    return {\n      msBoxShadow: value,\n      MozBoxShadow: value,\n      OBoxShadow: value,\n      WebkitBoxShadow: value,\n      boxShadow: value\n    };\n  },\n  userSelect: function userSelect(value) {\n    return {\n      WebkitTouchCallout: value,\n      KhtmlUserSelect: value,\n      MozUserSelect: value,\n      msUserSelect: value,\n      WebkitUserSelect: value,\n      userSelect: value\n    };\n  },\n\n  flex: function flex(value) {\n    return {\n      WebkitBoxFlex: value,\n      MozBoxFlex: value,\n      WebkitFlex: value,\n      msFlex: value,\n      flex: value\n    };\n  },\n  flexBasis: function flexBasis(value) {\n    return {\n      WebkitFlexBasis: value,\n      flexBasis: value\n    };\n  },\n  justifyContent: function justifyContent(value) {\n    return {\n      WebkitJustifyContent: value,\n      justifyContent: value\n    };\n  },\n\n  transition: function transition(value) {\n    return {\n      msTransition: value,\n      MozTransition: value,\n      OTransition: value,\n      WebkitTransition: value,\n      transition: value\n    };\n  },\n\n  transform: function transform(value) {\n    return {\n      msTransform: value,\n      MozTransform: value,\n      OTransform: value,\n      WebkitTransform: value,\n      transform: value\n    };\n  },\n  absolute: function absolute(value) {\n    var direction = value && value.split(' ');\n    return {\n      position: 'absolute',\n      top: direction && direction[0],\n      right: direction && direction[1],\n      bottom: direction && direction[2],\n      left: direction && direction[3]\n    };\n  },\n  extend: function extend(name, otherElementStyles) {\n    var otherStyle = otherElementStyles[name];\n    if (otherStyle) {\n      return otherStyle;\n    }\n    return {\n      'extend': name\n    };\n  }\n};\n\nvar autoprefix = exports.autoprefix = function autoprefix(elements) {\n  var prefixed = {};\n  (0, _forOwn3.default)(elements, function (styles, element) {\n    var expanded = {};\n    (0, _forOwn3.default)(styles, function (value, key) {\n      var transform = transforms[key];\n      if (transform) {\n        expanded = _extends({}, expanded, transform(value));\n      } else {\n        expanded[key] = value;\n      }\n    });\n    prefixed[element] = expanded;\n  });\n  return prefixed;\n};\n\nexports.default = autoprefix;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.active = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar active = exports.active = function active(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';\n\n  return function (_React$Component) {\n    _inherits(Active, _React$Component);\n\n    function Active() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Active);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Active.__proto__ || Object.getPrototypeOf(Active)).call.apply(_ref, [this].concat(args))), _this), _this.state = { active: false }, _this.handleMouseDown = function () {\n        return _this.setState({ active: true });\n      }, _this.handleMouseUp = function () {\n        return _this.setState({ active: false });\n      }, _this.render = function () {\n        return _react2.default.createElement(\n          Span,\n          { onMouseDown: _this.handleMouseDown, onMouseUp: _this.handleMouseUp },\n          _react2.default.createElement(Component, _extends({}, _this.props, _this.state))\n        );\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Active;\n  }(_react2.default.Component);\n};\n\nexports.default = active;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hover = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar hover = exports.hover = function hover(Component) {\n  var Span = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'span';\n\n  return function (_React$Component) {\n    _inherits(Hover, _React$Component);\n\n    function Hover() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Hover);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Hover.__proto__ || Object.getPrototypeOf(Hover)).call.apply(_ref, [this].concat(args))), _this), _this.state = { hover: false }, _this.handleMouseOver = function () {\n        return _this.setState({ hover: true });\n      }, _this.handleMouseOut = function () {\n        return _this.setState({ hover: false });\n      }, _this.render = function () {\n        return _react2.default.createElement(\n          Span,\n          { onMouseOver: _this.handleMouseOver, onMouseOut: _this.handleMouseOut },\n          _react2.default.createElement(Component, _extends({}, _this.props, _this.state))\n        );\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    return Hover;\n  }(_react2.default.Component);\n};\n\nexports.default = hover;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.flattenNames = undefined;\n\nvar _isString2 = require('lodash/isString');\n\nvar _isString3 = _interopRequireDefault(_isString2);\n\nvar _forOwn2 = require('lodash/forOwn');\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _isPlainObject2 = require('lodash/isPlainObject');\n\nvar _isPlainObject3 = _interopRequireDefault(_isPlainObject2);\n\nvar _map2 = require('lodash/map');\n\nvar _map3 = _interopRequireDefault(_map2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar flattenNames = exports.flattenNames = function flattenNames() {\n  var things = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var names = [];\n\n  (0, _map3.default)(things, function (thing) {\n    if (Array.isArray(thing)) {\n      flattenNames(thing).map(function (name) {\n        return names.push(name);\n      });\n    } else if ((0, _isPlainObject3.default)(thing)) {\n      (0, _forOwn3.default)(thing, function (value, key) {\n        value === true && names.push(key);\n        names.push(key + '-' + value);\n      });\n    } else if ((0, _isString3.default)(thing)) {\n      names.push(thing);\n    }\n  });\n\n  return names;\n};\n\nexports.default = flattenNames;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReactCSS = exports.loop = exports.handleActive = exports.handleHover = exports.hover = undefined;\n\nvar _flattenNames = require('./flattenNames');\n\nvar _flattenNames2 = _interopRequireDefault(_flattenNames);\n\nvar _mergeClasses = require('./mergeClasses');\n\nvar _mergeClasses2 = _interopRequireDefault(_mergeClasses);\n\nvar _autoprefix = require('./autoprefix');\n\nvar _autoprefix2 = _interopRequireDefault(_autoprefix);\n\nvar _hover2 = require('./components/hover');\n\nvar _hover3 = _interopRequireDefault(_hover2);\n\nvar _active = require('./components/active');\n\nvar _active2 = _interopRequireDefault(_active);\n\nvar _loop2 = require('./loop');\n\nvar _loop3 = _interopRequireDefault(_loop2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.hover = _hover3.default;\nexports.handleHover = _hover3.default;\nexports.handleActive = _active2.default;\nexports.loop = _loop3.default;\nvar ReactCSS = exports.ReactCSS = function ReactCSS(classes) {\n  for (var _len = arguments.length, activations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    activations[_key - 1] = arguments[_key];\n  }\n\n  var activeNames = (0, _flattenNames2.default)(activations);\n  var merged = (0, _mergeClasses2.default)(classes, activeNames);\n  return (0, _autoprefix2.default)(merged);\n};\n\nexports.default = ReactCSS;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar loopable = function loopable(i, length) {\n  var props = {};\n  var setProp = function setProp(name) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    props[name] = value;\n  };\n\n  i === 0 && setProp('first-child');\n  i === length - 1 && setProp('last-child');\n  (i === 0 || i % 2 === 0) && setProp('even');\n  Math.abs(i % 2) === 1 && setProp('odd');\n  setProp('nth-child', i);\n\n  return props;\n};\n\nexports.default = loopable;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeClasses = undefined;\n\nvar _forOwn2 = require('lodash/forOwn');\n\nvar _forOwn3 = _interopRequireDefault(_forOwn2);\n\nvar _cloneDeep2 = require('lodash/cloneDeep');\n\nvar _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mergeClasses = exports.mergeClasses = function mergeClasses(classes) {\n  var activeNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var styles = classes.default && (0, _cloneDeep3.default)(classes.default) || {};\n  activeNames.map(function (name) {\n    var toMerge = classes[name];\n    if (toMerge) {\n      (0, _forOwn3.default)(toMerge, function (value, key) {\n        if (!styles[key]) {\n          styles[key] = {};\n        }\n\n        styles[key] = _extends({}, styles[key], toMerge[key]);\n      });\n    }\n\n    return name;\n  });\n  return styles;\n};\n\nexports.default = mergeClasses;","/*!\n * Signature Pad v2.3.2\n * https://github.com/szimek/signature_pad\n *\n * Copyright 2017 Szymon Nowak\n * Released under the MIT license\n *\n * The main idea and some parts of the code (e.g. drawing variable width Bézier curve) are taken from:\n * http://corner.squareup.com/2012/07/smoother-signatures.html\n *\n * Implementation of interpolation using cubic Bézier curves is taken from:\n * http://benknowscode.wordpress.com/2012/09/14/path-interpolation-using-cubic-bezier-and-control-point-estimation-in-javascript\n *\n * Algorithm for approximated length of a Bézier curve is taken from:\n * http://www.lemoda.net/maths/bezier-length/index.html\n *\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.SignaturePad = factory());\n}(this, (function () { 'use strict';\n\nfunction Point(x, y, time) {\n  this.x = x;\n  this.y = y;\n  this.time = time || new Date().getTime();\n}\n\nPoint.prototype.velocityFrom = function (start) {\n  return this.time !== start.time ? this.distanceTo(start) / (this.time - start.time) : 1;\n};\n\nPoint.prototype.distanceTo = function (start) {\n  return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));\n};\n\nPoint.prototype.equals = function (other) {\n  return this.x === other.x && this.y === other.y && this.time === other.time;\n};\n\nfunction Bezier(startPoint, control1, control2, endPoint) {\n  this.startPoint = startPoint;\n  this.control1 = control1;\n  this.control2 = control2;\n  this.endPoint = endPoint;\n}\n\n// Returns approximated length.\nBezier.prototype.length = function () {\n  var steps = 10;\n  var length = 0;\n  var px = void 0;\n  var py = void 0;\n\n  for (var i = 0; i <= steps; i += 1) {\n    var t = i / steps;\n    var cx = this._point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);\n    var cy = this._point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);\n    if (i > 0) {\n      var xdiff = cx - px;\n      var ydiff = cy - py;\n      length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);\n    }\n    px = cx;\n    py = cy;\n  }\n\n  return length;\n};\n\n/* eslint-disable no-multi-spaces, space-in-parens */\nBezier.prototype._point = function (t, start, c1, c2, end) {\n  return start * (1.0 - t) * (1.0 - t) * (1.0 - t) + 3.0 * c1 * (1.0 - t) * (1.0 - t) * t + 3.0 * c2 * (1.0 - t) * t * t + end * t * t * t;\n};\n\n/* eslint-disable */\n\n// http://stackoverflow.com/a/27078401/815507\nfunction throttle(func, wait, options) {\n  var context, args, result;\n  var timeout = null;\n  var previous = 0;\n  if (!options) options = {};\n  var later = function later() {\n    previous = options.leading === false ? 0 : Date.now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n  return function () {\n    var now = Date.now();\n    if (!previous && options.leading === false) previous = now;\n    var remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n}\n\nfunction SignaturePad(canvas, options) {\n  var self = this;\n  var opts = options || {};\n\n  this.velocityFilterWeight = opts.velocityFilterWeight || 0.7;\n  this.minWidth = opts.minWidth || 0.5;\n  this.maxWidth = opts.maxWidth || 2.5;\n  this.throttle = 'throttle' in opts ? opts.throttle : 16; // in miliseconds\n  this.minDistance = 'minDistance' in opts ? opts.minDistance : 5;\n\n  if (this.throttle) {\n    this._strokeMoveUpdate = throttle(SignaturePad.prototype._strokeUpdate, this.throttle);\n  } else {\n    this._strokeMoveUpdate = SignaturePad.prototype._strokeUpdate;\n  }\n\n  this.dotSize = opts.dotSize || function () {\n    return (this.minWidth + this.maxWidth) / 2;\n  };\n  this.penColor = opts.penColor || 'black';\n  this.backgroundColor = opts.backgroundColor || 'rgba(0,0,0,0)';\n  this.onBegin = opts.onBegin;\n  this.onEnd = opts.onEnd;\n\n  this._canvas = canvas;\n  this._ctx = canvas.getContext('2d');\n  this.clear();\n\n  // We need add these inline so they are available to unbind while still having\n  // access to 'self' we could use _.bind but it's not worth adding a dependency.\n  this._handleMouseDown = function (event) {\n    if (event.which === 1) {\n      self._mouseButtonDown = true;\n      self._strokeBegin(event);\n    }\n  };\n\n  this._handleMouseMove = function (event) {\n    if (self._mouseButtonDown) {\n      self._strokeMoveUpdate(event);\n    }\n  };\n\n  this._handleMouseUp = function (event) {\n    if (event.which === 1 && self._mouseButtonDown) {\n      self._mouseButtonDown = false;\n      self._strokeEnd(event);\n    }\n  };\n\n  this._handleTouchStart = function (event) {\n    if (event.targetTouches.length === 1) {\n      var touch = event.changedTouches[0];\n      self._strokeBegin(touch);\n    }\n  };\n\n  this._handleTouchMove = function (event) {\n    // Prevent scrolling.\n    event.preventDefault();\n\n    var touch = event.targetTouches[0];\n    self._strokeMoveUpdate(touch);\n  };\n\n  this._handleTouchEnd = function (event) {\n    var wasCanvasTouched = event.target === self._canvas;\n    if (wasCanvasTouched) {\n      event.preventDefault();\n      self._strokeEnd(event);\n    }\n  };\n\n  // Enable mouse and touch event handlers\n  this.on();\n}\n\n// Public methods\nSignaturePad.prototype.clear = function () {\n  var ctx = this._ctx;\n  var canvas = this._canvas;\n\n  ctx.fillStyle = this.backgroundColor;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  this._data = [];\n  this._reset();\n  this._isEmpty = true;\n};\n\nSignaturePad.prototype.fromDataURL = function (dataUrl) {\n  var _this = this;\n\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var image = new Image();\n  var ratio = options.ratio || window.devicePixelRatio || 1;\n  var width = options.width || this._canvas.width / ratio;\n  var height = options.height || this._canvas.height / ratio;\n\n  this._reset();\n  image.src = dataUrl;\n  image.onload = function () {\n    _this._ctx.drawImage(image, 0, 0, width, height);\n  };\n  this._isEmpty = false;\n};\n\nSignaturePad.prototype.toDataURL = function (type) {\n  var _canvas;\n\n  switch (type) {\n    case 'image/svg+xml':\n      return this._toSVG();\n    default:\n      for (var _len = arguments.length, options = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        options[_key - 1] = arguments[_key];\n      }\n\n      return (_canvas = this._canvas).toDataURL.apply(_canvas, [type].concat(options));\n  }\n};\n\nSignaturePad.prototype.on = function () {\n  this._handleMouseEvents();\n  this._handleTouchEvents();\n};\n\nSignaturePad.prototype.off = function () {\n  this._canvas.removeEventListener('mousedown', this._handleMouseDown);\n  this._canvas.removeEventListener('mousemove', this._handleMouseMove);\n  document.removeEventListener('mouseup', this._handleMouseUp);\n\n  this._canvas.removeEventListener('touchstart', this._handleTouchStart);\n  this._canvas.removeEventListener('touchmove', this._handleTouchMove);\n  this._canvas.removeEventListener('touchend', this._handleTouchEnd);\n};\n\nSignaturePad.prototype.isEmpty = function () {\n  return this._isEmpty;\n};\n\n// Private methods\nSignaturePad.prototype._strokeBegin = function (event) {\n  this._data.push([]);\n  this._reset();\n  this._strokeUpdate(event);\n\n  if (typeof this.onBegin === 'function') {\n    this.onBegin(event);\n  }\n};\n\nSignaturePad.prototype._strokeUpdate = function (event) {\n  var x = event.clientX;\n  var y = event.clientY;\n\n  var point = this._createPoint(x, y);\n  var lastPointGroup = this._data[this._data.length - 1];\n  var lastPoint = lastPointGroup && lastPointGroup[lastPointGroup.length - 1];\n  var isLastPointTooClose = lastPoint && point.distanceTo(lastPoint) < this.minDistance;\n\n  // Skip this point if it's too close to the previous one\n  if (!(lastPoint && isLastPointTooClose)) {\n    var _addPoint = this._addPoint(point),\n        curve = _addPoint.curve,\n        widths = _addPoint.widths;\n\n    if (curve && widths) {\n      this._drawCurve(curve, widths.start, widths.end);\n    }\n\n    this._data[this._data.length - 1].push({\n      x: point.x,\n      y: point.y,\n      time: point.time,\n      color: this.penColor\n    });\n  }\n};\n\nSignaturePad.prototype._strokeEnd = function (event) {\n  var canDrawCurve = this.points.length > 2;\n  var point = this.points[0]; // Point instance\n\n  if (!canDrawCurve && point) {\n    this._drawDot(point);\n  }\n\n  if (point) {\n    var lastPointGroup = this._data[this._data.length - 1];\n    var lastPoint = lastPointGroup[lastPointGroup.length - 1]; // plain object\n\n    // When drawing a dot, there's only one point in a group, so without this check\n    // such group would end up with exactly the same 2 points.\n    if (!point.equals(lastPoint)) {\n      lastPointGroup.push({\n        x: point.x,\n        y: point.y,\n        time: point.time,\n        color: this.penColor\n      });\n    }\n  }\n\n  if (typeof this.onEnd === 'function') {\n    this.onEnd(event);\n  }\n};\n\nSignaturePad.prototype._handleMouseEvents = function () {\n  this._mouseButtonDown = false;\n\n  this._canvas.addEventListener('mousedown', this._handleMouseDown);\n  this._canvas.addEventListener('mousemove', this._handleMouseMove);\n  document.addEventListener('mouseup', this._handleMouseUp);\n};\n\nSignaturePad.prototype._handleTouchEvents = function () {\n  // Pass touch events to canvas element on mobile IE11 and Edge.\n  this._canvas.style.msTouchAction = 'none';\n  this._canvas.style.touchAction = 'none';\n\n  this._canvas.addEventListener('touchstart', this._handleTouchStart);\n  this._canvas.addEventListener('touchmove', this._handleTouchMove);\n  this._canvas.addEventListener('touchend', this._handleTouchEnd);\n};\n\nSignaturePad.prototype._reset = function () {\n  this.points = [];\n  this._lastVelocity = 0;\n  this._lastWidth = (this.minWidth + this.maxWidth) / 2;\n  this._ctx.fillStyle = this.penColor;\n};\n\nSignaturePad.prototype._createPoint = function (x, y, time) {\n  var rect = this._canvas.getBoundingClientRect();\n\n  return new Point(x - rect.left, y - rect.top, time || new Date().getTime());\n};\n\nSignaturePad.prototype._addPoint = function (point) {\n  var points = this.points;\n  var tmp = void 0;\n\n  points.push(point);\n\n  if (points.length > 2) {\n    // To reduce the initial lag make it work with 3 points\n    // by copying the first point to the beginning.\n    if (points.length === 3) points.unshift(points[0]);\n\n    tmp = this._calculateCurveControlPoints(points[0], points[1], points[2]);\n    var c2 = tmp.c2;\n    tmp = this._calculateCurveControlPoints(points[1], points[2], points[3]);\n    var c3 = tmp.c1;\n    var curve = new Bezier(points[1], c2, c3, points[2]);\n    var widths = this._calculateCurveWidths(curve);\n\n    // Remove the first element from the list,\n    // so that we always have no more than 4 points in points array.\n    points.shift();\n\n    return { curve: curve, widths: widths };\n  }\n\n  return {};\n};\n\nSignaturePad.prototype._calculateCurveControlPoints = function (s1, s2, s3) {\n  var dx1 = s1.x - s2.x;\n  var dy1 = s1.y - s2.y;\n  var dx2 = s2.x - s3.x;\n  var dy2 = s2.y - s3.y;\n\n  var m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };\n  var m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };\n\n  var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n  var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n\n  var dxm = m1.x - m2.x;\n  var dym = m1.y - m2.y;\n\n  var k = l2 / (l1 + l2);\n  var cm = { x: m2.x + dxm * k, y: m2.y + dym * k };\n\n  var tx = s2.x - cm.x;\n  var ty = s2.y - cm.y;\n\n  return {\n    c1: new Point(m1.x + tx, m1.y + ty),\n    c2: new Point(m2.x + tx, m2.y + ty)\n  };\n};\n\nSignaturePad.prototype._calculateCurveWidths = function (curve) {\n  var startPoint = curve.startPoint;\n  var endPoint = curve.endPoint;\n  var widths = { start: null, end: null };\n\n  var velocity = this.velocityFilterWeight * endPoint.velocityFrom(startPoint) + (1 - this.velocityFilterWeight) * this._lastVelocity;\n\n  var newWidth = this._strokeWidth(velocity);\n\n  widths.start = this._lastWidth;\n  widths.end = newWidth;\n\n  this._lastVelocity = velocity;\n  this._lastWidth = newWidth;\n\n  return widths;\n};\n\nSignaturePad.prototype._strokeWidth = function (velocity) {\n  return Math.max(this.maxWidth / (velocity + 1), this.minWidth);\n};\n\nSignaturePad.prototype._drawPoint = function (x, y, size) {\n  var ctx = this._ctx;\n\n  ctx.moveTo(x, y);\n  ctx.arc(x, y, size, 0, 2 * Math.PI, false);\n  this._isEmpty = false;\n};\n\nSignaturePad.prototype._drawCurve = function (curve, startWidth, endWidth) {\n  var ctx = this._ctx;\n  var widthDelta = endWidth - startWidth;\n  var drawSteps = Math.floor(curve.length());\n\n  ctx.beginPath();\n\n  for (var i = 0; i < drawSteps; i += 1) {\n    // Calculate the Bezier (x, y) coordinate for this step.\n    var t = i / drawSteps;\n    var tt = t * t;\n    var ttt = tt * t;\n    var u = 1 - t;\n    var uu = u * u;\n    var uuu = uu * u;\n\n    var x = uuu * curve.startPoint.x;\n    x += 3 * uu * t * curve.control1.x;\n    x += 3 * u * tt * curve.control2.x;\n    x += ttt * curve.endPoint.x;\n\n    var y = uuu * curve.startPoint.y;\n    y += 3 * uu * t * curve.control1.y;\n    y += 3 * u * tt * curve.control2.y;\n    y += ttt * curve.endPoint.y;\n\n    var width = startWidth + ttt * widthDelta;\n    this._drawPoint(x, y, width);\n  }\n\n  ctx.closePath();\n  ctx.fill();\n};\n\nSignaturePad.prototype._drawDot = function (point) {\n  var ctx = this._ctx;\n  var width = typeof this.dotSize === 'function' ? this.dotSize() : this.dotSize;\n\n  ctx.beginPath();\n  this._drawPoint(point.x, point.y, width);\n  ctx.closePath();\n  ctx.fill();\n};\n\nSignaturePad.prototype._fromData = function (pointGroups, drawCurve, drawDot) {\n  for (var i = 0; i < pointGroups.length; i += 1) {\n    var group = pointGroups[i];\n\n    if (group.length > 1) {\n      for (var j = 0; j < group.length; j += 1) {\n        var rawPoint = group[j];\n        var point = new Point(rawPoint.x, rawPoint.y, rawPoint.time);\n        var color = rawPoint.color;\n\n        if (j === 0) {\n          // First point in a group. Nothing to draw yet.\n\n          // All points in the group have the same color, so it's enough to set\n          // penColor just at the beginning.\n          this.penColor = color;\n          this._reset();\n\n          this._addPoint(point);\n        } else if (j !== group.length - 1) {\n          // Middle point in a group.\n          var _addPoint2 = this._addPoint(point),\n              curve = _addPoint2.curve,\n              widths = _addPoint2.widths;\n\n          if (curve && widths) {\n            drawCurve(curve, widths, color);\n          }\n        } else {\n          // Last point in a group. Do nothing.\n        }\n      }\n    } else {\n      this._reset();\n      var _rawPoint = group[0];\n      drawDot(_rawPoint);\n    }\n  }\n};\n\nSignaturePad.prototype._toSVG = function () {\n  var _this2 = this;\n\n  var pointGroups = this._data;\n  var canvas = this._canvas;\n  var ratio = Math.max(window.devicePixelRatio || 1, 1);\n  var minX = 0;\n  var minY = 0;\n  var maxX = canvas.width / ratio;\n  var maxY = canvas.height / ratio;\n  var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n\n  svg.setAttributeNS(null, 'width', canvas.width);\n  svg.setAttributeNS(null, 'height', canvas.height);\n\n  this._fromData(pointGroups, function (curve, widths, color) {\n    var path = document.createElement('path');\n\n    // Need to check curve for NaN values, these pop up when drawing\n    // lines on the canvas that are not continuous. E.g. Sharp corners\n    // or stopping mid-stroke and than continuing without lifting mouse.\n    if (!isNaN(curve.control1.x) && !isNaN(curve.control1.y) && !isNaN(curve.control2.x) && !isNaN(curve.control2.y)) {\n      var attr = 'M ' + curve.startPoint.x.toFixed(3) + ',' + curve.startPoint.y.toFixed(3) + ' ' + ('C ' + curve.control1.x.toFixed(3) + ',' + curve.control1.y.toFixed(3) + ' ') + (curve.control2.x.toFixed(3) + ',' + curve.control2.y.toFixed(3) + ' ') + (curve.endPoint.x.toFixed(3) + ',' + curve.endPoint.y.toFixed(3));\n\n      path.setAttribute('d', attr);\n      path.setAttribute('stroke-width', (widths.end * 2.25).toFixed(3));\n      path.setAttribute('stroke', color);\n      path.setAttribute('fill', 'none');\n      path.setAttribute('stroke-linecap', 'round');\n\n      svg.appendChild(path);\n    }\n  }, function (rawPoint) {\n    var circle = document.createElement('circle');\n    var dotSize = typeof _this2.dotSize === 'function' ? _this2.dotSize() : _this2.dotSize;\n    circle.setAttribute('r', dotSize);\n    circle.setAttribute('cx', rawPoint.x);\n    circle.setAttribute('cy', rawPoint.y);\n    circle.setAttribute('fill', rawPoint.color);\n\n    svg.appendChild(circle);\n  });\n\n  var prefix = 'data:image/svg+xml;base64,';\n  var header = '<svg' + ' xmlns=\"http://www.w3.org/2000/svg\"' + ' xmlns:xlink=\"http://www.w3.org/1999/xlink\"' + (' viewBox=\"' + minX + ' ' + minY + ' ' + maxX + ' ' + maxY + '\"') + (' width=\"' + maxX + '\"') + (' height=\"' + maxY + '\"') + '>';\n  var body = svg.innerHTML;\n\n  // IE hack for missing innerHTML property on SVGElement\n  if (body === undefined) {\n    var dummy = document.createElement('dummy');\n    var nodes = svg.childNodes;\n    dummy.innerHTML = '';\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      dummy.appendChild(nodes[i].cloneNode(true));\n    }\n\n    body = dummy.innerHTML;\n  }\n\n  var footer = '</svg>';\n  var data = header + body + footer;\n\n  return prefix + btoa(data);\n};\n\nSignaturePad.prototype.fromData = function (pointGroups) {\n  var _this3 = this;\n\n  this.clear();\n\n  this._fromData(pointGroups, function (curve, widths) {\n    return _this3._drawCurve(curve, widths.start, widths.end);\n  }, function (rawPoint) {\n    return _this3._drawDot(rawPoint);\n  });\n\n  this._data = pointGroups;\n};\n\nSignaturePad.prototype.toData = function () {\n  return this._data;\n};\n\nreturn SignaturePad;\n\n})));\n","// TinyColor v1.4.2\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (typeof define === 'function' && define.amd) {\n    define(function () {return tinycolor;});\n}\n// Browser: Expose to window\nelse {\n    window.tinycolor = tinycolor;\n}\n\n})(Math);\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.trimCanvas=t():e.trimCanvas=t()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var r={};return t.m=e,t.c=r,t.p=\"\",t(0)}([function(e,t){\"use strict\";function r(e){var t=e.getContext(\"2d\"),r=e.width,n=e.height,o=t.getImageData(0,0,r,n).data,f=a(!0,r,n,o),i=a(!1,r,n,o),c=u(!0,r,n,o),d=u(!1,r,n,o),p=d-c+1,l=i-f+1,s=t.getImageData(c,f,p,l);return e.width=p,e.height=l,t.clearRect(0,0,p,l),t.putImageData(s,0,0),e}function n(e,t,r,n){return{red:n[4*(r*t+e)],green:n[4*(r*t+e)+1],blue:n[4*(r*t+e)+2],alpha:n[4*(r*t+e)+3]}}function o(e,t,r,o){return n(e,t,r,o).alpha}function a(e,t,r,n){for(var a=e?1:-1,u=e?0:r-1,f=u;e?f<r:f>-1;f+=a)for(var i=0;i<t;i++)if(o(i,f,t,n))return f;return null}function u(e,t,r,n){for(var a=e?1:-1,u=e?0:t-1,f=u;e?f<t:f>-1;f+=a)for(var i=0;i<r;i++)if(o(f,i,t,n))return f;return null}Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=r}])});"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJleHRlbnNpb25zL2t1ZG9zL2FkbWluL3dlYi9qcy9jb250cm9sbGVyLmpzIiwiZXh0ZW5zaW9ucy9rdWRvcy9hZG1pbi93ZWIvanMvaW5kZXguanMiLCJleHRlbnNpb25zL2t1ZG9zL2FkbWluL3dlYi9qcy9tb2R1bGUuanMiLCJleHRlbnNpb25zL2t1ZG9zL2FkbWluL3dlYi9qcy92aWV3LmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYi9hcGktY29tbW9uL1JlcXVlc3RDYWNoZS5qcyIsIndlYi9hcGkvQWRhcHRlckJhc2UuanMiLCJ3ZWIvYXBpL0V4dGVuc2lvbkNvbnRyb2xsZXIuanMiLCJ3ZWIvYXBpL0V4dGVuc2lvbk1vZHVsZUJhc2UuanMiLCJ3ZWIvYXBpL0Zvcm1WYWxpZGF0aW9uLmpzIiwid2ViL2FwaS9JY2VBcGlDbGllbnQuanMiLCJ3ZWIvYXBpL0ljZVJlc3BvbnNlLmpzIiwid2ViL2FwaS9NYXN0ZXJEYXRhUmVhZGVyLmpzIiwid2ViL2FwaS9Nb2R1bGVCYXNlLmpzIiwid2ViL2FwaS9SZWFjdE1vZGFsQWRhcHRlckJhc2UuanMiLCJ3ZWIvY29tcG9uZW50cy9JY2VDb2xvclBpY2suanMiLCJ3ZWIvY29tcG9uZW50cy9JY2VEYXRhR3JvdXAuanMiLCJ3ZWIvY29tcG9uZW50cy9JY2VFZGl0b3IuanMiLCJ3ZWIvY29tcG9uZW50cy9JY2VGb3JtLmpzIiwid2ViL2NvbXBvbmVudHMvSWNlRm9ybU1vZGFsLmpzIiwid2ViL2NvbXBvbmVudHMvSWNlTGFiZWwuanMiLCJ3ZWIvY29tcG9uZW50cy9JY2VTZWxlY3QuanMiLCJ3ZWIvY29tcG9uZW50cy9JY2VTaWduYXR1cmUuanMiLCJ3ZWIvY29tcG9uZW50cy9JY2VTdGVwRm9ybS5qcyIsIndlYi9jb21wb25lbnRzL0ljZVN0ZXBGcm9tTW9kYWwuanMiLCJ3ZWIvY29tcG9uZW50cy9JY2VUYWJsZS5qcyIsIndlYi9jb21wb25lbnRzL0ljZVVwbG9hZC5qcyIsIndlYi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2NoZWNrbGlzdC9kaXN0L2J1bmRsZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2NvZGUvZGlzdC9idW5kbGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL0BlZGl0b3Jqcy9lZGl0b3Jqcy9kaXN0L2VkaXRvci5qcyIsIndlYi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2VtYmVkL2Rpc3QvYnVuZGxlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9AZWRpdG9yanMvaGVhZGVyL2Rpc3QvYnVuZGxlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9AZWRpdG9yanMvaW5saW5lLWNvZGUvZGlzdC9idW5kbGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL0BlZGl0b3Jqcy9saXN0L2Rpc3QvYnVuZGxlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9AZWRpdG9yanMvbWFya2VyL2Rpc3QvYnVuZGxlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9AZWRpdG9yanMvcGFyYWdyYXBoL2Rpc3QvYnVuZGxlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9AZWRpdG9yanMvcXVvdGUvZGlzdC9idW5kbGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL0BlZGl0b3Jqcy9yYXcvZGlzdC9idW5kbGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL0BlZGl0b3Jqcy90YWJsZS9kaXN0L2J1bmRsZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvQGljb25zL21hdGVyaWFsL0NoZWNrSWNvbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvQGljb25zL21hdGVyaWFsL1VuZm9sZE1vcmVIb3Jpem9udGFsSWNvbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2ViL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2ViL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2ViL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2ViL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2ViL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fUHJvbWlzZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0Q2FjaGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fV2Vha01hcC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcHBseS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUVhY2guanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlGaWx0ZXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheU1hcC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlTb21lLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc2lnbk1lcmdlVmFsdWUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduVmFsdWUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzb2NJbmRleE9mLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ24uanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnbkluLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ25WYWx1ZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ2xvbmUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNyZWF0ZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRWFjaC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRm9yLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc01hcC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzU2V0LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUl0ZXJhdGVlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzSW4uanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hcC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlcy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNZXJnZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWVyZ2VEZWVwLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUHJvcGVydHlEZWVwLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VSZXN0LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTZXRUb1N0cmluZy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRvU3RyaW5nLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYWNoZUhhcy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0RnVuY3Rpb24uanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFBhdGguanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVBcnJheUJ1ZmZlci5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUJ1ZmZlci5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZURhdGFWaWV3LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lUmVnRXhwLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lU3ltYm9sLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lVHlwZWRBcnJheS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29weU9iamVjdC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9scy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9sc0luLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQXNzaWduZXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUVhY2guanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUZvci5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5c0luLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWF0Y2hEYXRhLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRQcm90b3R5cGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UmF3VGFnLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9sc0luLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNQYXRoLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZUFycmF5LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZUJ5VGFnLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSXRlcmF0ZWVDYWxsLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19tZW1vaXplQ2FwcGVkLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXNJbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyQXJnLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJSZXN0LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2FmZUdldC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUFkZC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb0FycmF5LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvU3RyaW5nLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Nob3J0T3V0LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrQ2xlYXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tIYXMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nVG9QYXRoLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvS2V5LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xvbmVEZWVwLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvY29uc3RhbnQuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9kZWJvdW5jZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL2VhY2guanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL2ZvckVhY2guanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9mb3JPd24uanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9nZXQuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9oYXNJbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL2lkZW50aXR5LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZU9iamVjdC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNNYXAuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1NldC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3RyaW5nLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1VuZGVmaW5lZC5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9tYXAuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9tZW1vaXplLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVyZ2UuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9ub3cuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC9wcm9wZXJ0eS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJBcnJheS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvbG9kYXNoL3Rocm90dGxlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9OdW1iZXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL2xvZGFzaC90b1BsYWluT2JqZWN0LmpzIiwid2ViL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9TdHJpbmcuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL21hdGVyaWFsLWNvbG9ycy9kaXN0L2NvbG9ycy5qcyIsIndlYi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcy5qcyIsIndlYi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9hbHBoYS9BbHBoYS5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvYWxwaGEvQWxwaGFQb2ludGVyLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9ibG9jay9CbG9jay5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvYmxvY2svQmxvY2tTd2F0Y2hlcy5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY2hyb21lL0Nocm9tZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY2hyb21lL0Nocm9tZUZpZWxkcy5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY2hyb21lL0Nocm9tZVBvaW50ZXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2Nocm9tZS9DaHJvbWVQb2ludGVyQ2lyY2xlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jaXJjbGUvQ2lyY2xlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jaXJjbGUvQ2lyY2xlU3dhdGNoLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jb21tb24vQWxwaGEuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2NvbW1vbi9DaGVja2JvYXJkLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jb21tb24vQ29sb3JXcmFwLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jb21tb24vRWRpdGFibGVJbnB1dC5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tbW9uL0h1ZS5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tbW9uL1JhaXNlZC5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tbW9uL1NhdHVyYXRpb24uanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2NvbW1vbi9Td2F0Y2guanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2NvbW1vbi9pbmRleC5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tcGFjdC9Db21wYWN0LmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9jb21wYWN0L0NvbXBhY3RDb2xvci5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvY29tcGFjdC9Db21wYWN0RmllbGRzLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9naXRodWIvR2l0aHViLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9naXRodWIvR2l0aHViU3dhdGNoLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9nb29nbGUvR29vZ2xlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9nb29nbGUvR29vZ2xlRmllbGRzLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9nb29nbGUvR29vZ2xlUG9pbnRlci5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvZ29vZ2xlL0dvb2dsZVBvaW50ZXJDaXJjbGUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2h1ZS9IdWUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL2h1ZS9IdWVQb2ludGVyLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9tYXRlcmlhbC9NYXRlcmlhbC5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvcGhvdG9zaG9wL1Bob3Rvc2hvcC5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvcGhvdG9zaG9wL1Bob3Rvc2hvcEJ1dHRvbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvcGhvdG9zaG9wL1Bob3Rvc2hvcEZpZWxkcy5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2NvbXBvbmVudHMvcGhvdG9zaG9wL1Bob3Rvc2hvcFBvaW50ZXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3Bob3Rvc2hvcC9QaG90b3Nob3BQb2ludGVyQ2lyY2xlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9waG90b3Nob3AvUGhvdG9zaG9wUHJldmlld3MuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3NrZXRjaC9Ta2V0Y2guanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3NrZXRjaC9Ta2V0Y2hGaWVsZHMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3NrZXRjaC9Ta2V0Y2hQcmVzZXRDb2xvcnMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3NsaWRlci9TbGlkZXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3NsaWRlci9TbGlkZXJQb2ludGVyLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9zbGlkZXIvU2xpZGVyU3dhdGNoLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9zbGlkZXIvU2xpZGVyU3dhdGNoZXMuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9jb21wb25lbnRzL3N3YXRjaGVzL1N3YXRjaGVzLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9zd2F0Y2hlcy9Td2F0Y2hlc0NvbG9yLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy9zd2F0Y2hlcy9Td2F0Y2hlc0dyb3VwLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvY29tcG9uZW50cy90d2l0dGVyL1R3aXR0ZXIuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWNvbG9yL2xpYi9oZWxwZXJzL2FscGhhLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvaGVscGVycy9jaGVja2JvYXJkLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvaGVscGVycy9jb2xvci5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2hlbHBlcnMvaHVlLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1jb2xvci9saWIvaGVscGVycy9pbnRlcmFjdGlvbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2hlbHBlcnMvc2F0dXJhdGlvbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtY29sb3IvbGliL2luZGV4LmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0LXNpZ25hdHVyZS1jYW52YXMvYnVpbGQvaW5kZXguanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0Y3NzL2xpYi9hdXRvcHJlZml4LmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdGNzcy9saWIvY29tcG9uZW50cy9hY3RpdmUuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0Y3NzL2xpYi9jb21wb25lbnRzL2hvdmVyLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdGNzcy9saWIvZmxhdHRlbk5hbWVzLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdGNzcy9saWIvaW5kZXguanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3JlYWN0Y3NzL2xpYi9sb29wLmpzIiwid2ViL25vZGVfbW9kdWxlcy9yZWFjdGNzcy9saWIvbWVyZ2VDbGFzc2VzLmpzIiwid2ViL25vZGVfbW9kdWxlcy9zaWduYXR1cmVfcGFkL2Rpc3Qvc2lnbmF0dXJlX3BhZC5qcyIsIndlYi9ub2RlX21vZHVsZXMvdGlueWNvbG9yMi90aW55Y29sb3IuanMiLCJ3ZWIvbm9kZV9tb2R1bGVzL3RyaW0tY2FudmFzL2J1aWxkL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQ0FBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUVNLDZCOzs7Ozs7Ozs7Ozs7O3VDQUNlO0FBQ2pCOzs7QUFHQSxXQUFLLGFBQUwsQ0FDRSxZQURGLEVBRUU7QUFBRSxRQUFBLElBQUksRUFBRTtBQUFSLE9BRkYsRUFHRSxJQUhGLENBR08sVUFBQyxRQUFELEVBQWM7QUFDbkIsUUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLFFBQVo7QUFDRCxPQUxEO0FBTUQ7Ozs4Q0FFeUI7QUFDeEI7OztBQUlBO0FBQ0EsV0FBSyxZQUFMLEdBQW9CLEdBQXBCLENBQXdCLFlBQXhCLEVBQXNDLElBQXRDLENBQTJDLFVBQUMsUUFBRCxFQUFjO0FBQ3ZELFFBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxxQ0FBWjtBQUNBLFFBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxR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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25GQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMxRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvTEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMxRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUN0R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDaEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQy9rQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDek5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxV0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25NQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM01BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDak5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDbEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNyTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNQQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzcUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiaW1wb3J0IEV4dGVuc2lvbkNvbnRyb2xsZXIgZnJvbSAnLi4vLi4vLi4vLi4vLi4vd2ViL2FwaS9FeHRlbnNpb25Db250cm9sbGVyJztcblxuY2xhc3MgS3Vkb3NBZG1pbkV4dGVuc2lvbkNvbnRyb2xsZXIgZXh0ZW5kcyBFeHRlbnNpb25Db250cm9sbGVyIHtcbiAgaGFuZGxlVGVzdEFjdGlvbigpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYHRlc3RBY3Rpb25gIHNob3VsZCBiZSBkZWZpbmVkIGluIHRoZSBgQ29udHJvbGxlci5waHBgIGNsYXNzXG4gICAgICovXG4gICAgdGhpcy5oYW5kbGVSZXF1ZXN0KFxuICAgICAgJ3Rlc3RBY3Rpb24nLFxuICAgICAgeyBkYXRhOiAnbWVzc2FnZSBmcm9tIGNsaWVudCcgfSxcbiAgICApLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgfSk7XG4gIH1cblxuICBtYWtlU29tZVRlc3RBcGlSZXF1ZXN0cygpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgZW5kcG9pbnRzIGFyZSBkZWZpbmVkIGluIEFwaUNvbnRyb2xsZXIucGhwXG4gICAgICovXG5cbiAgICAvLyBNYWtpbmcgYSBzaW1wbGUgR0VUIHJlcXVlc3RcbiAgICB0aGlzLmdldEFwaUNsaWVudCgpLmdldCgna3Vkb3MvZWNobycpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnUmVzcG9uc2UgdG8ga3Vkb3MvZWNobyBHRVQgcmVxdWVzdDonKTtcbiAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIC8vIE1ha2luZyBhIHNpbXBsZSBQT1NUIHJlcXVlc3RcbiAgICB0aGlzLmdldEFwaUNsaWVudCgpLnBvc3QoJ2t1ZG9zL2VjaG8nLCB7IGJyb3dzZXJUaW1lOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnUmVzcG9uc2UgdG8ga3Vkb3MvZWNobyBQT1NUIHJlcXVlc3Q6Jyk7XG4gICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEt1ZG9zQWRtaW5FeHRlbnNpb25Db250cm9sbGVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBLdWRvc0FkbWluRXh0ZW5zaW9uQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IEt1ZG9zQWRtaW5Nb2R1bGUgZnJvbSAnLi9tb2R1bGUnO1xuXG5mdW5jdGlvbiBpbml0KGRhdGEpIHtcbiAgLy8gRXhwb3NpbmcgbW9kSnNMaXN0IGFuZCBtb2RKcyBpcyByZXF1aXJlZCB0byBtYWtlIHN1cmUgSWNlSHJtIGNvcmUgZmVhdHVyZXNcbiAgLy8gYXJlIHdvcmtpbmcgYXMgZXhwZWN0ZWRcbiAgd2luZG93Lm1vZEpzTGlzdCA9IFtdO1xuICB3aW5kb3cubW9kSnMgPSBuZXcgS3Vkb3NBZG1pbk1vZHVsZSgnS3Vkb3NBZG1pbicpO1xuICB3aW5kb3cubW9kSnNMaXN0LnB1c2god2luZG93Lm1vZEpzKTtcblxuICAvLyBEZWZpbmluZyBhIGNvbnRyb2xsZXIgdG8gaGFuZGxlIHJlcXVlc3RzIGZyb20gdGhlIGV4dGVuc2lvblxuICB3aW5kb3cua3Vkb3NFeHRlbnNpb25Db250cm9sbGVyID0gbmV3IEt1ZG9zQWRtaW5FeHRlbnNpb25Db250cm9sbGVyKFxuICAgICdhZG1pbj1rdWRvcycsXG4gICAgZGF0YS5jb250cm9sbGVyX3VybCxcbiAgKTtcbn1cblxud2luZG93LmluaXRLdWRvc0FkbWluID0gaW5pdDtcbiIsIi8qKlxuICogRWFjaCBleHRlbnNpb24gc2hvdWxkIGRlZmluZSBhbmQgZXhwb3NlIGEgbW9kdWxlIGNsYXNzIGV4dGVuZGluZyBgRXh0ZW5zaW9uTW9kdWxlQmFzZWAuXG4gKiBUaGlzIGlzIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBleHRlbnNpb24gaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBjb3JlIGZlYXR1cmVzIG9mIEljZUhybS5cbiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgRXh0ZW5zaW9uTW9kdWxlQmFzZSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vd2ViL2FwaS9FeHRlbnNpb25Nb2R1bGVCYXNlXCI7XG5pbXBvcnQgS3Vkb3NBZG1pbkV4dGVuc2lvblZpZXcgZnJvbSBcIi4vdmlld1wiO1xuXG5jbGFzcyBLdWRvc0FkbWluTW9kdWxlIGV4dGVuZHMgRXh0ZW5zaW9uTW9kdWxlQmFzZSB7XG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgdXNlZCB0byBtb3VudCB0aGUgUmVhY3QgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciB0aGUgZXh0ZW5zaW9uIHZpZXcuXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIGFmdGVyIEljZUhybSBjb3JlIGFuZCBmcm9udGVuZCBpcyBsb2FkZWQuXG4gICAqL1xuICBzaG93RXh0ZW5zaW9uVmlldygpIHtcbiAgICAvLyBNb3VudGluZyB5b3VyIGV4dGVuc2lvblxuICAgIC8vIFRoZSBET00gZWxlbWVudCB3aXRoIGlkIGBjb250ZW50YCBpcyBkZWZpbmVkIGluIHRoZSBgaW5kZXgucGhwYCBmaWxlIG9mIHRoZSBleHRlbnNpb25cbiAgICBSZWFjdERPTS5yZW5kZXIoPEt1ZG9zQWRtaW5FeHRlbnNpb25WaWV3IC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpKTtcblxuICAgIC8vIENhbGxpbmcgYSBtZXRob2QgaW4gdGhlIGNvbnRyb2xsZXIgKGp1c3QgdG8gc2hvdyBob3cgaXQgd29ya3MpXG4gICAgd2luZG93Lmt1ZG9zRXh0ZW5zaW9uQ29udHJvbGxlci5oYW5kbGVUZXN0QWN0aW9uKCk7XG5cbiAgICAvLyBTZW5kaW5nIHNvbWUgdGVzdCBhcGkgcmVxdWVzdHMgdG8gZW5kcG9pbnRzIGRlZmluZWQgaW4gQXBpQ29udHJvbGxlci5waHBcbiAgICB3aW5kb3cua3Vkb3NFeHRlbnNpb25Db250cm9sbGVyLm1ha2VTb21lVGVzdEFwaVJlcXVlc3RzKCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgS3Vkb3NBZG1pbk1vZHVsZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBFbXB0eSB9IGZyb20gJ2FudGQnO1xuXG5jbGFzcyBLdWRvc0FkbWluRXh0ZW5zaW9uVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEVtcHR5XG4gICAgICAgIGRlc2NyaXB0aW9uPXsoXG4gICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICBTdGF0aW5nIHBvaW50IHRvIGJ1aWxkIGFuIGF3ZXNvbWUgSWNlSHJtIGV4dGVuc2lvbi5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICl9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgS3Vkb3NBZG1pbkV4dGVuc2lvblZpZXc7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLypcbiBDb3B5cmlnaHQgKGMpIDIwMTggW0dsYWNpZXMgVUcsIEJlcmxpbiwgR2VybWFueV0gKGh0dHA6Ly9nbGFjaWVzLmRlKVxuIERldmVsb3BlcjogVGhpbGluYSBIYXNhbnRoYSAoaHR0cDovL2xrLmxpbmtlZGluLmNvbS9pbi90aGlsaW5haCB8IGh0dHBzOi8vZ2l0aHViLmNvbS90aGlsaW5haClcbiAqL1xuXG4vKipcbiAqIFJlcXVlc3RDYWNoZVxuICovXG5cbmNsYXNzIE1lbW9yeVN0b3JhZ2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgfVxuXG4gIGdldEl0ZW0oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldO1xuICB9XG5cbiAgc2V0SXRlbShrZXksIGRhdGEpIHtcbiAgICB0aGlzLmRhdGFba2V5XSA9IGRhdGE7XG4gIH1cblxuICByZW1vdmVBbGxCeVByZWZpeChwcmVmaXgpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5kYXRhKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChrZXlzW2ldLmluZGV4T2YocHJlZml4KSA+IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuZGF0YVtrZXlzW2ldXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5jbGFzcyBSZXF1ZXN0Q2FjaGUge1xuICBjb25zdHJ1Y3RvcihzdG9yYWdlKSB7XG4gICAgaWYgKCFzdG9yYWdlKSB7XG4gICAgICB0aGlzLnN0b3JhZ2UgPSBuZXcgTWVtb3J5U3RvcmFnZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICAgIH1cbiAgfVxuXG4gIGdldEtleSh1cmwsIHBhcmFtcykge1xuICAgIGxldCBrZXkgPSBgJHt1cmx9fGA7XG4gICAgZm9yIChjb25zdCBpbmRleCBpbiBwYXJhbXMpIHtcbiAgICAgIGtleSArPSBgJHtpbmRleH09JHtwYXJhbXNbaW5kZXhdfXxgO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9XG5cbiAgLypcbiAgaW52YWxpZGF0ZVRhYmxlKHRhYmxlKSB7XG4gICAgbGV0IGtleTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RvcmFnZS5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gdGhpcy5zdG9yYWdlLmtleShpKTtcbiAgICAgIGlmIChrZXkuaW5kZXhPZihgdD0ke3RhYmxlfWApID4gMCkge1xuICAgICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAqL1xuXG4gIGludmFsaWRhdGVUYWJsZSh0YWJsZSkge1xuICAgIHRoaXMuc3RvcmFnZS5yZW1vdmVBbGxCeVByZWZpeChgdD0ke3RhYmxlfWApO1xuICB9XG5cblxuICBnZXREYXRhKGtleSkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgIGlmICghZGF0YSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBzZXREYXRhKGtleSwgZGF0YSkge1xuXG4gICAgaWYgKGRhdGEuc3RhdHVzICE9PSB1bmRlZmluZWQgJiYgZGF0YS5zdGF0dXMgIT0gbnVsbCAmJiBkYXRhLnN0YXR1cyAhPT0gJ1NVQ0NFU1MnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5zdG9yYWdlLnNldEl0ZW0oa2V5LCBkYXRhKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZXF1ZXN0Q2FjaGU7XG4iLCIvKiBnbG9iYWwgYmFzZVVybCwgY2xpZW50VXJsICovXG4vKlxuICAgQ29weXJpZ2h0IChjKSAyMDE4IFtHbGFjaWVzIFVHLCBCZXJsaW4sIEdlcm1hbnldIChodHRwOi8vZ2xhY2llcy5kZSlcbiBEZXZlbG9wZXI6IFRoaWxpbmEgSGFzYW50aGEgKGh0dHA6Ly9say5saW5rZWRpbi5jb20vaW4vdGhpbGluYWggfCBodHRwczovL2dpdGh1Yi5jb20vdGhpbGluYWgpXG4gKi9cblxuaW1wb3J0IEljZUFwaUNsaWVudCBmcm9tICcuL0ljZUFwaUNsaWVudCc7XG5pbXBvcnQgTW9kdWxlQmFzZSBmcm9tICcuL01vZHVsZUJhc2UnO1xuaW1wb3J0IFJlcXVlc3RDYWNoZSBmcm9tICcuLi9hcGktY29tbW9uL1JlcXVlc3RDYWNoZSc7XG5pbXBvcnQgTWFzdGVyRGF0YVJlYWRlciBmcm9tICcuL01hc3RlckRhdGFSZWFkZXInO1xuXG5jbGFzcyBBZGFwdGVyQmFzZSBleHRlbmRzIE1vZHVsZUJhc2Uge1xuICBjb25zdHJ1Y3RvcihlbmRQb2ludCwgdGFiLCBmaWx0ZXIsIG9yZGVyQnkpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubW9kdWxlUmVsYXRpdmVVUkwgPSBudWxsO1xuICAgIHRoaXMudGFibGVEYXRhID0gW107XG4gICAgdGhpcy5zb3VyY2VEYXRhID0gW107XG4gICAgdGhpcy5maWx0ZXIgPSBudWxsO1xuICAgIHRoaXMub3JpZ0ZpbHRlciA9IG51bGw7XG4gICAgdGhpcy5vcmRlckJ5ID0gbnVsbDtcbiAgICB0aGlzLmN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLnRpdGxlID0gbnVsbDtcbiAgICB0aGlzLmluaXRBZGFwdGVyKGVuZFBvaW50LCB0YWIsIGZpbHRlciwgb3JkZXJCeSk7XG4gIH1cblxuICBpbml0QWRhcHRlcihlbmRQb2ludCwgdGFiLCBmaWx0ZXIsIG9yZGVyQnkpIHtcbiAgICB0aGlzLm1vZHVsZVJlbGF0aXZlVVJMID0gYmFzZVVybDtcbiAgICB0aGlzLnRhYmxlID0gZW5kUG9pbnQ7XG4gICAgaWYgKHRhYiA9PT0gdW5kZWZpbmVkIHx8IHRhYiA9PT0gbnVsbCkge1xuICAgICAgdGhpcy50YWIgPSBlbmRQb2ludDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50YWIgPSB0YWI7XG4gICAgfVxuXG4gICAgaWYgKGZpbHRlciA9PT0gdW5kZWZpbmVkIHx8IGZpbHRlciA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5maWx0ZXIgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICB0aGlzLm9yaWdGaWx0ZXIgPSB0aGlzLmZpbHRlcjtcblxuICAgIGlmIChvcmRlckJ5ID09PSB1bmRlZmluZWQgfHwgb3JkZXJCeSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5vcmRlckJ5ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICB9XG5cbiAgICB0aGlzLnRyYWNrRXZlbnQoJ2luaXRBZGFwdGVyJywgdGFiKTtcblxuICAgIHRoaXMucmVxdWVzdENhY2hlID0gbmV3IFJlcXVlc3RDYWNoZSgpO1xuICB9XG5cbiAgaW5pdE1hc3RlckRhdGFSZWFkZXIoKSB7XG4gICAgdGhpcy5tYXN0ZXJEYXRhUmVhZGVyID0gbmV3IE1hc3RlckRhdGFSZWFkZXIodGhpcyk7XG4gIH1cblxuICBzZXR1cEFwaUNsaWVudCh0b2tlbikge1xuICAgIHRoaXMuYXBpQ2xpZW50ID0gbmV3IEljZUFwaUNsaWVudCh0aGlzLmFwaVVybCwgdG9rZW4sIHdpbmRvdy5DTElFTlRfQkFTRV9VUkwsIHRydWUpO1xuICB9XG5cbiAgc2V0QXBpVXJsKGFwaVVybCkge1xuICAgIHRoaXMuYXBpVXJsID0gYXBpVXJsO1xuICB9XG5cbiAgc2V0RmlsdGVyKGZpbHRlcikge1xuICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuICB9XG5cbiAgcHJlU2V0RmlsdGVyRXh0ZXJuYWwoZmlsdGVyKSB7XG4gICAgdGhpcy5pbml0aWFsRmlsdGVyID0gZmlsdGVyO1xuICB9XG5cbiAgc2V0RmlsdGVyRXh0ZXJuYWwoX2ZpbHRlcikge1xuICAgIGxldCBmaWx0ZXIgPSBfZmlsdGVyO1xuICAgIGlmIChmaWx0ZXIgPT09IHVuZGVmaW5lZCB8fCBmaWx0ZXIgPT09IG51bGwpIHtcbiAgICAgIGZpbHRlciA9IHRoaXMuaW5pdGlhbEZpbHRlcjtcbiAgICB9XG5cbiAgICBpZiAoZmlsdGVyID09PSB1bmRlZmluZWQgfHwgZmlsdGVyID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRGaWx0ZXIoZmlsdGVyKTtcbiAgICB0aGlzLmZpbHRlcnNBbHJlYWR5U2V0ID0gdHJ1ZTtcbiAgICAkKGAjJHt0aGlzLmdldFRhYmxlTmFtZSgpfV9yZXNldEZpbHRlcnNgKS5zaG93KCk7XG4gICAgdGhpcy5jdXJyZW50RmlsdGVyU3RyaW5nID0gdGhpcy5nZXRGaWx0ZXJTdHJpbmcoZmlsdGVyKTtcbiAgfVxuXG4gIHNldFRpdGxlKHRpdGxlKSB7XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICB9XG5cbiAgZ2V0RmlsdGVyKCkge1xuICAgIHJldHVybiB0aGlzLmZpbHRlcjtcbiAgfVxuXG4gIHNldE9yZGVyQnkob3JkZXJCeSkge1xuICAgIHRoaXMub3JkZXJCeSA9IG9yZGVyQnk7XG4gIH1cblxuICBnZXRPcmRlckJ5KCkge1xuICAgIHJldHVybiB0aGlzLm9yZGVyQnk7XG4gIH1cblxuICBnZXRGaWxlKG5hbWUpIHtcbiAgICB0aGlzLnRyYWNrRXZlbnQoJ2ZpbGUnLCBuYW1lKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgJC5nZXRKU09OKHRoaXMubW9kdWxlUmVsYXRpdmVVUkwsIHsgYTogJ2ZpbGUnLCBuYW1lIH0sIChkYXRhKSA9PiB7XG4gICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gJ1NVQ0NFU1MnKSB7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhLmRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICB9XG4gICAgICB9KS5mYWlsKCgpID0+IHJlamVjdCgpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgICAqIEBtZXRob2QgYWRkXG4gICAgICogQHBhcmFtIG9iamVjdCB7QXJyYXl9IG9iamVjdCBkYXRhIHRvIGJlIGFkZGVkIHRvIGRhdGFiYXNlXG4gICAgICogQHBhcmFtIGdldEZ1bmN0aW9uQ2FsbEJhY2tEYXRhIHtBcnJheX0gb25jZSBhIHN1Y2Nlc3MgaXMgcmV0dXJuZWQgY2FsbCBnZXQoKSBmdW5jdGlvbiBmb3IgdGhpcyBtb2R1bGUgd2l0aCB0aGVzZSBwYXJhbWV0ZXJzXG4gICAgICogQHBhcmFtIF9jYWxsR2V0RnVuY3Rpb24ge0Jvb2xlYW59IGlmIGZhbHNlIHRoZSBnZXQgZnVuY3Rpb24gb2YgdGhlIG1vZHVsZSB3aWxsIG5vdCBiZSBjYWxsZWQgKGRlZmF1bHQ6IHRydWUpXG4gICAgICogQHBhcmFtIHN1Y2Nlc3NDYWxsYmFjayB7RnVuY3Rpb259IHRoaXMgd2lsbCBnZXQgY2FsbGVkIGFmdGVyIHN1Y2Nlc3MgcmVzcG9uc2VcbiAgICAgKi9cblxuICBhZGQob2JqZWN0LCBnZXRGdW5jdGlvbkNhbGxCYWNrRGF0YSwgY2FsbEdldEZ1bmN0aW9uLCBzdWNjZXNzQ2FsbGJhY2spIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICBpZiAoY2FsbEdldEZ1bmN0aW9uID09PSB1bmRlZmluZWQgfHwgY2FsbEdldEZ1bmN0aW9uID09PSBudWxsKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIGNhbGxHZXRGdW5jdGlvbiA9IHRydWU7XG4gICAgfVxuICAgICQob2JqZWN0KS5hdHRyKCdhJywgJ2FkZCcpO1xuICAgICQob2JqZWN0KS5hdHRyKCd0JywgdGhpcy50YWJsZSk7XG4gICAgdGhhdC5zaG93TG9hZGVyKCk7XG4gICAgdGhpcy5yZXF1ZXN0Q2FjaGUuaW52YWxpZGF0ZVRhYmxlKHRoaXMudGFibGUpO1xuICAgICQucG9zdCh0aGlzLm1vZHVsZVJlbGF0aXZlVVJMLCBvYmplY3QsIChkYXRhKSA9PiB7XG4gICAgICBpZiAoZGF0YS5zdGF0dXMgPT09ICdTVUNDRVNTJykge1xuICAgICAgICB0aGF0LmFkZFN1Y2Nlc3NDYWxsQmFjayhnZXRGdW5jdGlvbkNhbGxCYWNrRGF0YSwgZGF0YS5vYmplY3QsIGNhbGxHZXRGdW5jdGlvbiwgc3VjY2Vzc0NhbGxiYWNrLCB0aGF0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoYXQuYWRkRmFpbENhbGxCYWNrKGdldEZ1bmN0aW9uQ2FsbEJhY2tEYXRhLCBkYXRhLm9iamVjdCk7XG4gICAgICB9XG4gICAgfSwgJ2pzb24nKVxuICAgICAgLmZhaWwoKGUpID0+IHtcbiAgICAgICAgaWYgKGUuc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgICB0aGF0LnNob3dNZXNzYWdlKCdBY2Nlc3MgRm9yYmlkZGVuJywgZS5yZXNwb25zZUpTT04ubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuYWx3YXlzKCgpID0+IHsgdGhhdC5oaWRlTG9hZGVyKCk7IH0pO1xuICAgIHRoaXMudHJhY2tFdmVudCgnYWRkJywgdGhpcy50YWIsIHRoaXMudGFibGUpO1xuICB9XG5cbiAgYWRkU3VjY2Vzc0NhbGxCYWNrKGNhbGxCYWNrRGF0YSwgc2VydmVyRGF0YSwgY2FsbEdldEZ1bmN0aW9uLCBzdWNjZXNzQ2FsbGJhY2ssIHRoaXNPYmplY3QpIHtcbiAgICBpZiAoY2FsbEdldEZ1bmN0aW9uKSB7XG4gICAgICB0aGlzLmdldChjYWxsQmFja0RhdGEpO1xuICAgIH1cbiAgICB0aGlzLmluaXRGaWVsZE1hc3RlckRhdGEoKTtcbiAgICBpZiAoc3VjY2Vzc0NhbGxiYWNrICE9PSB1bmRlZmluZWQgJiYgc3VjY2Vzc0NhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICBzdWNjZXNzQ2FsbGJhY2suYXBwbHkodGhpc09iamVjdCwgW3NlcnZlckRhdGFdKTtcbiAgICB9XG4gICAgdGhpcy50cmFja0V2ZW50KCdhZGRTdWNjZXNzJywgdGhpcy50YWIsIHRoaXMudGFibGUpO1xuICB9XG5cbiAgYWRkRmFpbENhbGxCYWNrKGNhbGxCYWNrRGF0YSwgc2VydmVyRGF0YSkge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmNsb3NlUGxhaW5NZXNzYWdlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gTm8gbmVlZCB0byByZXBvcnRcbiAgICB9XG4gICAgdGhpcy5zaG93TWVzc2FnZSgnRXJyb3Igc2F2aW5nJywgc2VydmVyRGF0YSk7XG4gICAgdGhpcy50cmFja0V2ZW50KCdhZGRGYWlsZWQnLCB0aGlzLnRhYiwgdGhpcy50YWJsZSk7XG4gIH1cblxuICBkZWxldGVPYmooaWQsIGNhbGxCYWNrRGF0YSkge1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIHRoYXQuc2hvd0xvYWRlcigpO1xuICAgIHRoaXMucmVxdWVzdENhY2hlLmludmFsaWRhdGVUYWJsZSh0aGlzLnRhYmxlKTtcbiAgICAkLnBvc3QodGhpcy5tb2R1bGVSZWxhdGl2ZVVSTCwgeyB0OiB0aGlzLnRhYmxlLCBhOiAnZGVsZXRlJywgaWQgfSwgKGRhdGEpID0+IHtcbiAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gJ1NVQ0NFU1MnKSB7XG4gICAgICAgIHRoYXQuZGVsZXRlU3VjY2Vzc0NhbGxCYWNrKGNhbGxCYWNrRGF0YSwgZGF0YS5vYmplY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhhdC5kZWxldGVGYWlsQ2FsbEJhY2soY2FsbEJhY2tEYXRhLCBkYXRhLm9iamVjdCk7XG4gICAgICB9XG4gICAgfSwgJ2pzb24nKVxuICAgICAgLmZhaWwoKGUpID0+IHtcbiAgICAgICAgaWYgKGUuc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgICB0aGF0LnNob3dNZXNzYWdlKCdBY2Nlc3MgRm9yYmlkZGVuJywgZS5yZXNwb25zZUpTT04ubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuYWx3YXlzKCgpID0+IHsgdGhhdC5oaWRlTG9hZGVyKCk7IH0pO1xuICAgIHRoaXMudHJhY2tFdmVudCgnZGVsZXRlJywgdGhpcy50YWIsIHRoaXMudGFibGUpO1xuICB9XG5cbiAgY2xlYW5EZWxldGUoaWQsIGNhbGxCYWNrKSB7XG4gICAgJC5wb3N0KHRoaXMubW9kdWxlUmVsYXRpdmVVUkwsIHsgdDogdGhpcy50YWJsZSwgYTogJ2RlbGV0ZScsIGlkIH0sIChkYXRhKSA9PiB7XG4gICAgICBjYWxsQmFjaygyMDAsIGRhdGEuc3RhdHVzKTtcbiAgICB9LCAnanNvbicpXG4gICAgICAuZmFpbCgoZSkgPT4ge1xuICAgICAgICBjYWxsQmFjayhlLnN0YXR1cyk7XG4gICAgICB9KTtcbiAgICB0aGlzLnRyYWNrRXZlbnQoJ2RlbGV0ZScsIHRoaXMudGFiLCB0aGlzLnRhYmxlKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBkZWxldGVTdWNjZXNzQ2FsbEJhY2soY2FsbEJhY2tEYXRhLCBzZXJ2ZXJEYXRhKSB7XG4gICAgdGhpcy5nZXQoY2FsbEJhY2tEYXRhKTtcbiAgICB0aGlzLmNsZWFyRGVsZXRlUGFyYW1zKCk7XG4gIH1cblxuICBkZWxldGVGYWlsQ2FsbEJhY2soY2FsbEJhY2tEYXRhLCBzZXJ2ZXJEYXRhKSB7XG4gICAgdGhpcy5jbGVhckRlbGV0ZVBhcmFtcygpO1xuICAgIHRoaXMuc2hvd01lc3NhZ2UoJ0Vycm9yIE9jY3VycmVkIHdoaWxlIERlbGV0aW5nIEl0ZW0nLCBzZXJ2ZXJEYXRhKTtcbiAgfVxuXG4gIGdldChjYWxsQmFja0RhdGEpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcblxuICAgIGlmICh0aGlzLmdldFJlbW90ZVRhYmxlKCkpIHtcbiAgICAgIHRoaXMuY3JlYXRlVGFibGVTZXJ2ZXIodGhpcy5nZXRUYWJsZU5hbWUoKSk7XG4gICAgICAkKGAjJHt0aGlzLmdldFRhYmxlTmFtZSgpfUZvcm1gKS5oaWRlKCk7XG4gICAgICAkKGAjJHt0aGlzLmdldFRhYmxlTmFtZSgpfWApLnNob3coKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgc291cmNlTWFwcGluZ0pzb24gPSBKU09OLnN0cmluZ2lmeSh0aGlzLmdldFNvdXJjZU1hcHBpbmcoKSk7XG5cbiAgICBsZXQgZmlsdGVySnNvbiA9ICcnO1xuICAgIGlmICh0aGlzLmdldEZpbHRlcigpICE9PSBudWxsKSB7XG4gICAgICBmaWx0ZXJKc29uID0gSlNPTi5zdHJpbmdpZnkodGhpcy5nZXRGaWx0ZXIoKSk7XG4gICAgfVxuXG4gICAgbGV0IG9yZGVyQnkgPSAnJztcbiAgICBpZiAodGhpcy5nZXRPcmRlckJ5KCkgIT09IG51bGwpIHtcbiAgICAgIG9yZGVyQnkgPSB0aGlzLmdldE9yZGVyQnkoKTtcbiAgICB9XG5cbiAgICBzb3VyY2VNYXBwaW5nSnNvbiA9IHRoaXMuZml4SlNPTihzb3VyY2VNYXBwaW5nSnNvbik7XG4gICAgZmlsdGVySnNvbiA9IHRoaXMuZml4SlNPTihmaWx0ZXJKc29uKTtcblxuICAgIHRoYXQuc2hvd0xvYWRlcigpO1xuICAgICQucG9zdCh0aGlzLm1vZHVsZVJlbGF0aXZlVVJMLCB7XG4gICAgICB0OiB0aGlzLnRhYmxlLCBhOiAnZ2V0Jywgc206IHNvdXJjZU1hcHBpbmdKc29uLCBmdDogZmlsdGVySnNvbiwgb2I6IG9yZGVyQnksXG4gICAgfSwgKGRhdGEpID0+IHtcbiAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gJ1NVQ0NFU1MnKSB7XG4gICAgICAgIHRoYXQuZ2V0U3VjY2Vzc0NhbGxCYWNrKGNhbGxCYWNrRGF0YSwgZGF0YS5vYmplY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhhdC5jaGVja1Nlc3Npb25DbG9zZShkYXRhKTtcbiAgICAgICAgdGhhdC5nZXRGYWlsQ2FsbEJhY2soY2FsbEJhY2tEYXRhLCBkYXRhLm9iamVjdCk7XG4gICAgICB9XG4gICAgfSwgJ2pzb24nKVxuICAgICAgLmZhaWwoKGUpID0+IHtcbiAgICAgICAgaWYgKGUuc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgICB0aGF0LnNob3dNZXNzYWdlKCdBY2Nlc3MgRm9yYmlkZGVuJywgZS5yZXNwb25zZUpTT04ubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuYWx3YXlzKCgpID0+IHsgdGhhdC5oaWRlTG9hZGVyKCk7IH0pO1xuXG4gICAgdGhhdC5pbml0RmllbGRNYXN0ZXJEYXRhKCk7XG5cbiAgICB0aGlzLnRyYWNrRXZlbnQoJ2dldCcsIHRoaXMudGFiLCB0aGlzLnRhYmxlKTtcbiAgICAvLyB2YXIgdXJsID0gdGhpcy5nZXREYXRhVXJsKCk7XG4gICAgLy8gY29uc29sZS5sb2codXJsKTtcbiAgfVxuXG5cbiAgZ2V0RGF0YVVybChfY29sdW1ucykge1xuICAgIGNvbnN0IHNvdXJjZU1hcHBpbmdKc29uID0gSlNPTi5zdHJpbmdpZnkodGhpcy5nZXRTb3VyY2VNYXBwaW5nKCkpO1xuXG4gICAgY29uc3QgY29sdW1ucyA9IEpTT04uc3RyaW5naWZ5KF9jb2x1bW5zKTtcblxuICAgIGxldCBmaWx0ZXJKc29uID0gJyc7XG4gICAgaWYgKHRoaXMuZ2V0RmlsdGVyKCkgIT09IG51bGwpIHtcbiAgICAgIGZpbHRlckpzb24gPSBKU09OLnN0cmluZ2lmeSh0aGlzLmdldEZpbHRlcigpKTtcbiAgICB9XG5cbiAgICBsZXQgb3JkZXJCeSA9ICcnO1xuICAgIGlmICh0aGlzLmdldE9yZGVyQnkoKSAhPT0gbnVsbCkge1xuICAgICAgb3JkZXJCeSA9IHRoaXMuZ2V0T3JkZXJCeSgpO1xuICAgIH1cblxuICAgIGxldCB1cmwgPSB0aGlzLm1vZHVsZVJlbGF0aXZlVVJMLnJlcGxhY2UoJ3NlcnZpY2UucGhwJywgJ2RhdGEucGhwJyk7XG4gICAgdXJsID0gYCR7dXJsfT90PSR7dGhpcy50YWJsZX1gO1xuICAgIHVybCA9IGAke3VybH0mc209JHt0aGlzLmZpeEpTT04oc291cmNlTWFwcGluZ0pzb24pfWA7XG4gICAgdXJsID0gYCR7dXJsfSZjbD0ke3RoaXMuZml4SlNPTihjb2x1bW5zKX1gO1xuICAgIHVybCA9IGAke3VybH0mZnQ9JHt0aGlzLmZpeEpTT04oZmlsdGVySnNvbil9YDtcbiAgICB1cmwgPSBgJHt1cmx9Jm9iPSR7b3JkZXJCeX1gO1xuXG4gICAgaWYgKHRoaXMuaXNTdWJQcm9maWxlVGFibGUoKSkge1xuICAgICAgdXJsID0gYCR7dXJsfSZ0eXBlPXN1YmA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVtb3RlVGFibGVTa2lwUHJvZmlsZVJlc3RyaWN0aW9uKCkpIHtcbiAgICAgIHVybCA9IGAke3VybH0mc2tpcD0xYDtcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgaXNTdWJQcm9maWxlVGFibGUoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNBZG1pblVzZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlci51c2VyX2xldmVsID09PSAnQWRtaW4nO1xuICB9XG5cbiAgcmVtb3RlVGFibGVTa2lwUHJvZmlsZVJlc3RyaWN0aW9uKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByZVByb2Nlc3NUYWJsZURhdGEocm93KSB7XG4gICAgcmV0dXJuIHJvdztcbiAgfVxuXG4gIGdldFN1Y2Nlc3NDYWxsQmFjayhjYWxsQmFja0RhdGEsIHNlcnZlckRhdGEpIHtcbiAgICBjb25zdCBkYXRhID0gW107XG4gICAgY29uc3QgbWFwcGluZyA9IHRoaXMuZ2V0RGF0YU1hcHBpbmcoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcnZlckRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJvdyA9IFtdO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXBwaW5nLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHJvd1tqXSA9IHNlcnZlckRhdGFbaV1bbWFwcGluZ1tqXV07XG4gICAgICB9XG4gICAgICBkYXRhLnB1c2godGhpcy5wcmVQcm9jZXNzVGFibGVEYXRhKHJvdykpO1xuICAgIH1cbiAgICB0aGlzLnNvdXJjZURhdGEgPSBzZXJ2ZXJEYXRhO1xuICAgIGlmIChjYWxsQmFja0RhdGEuY2FsbEJhY2sgIT09IHVuZGVmaW5lZCAmJiBjYWxsQmFja0RhdGEuY2FsbEJhY2sgIT09IG51bGwpIHtcbiAgICAgIGlmIChjYWxsQmFja0RhdGEuY2FsbEJhY2tEYXRhID09PSB1bmRlZmluZWQgfHwgY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICBjYWxsQmFja0RhdGEuY2FsbEJhY2tEYXRhID0gW107XG4gICAgICB9XG4gICAgICBjYWxsQmFja0RhdGEuY2FsbEJhY2tEYXRhLnB1c2goc2VydmVyRGF0YSk7XG4gICAgICBjYWxsQmFja0RhdGEuY2FsbEJhY2tEYXRhLnB1c2goZGF0YSk7XG4gICAgICB0aGlzLmNhbGxGdW5jdGlvbihjYWxsQmFja0RhdGEuY2FsbEJhY2ssIGNhbGxCYWNrRGF0YS5jYWxsQmFja0RhdGEpO1xuICAgIH1cblxuICAgIHRoaXMudGFibGVEYXRhID0gZGF0YTtcblxuICAgIGlmICghKGNhbGxCYWNrRGF0YS5ub1JlbmRlciAhPT0gdW5kZWZpbmVkICYmIGNhbGxCYWNrRGF0YS5ub1JlbmRlciAhPT0gbnVsbCAmJiBjYWxsQmFja0RhdGEubm9SZW5kZXIgPT09IHRydWUpKSB7XG4gICAgICB0aGlzLmNyZWF0ZVRhYmxlKHRoaXMuZ2V0VGFibGVOYW1lKCkpO1xuICAgICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1Gb3JtYCkuaGlkZSgpO1xuICAgICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1gKS5zaG93KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIGdldEZhaWxDYWxsQmFjayhjYWxsQmFja0RhdGEsIHNlcnZlckRhdGEpIHtcblxuICB9XG5cbiAgbW9kaWZ5Q2xvbmUob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuXG4gIGdldEVsZW1lbnQoaWQsIGNhbGxCYWNrRGF0YSwgY2xvbmUpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICBsZXQgc291cmNlTWFwcGluZ0pzb24gPSBKU09OLnN0cmluZ2lmeSh0aGlzLmdldFNvdXJjZU1hcHBpbmcoKSk7XG4gICAgc291cmNlTWFwcGluZ0pzb24gPSB0aGlzLmZpeEpTT04oc291cmNlTWFwcGluZ0pzb24pO1xuICAgIHRoYXQuc2hvd0xvYWRlcigpO1xuICAgICQucG9zdCh0aGlzLm1vZHVsZVJlbGF0aXZlVVJMLCB7XG4gICAgICB0OiB0aGlzLnRhYmxlLCBhOiAnZ2V0RWxlbWVudCcsIGlkLCBzbTogc291cmNlTWFwcGluZ0pzb24sXG4gICAgfSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gJ1NVQ0NFU1MnKSB7XG4gICAgICAgIGlmIChjbG9uZSkge1xuICAgICAgICAgIGRlbGV0ZSBkYXRhLm9iamVjdC5pZDtcbiAgICAgICAgICBkYXRhLm9iamVjdCA9IHRoYXQubW9kaWZ5Q2xvbmUoZGF0YS5vYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudEVsZW1lbnQgPSBkYXRhLm9iamVjdDtcbiAgICAgICAgdGhhdC5nZXRFbGVtZW50U3VjY2Vzc0NhbGxCYWNrLmFwcGx5KHRoYXQsIFtjYWxsQmFja0RhdGEsIGRhdGEub2JqZWN0XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGF0LmdldEVsZW1lbnRGYWlsQ2FsbEJhY2suYXBwbHkodGhhdCwgW2NhbGxCYWNrRGF0YSwgZGF0YS5vYmplY3RdKTtcbiAgICAgIH1cbiAgICB9LCAnanNvbicpXG4gICAgICAuZmFpbCgoZSkgPT4ge1xuICAgICAgICBpZiAoZS5zdGF0dXMgPT09IDQwMykge1xuICAgICAgICAgIHRoYXQuc2hvd01lc3NhZ2UoJ0FjY2VzcyBGb3JiaWRkZW4nLCBlLnJlc3BvbnNlSlNPTi5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5hbHdheXMoKCkgPT4geyB0aGF0LmhpZGVMb2FkZXIoKTsgfSk7XG4gICAgdGhpcy50cmFja0V2ZW50KCdnZXRFbGVtZW50JywgdGhpcy50YWIsIHRoaXMudGFibGUpO1xuICB9XG5cbiAgZ2V0RWxlbWVudFN1Y2Nlc3NDYWxsQmFjayhjYWxsQmFja0RhdGEsIHNlcnZlckRhdGEpIHtcbiAgICBpZiAoY2FsbEJhY2tEYXRhLmNhbGxCYWNrICE9PSB1bmRlZmluZWQgJiYgY2FsbEJhY2tEYXRhLmNhbGxCYWNrICE9PSBudWxsKSB7XG4gICAgICBpZiAoY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YSA9PT0gdW5kZWZpbmVkIHx8IGNhbGxCYWNrRGF0YS5jYWxsQmFja0RhdGEgPT09IG51bGwpIHtcbiAgICAgICAgY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YSA9IFtdO1xuICAgICAgfVxuICAgICAgY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YS5wdXNoKHNlcnZlckRhdGEpO1xuICAgICAgdGhpcy5jYWxsRnVuY3Rpb24oY2FsbEJhY2tEYXRhLmNhbGxCYWNrLCBjYWxsQmFja0RhdGEuY2FsbEJhY2tEYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50RWxlbWVudCA9IHNlcnZlckRhdGE7XG4gICAgaWYgKCEoY2FsbEJhY2tEYXRhLm5vUmVuZGVyICE9PSB1bmRlZmluZWQgJiYgY2FsbEJhY2tEYXRhLm5vUmVuZGVyICE9PSBudWxsICYmIGNhbGxCYWNrRGF0YS5ub1JlbmRlciA9PT0gdHJ1ZSkpIHtcbiAgICAgIHRoaXMucmVuZGVyRm9ybShzZXJ2ZXJEYXRhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgZ2V0RWxlbWVudEZhaWxDYWxsQmFjayhjYWxsQmFja0RhdGEsIHNlcnZlckRhdGEpIHtcblxuICB9XG5cblxuICBnZXRUYWJsZURhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFibGVEYXRhO1xuICB9XG5cbiAgZ2V0VGFibGVOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLnRhYjtcbiAgfVxuXG4gIGdldEZpZWxkVmFsdWVzKGZpZWxkTWFzdGVyLCBjYWxsQmFja0RhdGEpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICBsZXQgbWV0aG9kID0gJyc7XG4gICAgbGV0IG1ldGhvZFBhcmFtcyA9ICcnO1xuICAgIGlmIChmaWVsZE1hc3RlclszXSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkTWFzdGVyWzNdICE9PSBudWxsKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgIG1ldGhvZCA9IGZpZWxkTWFzdGVyWzNdO1xuICAgIH1cblxuICAgIGlmIChmaWVsZE1hc3Rlcls0XSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkTWFzdGVyWzRdICE9PSBudWxsKSB7XG4gICAgICBtZXRob2RQYXJhbXMgPSBKU09OLnN0cmluZ2lmeShmaWVsZE1hc3Rlcls0XSk7XG4gICAgfVxuXG4gICAgY29uc3Qga2V5ID0gdGhpcy5yZXF1ZXN0Q2FjaGUuZ2V0S2V5KHRoaXMubW9kdWxlUmVsYXRpdmVVUkwsIHtcbiAgICAgIHQ6IGZpZWxkTWFzdGVyWzBdLCBrZXk6IGZpZWxkTWFzdGVyWzFdLCB2YWx1ZTogZmllbGRNYXN0ZXJbMl0sIG1ldGhvZCwgbWV0aG9kUGFyYW1zLCBhOiAnZ2V0RmllbGRWYWx1ZXMnLFxuICAgIH0pO1xuICAgIGNvbnN0IGNhY2hlRGF0YSA9IHRoaXMucmVxdWVzdENhY2hlLmdldERhdGEoa2V5KTtcblxuICAgIGlmIChjYWNoZURhdGEgIT09IG51bGwgJiYgY2FjaGVEYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjYWNoZURhdGEuc3RhdHVzID09PSAnU1VDQ0VTUycpIHtcbiAgICAgICAgY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YS5wdXNoKGNhY2hlRGF0YS5kYXRhKTtcbiAgICAgICAgaWYgKGNhbGxCYWNrRGF0YS5jYWxsQmFja1N1Y2Nlc3MgIT09IG51bGwgJiYgY2FsbEJhY2tEYXRhLmNhbGxCYWNrU3VjY2VzcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YS5wdXNoKGNhbGxCYWNrRGF0YS5jYWxsQmFja1N1Y2Nlc3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuY2FsbEZ1bmN0aW9uKGNhbGxCYWNrRGF0YS5jYWxsQmFjaywgY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNhbGxiYWNrV3JhcGVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAnU1VDQ0VTUycpIHtcbiAgICAgICAgICB0aGF0LnJlcXVlc3RDYWNoZS5zZXREYXRhKHRoaXMuc3VjY2Vzcy5rZXksIGRhdGEpO1xuICAgICAgICAgIGNvbnN0IGxvY2FsQ2FsbEJhY2tEYXRhID0gY2FsbEJhY2tEYXRhO1xuICAgICAgICAgIGxvY2FsQ2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YSA9IFtjYWxsQmFja0RhdGEuY2FsbEJhY2tEYXRhWzBdXTtcbiAgICAgICAgICBsb2NhbENhbGxCYWNrRGF0YS5jYWxsQmFja0RhdGEucHVzaChkYXRhLmRhdGEpO1xuICAgICAgICAgIGlmIChsb2NhbENhbGxCYWNrRGF0YS5jYWxsQmFja1N1Y2Nlc3MgIT09IG51bGwgJiYgbG9jYWxDYWxsQmFja0RhdGEuY2FsbEJhY2tTdWNjZXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxvY2FsQ2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YS5wdXNoKGNhbGxCYWNrRGF0YS5jYWxsQmFja1N1Y2Nlc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGF0LmNhbGxGdW5jdGlvbihsb2NhbENhbGxCYWNrRGF0YS5jYWxsQmFjaywgbG9jYWxDYWxsQmFja0RhdGEuY2FsbEJhY2tEYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLm1lc3NhZ2UgPT09ICdBY2Nlc3MgdmlvbGF0aW9uJykge1xuICAgICAgICAgIGFsZXJ0KGBFcnJvciA6ICR7Y2FsbGJhY2tXcmFwZXIudGFibGV9ICR7ZGF0YS5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjYWxsYmFja1dyYXBlci5rZXkgPSBrZXk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgIGNhbGxiYWNrV3JhcGVyLnRhYmxlID0gZmllbGRNYXN0ZXJbMF07XG5cbiAgICAgICQucG9zdCh0aGlzLm1vZHVsZVJlbGF0aXZlVVJMLCB7XG4gICAgICAgIHQ6IGZpZWxkTWFzdGVyWzBdLCBrZXk6IGZpZWxkTWFzdGVyWzFdLCB2YWx1ZTogZmllbGRNYXN0ZXJbMl0sIG1ldGhvZCwgbWV0aG9kUGFyYW1zLCBhOiAnZ2V0RmllbGRWYWx1ZXMnLFxuICAgICAgfSwgY2FsbGJhY2tXcmFwZXIsICdqc29uJyk7XG4gICAgfVxuICB9XG5cbiAgc2V0QWRtaW5Qcm9maWxlKGVtcElkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIE5vIG5lZWQgdG8gcmVwb3J0XG4gICAgfVxuICAgICQucG9zdCh0aGlzLm1vZHVsZVJlbGF0aXZlVVJMLCB7IGE6ICdzZXRBZG1pbkVtcCcsIGVtcGlkOiBlbXBJZCB9LCAoKSA9PiB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgICB0b3AubG9jYXRpb24uaHJlZiA9IGNsaWVudFVybDtcbiAgICB9LCAnanNvbicpO1xuICB9XG5cbiAgY3VzdG9tQWN0aW9uKHN1YkFjdGlvbiwgbW9kdWxlLCByZXF1ZXN0LCBjYWxsQmFja0RhdGEsIGlzUG9zdCkge1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIHJlcXVlc3QgPSB0aGlzLmZpeEpTT04ocmVxdWVzdCk7XG4gICAgaWYgKCFpc1Bvc3QpIHtcbiAgICAgICQuZ2V0SlNPTih0aGlzLm1vZHVsZVJlbGF0aXZlVVJMLCB7XG4gICAgICAgIHQ6IHRoaXMudGFibGUsIGE6ICdjYScsIHNhOiBzdWJBY3Rpb24sIG1vZDogbW9kdWxlLCByZXE6IHJlcXVlc3QsXG4gICAgICB9LCAoZGF0YSkgPT4ge1xuICAgICAgICBpZiAoZGF0YS5zdGF0dXMgPT09ICdTVUNDRVNTJykge1xuICAgICAgICAgIGNhbGxCYWNrRGF0YS5jYWxsQmFja0RhdGEucHVzaChkYXRhLmRhdGEpO1xuICAgICAgICAgIHRoYXQuY2FsbEZ1bmN0aW9uKGNhbGxCYWNrRGF0YS5jYWxsQmFja1N1Y2Nlc3MsIGNhbGxCYWNrRGF0YS5jYWxsQmFja0RhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxCYWNrRGF0YS5jYWxsQmFja0RhdGEucHVzaChkYXRhLmRhdGEpO1xuICAgICAgICAgIHRoYXQuY2FsbEZ1bmN0aW9uKGNhbGxCYWNrRGF0YS5jYWxsQmFja0ZhaWwsIGNhbGxCYWNrRGF0YS5jYWxsQmFja0RhdGEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJC5wb3N0KHRoaXMubW9kdWxlUmVsYXRpdmVVUkwsIHtcbiAgICAgICAgdDogdGhpcy50YWJsZSwgYTogJ2NhJywgc2E6IHN1YkFjdGlvbiwgbW9kOiBtb2R1bGUsIHJlcTogcmVxdWVzdCxcbiAgICAgIH0sIChkYXRhKSA9PiB7XG4gICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gJ1NVQ0NFU1MnKSB7XG4gICAgICAgICAgY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YS5wdXNoKGRhdGEuZGF0YSk7XG4gICAgICAgICAgdGhhdC5jYWxsRnVuY3Rpb24oY2FsbEJhY2tEYXRhLmNhbGxCYWNrU3VjY2VzcywgY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YS5wdXNoKGRhdGEuZGF0YSk7XG4gICAgICAgICAgdGhhdC5jYWxsRnVuY3Rpb24oY2FsbEJhY2tEYXRhLmNhbGxCYWNrRmFpbCwgY2FsbEJhY2tEYXRhLmNhbGxCYWNrRGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH0sICdqc29uJyk7XG4gICAgfVxuICB9XG5cblxuICBzZW5kQ3VzdG9tUmVxdWVzdChhY3Rpb24sIHBhcmFtcywgc3VjY2Vzc0NhbGxiYWNrLCBmYWlsQ2FsbGJhY2spIHtcbiAgICBwYXJhbXMuYSA9IGFjdGlvbjtcbiAgICAkLnBvc3QodGhpcy5tb2R1bGVSZWxhdGl2ZVVSTCwgcGFyYW1zLCAoZGF0YSkgPT4ge1xuICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAnU1VDQ0VTUycpIHtcbiAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKGRhdGEuZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmYWlsQ2FsbGJhY2soZGF0YS5kYXRhKTtcbiAgICAgIH1cbiAgICB9LCAnanNvbicpO1xuICB9XG5cblxuICBnZXRDdXN0b21BY3Rpb25VcmwoYWN0aW9uLCBwYXJhbXMpIHtcbiAgICBwYXJhbXMuYSA9IGFjdGlvbjtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgaWYgKHN0ciAhPT0gJycpIHtcbiAgICAgICAgICBzdHIgKz0gJyYnO1xuICAgICAgICB9XG4gICAgICAgIHN0ciArPSBgJHtrZXl9PSR7cGFyYW1zW2tleV19YDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGAke3RoaXMubW9kdWxlUmVsYXRpdmVVUkx9PyR7c3RyfWA7XG4gIH1cblxuXG4gIGdldENsaWVudERhdGFVcmwoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMubW9kdWxlUmVsYXRpdmVVUkwucmVwbGFjZSgnc2VydmljZS5waHAnLCAnJyl9ZGF0YS9gO1xuICB9XG5cbiAgZ2V0Q3VzdG9tVXJsKHN0cikge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZVJlbGF0aXZlVVJMLnJlcGxhY2UoJ3NlcnZpY2UucGhwJywgc3RyKTtcbiAgfVxuXG4gIGNoZWNrU2Vzc2lvbkNsb3NlKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLmNvZGUgPT09ICdOT19VU0VSX0ZPVU5EJykge1xuICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFkYXB0ZXJCYXNlO1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBJY2VSZXNwb25zZSBmcm9tICcuL0ljZVJlc3BvbnNlJztcblxuY2xhc3MgRXh0ZW5zaW9uQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKGV4dGVuc2lvbiwgdXJsKSB7XG4gICAgdGhpcy5leHRlbnNpb24gPSBleHRlbnNpb247XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gIH1cblxuICBoYW5kbGVSZXF1ZXN0KGFjdGlvbiwgcmVxdWVzdERhdGEpIHtcbiAgICBjb25zdCBkYXRhVXJsID0gYCR7dGhpcy51cmx9P2E9Y2Emc2E9JHthY3Rpb259Jm1vZD0ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLmV4dGVuc2lvbil9JnJlcT0ke0pTT04uc3RyaW5naWZ5KHJlcXVlc3REYXRhKX1gO1xuICAgIHJldHVybiBheGlvcy5wb3N0KGRhdGFVcmwsIHt9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiBuZXcgSWNlUmVzcG9uc2UocmVzcG9uc2UuZGF0YS5zdGF0dXMsIHJlc3BvbnNlLmRhdGEuZGF0YSkpXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiBuZXcgSWNlUmVzcG9uc2UoJ0VSUk9SJywgZXJyb3IpKTtcbiAgfVxuXG4gIGdldEFwaUNsaWVudCgpIHtcbiAgICByZXR1cm4gd2luZG93Lm1vZEpzLmFwaUNsaWVudDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFeHRlbnNpb25Db250cm9sbGVyO1xuIiwiaW1wb3J0IFJlYWN0TW9kYWxBZGFwdGVyQmFzZSBmcm9tICcuL1JlYWN0TW9kYWxBZGFwdGVyQmFzZSc7XG5cbmNsYXNzIEV4dGVuc2lvbk1vZHVsZUJhc2UgZXh0ZW5kcyBSZWFjdE1vZGFsQWRhcHRlckJhc2Uge1xuICBzaG93RXh0ZW5zaW9uVmlldygpIHtcblxuICB9XG4gIGdldCgpIHtcbiAgICB0aGlzLnNob3dFeHRlbnNpb25WaWV3KCk7XG4gIH1cblxuICBnZXREYXRhTWFwcGluZygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ2lkJyxcbiAgICAgICduYW1lJyxcbiAgICBdO1xuICB9XG5cbiAgZ2V0SGVhZGVycygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgeyBzVGl0bGU6ICdJRCcsIGJWaXNpYmxlOiBmYWxzZSB9LFxuICAgICAgeyBzVGl0bGU6ICdOYW1lJyB9LFxuICAgIF07XG4gIH1cblxuICBnZXRGb3JtRmllbGRzKCkge1xuICAgIHJldHVybiBbXG4gICAgICBbJ2lkJywgeyBsYWJlbDogJ0lEJywgdHlwZTogJ2hpZGRlbicgfV0sXG4gICAgICBbJ25hbWUnLCB7IGxhYmVsOiAnTmFtZScsIHR5cGU6ICd0ZXh0JywgdmFsaWRhdGlvbjogJycgfV0sXG4gICAgXTtcbiAgfVxuXG4gIGdldFRhYmxlQ29sdW1ucygpIHtcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICB0aXRsZTogJ05hbWUnLFxuICAgICAgICBkYXRhSW5kZXg6ICduYW1lJyxcbiAgICAgICAgc29ydGVyOiB0cnVlLFxuICAgICAgfSxcbiAgICBdO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEV4dGVuc2lvbk1vZHVsZUJhc2U7XG4iLCIvKlxuICAgQ29weXJpZ2h0IChjKSAyMDE4IFtHbGFjaWVzIFVHLCBCZXJsaW4sIEdlcm1hbnldIChodHRwOi8vZ2xhY2llcy5kZSlcbiBEZXZlbG9wZXI6IFRoaWxpbmEgSGFzYW50aGEgKGh0dHA6Ly9say5saW5rZWRpbi5jb20vaW4vdGhpbGluYWggfCBodHRwczovL2dpdGh1Yi5jb20vdGhpbGluYWgpXG4gKi9cbi8qIGdsb2JhbCB0aW55TUNFICovXG5jb25zdCBWYWxpZGF0aW9uUnVsZXMgPSB7XG5cbiAgZmxvYXQoc3RyKSB7XG4gICAgY29uc3QgZmxvYXRzdHIgPSAvXlstK10/WzAtOV0rKFxcLlswLTldKyk/JC87XG4gICAgaWYgKHN0ciAhPSBudWxsICYmIHN0ci5tYXRjaChmbG9hdHN0cikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgbnVtYmVyKHN0cikge1xuICAgIGNvbnN0IG51bXN0ciA9IC9eWzAtOV0rJC87XG4gICAgaWYgKHN0ciAhPSBudWxsICYmIHN0ci5tYXRjaChudW1zdHIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIG51bWJlck9yRW1wdHkoc3RyKSB7XG4gICAgaWYgKHN0ciA9PT0gJycpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBudW1zdHIgPSAvXlswLTldKyQvO1xuICAgIGlmIChzdHIgIT0gbnVsbCAmJiBzdHIubWF0Y2gobnVtc3RyKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBlbWFpbChzdHIpIHtcbiAgICBjb25zdCBlbWFpbFBhdHRlcm4gPSAvXlxccypbXFx3XFwtK19dKyhcXC5bXFx3XFwtK19dKykqQFtcXHdcXC0rX10rXFwuW1xcd1xcLStfXSsoXFwuW1xcd1xcLStfXSspKlxccyokLztcbiAgICByZXR1cm4gc3RyICE9IG51bGwgJiYgZW1haWxQYXR0ZXJuLnRlc3Qoc3RyKTtcbiAgfSxcblxuICBlbWFpbE9yRW1wdHkoc3RyKSB7XG4gICAgaWYgKHN0ciA9PT0gJycpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBlbWFpbFBhdHRlcm4gPSAvXlxccypbXFx3XFwtK19dKyhcXC5bXFx3XFwtK19dKykqQFtcXHdcXC0rX10rXFwuW1xcd1xcLStfXSsoXFwuW1xcd1xcLStfXSspKlxccyokLztcbiAgICByZXR1cm4gc3RyICE9IG51bGwgJiYgZW1haWxQYXR0ZXJuLnRlc3Qoc3RyKTtcbiAgfSxcblxuICB1c2VybmFtZShzdHIpIHtcbiAgICBjb25zdCB1c2VybmFtZSA9IC9eW2EtekEtWjAtOS4tXSskLztcbiAgICByZXR1cm4gc3RyICE9IG51bGwgJiYgdXNlcm5hbWUudGVzdChzdHIpO1xuICB9LFxuXG4gIGlucHV0KHN0cikge1xuICAgIGlmIChzdHIgIT0gbnVsbCAmJiBzdHIubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbn07XG5cbmNsYXNzIEZvcm1WYWxpZGF0aW9uIHtcbiAgY29uc3RydWN0b3IoZm9ybUlkLCB2YWxpZGF0ZUFsbCwgb3B0aW9ucykge1xuICAgIHRoaXMudGVtcE9wdGlvbnMgPSB7fTtcbiAgICB0aGlzLmZvcm1JZCA9IGZvcm1JZDtcbiAgICB0aGlzLmZvcm1FcnJvciA9IGZhbHNlO1xuICAgIHRoaXMuZm9ybU9iamVjdCA9IG51bGw7XG4gICAgdGhpcy5lcnJvck1lc3NhZ2VzID0gJyc7XG4gICAgdGhpcy5wb3B1cERpYWxvZyA9IG51bGw7XG4gICAgdGhpcy52YWxpZGF0ZUFsbCA9IHZhbGlkYXRlQWxsO1xuICAgIHRoaXMuZXJyb3JNYXAgPSBbXTtcblxuICAgIHRoaXMuc2V0dGluZ3MgPSB7IHRoaXJkUGFydHlQb3B1cDogbnVsbCwgTGFiZWxFcnJvckNsYXNzOiBmYWxzZSwgU2hvd1BvcHVwOiB0cnVlIH07XG5cbiAgICB0aGlzLnNldHRpbmdzID0galF1ZXJ5LmV4dGVuZCh0aGlzLnNldHRpbmdzLCBvcHRpb25zKTtcblxuICAgIHRoaXMuaW5wdXRUeXBlcyA9IFsndGV4dCcsICdyYWRpbycsICdjaGVja2JveCcsICdmaWxlJywgJ3Bhc3N3b3JkJywgJ3NlbGVjdC1vbmUnLCAnc2VsZWN0LW11bHRpJywgJ3RleHRhcmVhJywgJ2ZpbGV1cGxvYWQnLCAnc2lnbmF0dXJlJ107XG5cbiAgICB0aGlzLnZhbGlkYXRvciA9IFZhbGlkYXRpb25SdWxlcztcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBjbGVhckVycm9yKGZvcm1JbnB1dCwgb3ZlcnJpZGVNZXNzYWdlKSB7XG4gICAgY29uc3QgaWQgPSBmb3JtSW5wdXQuYXR0cignaWQnKTtcbiAgICAkKGAjJHt0aGlzLmZvcm1JZH0gI2ZpZWxkXyR7aWR9YCkucmVtb3ZlQ2xhc3MoJ2Vycm9yJyk7XG4gICAgJChgIyR7dGhpcy5mb3JtSWR9ICNoZWxwXyR7aWR9YCkuaHRtbCgnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgYWRkRXJyb3IoZm9ybUlucHV0LCBvdmVycmlkZU1lc3NhZ2UpIHtcbiAgICB0aGlzLmZvcm1FcnJvciA9IHRydWU7XG4gICAgaWYgKGZvcm1JbnB1dC5hdHRyKCdtZXNzYWdlJykgIT0gbnVsbCkge1xuICAgICAgdGhpcy5lcnJvck1lc3NhZ2VzICs9IChgJHtmb3JtSW5wdXQuYXR0cignbWVzc2FnZScpfVxcbmApO1xuICAgICAgdGhpcy5lcnJvck1hcFtmb3JtSW5wdXQuYXR0cignbmFtZScpXSA9IGZvcm1JbnB1dC5hdHRyKCdtZXNzYWdlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXJyb3JNYXBbZm9ybUlucHV0LmF0dHIoJ25hbWUnKV0gPSAnJztcbiAgICB9XG5cbiAgICBjb25zdCBpZCA9IGZvcm1JbnB1dC5hdHRyKCdpZCcpO1xuICAgIGNvbnN0IHZhbGlkYXRpb24gPSBmb3JtSW5wdXQuYXR0cigndmFsaWRhdGlvbicpO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBmb3JtSW5wdXQuYXR0cigndmFsaWRhdGlvbicpO1xuICAgICQoYCMke3RoaXMuZm9ybUlkfSAjZmllbGRfJHtpZH1gKS5hZGRDbGFzcygnZXJyb3InKTtcbiAgICBpZiAobWVzc2FnZSA9PT0gdW5kZWZpbmVkIHx8IG1lc3NhZ2UgPT0gbnVsbCB8fCBtZXNzYWdlID09PSAnJykge1xuICAgICAgJChgIyR7dGhpcy5mb3JtSWR9ICNoZWxwX2Vycl8ke2lkfWApLmh0bWwobWVzc2FnZSk7XG4gICAgfSBlbHNlIGlmICh2YWxpZGF0aW9uID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdGlvbiA9PSBudWxsIHx8IHZhbGlkYXRpb24gPT09ICcnKSB7XG4gICAgICAkKGAjJHt0aGlzLmZvcm1JZH0gI2hlbHBfZXJyXyR7aWR9YCkuaHRtbCgnUmVxdWlyZWQnKTtcbiAgICB9IGVsc2UgaWYgKHZhbGlkYXRpb24gPT09ICdmbG9hdCcgfHwgdmFsaWRhdGlvbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICQoYCMke3RoaXMuZm9ybUlkfSAjaGVscF9lcnJfJHtpZH1gKS5odG1sKCdOdW1iZXIgcmVxdWlyZWQnKTtcbiAgICB9IGVsc2UgaWYgKHZhbGlkYXRpb24gPT09ICdlbWFpbCcpIHtcbiAgICAgICQoYCMke3RoaXMuZm9ybUlkfSAjaGVscF9lcnJfJHtpZH1gKS5odG1sKCdFbWFpbCByZXF1aXJlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKGAjJHt0aGlzLmZvcm1JZH0gI2hlbHBfZXJyXyR7aWR9YCkuaHRtbCgnUmVxdWlyZWQnKTtcbiAgICB9XG4gIH1cblxuXG4gIHNob3dFcnJvcnMoKSB7XG4gICAgaWYgKHRoaXMuZm9ybUVycm9yKSB7XG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy50aGlyZFBhcnR5UG9wdXAgIT09IHVuZGVmaW5lZCAmJiB0aGlzLnNldHRpbmdzLnRoaXJkUGFydHlQb3B1cCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MudGhpcmRQYXJ0eVBvcHVwLmFsZXJ0KCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc2V0dGluZ3MuU2hvd1BvcHVwID09PSB0cnVlKSB7XG4gICAgICAgIGlmICh0aGlzLnRlbXBPcHRpb25zLnBvcHVwVG9wICE9PSB1bmRlZmluZWQgJiYgdGhpcy50ZW1wT3B0aW9ucy5wb3B1cFRvcCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5hbGVydCgnRXJyb3JzIEZvdW5kJywgdGhpcy5lcnJvck1lc3NhZ2VzLCB0aGlzLnRlbXBPcHRpb25zLnBvcHVwVG9wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFsZXJ0KCdFcnJvcnMgRm91bmQnLCB0aGlzLmVycm9yTWVzc2FnZXMsIC0xKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgY2hlY2tWYWx1ZXMob3B0aW9ucykge1xuICAgIHRoaXMudGVtcE9wdGlvbnMgPSBvcHRpb25zO1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIHRoaXMuZm9ybUVycm9yID0gZmFsc2U7XG4gICAgdGhpcy5lcnJvck1lc3NhZ2VzID0gJyc7XG4gICAgdGhpcy5mb3JtT2JqZWN0ID0ge307XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgY29uc3QgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaW5wdXRPYmplY3QpIHtcbiAgICAgIGxldCBpbnB1dFZhbHVlID0gbnVsbDtcbiAgICAgIGNvbnN0IG5hbWUgPSBpbnB1dE9iamVjdC5hdHRyKCduYW1lJyk7XG4gICAgICBpZiAodGhhdC5zZXR0aW5ncy5MYWJlbEVycm9yQ2xhc3MgIT09IGZhbHNlKSB7XG4gICAgICAgICQoYGxhYmVsW2Zvcj0nJHtuYW1lfSddYCkucmVtb3ZlQ2xhc3ModGhhdC5zZXR0aW5ncy5MYWJlbEVycm9yQ2xhc3MpO1xuICAgICAgfVxuICAgICAgY29uc3QgaWQgPSBpbnB1dE9iamVjdC5hdHRyKCdpZCcpO1xuICAgICAgY29uc3QgdHlwZSA9IGlucHV0T2JqZWN0LmF0dHIoJ3R5cGUnKTtcblxuICAgICAgaWYgKGlucHV0T2JqZWN0Lmhhc0NsYXNzKCdzZWxlY3QyLWZvY3Vzc2VyJykgfHwgaW5wdXRPYmplY3QuaGFzQ2xhc3MoJ3NlbGVjdDItaW5wdXQnKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGpRdWVyeS5pbkFycmF5KHR5cGUsIHRoYXQuaW5wdXRUeXBlcykgPj0gMCkge1xuICAgICAgICBpZiAoaW5wdXRPYmplY3QuaGFzQ2xhc3MoJ3VwbG9hZElucHV0JykpIHtcbiAgICAgICAgICBpbnB1dFZhbHVlID0gaW5wdXRPYmplY3QuYXR0cigndmFsJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3JhZGlvJyB8fCB0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICAgICAgaW5wdXRWYWx1ZSA9ICQoYGlucHV0W25hbWU9JyR7bmFtZX0nXTpjaGVja2VkYCkudmFsKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRPYmplY3QuaGFzQ2xhc3MoJ3NlbGVjdDJGaWVsZCcpKSB7XG4gICAgICAgICAgaWYgKCQoYCMke3RoYXQuZm9ybUlkfSAjJHtpZH1gKS5zZWxlY3QyKCdkYXRhJykgIT0gbnVsbCAmJiAkKGAjJHt0aGF0LmZvcm1JZH0gIyR7aWR9YCkuc2VsZWN0MignZGF0YScpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlucHV0VmFsdWUgPSAkKGAjJHt0aGF0LmZvcm1JZH0gIyR7aWR9YCkuc2VsZWN0MignZGF0YScpLmlkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0T2JqZWN0Lmhhc0NsYXNzKCdzZWxlY3QyTXVsdGknKSkge1xuICAgICAgICAgIGlmICgkKGAjJHt0aGF0LmZvcm1JZH0gIyR7aWR9YCkuc2VsZWN0MignZGF0YScpICE9IG51bGwgJiYgJChgIyR7dGhhdC5mb3JtSWR9ICMke2lkfWApLnNlbGVjdDIoJ2RhdGEnKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dFZhbHVlT2JqZWN0cyA9ICQoYCMke3RoYXQuZm9ybUlkfSAjJHtpZH1gKS5zZWxlY3QyKCdkYXRhJyk7XG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0VmFsdWVPYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlucHV0VmFsdWUucHVzaChpbnB1dFZhbHVlT2JqZWN0c1tpXS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gSlNPTi5zdHJpbmdpZnkoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0VmFsdWUgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRPYmplY3QuaGFzQ2xhc3MoJ3NpZ25hdHVyZUZpZWxkJykpIHtcbiAgICAgICAgICBpZiAoJChgIyR7dGhhdC5mb3JtSWR9ICMke2lkfWApLmRhdGEoJ3NpZ25hdHVyZVBhZCcpLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgaW5wdXRWYWx1ZSA9ICcnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gJChgIyR7aWR9YCkuZGF0YSgnc2lnbmF0dXJlUGFkJykudG9EYXRhVVJMKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlucHV0T2JqZWN0Lmhhc0NsYXNzKCdzaW1wbGVtZGUnKSkge1xuICAgICAgICAgIGlucHV0VmFsdWUgPSAkKGAjJHt0aGF0LmZvcm1JZH0gIyR7aWR9YCkuZGF0YSgnc2ltcGxlbWRlJykudmFsdWUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dE9iamVjdC5oYXNDbGFzcygnY29kZScpKSB7XG4gICAgICAgICAgaW5wdXRWYWx1ZSA9ICQoYCMke3RoYXQuZm9ybUlkfSAjJHtpZH1gKS5kYXRhKCdjb2RlbWlycm9yJykuZ2V0VmFsdWUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dE9iamVjdC5oYXNDbGFzcygndGlueW1jZScpKSB7XG4gICAgICAgICAgaW5wdXRWYWx1ZSA9IHRpbnlNQ0UuZ2V0KGlkKS5nZXRDb250ZW50KHsgZm9ybWF0OiAncmF3JyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnB1dFZhbHVlID0gaW5wdXRPYmplY3QudmFsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0gaW5wdXRPYmplY3QuYXR0cigndmFsaWRhdGlvbicpO1xuICAgICAgICBsZXQgdmFsaWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAodmFsaWRhdGlvbiAhPT0gdW5kZWZpbmVkICYmIHZhbGlkYXRpb24gIT0gbnVsbCAmJiB0aGF0LnZhbGlkYXRvclt2YWxpZGF0aW9uXSAhPT0gdW5kZWZpbmVkICYmIHRoYXQudmFsaWRhdG9yW3ZhbGlkYXRpb25dICE9IG51bGwpIHtcbiAgICAgICAgICB2YWxpZCA9IHRoYXQudmFsaWRhdG9yW3ZhbGlkYXRpb25dKGlucHV0VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGF0LnZhbGlkYXRlQWxsKSB7XG4gICAgICAgICAgICBpZiAodmFsaWRhdGlvbiAhPT0gdW5kZWZpbmVkICYmIHZhbGlkYXRpb24gIT0gbnVsbCAmJiB2YWxpZGF0aW9uID09PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFsaWQgPSB0aGF0LnZhbGlkYXRvci5pbnB1dChpbnB1dFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGF0LmZvcm1PYmplY3RbaWRdID0gaW5wdXRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICB0aGF0LmFkZEVycm9yKGlucHV0T2JqZWN0LCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGF0LmNsZWFyRXJyb3IoaW5wdXRPYmplY3QsIG51bGwpO1xuICAgICAgICAgIHRoYXQuZm9ybU9iamVjdFtpZF0gPSBpbnB1dFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxldCBpbnB1dHMgPSAkKGAjJHt0aGlzLmZvcm1JZH0gOmlucHV0YCk7XG4gICAgaW5wdXRzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFsaWRhdGUoJCh0aGlzKSk7XG4gICAgfSk7XG5cbiAgICBpbnB1dHMgPSAkKGAjJHt0aGlzLmZvcm1JZH0gLnVwbG9hZElucHV0YCk7XG4gICAgaW5wdXRzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFsaWRhdGUoJCh0aGlzKSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNob3dFcnJvcnMoKTtcbiAgICB0aGlzLnRlbXBPcHRpb25zID0ge307XG4gICAgcmV0dXJuICF0aGlzLmZvcm1FcnJvcjtcbiAgfVxuXG4gIGdldEZvcm1QYXJhbWV0ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmZvcm1PYmplY3Q7XG4gIH1cblxuXG4gIGFsZXJ0KHRpdGxlLCB0ZXh0KSB7XG4gICAgYWxlcnQodGV4dCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0VmFsaWRhdGlvblJ1bGVzKCkge1xuICAgIHJldHVybiBWYWxpZGF0aW9uUnVsZXM7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBGb3JtVmFsaWRhdGlvbjtcbiIsImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuY2xhc3MgSWNlQXBpQ2xpZW50IHtcbiAgY29uc3RydWN0b3IoYmFzZVVybCwgdG9rZW4sIGNsaWVudEJhc2VVcmwsIGxlZ2FjeUFwaVdyYXBwZXIgPSB0cnVlKSB7XG4gICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcbiAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgdGhpcy5jbGllbnRCYXNlVXJsID0gY2xpZW50QmFzZVVybDtcbiAgICB0aGlzLmxlZ2FjeUFwaVdyYXBwZXIgPSBsZWdhY3lBcGlXcmFwcGVyO1xuICB9XG5cbiAgZ2V0KGVuZHBvaW50KSB7XG4gICAgaWYgKHRoaXMubGVnYWN5QXBpV3JhcHBlcikge1xuICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5jbGllbnRCYXNlVXJsfWFwaS9pbmRleC5waHA/dG9rZW49JHt0aGlzLnRva2VufSZtZXRob2Q9Z2V0JnVybD0vJHtlbmRwb2ludH1gO1xuICAgICAgcmV0dXJuIGF4aW9zLmdldCh1cmwpO1xuICAgIH1cblxuICAgIHJldHVybiBheGlvcy5nZXQodGhpcy5iYXNlVXJsICsgZW5kcG9pbnQsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMudG9rZW59YCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBwb3N0KGVuZHBvaW50LCBkYXRhKSB7XG4gICAgaWYgKHRoaXMubGVnYWN5QXBpV3JhcHBlcikge1xuICAgICAgY29uc3QgdXJsID0gYCR7dGhpcy5jbGllbnRCYXNlVXJsfWFwaS9pbmRleC5waHA/dG9rZW49JHt0aGlzLnRva2VufSZtZXRob2Q9cG9zdCZ1cmw9LyR7ZW5kcG9pbnR9YDtcbiAgICAgIHJldHVybiBheGlvcy5wb3N0KHVybCwgZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF4aW9zLnBvc3QodGhpcy5iYXNlVXJsICsgZW5kcG9pbnQsIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMudG9rZW59YCxcbiAgICAgIH0sXG4gICAgICBkYXRhLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEljZUFwaUNsaWVudDtcbiIsImNsYXNzIEljZVJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBkYXRhKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJY2VSZXNwb25zZTtcbiIsImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuY2xhc3MgTWFzdGVyRGF0YVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKGFkYXB0ZXIpIHtcbiAgICB0aGlzLmFkYXB0ZXIgPSBhZGFwdGVyO1xuICAgIHRoaXMucmVxdWVzdENhY2hlID0gdGhpcy5hZGFwdGVyLnJlcXVlc3RDYWNoZTtcbiAgfVxuXG4gIGZldGNoTWFzdGVyRGF0YShmaWVsZE1hc3Rlcikge1xuICAgIGxldCBtZXRob2QgPSAnJztcbiAgICBsZXQgbWV0aG9kUGFyYW1zID0gJyc7XG4gICAgaWYgKGZpZWxkTWFzdGVyWzNdICE9IG51bGwpIHtcbiAgICAgIG1ldGhvZCA9IGZpZWxkTWFzdGVyWzNdO1xuICAgIH1cblxuICAgIGlmIChmaWVsZE1hc3Rlcls0XSAhPSBudWxsKSB7XG4gICAgICBtZXRob2RQYXJhbXMgPSBKU09OLnN0cmluZ2lmeShmaWVsZE1hc3Rlcls0XSk7XG4gICAgfVxuXG4gICAgY29uc3Qga2V5ID0gdGhpcy5yZXF1ZXN0Q2FjaGUuZ2V0S2V5KHRoaXMuYWRhcHRlci5tb2R1bGVSZWxhdGl2ZVVSTCwge1xuICAgICAgdDogZmllbGRNYXN0ZXJbMF0sIGtleTogZmllbGRNYXN0ZXJbMV0sIHZhbHVlOiBmaWVsZE1hc3RlclsyXSwgbWV0aG9kLCBtZXRob2RQYXJhbXMsIGE6ICdnZXRGaWVsZFZhbHVlcycsXG4gICAgfSk7XG5cbiAgICBjb25zdCBjYWNoZURhdGEgPSB0aGlzLnJlcXVlc3RDYWNoZS5nZXREYXRhKGtleSk7XG4gICAgaWYgKGNhY2hlRGF0YSAhPSBudWxsICYmIGNhY2hlRGF0YS5zdGF0dXMgPT09ICdTVUNDRVNTJykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHJlc29sdmUoY2FjaGVEYXRhLmRhdGEpKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cmxEYXRhID0ge1xuICAgICAgdDogZmllbGRNYXN0ZXJbMF0sXG4gICAgICBrZXk6IGZpZWxkTWFzdGVyWzFdLFxuICAgICAgdmFsdWU6IGZpZWxkTWFzdGVyWzJdLFxuICAgICAgbWV0aG9kLFxuICAgICAgbWV0aG9kUGFyYW1zLFxuICAgICAgYTogJ2dldEZpZWxkVmFsdWVzJyxcbiAgICB9O1xuICAgIGxldCB1cmwgPSBgJHt0aGlzLmFkYXB0ZXIubW9kdWxlUmVsYXRpdmVVUkx9P191cmw9MWA7XG4gICAgZm9yIChjb25zdCBpbmRleCBpbiB1cmxEYXRhKSB7XG4gICAgICB1cmwgPSBgJHt1cmx9JiR7aW5kZXh9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHVybERhdGFbaW5kZXhdKX1gO1xuICAgIH1cbiAgICAvLyBUT0RPIC0gU2hvdWxkIGJlIGEgZ2V0IHJlcXVlc3RcbiAgICByZXR1cm4gYXhpb3MucG9zdCh1cmwsIHt9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmIChyZXNwb25zZS5kYXRhLnN0YXR1cyAhPT0gJ1NVQ0NFU1MnKSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoYFJlc3BvbnNlIGZvciAke2tleX0gZmFpbGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXF1ZXN0Q2FjaGUuc2V0RGF0YShrZXksIHJlc3BvbnNlLmRhdGEpO1xuXG4gICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLmRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUFsbE1hc3RlckRhdGEoKSB7XG4gICAgY29uc3QgcmVtb3RlU291cmNlRmllbGRzID0gdGhpcy5hZGFwdGVyLmdldFJlbW90ZVNvdXJjZUZpZWxkcygpO1xuICAgIGNvbnN0IHByb21pc2VMaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW1vdGVTb3VyY2VGaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZpZWxkUmVtb3RlID0gcmVtb3RlU291cmNlRmllbGRzW2ldO1xuICAgICAgaWYgKGZpZWxkUmVtb3RlWzFdWydyZW1vdGUtc291cmNlJ10gIT09IHVuZGVmaW5lZCAmJiBmaWVsZFJlbW90ZVsxXVsncmVtb3RlLXNvdXJjZSddICE9IG51bGwpIHtcbiAgICAgICAgbGV0IGtleSA9IGAke2ZpZWxkUmVtb3RlWzFdWydyZW1vdGUtc291cmNlJ11bMF19XyR7ZmllbGRSZW1vdGVbMV1bJ3JlbW90ZS1zb3VyY2UnXVsxXX1fJHtmaWVsZFJlbW90ZVsxXVsncmVtb3RlLXNvdXJjZSddWzJdfWA7XG4gICAgICAgIGlmIChmaWVsZFJlbW90ZVsxXVsncmVtb3RlLXNvdXJjZSddLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgIGtleSA9IGAke2tleX1fJHtmaWVsZFJlbW90ZVsxXVsncmVtb3RlLXNvdXJjZSddWzNdfWA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWFzdGVyRGF0YVByb21pc2UgPSB0aGlzLmZldGNoTWFzdGVyRGF0YShmaWVsZFJlbW90ZVsxXVsncmVtb3RlLXNvdXJjZSddKVxuICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuZmllbGRNYXN0ZXJEYXRhW2tleV0gPSBkYXRhO1xuICAgICAgICAgIH0pO1xuICAgICAgICBwcm9taXNlTGlzdC5wdXNoKG1hc3RlckRhdGFQcm9taXNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZUxpc3QpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hc3RlckRhdGFSZWFkZXI7XG4iLCIvKiBnbG9iYWwgdGlueW1jZSwgU2ltcGxlTURFLCBtb2RKcywgU2lnbmF0dXJlUGFkLCBtb2R1bGVzSW5zdGFsbGVkICovXG4vKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItZGVzdHJ1Y3R1cmluZyAqL1xuLypcbiAgIENvcHlyaWdodCAoYykgMjAxOCBbR2xhY2llcyBVRywgQmVybGluLCBHZXJtYW55XSAoaHR0cDovL2dsYWNpZXMuZGUpXG4gRGV2ZWxvcGVyOiBUaGlsaW5hIEhhc2FudGhhIChodHRwOi8vbGsubGlua2VkaW4uY29tL2luL3RoaWxpbmFoIHwgaHR0cHM6Ly9naXRodWIuY29tL3RoaWxpbmFoKVxuICovXG5pbXBvcnQgRm9ybVZhbGlkYXRpb24gZnJvbSAnLi9Gb3JtVmFsaWRhdGlvbic7XG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBwcm92aWRpbmcgY29yZSBmdW5jdGlvbnMgdG8gYWxsIG1vZHVsZSBjbGFzc2VzLlxuICogQGNsYXNzIEJhc2UuanNcbiAqL1xuXG5jbGFzcyBNb2R1bGVCYXNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kZWxldGVQYXJhbXMgPSB7fTtcbiAgICB0aGlzLmNyZWF0ZVJlbW90ZVRhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5pbnN0YW5jZUlkID0gJ05vbmUnO1xuICAgIHRoaXMuZ2EgPSBbXTtcbiAgICB0aGlzLnNob3dBZGROZXcgPSB0cnVlO1xuICAgIHRoaXMuc2hvd0VkaXQgPSB0cnVlO1xuICAgIHRoaXMuc2hvd0RlbGV0ZSA9IHRydWU7XG4gICAgdGhpcy5zaG93U2F2ZSA9IHRydWU7XG4gICAgdGhpcy5zaG93Q2FuY2VsID0gdHJ1ZTtcbiAgICB0aGlzLnNob3dGb3JtT25Qb3B1cCA9IGZhbHNlO1xuICAgIHRoaXMuZmlsdGVyc0FscmVhZHlTZXQgPSBmYWxzZTtcbiAgICB0aGlzLmN1cnJlbnRGaWx0ZXJTdHJpbmcgPSAnJztcbiAgICB0aGlzLnNvcnRpbmcgPSAwO1xuICAgIHRoaXMuc2V0dGluZ3MgPSB7fTtcbiAgICB0aGlzLnRyYW5zbGF0aW9ucyA9IHt9O1xuICAgIHRoaXMuY3VzdG9tRmllbGRzID0gW107XG4gICAgdGhpcy5jc3JmUmVxdWlyZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuZmllbGRUZW1wbGF0ZXMgPSBudWxsO1xuICAgIHRoaXMudGVtcGxhdGVzID0gbnVsbDtcbiAgICB0aGlzLmN1c3RvbVRlbXBsYXRlcyA9IG51bGw7XG4gICAgdGhpcy5lbWFpbFRlbXBsYXRlcyA9IG51bGw7XG4gICAgdGhpcy5maWVsZE1hc3RlckRhdGEgPSB7fTtcbiAgICB0aGlzLmZpZWxkTWFzdGVyRGF0YUtleXMgPSB7fTtcbiAgICB0aGlzLmZpZWxkTWFzdGVyRGF0YUNhbGxiYWNrID0gbnVsbDtcbiAgICB0aGlzLnNvdXJjZU1hcHBpbmcgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudElkID0gbnVsbDtcbiAgICB0aGlzLmN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLnVzZXIgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudFByb2ZpbGUgPSBudWxsO1xuICAgIHRoaXMucGVybWlzc2lvbnMgPSB7fTtcbiAgICB0aGlzLmJhc2VVcmwgPSBudWxsO1xuICAgIHRoaXMuY2xpZW50VXJsID0gbnVsbDtcbiAgICB0aGlzLnRoYXQgPSB0aGlzO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIGluaXQoYXBwTmFtZSwgY3VycmVudFZpZXcsIGRhdGFVcmwsIHBlcm1pc3Npb25zKSB7XG5cbiAgfVxuXG4gIGluaXRGb3JtKCkge1xuXG4gIH1cblxuICBzZXRPYmplY3RUeXBlTmFtZShvYmplY3RUeXBlTmFtZSkge1xuICAgIHRoaXMub2JqZWN0VHlwZU5hbWUgPSBvYmplY3RUeXBlTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgICAqIFNvbWUgYnJvd3NlcnMgZG8gbm90IHN1cHBvcnQgc2VuZGluZyBKU09OIGluIGdldCBwYXJhbWV0ZXJzLiBTZXQgdGhpcyB0byB0cnVlIHRvIGF2b2lkIHNlbmRpbmcgSlNPTlxuICAgICAqIEBtZXRob2Qgc2V0Tm9KU09OUmVxdWVzdHNcbiAgICAgKiBAcGFyYW0gdmFsIHtCb29sZWFufVxuICAgICAqL1xuICBzZXROb0pTT05SZXF1ZXN0cyh2YWwpIHtcbiAgICB0aGlzLm5vSlNPTlJlcXVlc3RzID0gdmFsO1xuICB9XG5cblxuICBzZXRQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucykge1xuICAgIHRoaXMucGVybWlzc2lvbnMgPSBwZXJtaXNzaW9ucztcbiAgfVxuXG4gIHNvcnRpbmdTdGFydGVkKHZhbCkge1xuICAgIHRoaXMuc29ydGluZyA9IHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBjdXJyZW50IHVzZXIgaGFzIGEgcGVybWlzc2lvblxuICAgICAqIEBtZXRob2QgY2hlY2tQZXJtaXNzaW9uXG4gICAgICogQHBhcmFtIHBlcm1pc3Npb24ge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHRoaXMuY2hlY2tQZXJtaXNzaW9uKFwiVXBsb2FkL0RlbGV0ZSBQcm9maWxlIEltYWdlXCIpXG4gICAgICovXG4gIGNoZWNrUGVybWlzc2lvbihwZXJtaXNzaW9uKSB7XG4gICAgaWYgKHRoaXMucGVybWlzc2lvbnNbcGVybWlzc2lvbl0gPT09IHVuZGVmaW5lZCB8fCB0aGlzLnBlcm1pc3Npb25zW3Blcm1pc3Npb25dID09IG51bGwgfHwgdGhpcy5wZXJtaXNzaW9uc1twZXJtaXNzaW9uXSA9PT0gJ1llcycpIHtcbiAgICAgIHJldHVybiAnWWVzJztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGVybWlzc2lvbnNbcGVybWlzc2lvbl07XG4gIH1cblxuICBzZXRCYXNlVXJsKHVybCkge1xuICAgIHRoaXMuYmFzZVVybCA9IHVybDtcbiAgfVxuXG4gIHNldENsaWVudFVybCh1cmwpIHtcbiAgICB0aGlzLmNsaWVudFVybCA9IHVybDtcbiAgfVxuXG4gIHNldFVzZXIodXNlcikge1xuICAgIHRoaXMudXNlciA9IHVzZXI7XG4gIH1cblxuICBnZXRVc2VyKCkge1xuICAgIHJldHVybiB0aGlzLnVzZXI7XG4gIH1cblxuICBzZXRJbnN0YW5jZUlkKGlkKSB7XG4gICAgdGhpcy5pbnN0YW5jZUlkID0gaWQ7XG4gIH1cblxuICBzZXRDU1JGUmVxdWlyZWQodmFsKSB7XG4gICAgdGhpcy5jc3JmUmVxdWlyZWQgPSB2YWw7XG4gIH1cblxuICBzY3JvbGxUb1RvcCgpIHtcbiAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogMCB9LCAnZmFzdCcpO1xuICB9XG5cbiAgc2Nyb2xsVG9Cb3R0b20oKSB7XG4gICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6ICQoZG9jdW1lbnQpLmhlaWdodCgpIH0sICdzbG93Jyk7XG4gIH1cblxuICBzY3JvbGxUb0VsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmICgkKHdpbmRvdykuaGVpZ2h0KCkgPD0gZWxlbWVudC5vZmZzZXQoKS50b3ApIHtcbiAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBlbGVtZW50Lm9mZnNldCgpLnRvcCB9LCAnc2xvdycpO1xuICAgIH1cbiAgfVxuXG4gIHNjcm9sbFRvRWxlbWVudEJvdHRvbShlbGVtZW50KSB7XG4gICAgaWYgKCQod2luZG93KS5oZWlnaHQoKSA8PSBlbGVtZW50Lm9mZnNldCgpLnRvcCArIGVsZW1lbnQuaGVpZ2h0KCkpIHtcbiAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHsgc2Nyb2xsVG9wOiBlbGVtZW50Lm9mZnNldCgpLnRvcCArIGVsZW1lbnQuaGVpZ2h0KCkgfSwgJ3Nsb3cnKTtcbiAgICB9XG4gIH1cblxuXG4gIHNldFRyYW5zbGF0aW9ucyh0eHQpIHtcbiAgICB0aGlzLnRyYW5zbGF0aW9ucyA9IHR4dC5tZXNzYWdlc1snJ107XG4gIH1cblxuICBzZXRUcmFuc2xhdGlvbnNTdWJNb2R1bGVzKHRyYW5zbGF0aW9ucykge1xuICAgIHRoaXMudHJhbnNsYXRpb25zID0gdHJhbnNsYXRpb25zO1xuICB9XG5cbiAgZ3Qoa2V5KSB7XG4gICAgaWYgKHRoaXMudHJhbnNsYXRpb25zW2tleV0gPT09IHVuZGVmaW5lZCB8fCB0aGlzLnRyYW5zbGF0aW9uc1trZXldID09PSBudWxsKSB7XG4gICAgICBjb25zb2xlLmxvZyhgVHI6JHtrZXl9YCk7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdGlvbnNba2V5XVswXTtcbiAgfVxuXG4gIGFkZFRvTGFuZ1Rlcm1zKGtleSkge1xuICAgIGxldCB0ZXJtc0FycjtcbiAgICBjb25zdCB0ZXJtcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0ZXJtcycpO1xuICAgIGlmICh0ZXJtcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0ZXJtc0FyciA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB0ZXJtc0FyciA9IEpTT04ucGFyc2UodGVybXMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0ZXJtc0FyciA9IHt9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnRyYW5zbGF0aW9uc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRlcm1zQXJyW2tleV0gPSBrZXk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGVybXMnLCBKU09OLnN0cmluZ2lmeSh0ZXJtc0FycikpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgICAqIElmIHRoaXMgbWV0aG9kIHJldHVybmVkIGZhbHNlIHRoZSBhY3Rpb24gYnV0dG9ucyBpbiBkYXRhIHRhYmxlIGZvciBtb2R1bGVzIHdpbGwgbm90IGJlIGRpc3BsYXllZC5cbiAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCBpbiBtb2R1bGUgbGliLmpzIHRvIGhpZGUgYWN0aW9uIGJ1dHRvbnNcbiAgICAgKiBAbWV0aG9kIHNob3dBY3Rpb25CdXR0b25zXG4gICAgICogQHBhcmFtIHBlcm1pc3Npb24ge1N0cmluZ31cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIEVtcGxveWVlTGVhdmVFbnRpdGxlbWVudEFkYXB0ZXIubWV0aG9kKCdzaG93QWN0aW9uQnV0dG9ucygpIHtcbiAgICAgKiAgcmV0dXJuIGZhbHNlO1xuICAgICAqIH1cbiAgICAgKi9cbiAgc2hvd0FjdGlvbkJ1dHRvbnMoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB0cmFja0V2ZW50KGFjdGlvbiwgbGFiZWwsIHZhbHVlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChsYWJlbCA9PT0gdW5kZWZpbmVkIHx8IGxhYmVsID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5nYS5wdXNoKFsnX3RyYWNrRXZlbnQnLCB0aGlzLmluc3RhbmNlSWQsIGFjdGlvbl0pO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5nYS5wdXNoKFsnX3RyYWNrRXZlbnQnLCB0aGlzLmluc3RhbmNlSWQsIGFjdGlvbiwgbGFiZWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZ2EucHVzaChbJ190cmFja0V2ZW50JywgdGhpcy5pbnN0YW5jZUlkLCBhY3Rpb24sIGxhYmVsLCB2YWx1ZV0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIERvIG5vdGhpbmdcbiAgICB9XG4gIH1cblxuXG4gIHNldEN1cnJlbnRQcm9maWxlKGN1cnJlbnRQcm9maWxlKSB7XG4gICAgdGhpcy5jdXJyZW50UHJvZmlsZSA9IGN1cnJlbnRQcm9maWxlO1xuICB9XG5cbiAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IHByb2ZpbGVcbiAgICAgKiBAbWV0aG9kIGdldEN1cnJlbnRQcm9maWxlXG4gICAgICogQHJldHVybnMgUHJvZmlsZSBvZiB0aGUgY3VycmVudCB1c2VyIGlmIHRoZSBwcm9maWxlIGlzIG5vdCBzd2l0Y2hlZCBpZiBub3Qgc3dpdGNoZWQgcHJvZmlsZVxuICAgICAqL1xuXG4gIGdldEN1cnJlbnRQcm9maWxlKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRQcm9maWxlO1xuICB9XG5cbiAgLyoqXG4gICAgICogUmV0cml2ZSBkYXRhIHJlcXVpcmVkIHRvIGNyZWF0ZSBzZWxlY3QgYm94ZXMgZm9yIGFkZCBuZXcgL2VkaXQgZm9ybXMgZm9yIGEgZ2l2ZW4gbW9kdWxlLiBUaGlzIGlzIGNhbGxlZCB3aGVuIGxvYWRpbmcgdGhlIG1vZHVsZVxuICAgICAqIEBtZXRob2QgaW5pdEZpZWxkTWFzdGVyRGF0YVxuICAgICAqIEBwYXJhbSBjYWxsYmFjayB7RnVuY3Rpb259IGNhbGwgdGhpcyBvbmNlIGxvYWRpbmcgY29tcGxldGVkXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIHtGdW5jdGlvbn0gY2FsbCB0aGlzIG9uY2UgYWxsIGZpZWxkIGxvYWRpbmcgY29tcGxldGVkLiBUaGlzIGluZGljYXRlIHRoYXQgdGhlIGZvcm0gY2FuIGJlIGRpc3BsYXllZCBzYWZ0bHlcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgUmVwb3J0QWRhcHRlci5tZXRob2QoJ3JlbmRlckZvcm0ob2JqZWN0KSB7XG4gICAgICogICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAqICAgIHRoaXMucHJvY2Vzc0Zvcm1GaWVsZHNXaXRoT2JqZWN0KG9iamVjdCk7XG4gICAgICogICAgdmFyIGNiID0gZnVuY3Rpb24oKXtcbiAgICAgKiAgICAgIHRoYXQuc3VwZXIucmVuZGVyRm9ybShvYmplY3QpO1xuICAgICAqICAgIH07XG4gICAgICogICAgdGhpcy5pbml0RmllbGRNYXN0ZXJEYXRhKGNiKTtcbiAgICAgKiAgfVxuICAgICAqL1xuICBpbml0RmllbGRNYXN0ZXJEYXRhKGNhbGxiYWNrLCBsb2FkQWxsQ2FsbGJhY2ssIGxvYWRBbGxDYWxsYmFja0RhdGEpIHtcbiAgICB0aGlzLmZpZWxkTWFzdGVyRGF0YSA9IHt9O1xuICAgIHRoaXMuZmllbGRNYXN0ZXJEYXRhS2V5cyA9IHt9O1xuICAgIHRoaXMuZmllbGRNYXN0ZXJEYXRhQ2FsbGJhY2sgPSBsb2FkQWxsQ2FsbGJhY2s7XG4gICAgdGhpcy5maWVsZE1hc3RlckRhdGFDYWxsYmFja0RhdGEgPSBsb2FkQWxsQ2FsbGJhY2tEYXRhO1xuXG4gICAgY29uc3QgcmVtb3RlU291cmNlRmllbGRzID0gdGhpcy5nZXRSZW1vdGVTb3VyY2VGaWVsZHMoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3RlU291cmNlRmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmaWVsZFJlbW90ZSA9IHJlbW90ZVNvdXJjZUZpZWxkc1tpXTtcbiAgICAgIGlmIChmaWVsZFJlbW90ZVsxXVsncmVtb3RlLXNvdXJjZSddICE9PSB1bmRlZmluZWQgJiYgZmllbGRSZW1vdGVbMV1bJ3JlbW90ZS1zb3VyY2UnXSAhPSBudWxsKSB7XG4gICAgICAgIC8vIGxldCBrZXkgPSBgJHtmaWVsZFJlbW90ZVsxXVsncmVtb3RlLXNvdXJjZSddWzBdfV8ke2ZpZWxkUmVtb3RlWzFdWydyZW1vdGUtc291cmNlJ11bMV19XyR7ZmllbGRSZW1vdGVbMV1bJ3JlbW90ZS1zb3VyY2UnXVsyXX1gO1xuICAgICAgICAvLyBpZiAoZmllbGRSZW1vdGVbMV1bJ3JlbW90ZS1zb3VyY2UnXS5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgLy8gICBrZXkgPSBgJHtrZXl9XyR7ZmllbGRSZW1vdGVbMV1bJ3JlbW90ZS1zb3VyY2UnXVszXX1gO1xuICAgICAgICAvLyB9XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZ2V0UmVtb3RlU291cmNlS2V5KGZpZWxkUmVtb3RlKTtcbiAgICAgICAgdGhpcy5maWVsZE1hc3RlckRhdGFLZXlzW2tleV0gPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBjYWxsQmFja0RhdGEgPSB7fTtcbiAgICAgICAgY2FsbEJhY2tEYXRhLmNhbGxCYWNrID0gJ2luaXRGaWVsZE1hc3RlckRhdGFSZXNwb25zZSc7XG4gICAgICAgIGNhbGxCYWNrRGF0YS5jYWxsQmFja0RhdGEgPSBba2V5XTtcbiAgICAgICAgaWYgKGNhbGxiYWNrICE9PSBudWxsICYmIGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjYWxsQmFja0RhdGEuY2FsbEJhY2tTdWNjZXNzID0gY2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZXRGaWVsZFZhbHVlcyhmaWVsZFJlbW90ZVsxXVsncmVtb3RlLXNvdXJjZSddLCBjYWxsQmFja0RhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgaW5pdFNvdXJjZU1hcHBpbmdzKCkge1xuICAgIHRoaXMuc291cmNlTWFwcGluZyA9IHt9O1xuXG4gICAgY29uc3QgcmVtb3RlU291cmNlRmllbGRzID0gdGhpcy5nZXRSZW1vdGVTb3VyY2VGaWVsZHMoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3RlU291cmNlRmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBmaWVsZFJlbW90ZSA9IHJlbW90ZVNvdXJjZUZpZWxkc1tpXTtcbiAgICAgIGlmIChmaWVsZFJlbW90ZVsxXVsncmVtb3RlLXNvdXJjZSddICE9PSB1bmRlZmluZWQgJiYgZmllbGRSZW1vdGVbMV1bJ3JlbW90ZS1zb3VyY2UnXSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc291cmNlTWFwcGluZ1tmaWVsZFJlbW90ZVswXV0gPSBmaWVsZFJlbW90ZVsxXVsncmVtb3RlLXNvdXJjZSddO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFJlbW90ZVNvdXJjZUtleShmaWVsZCkge1xuICAgIGxldCBrZXkgPSBgJHtmaWVsZFsxXVsncmVtb3RlLXNvdXJjZSddWzBdfV8ke2ZpZWxkWzFdWydyZW1vdGUtc291cmNlJ11bMV19XyR7ZmllbGRbMV1bJ3JlbW90ZS1zb3VyY2UnXVsyXX1gO1xuICAgIGlmIChmaWVsZFsxXVsncmVtb3RlLXNvdXJjZSddLmxlbmd0aCA+IDMpIHtcbiAgICAgIGtleSA9IGAke2tleX1fJHtmaWVsZFsxXVsncmVtb3RlLXNvdXJjZSddWzNdfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIGdldFJlbW90ZVNvdXJjZUZpZWxkcygpIHtcbiAgICBsZXQgdmFsdWVzO1xuICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuZ2V0Rm9ybUZpZWxkcygpO1xuICAgIGNvbnN0IGZpbHRlckZpZWxkcyA9IHRoaXMuZ2V0RmlsdGVycygpO1xuICAgIGNvbnN0IGFkZGl0aW9uYWxGaWVsZHMgPSB0aGlzLmdldEFkZGl0aW9uYWxSZW1vdGVGaWVsZHMoKTtcblxuICAgIGlmIChmaWx0ZXJGaWVsZHMgIT0gbnVsbCkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBmaWx0ZXJGaWVsZHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFsdWVzID0gZmlsdGVyRmllbGRzW2pdWzFdO1xuICAgICAgICBpZiAodmFsdWVzLnR5cGUgPT09ICdzZWxlY3QnIHx8IHZhbHVlcy50eXBlID09PSAnc2VsZWN0MicgfHwgdmFsdWVzLnR5cGUgPT09ICdzZWxlY3QybXVsdGknKSB7XG4gICAgICAgICAgZmllbGRzLnB1c2goZmlsdGVyRmllbGRzW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhZGRpdGlvbmFsRmllbGRzICE9IG51bGwpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWRkaXRpb25hbEZpZWxkcy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YWx1ZXMgPSBhZGRpdGlvbmFsRmllbGRzW2pdWzFdO1xuICAgICAgICBpZiAodmFsdWVzLnR5cGUgPT09ICdzZWxlY3QnIHx8IHZhbHVlcy50eXBlID09PSAnc2VsZWN0MicgfHwgdmFsdWVzLnR5cGUgPT09ICdzZWxlY3QybXVsdGknKSB7XG4gICAgICAgICAgZmllbGRzLnB1c2goYWRkaXRpb25hbEZpZWxkc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZW1vdGVTb3VyY2VGaWVsZHMgPSBbXTtcbiAgICBjb25zdCByZW1vdGVTb3VyY2VGaWVsZEtleXMgPSBbXTtcbiAgICBsZXQgZmllbGQgPSBudWxsO1xuICAgIGxldCBmaWVsZFN1YiA9IG51bGw7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZpZWxkID0gZmllbGRzW2ldO1xuICAgICAgaWYgKGZpZWxkWzFdWydyZW1vdGUtc291cmNlJ10gIT09IHVuZGVmaW5lZCAmJiBmaWVsZFsxXVsncmVtb3RlLXNvdXJjZSddICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZ2V0UmVtb3RlU291cmNlS2V5KGZpZWxkKTtcbiAgICAgICAgaWYgKHJlbW90ZVNvdXJjZUZpZWxkS2V5cy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgcmVtb3RlU291cmNlRmllbGRzLnB1c2goZmllbGQpO1xuICAgICAgICAgIHJlbW90ZVNvdXJjZUZpZWxkS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZmllbGRbMV0uZm9ybSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkWzFdLmZvcm0gIT09IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBmaWVsZFsxXS5mb3JtLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgZmllbGRTdWIgPSBmaWVsZFsxXS5mb3JtW2pdO1xuICAgICAgICAgIGlmIChmaWVsZFN1YlsxXVsncmVtb3RlLXNvdXJjZSddICE9PSB1bmRlZmluZWQgJiYgZmllbGRTdWJbMV1bJ3JlbW90ZS1zb3VyY2UnXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRSZW1vdGVTb3VyY2VLZXkoZmllbGRTdWIpO1xuICAgICAgICAgICAgaWYgKHJlbW90ZVNvdXJjZUZpZWxkS2V5cy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICAgICAgICAgIHJlbW90ZVNvdXJjZUZpZWxkcy5wdXNoKGZpZWxkU3ViKTtcbiAgICAgICAgICAgICAgcmVtb3RlU291cmNlRmllbGRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVtb3RlU291cmNlRmllbGRzO1xuICB9XG5cbiAgLyoqXG4gICAgICogUGFzcyB0cnVlIHRvIHRoaXMgbWV0aG9kIGFmdGVyIGNyZWF0aW5nIG1vZHVsZSBKUyBvYmplY3QgdG8gb3BlbiBuZXcvZWRpdCBlbnRyeSBmb3JtIGZvciB0aGUgbW9kdWxlIG9uIGEgcG9wdXAuXG4gICAgICogQG1ldGhvZCBzZXRTaG93Rm9ybU9uUG9wdXBcbiAgICAgKiBAcGFyYW0gdmFsIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBtb2RKcy5zdWJNb2RKc0xpc3RbJ3RhYkNhbmRpZGF0ZUFwcGxpY2F0aW9uJ10gPSBuZXcgQ2FuZGlkYXRlQXBwbGljYXRpb25BZGFwdGVyKCdBcHBsaWNhdGlvbicsJ0NhbmRpZGF0ZUFwcGxpY2F0aW9uJyx7XCJjYW5kaWRhdGVcIjpkYXRhLmlkfVxuICAgICAqICBtb2RKcy5zdWJNb2RKc0xpc3RbJ3RhYkNhbmRpZGF0ZUFwcGxpY2F0aW9uJ10uc2V0U2hvd0Zvcm1PblBvcHVwKHRydWUpO1xuICAgICAqL1xuXG4gIHNldFNob3dGb3JtT25Qb3B1cCh2YWwpIHtcbiAgICB0aGlzLnNob3dGb3JtT25Qb3B1cCA9IHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgICAqIFNldCB0aGlzIHRvIHRydWUgdG8gaWYgeW91IG5lZWQgdGhlIGRhdGF0YWJsZSB0byBsb2FkIGRhdGEgcGFnZSBieSBwYWdlIGluc3RlYWQgb2YgbG9hZGluZyBhbGwgZGF0YSBhdCBvbmNlLlxuICAgICAqIEBtZXRob2Qgc2V0UmVtb3RlVGFibGVcbiAgICAgKiBAcGFyYW0gdmFsIHtCb29sZWFufVxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBtb2RKcy5zdWJNb2RKc0xpc3RbJ3RhYkNhbmRpZGF0ZUFwcGxpY2F0aW9uJ10gPSBuZXcgQ2FuZGlkYXRlQXBwbGljYXRpb25BZGFwdGVyKCdBcHBsaWNhdGlvbicsJ0NhbmRpZGF0ZUFwcGxpY2F0aW9uJyx7XCJjYW5kaWRhdGVcIjpkYXRhLmlkfVxuICAgICAqICBtb2RKcy5zdWJNb2RKc0xpc3RbJ3RhYkNhbmRpZGF0ZUFwcGxpY2F0aW9uJ10uc2V0UmVtb3RlVGFibGUodHJ1ZSk7XG4gICAgICovXG5cbiAgc2V0UmVtb3RlVGFibGUodmFsKSB7XG4gICAgdGhpcy5jcmVhdGVSZW1vdGVUYWJsZSA9IHZhbDtcbiAgfVxuXG4gIHNldFNldHRpbmdzKHZhbCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSB2YWw7XG4gIH1cblxuICBnZXRSZW1vdGVUYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVSZW1vdGVUYWJsZTtcbiAgfVxuXG4gIGlzQWxsTG9hZGVkKGZpZWxkTWFzdGVyRGF0YUtleXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmaWVsZE1hc3RlckRhdGFLZXlzKSB7XG4gICAgICBpZiAoZmllbGRNYXN0ZXJEYXRhS2V5c1trZXldID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIGluaXRGaWVsZE1hc3RlckRhdGFSZXNwb25zZShrZXksIGRhdGEsIGNhbGxiYWNrLCBsb2FkQWxsQ2FsbGJhY2tEYXRhKSB7XG4gICAgdGhpcy5maWVsZE1hc3RlckRhdGFba2V5XSA9IGRhdGE7XG4gICAgdGhpcy5maWVsZE1hc3RlckRhdGFLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQgJiYgY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmllbGRNYXN0ZXJEYXRhQ2FsbGJhY2sgIT09IG51bGxcbiAgICAgICAgICAgICYmIHRoaXMuZmllbGRNYXN0ZXJEYXRhQ2FsbGJhY2sgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgJiYgdGhpcy5pc0FsbExvYWRlZCh0aGlzLmZpZWxkTWFzdGVyRGF0YUtleXMpXG4gICAgICAgICAgICAmJiAodGhpcy5maWVsZE1hc3RlckRhdGFDYWxsYmFja0RhdGEgIT09IG51bGwgJiYgdGhpcy5maWVsZE1hc3RlckRhdGFDYWxsYmFja0RhdGEgIT09IHVuZGVmaW5lZClcbiAgICApIHtcbiAgICAgIHRoaXMuZmllbGRNYXN0ZXJEYXRhQ2FsbGJhY2sodGhpcy5maWVsZE1hc3RlckRhdGFDYWxsYmFja0RhdGEpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZE1hc3RlckRhdGFDYWxsYmFjayAhPT0gbnVsbFxuICAgICAgICAgICAgJiYgdGhpcy5maWVsZE1hc3RlckRhdGFDYWxsYmFjayAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAmJiB0aGlzLmlzQWxsTG9hZGVkKHRoaXMuZmllbGRNYXN0ZXJEYXRhS2V5cylcbiAgICApIHtcbiAgICAgIHRoaXMuZmllbGRNYXN0ZXJEYXRhQ2FsbGJhY2soKTtcbiAgICB9XG4gIH1cblxuICBnZXRNZXRhRmllbGRWYWx1ZXMoa2V5LCBmaWVsZHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGtleSA9PT0gZmllbGRzW2ldWzBdKSB7XG4gICAgICAgIHJldHVybiBmaWVsZHNbaV1bMV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0VGhlbWVDb2xvcnMoKSB7XG4gICAgY29uc3QgY29sb3JzID0gWydyZWQnLCAneWVsbG93JywgJ2FxdWEnLCAnYmx1ZScsXG4gICAgICAnbGlnaHQtYmx1ZScsICdncmVlbicsICduYXZ5JywgJ3RlYWwnLCAnb2xpdmUnLCAnb3JhbmdlJyxcbiAgICAgICdmdWNoc2lhJywgJ3B1cnBsZSddO1xuXG4gICAgcmV0dXJuIGNvbG9ycztcbiAgfVxuXG4gIGdldENvbG9yQnlSYW5kb21TdHJpbmcoc3RyaW5nKSB7XG4gICAgY29uc3QgY29sb3JzID0gdGhpcy5nZXRUaGVtZUNvbG9ycygpO1xuICAgIGNvbnN0IGsgPSBzdHJpbmcuY2hhckNvZGVBdCgwKTtcbiAgICByZXR1cm4gY29sb3JzW2sgJSBjb2xvcnMubGVuZ3RoXTtcbiAgfVxuXG4gIGdldENvbG9yQnlGaWxlVHlwZSh0eXBlKSB7XG4gICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcblxuICAgIGNvbnN0IGNvbG9yTWFwID0ge307XG4gICAgY29sb3JNYXAucGRmID0gJ3JlZCc7XG4gICAgY29sb3JNYXAuY3N2ID0gJ3llbGxvdyc7XG4gICAgY29sb3JNYXAueGxzID0gJ2dyZWVuJztcbiAgICBjb2xvck1hcC54bHN4ID0gJ2dyZWVuJztcbiAgICBjb2xvck1hcC5kb2MgPSAnbGlnaHQtYmx1ZSc7XG4gICAgY29sb3JNYXAuZG9jeCA9ICdsaWdodC1ibHVlJztcbiAgICBjb2xvck1hcC5kb2N4ID0gJ2JsdWUnO1xuICAgIGNvbG9yTWFwLnBwdCA9ICdvcmFuZ2UnO1xuICAgIGNvbG9yTWFwLnBwdHggPSAnb3JhbmdlJztcbiAgICBjb2xvck1hcC5qcGcgPSAndGVhbCc7XG4gICAgY29sb3JNYXAuanBlZyA9ICd0ZWFsJztcbiAgICBjb2xvck1hcC5naWYgPSAnZ3JlZW4nO1xuICAgIGNvbG9yTWFwLnBuZyA9ICd5ZWxsb3cnO1xuICAgIGNvbG9yTWFwLmJtcCA9ICdmdWNoc2lhJztcblxuXG4gICAgaWYgKGNvbG9yTWFwW3R5cGVdICE9PSB1bmRlZmluZWQgfHwgY29sb3JNYXBbdHlwZV0gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbG9yTWFwW3R5cGVdO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRDb2xvckJ5UmFuZG9tU3RyaW5nKHR5cGUpO1xuICB9XG5cbiAgZ2V0SWNvbkJ5RmlsZVR5cGUodHlwZSkge1xuICAgIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBjb25zdCBpY29uTWFwID0ge307XG4gICAgaWNvbk1hcC5wZGYgPSAnZmFyIGZhLWZpbGUtcGRmJztcbiAgICBpY29uTWFwLmNzdiA9ICdmYSBmYXIgZmEtZmlsZS1jb2RlJztcbiAgICBpY29uTWFwLnhscyA9ICdmYXIgZmEtZmlsZS1leGNlbCc7XG4gICAgaWNvbk1hcC54bHN4ID0gJ2ZhciBmYS1maWxlLWV4Y2VsJztcbiAgICBpY29uTWFwLmRvYyA9ICdmYXIgZmEtZmlsZS13b3JkJztcbiAgICBpY29uTWFwLmRvY3ggPSAnZmFyIGZhLWZpbGUtd29yZCc7XG4gICAgaWNvbk1hcC5wcHQgPSAnZmFyIGZhLWZpbGUtcG93ZXJwb2ludCc7XG4gICAgaWNvbk1hcC5wcHR4ID0gJ2ZhciBmYS1maWxlLXBvd2VycG9pbnQnO1xuICAgIGljb25NYXAuanBnID0gJ2ZhciBmYS1maWxlLWltYWdlJztcbiAgICBpY29uTWFwLmpwZWcgPSAnZmFyIGZhLWZpbGUtaW1hZ2UnO1xuICAgIGljb25NYXAuZ2lmID0gJ2ZhciBmYS1maWxlLWltYWdlJztcbiAgICBpY29uTWFwLnBuZyA9ICdmYXIgZmEtZmlsZS1pbWFnZSc7XG4gICAgaWNvbk1hcC5ibXAgPSAnZmFyIGZhLWZpbGUtaW1hZ2UnO1xuICAgIGljb25NYXAudHh0ID0gJ2ZhciBmYS1maWxlLXRleHQnO1xuICAgIGljb25NYXAucnRmID0gJ2ZhciBmYS1maWxlLXRleHQnO1xuXG5cbiAgICBpZiAoaWNvbk1hcFt0eXBlXSAhPT0gdW5kZWZpbmVkIHx8IGljb25NYXBbdHlwZV0gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGljb25NYXBbdHlwZV07XG4gICAgfVxuICAgIHJldHVybiAnZmFyIGZhLWZpbGUnO1xuICB9XG5cbiAgZ2V0U291cmNlTWFwcGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VNYXBwaW5nO1xuICB9XG5cbiAgc2V0VGVzdGluZyh0ZXN0aW5nKSB7XG4gICAgdGhpcy50ZXN0aW5nID0gdGVzdGluZztcbiAgfVxuXG4gIGNvbnNvbGVMb2cobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnRlc3RpbmcpIHtcbiAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHNldENsaWVudE1lc3NhZ2VzKG1zZ0xpc3QpIHtcbiAgICB0aGlzLm1zZ0xpc3QgPSBtc2dMaXN0O1xuICB9XG5cbiAgc2V0VGVtcGxhdGVzKHRlbXBsYXRlcykge1xuICAgIHRoaXMudGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICB9XG5cblxuICBnZXRXU1Byb3BlcnR5KGFycmF5LCBrZXkpIHtcbiAgICBpZiAoYXJyYXkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIGFycmF5W2tleV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxuICBnZXRDbGllbnRNZXNzYWdlKGtleSkge1xuICAgIHJldHVybiB0aGlzLmdldFdTUHJvcGVydHkodGhpcy5tc2dMaXN0LCBrZXkpO1xuICB9XG5cblxuICBnZXRUZW1wbGF0ZShrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRXU1Byb3BlcnR5KHRoaXMudGVtcGxhdGVzLCBrZXkpO1xuICB9XG5cbiAgc2V0R29vZ2xlQW5hbHl0aWNzKGdhcSkge1xuICAgIHRoaXMuZ2FxID0gZ2FxO1xuICB9XG5cblxuICBzaG93Vmlldyh2aWV3KSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFZpZXcgIT0gbnVsbCkge1xuICAgICAgdGhpcy5wcmV2aW91c1ZpZXcgPSB0aGlzLmN1cnJlbnRWaWV3O1xuICAgICAgJChgIyR7dGhpcy5jdXJyZW50Vmlld31gKS5oaWRlKCk7XG4gICAgfVxuICAgICQoYCMke3ZpZXd9YCkuc2hvdygpO1xuICAgIHRoaXMuY3VycmVudFZpZXcgPSB2aWV3O1xuICAgIHRoaXMubW92ZVRvVG9wKCk7XG4gIH1cblxuICBzaG93UHJldmlvdXNWaWV3KCkge1xuICAgIHRoaXMuc2hvd1ZpZXcodGhpcy5wcmV2aW91c1ZpZXcpO1xuICB9XG5cblxuICBtb3ZlVG9Ub3AoKSB7XG5cbiAgfVxuXG5cbiAgY2FsbEZ1bmN0aW9uKGNhbGxiYWNrLCBjYlBhcmFtcywgdGhpc1BhcmFtKSB7XG4gICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzUGFyYW0gPT09IHVuZGVmaW5lZCB8fCB0aGlzUGFyYW0gPT09IG51bGwpIHtcbiAgICAgICAgICBjYWxsYmFjay5hcHBseShkb2N1bWVudCwgY2JQYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXNQYXJhbSwgY2JQYXJhbXMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGYgPSB0aGlzW2NhbGxiYWNrXTtcbiAgICAgIGlmICgkLmlzRnVuY3Rpb24oZikpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmLmFwcGx5KHRoaXMsIGNiUGFyYW1zKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGUubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRUYWJsZVRvcEJ1dHRvbkh0bWwoKSB7XG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICBpZiAodGhpcy5nZXRTaG93QWRkTmV3KCkpIHtcbiAgICAgIGh0bWwgPSBgPGJ1dHRvbiBvbmNsaWNrPVwibW9kSnMucmVuZGVyRm9ybSgpO3JldHVybiBmYWxzZTtcIiBjbGFzcz1cImJ0biBidG4tc21hbGwgYnRuLXByaW1hcnlcIj4ke3RoaXMuZ3QodGhpcy5nZXRBZGROZXdMYWJlbCgpKX0gPGkgY2xhc3M9XCJmYSBmYS1wbHVzXCI+PC9pPjwvYnV0dG9uPmA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZ2V0RmlsdGVycygpICE9IG51bGwpIHtcbiAgICAgIGlmIChodG1sICE9PSAnJykge1xuICAgICAgICBodG1sICs9ICcmbmJzcDsmbmJzcDsnO1xuICAgICAgfVxuICAgICAgaHRtbCArPSBgPGJ1dHRvbiBvbmNsaWNrPVwibW9kSnMuc2hvd0ZpbHRlcnMoKTtyZXR1cm4gZmFsc2U7XCIgY2xhc3M9XCJidG4gYnRuLXNtYWxsIGJ0bi1wcmltYXJ5XCI+JHt0aGlzLmd0KCdGaWx0ZXInKX0gPGkgY2xhc3M9XCJmYSBmYS1maWx0ZXJcIj48L2k+PC9idXR0b24+YDtcbiAgICAgIGh0bWwgKz0gJyZuYnNwOyZuYnNwOyc7XG4gICAgICBpZiAodGhpcy5maWx0ZXJzQWxyZWFkeVNldCkge1xuICAgICAgICBodG1sICs9ICc8YnV0dG9uIGlkPVwiX19pZF9fX3Jlc2V0RmlsdGVyc1wiIG9uY2xpY2s9XCJtb2RKcy5yZXNldEZpbHRlcnMoKTtyZXR1cm4gZmFsc2U7XCIgY2xhc3M9XCJidG4gYnRuLXNtYWxsIGJ0bi1kZWZhdWx0XCI+X19maWx0ZXJTdHJpbmdfXyA8aSBjbGFzcz1cImZhIGZhLXRpbWVzXCI+PC9pPjwvYnV0dG9uPic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBodG1sICs9ICc8YnV0dG9uIGlkPVwiX19pZF9fX3Jlc2V0RmlsdGVyc1wiIG9uY2xpY2s9XCJtb2RKcy5yZXNldEZpbHRlcnMoKTtyZXR1cm4gZmFsc2U7XCIgY2xhc3M9XCJidG4gYnRuLXNtYWxsIGJ0bi1kZWZhdWx0XCIgc3R5bGU9XCJkaXNwbGF5Om5vbmU7XCI+X19maWx0ZXJTdHJpbmdfXyA8aSBjbGFzcz1cImZhIGZhLXRpbWVzXCI+PC9pPjwvYnV0dG9uPic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvX19pZF9fL2csIHRoaXMuZ2V0VGFibGVOYW1lKCkpO1xuXG4gICAgaWYgKHRoaXMuY3VycmVudEZpbHRlclN0cmluZyAhPT0gJycgJiYgdGhpcy5jdXJyZW50RmlsdGVyU3RyaW5nICE9IG51bGwpIHtcbiAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL19fZmlsdGVyU3RyaW5nX18vZywgdGhpcy5jdXJyZW50RmlsdGVyU3RyaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvX19maWx0ZXJTdHJpbmdfXy9nLCAnUmVzZXQgRmlsdGVycycpO1xuICAgIH1cblxuICAgIGlmIChodG1sICE9PSAnJykge1xuICAgICAgaHRtbCA9IGA8ZGl2IGNsYXNzPVwicm93XCI+PGRpdiBjbGFzcz1cImNvbC14cy0xMlwiPiR7aHRtbH08L2Rpdj48L2Rpdj5gO1xuICAgIH1cblxuICAgIHJldHVybiBodG1sO1xuICB9XG5cblxuICBnZXRBY3Rpb25CdXR0b25IZWFkZXIoKSB7XG4gICAgcmV0dXJuIHsgc1RpdGxlOiAnJywgc0NsYXNzOiAnY2VudGVyJyB9O1xuICB9XG5cbiAgZ2V0VGFibGVIVE1MVGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiYm94LWJvZHkgdGFibGUtcmVzcG9uc2l2ZVwiPjx0YWJsZSBjZWxscGFkZGluZz1cIjBcIiBjZWxsc3BhY2luZz1cIjBcIiBib3JkZXI9XCIwXCIgY2xhc3M9XCJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1zdHJpcGVkXCIgaWQ9XCJncmlkXCI+PC90YWJsZT48L2Rpdj4nO1xuICB9XG5cbiAgaXNTb3J0YWJsZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgICAqIENyZWF0ZSB0aGUgZGF0YSB0YWJsZSBvbiBwcm92aWRlZCBlbGVtZW50IGlkXG4gICAgICogQG1ldGhvZCBjcmVhdGVUYWJsZVxuICAgICAqIEBwYXJhbSB2YWwge0Jvb2xlYW59XG4gICAgICovXG5cbiAgY3JlYXRlVGFibGUoZWxlbWVudElkKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5nZXRSZW1vdGVUYWJsZSgpKSB7XG4gICAgICB0aGlzLmNyZWF0ZVRhYmxlU2VydmVyKGVsZW1lbnRJZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5nZXRIZWFkZXJzKCk7XG5cbiAgICAvLyBhZGQgdHJhbnNsYXRpb25zXG4gICAgZm9yIChjb25zdCBpbmRleCBpbiBoZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzW2luZGV4XS5zVGl0bGUgPSB0aGlzLmd0KGhlYWRlcnNbaW5kZXhdLnNUaXRsZSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0VGFibGVEYXRhKCk7XG5cbiAgICBpZiAodGhpcy5zaG93QWN0aW9uQnV0dG9ucygpKSB7XG4gICAgICBoZWFkZXJzLnB1c2godGhpcy5nZXRBY3Rpb25CdXR0b25IZWFkZXIoKSk7XG4gICAgfVxuXG5cbiAgICBpZiAodGhpcy5zaG93QWN0aW9uQnV0dG9ucygpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGF0YVtpXS5wdXNoKHRoaXMuZ2V0QWN0aW9uQnV0dG9uc0h0bWwoZGF0YVtpXVswXSwgZGF0YVtpXSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBodG1sID0gJyc7XG4gICAgaHRtbCA9IHRoaXMuZ2V0VGFibGVUb3BCdXR0b25IdG1sKCkgKyB0aGlzLmdldFRhYmxlSFRNTFRlbXBsYXRlKCk7XG4gICAgLypcbiAgICAgICAgIGlmKHRoaXMuZ2V0U2hvd0FkZE5ldygpKXtcbiAgICAgICAgIGh0bWwgPSB0aGlzLmdldFRhYmxlVG9wQnV0dG9uSHRtbCgpKyc8ZGl2IGNsYXNzPVwiYm94LWJvZHkgdGFibGUtcmVzcG9uc2l2ZVwiPjx0YWJsZSBjZWxscGFkZGluZz1cIjBcIiBjZWxsc3BhY2luZz1cIjBcIiBib3JkZXI9XCIwXCIgY2xhc3M9XCJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1zdHJpcGVkXCIgaWQ9XCJncmlkXCI+PC90YWJsZT48L2Rpdj4nO1xuICAgICAgICAgfWVsc2V7XG4gICAgICAgICBodG1sID0gJzxkaXYgY2xhc3M9XCJib3gtYm9keSB0YWJsZS1yZXNwb25zaXZlXCI+PHRhYmxlIGNlbGxwYWRkaW5nPVwiMFwiIGNlbGxzcGFjaW5nPVwiMFwiIGJvcmRlcj1cIjBcIiBjbGFzcz1cInRhYmxlIHRhYmxlLWJvcmRlcmVkIHRhYmxlLXN0cmlwZWRcIiBpZD1cImdyaWRcIj48L3RhYmxlPjwvZGl2Pic7XG4gICAgICAgICB9XG4gICAgICAgICAqL1xuICAgIC8vIEZpbmQgY3VycmVudCBwYWdlXG4gICAgY29uc3QgYWN0aXZlUGFnZSA9ICQoYCMke2VsZW1lbnRJZH0gLmRhdGFUYWJsZXNfcGFnaW5hdGUgLmFjdGl2ZSBhYCkuaHRtbCgpO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgaWYgKGFjdGl2ZVBhZ2UgIT09IHVuZGVmaW5lZCAmJiBhY3RpdmVQYWdlICE9IG51bGwpIHtcbiAgICAgIHN0YXJ0ID0gcGFyc2VJbnQoYWN0aXZlUGFnZSwgMTApICogMTUgLSAxNTtcbiAgICB9XG5cbiAgICAkKGAjJHtlbGVtZW50SWR9YCkuaHRtbChodG1sKTtcblxuICAgIGNvbnN0IGRhdGFUYWJsZVBhcmFtcyA9IHtcbiAgICAgIG9MYW5ndWFnZToge1xuICAgICAgICBzTGVuZ3RoTWVudTogJ19NRU5VXyByZWNvcmRzIHBlciBwYWdlJyxcbiAgICAgIH0sXG4gICAgICBhYURhdGE6IGRhdGEsXG4gICAgICBhb0NvbHVtbnM6IGhlYWRlcnMsXG4gICAgICBiU29ydDogdGhhdC5pc1NvcnRhYmxlKCksXG4gICAgICBpRGlzcGxheUxlbmd0aDogMTUsXG4gICAgICBpRGlzcGxheVN0YXJ0OiBzdGFydCxcbiAgICB9O1xuXG5cbiAgICBjb25zdCBjdXN0b21UYWJsZVBhcmFtcyA9IHRoaXMuZ2V0Q3VzdG9tVGFibGVQYXJhbXMoKTtcblxuICAgICQuZXh0ZW5kKGRhdGFUYWJsZVBhcmFtcywgY3VzdG9tVGFibGVQYXJhbXMpO1xuXG4gICAgJChgIyR7ZWxlbWVudElkfSAjZ3JpZGApLmRhdGFUYWJsZShkYXRhVGFibGVQYXJhbXMpO1xuXG4gICAgJCgnLmRhdGFUYWJsZXNfcGFnaW5hdGUgdWwnKS5hZGRDbGFzcygncGFnaW5hdGlvbicpO1xuICAgICQoJy5kYXRhVGFibGVzX2xlbmd0aCcpLmhpZGUoKTtcbiAgICAkKCcuZGF0YVRhYmxlc19maWx0ZXIgaW5wdXQnKS5hZGRDbGFzcygnZm9ybS1jb250cm9sJyk7XG4gICAgJCgnLmRhdGFUYWJsZXNfZmlsdGVyIGlucHV0JykuYXR0cigncGxhY2Vob2xkZXInLCAnU2VhcmNoJyk7XG4gICAgJCgnLmRhdGFUYWJsZXNfZmlsdGVyIGxhYmVsJykuY29udGVudHMoKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICh0aGlzLm5vZGVUeXBlID09PSAzKTtcbiAgICB9KS5yZW1vdmUoKTtcbiAgICAkKCcudGFibGVBY3Rpb25CdXR0b24nKS50b29sdGlwKCk7XG4gIH1cblxuICAvKipcbiAgICAgKiBDcmVhdGUgYSBkYXRhIHRhYmxlIG9uIHByb3ZpZGVkIGVsZW1lbnQgaWQgd2hpY2ggbG9hZHMgZGF0YSBwYWdlIGJ5IHBhZ2VcbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVRhYmxlU2VydmVyXG4gICAgICogQHBhcmFtIHZhbCB7Qm9vbGVhbn1cbiAgICAgKi9cblxuICBjcmVhdGVUYWJsZVNlcnZlcihlbGVtZW50SWQpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5nZXRIZWFkZXJzKCk7XG5cbiAgICBoZWFkZXJzLnB1c2goeyBzVGl0bGU6ICcnLCBzQ2xhc3M6ICdjZW50ZXInIH0pO1xuXG4gICAgLy8gYWRkIHRyYW5zbGF0aW9uc1xuICAgIGZvciAoY29uc3QgaW5kZXggaW4gaGVhZGVycykge1xuICAgICAgaGVhZGVyc1tpbmRleF0uc1RpdGxlID0gdGhpcy5ndChoZWFkZXJzW2luZGV4XS5zVGl0bGUpO1xuICAgIH1cblxuICAgIGxldCBodG1sID0gJyc7XG4gICAgaHRtbCA9IHRoaXMuZ2V0VGFibGVUb3BCdXR0b25IdG1sKCkgKyB0aGlzLmdldFRhYmxlSFRNTFRlbXBsYXRlKCk7XG5cbiAgICAvLyBGaW5kIGN1cnJlbnQgcGFnZVxuICAgIGNvbnN0IGFjdGl2ZVBhZ2UgPSAkKGAjJHtlbGVtZW50SWR9IC5kYXRhVGFibGVzX3BhZ2luYXRlIC5hY3RpdmUgYWApLmh0bWwoKTtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGlmIChhY3RpdmVQYWdlICE9PSB1bmRlZmluZWQgJiYgYWN0aXZlUGFnZSAhPSBudWxsKSB7XG4gICAgICBzdGFydCA9IHBhcnNlSW50KGFjdGl2ZVBhZ2UsIDEwKSAqIDE1IC0gMTU7XG4gICAgfVxuXG5cbiAgICAkKGAjJHtlbGVtZW50SWR9YCkuaHRtbChodG1sKTtcblxuICAgIGNvbnN0IGRhdGFUYWJsZVBhcmFtcyA9IHtcbiAgICAgIG9MYW5ndWFnZToge1xuICAgICAgICBzTGVuZ3RoTWVudTogJ19NRU5VXyByZWNvcmRzIHBlciBwYWdlJyxcbiAgICAgIH0sXG4gICAgICBiUHJvY2Vzc2luZzogdHJ1ZSxcbiAgICAgIGJTZXJ2ZXJTaWRlOiB0cnVlLFxuICAgICAgc0FqYXhTb3VyY2U6IHRoYXQuZ2V0RGF0YVVybCh0aGF0LmdldERhdGFNYXBwaW5nKCkpLFxuICAgICAgYW9Db2x1bW5zOiBoZWFkZXJzLFxuICAgICAgYlNvcnQ6IHRoYXQuaXNTb3J0YWJsZSgpLFxuICAgICAgcGFyZW50OiB0aGF0LFxuICAgICAgaURpc3BsYXlMZW5ndGg6IDE1LFxuICAgICAgaURpc3BsYXlTdGFydDogc3RhcnQsXG4gICAgfTtcblxuICAgIGlmICh0aGlzLnNob3dBY3Rpb25CdXR0b25zKCkpIHtcbiAgICAgIGRhdGFUYWJsZVBhcmFtcy5hb0NvbHVtbkRlZnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBmblJlbmRlcjogdGhhdC5nZXRBY3Rpb25CdXR0b25zLFxuICAgICAgICAgIGFUYXJnZXRzOiBbdGhhdC5nZXREYXRhTWFwcGluZygpLmxlbmd0aF0sXG4gICAgICAgIH0sXG4gICAgICBdO1xuICAgIH1cblxuICAgIGNvbnN0IGN1c3RvbVRhYmxlUGFyYW1zID0gdGhpcy5nZXRDdXN0b21UYWJsZVBhcmFtcygpO1xuXG4gICAgJC5leHRlbmQoZGF0YVRhYmxlUGFyYW1zLCBjdXN0b21UYWJsZVBhcmFtcyk7XG5cbiAgICAkKGAjJHtlbGVtZW50SWR9ICNncmlkYCkuZGF0YVRhYmxlKGRhdGFUYWJsZVBhcmFtcyk7XG5cbiAgICAkKCcuZGF0YVRhYmxlc19wYWdpbmF0ZSB1bCcpLmFkZENsYXNzKCdwYWdpbmF0aW9uJyk7XG4gICAgJCgnLmRhdGFUYWJsZXNfbGVuZ3RoJykuaGlkZSgpO1xuICAgICQoJy5kYXRhVGFibGVzX2ZpbHRlciBpbnB1dCcpLmFkZENsYXNzKCdmb3JtLWNvbnRyb2wnKTtcbiAgICAkKCcuZGF0YVRhYmxlc19maWx0ZXIgaW5wdXQnKS5hdHRyKCdwbGFjZWhvbGRlcicsICdTZWFyY2gnKTtcbiAgICAkKCcuZGF0YVRhYmxlc19maWx0ZXIgbGFiZWwnKS5jb250ZW50cygpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMubm9kZVR5cGUgPT09IDMpO1xuICAgIH0pLnJlbW92ZSgpO1xuXG4gICAgJCgnLnRhYmxlQWN0aW9uQnV0dG9uJykudG9vbHRpcCgpO1xuICB9XG5cbiAgLyoqXG4gICAgICogVGhpcyBzaG91bGQgYmUgb3ZlcnJpZGRlbiBpbiBtb2R1bGUgbGliLmpzIGNsYXNzZXMgdG8gcmV0dXJuIG1vZHVsZSBoZWFkZXJzIHdoaWNoIGFyZSB1c2VkIHRvIGNyZWF0ZSB0aGUgZGF0YSB0YWJsZS5cbiAgICAgKiBAbWV0aG9kIGdldEhlYWRlcnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICBTZXR0aW5nQWRhcHRlci5tZXRob2QoJ2dldEhlYWRlcnMoKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgeyBcInNUaXRsZVwiOiBcIklEXCIgLFwiYlZpc2libGVcIjpmYWxzZX0sXG4gICAgICB7IFwic1RpdGxlXCI6IFwiTmFtZVwiIH0sXG4gICAgICB7IFwic1RpdGxlXCI6IFwiVmFsdWVcIn0sXG4gICAgICB7IFwic1RpdGxlXCI6IFwiRGV0YWlsc1wifVxuICAgIF07XG4gICAgfVxuICAgICAqL1xuICBnZXRIZWFkZXJzKCkge1xuXG4gIH1cblxuXG4gIC8qKlxuICAgICAqIFRoaXMgc2hvdWxkIGJlIG92ZXJyaWRkZW4gaW4gbW9kdWxlIGxpYi5qcyBjbGFzc2VzIHRvIHJldHVybiBtb2R1bGUgZmllbGQgdmFsdWVzIHdoaWNoIGFyZSB1c2VkIHRvIGNyZWF0ZSB0aGUgZGF0YSB0YWJsZS5cbiAgICAgKiBAbWV0aG9kIGdldERhdGFNYXBwaW5nXG4gICAgICogQGV4YW1wbGVcbiAgICAgU2V0dGluZ0FkYXB0ZXIubWV0aG9kKCdnZXREYXRhTWFwcGluZygpIHtcbiAgcmV0dXJuIFtcbiAgICAgICAgICBcImlkXCIsXG4gICAgICAgICAgXCJuYW1lXCIsXG4gICAgICAgICAgXCJ2YWx1ZVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIlxuICBdO1xuICB9XG4gICAgICovXG5cbiAgZ2V0RGF0YU1hcHBpbmcoKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgICAqIFRoaXMgc2hvdWxkIGJlIG92ZXJyaWRkZW4gaW4gbW9kdWxlIGxpYi5qcyBjbGFzc2VzIHRvIHJldHVybiBtb2R1bGUgZnJvbSBmaWVsZHMgd2hpY2ggYXJlIHVzZWQgdG8gY3JlYXRlIHRoZSBhZGQvZWRpdCBmb3JtIGFuZCBhbHNvIHVzZWQgZm9yIGluaXRpYWxpemluZyBzZWxlY3QgYm94IHZhbHVlcyBpbiBmb3JtLlxuICAgICAqIEBtZXRob2QgZ2V0Rm9ybUZpZWxkc1xuICAgICAqIEBleGFtcGxlXG4gICAgIFNldHRpbmdBZGFwdGVyLm1ldGhvZCgnZ2V0Rm9ybUZpZWxkcygpIHtcbiAgcmV0dXJuIFtcbiAgICAgICAgICBbIFwiaWRcIiwge1wibGFiZWxcIjpcIklEXCIsXCJ0eXBlXCI6XCJoaWRkZW5cIn1dLFxuICAgICAgICAgIFsgXCJ2YWx1ZVwiLCB7XCJsYWJlbFwiOlwiVmFsdWVcIixcInR5cGVcIjpcInRleHRcIixcInZhbGlkYXRpb25cIjpcIm5vbmVcIn1dXG4gIF07XG4gIH1cbiAgICAgKi9cbiAgZ2V0Rm9ybUZpZWxkcygpIHtcblxuICB9XG5cbiAgZ2V0VGFibGVDb2x1bW5zKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGdldFRhYmxlRGF0YSgpIHtcblxuICB9XG5cbiAgLyoqXG4gICAgICogVGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiBpbiBtb2R1bGUgbGliLmpzIGNsYXNzZXMgaW5vcmRlciB0byBzaG93IGEgZmlsdGVyIGZvcm1cbiAgICAgKiBAbWV0aG9kIGdldEZpbHRlcnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICBFbXBsb3llZUFkYXB0ZXIubWV0aG9kKCdnZXRGaWx0ZXJzKCkge1xuICAgIHJldHVybiBbXG4gICAgICAgICAgICBbIFwiam9iX3RpdGxlXCIsIHtcImxhYmVsXCI6XCJKb2IgVGl0bGVcIixcInR5cGVcIjpcInNlbGVjdDJcIixcImFsbG93LW51bGxcIjp0cnVlLFwibnVsbC1sYWJlbFwiOlwiQWxsIEpvYiBUaXRsZXNcIixcInJlbW90ZS1zb3VyY2VcIjpbXCJKb2JUaXRsZVwiLFwiaWRcIixcIm5hbWVcIl19XSxcbiAgICAgICAgICAgIFsgXCJkZXBhcnRtZW50XCIsIHtcImxhYmVsXCI6XCJEZXBhcnRtZW50XCIsXCJ0eXBlXCI6XCJzZWxlY3QyXCIsXCJhbGxvdy1udWxsXCI6dHJ1ZSxcIm51bGwtbGFiZWxcIjpcIkFsbCBEZXBhcnRtZW50c1wiLFwicmVtb3RlLXNvdXJjZVwiOltcIkNvbXBhbnlTdHJ1Y3R1cmVcIixcImlkXCIsXCJ0aXRsZVwiXX1dLFxuICAgICAgICAgICAgWyBcInN1cGVydmlzb3JcIiwge1wibGFiZWxcIjpcIlN1cGVydmlzb3JcIixcInR5cGVcIjpcInNlbGVjdDJcIixcImFsbG93LW51bGxcIjp0cnVlLFwibnVsbC1sYWJlbFwiOlwiQW55b25lXCIsXCJyZW1vdGUtc291cmNlXCI6W1wiRW1wbG95ZWVcIixcImlkXCIsXCJmaXJzdF9uYW1lK2xhc3RfbmFtZVwiXX1dXG4gICAgXTtcbiAgfVxuICAgICAqL1xuICBnZXRGaWx0ZXJzKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0QWRkaXRpb25hbFJlbW90ZUZpZWxkcygpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgICAqIFNob3cgdGhlIGVkaXQgZm9ybSBmb3IgYW4gaXRlbVxuICAgICAqIEBtZXRob2QgZWRpdFxuICAgICAqIEBwYXJhbSBpZCB7aW50fSBpZCBvZiB0aGUgaXRlbSB0byBlZGl0XG4gICAgICovXG4gIGVkaXQoaWQpIHtcbiAgICB0aGlzLmN1cnJlbnRJZCA9IGlkO1xuICAgIHRoaXMuZ2V0RWxlbWVudChpZCwgW10pO1xuICB9XG5cbiAgY29weVJvdyhpZCkge1xuICAgIHRoaXMuZ2V0RWxlbWVudChpZCwgW10sIHRydWUpO1xuICB9XG5cbiAgcmVuZGVyTW9kZWwoaWQsIGhlYWRlciwgYm9keSkge1xuICAgICQoYCMke2lkfU1vZGVsQm9keWApLmh0bWwoJycpO1xuXG4gICAgaWYgKGJvZHkgPT09IHVuZGVmaW5lZCB8fCBib2R5ID09IG51bGwpIHtcbiAgICAgIGJvZHkgPSAnJztcbiAgICB9XG5cbiAgICAkKGAjJHtpZH1Nb2RlbExhYmVsYCkuaHRtbChoZWFkZXIpO1xuICAgICQoYCMke2lkfU1vZGVsQm9keWApLmh0bWwoYm9keSk7XG4gIH1cblxuXG4gIHJlbmRlclllc05vTW9kZWwoaGVhZGVyLCBib2R5LCB5ZXNCdG5OYW1lLCBub0J0bk5hbWUsIGNhbGxiYWNrLCBjYWxsYmFja1BhcmFtcykge1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIGNvbnN0IG1vZGVsSWQgPSAnI3llc25vTW9kZWwnO1xuXG4gICAgaWYgKGJvZHkgPT09IHVuZGVmaW5lZCB8fCBib2R5ID09IG51bGwpIHtcbiAgICAgIGJvZHkgPSAnJztcbiAgICB9XG5cbiAgICAkKGAke21vZGVsSWR9TGFiZWxgKS5odG1sKGhlYWRlcik7XG4gICAgJChgJHttb2RlbElkfUJvZHlgKS5odG1sKGJvZHkpO1xuICAgIGlmICh5ZXNCdG5OYW1lICE9IG51bGwpIHtcbiAgICAgICQoYCR7bW9kZWxJZH1ZZXNCdG5gKS5odG1sKHllc0J0bk5hbWUpO1xuICAgIH1cbiAgICBpZiAobm9CdG5OYW1lICE9IG51bGwpIHtcbiAgICAgICQoYCR7bW9kZWxJZH1Ob0J0bmApLmh0bWwobm9CdG5OYW1lKTtcbiAgICB9XG5cbiAgICAkKGAke21vZGVsSWR9WWVzQnRuYCkub2ZmKCkub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgaWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQgJiYgY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICBjYWxsYmFjay5hcHBseSh0aGF0LCBjYWxsYmFja1BhcmFtcyk7XG4gICAgICAgIHRoYXQuY2FuY2VsWWVzbm8oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICQobW9kZWxJZCkubW9kYWwoe1xuICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyTW9kZWxGcm9tRG9tKGlkLCBoZWFkZXIsIGVsZW1lbnQpIHtcbiAgICAkKGAjJHtpZH1Nb2RlbEJvZHlgKS5odG1sKCcnKTtcblxuICAgIGlmIChlbGVtZW50ID09PSB1bmRlZmluZWQgfHwgZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICBlbGVtZW50ID0gJCgnPGRpdj48L2Rpdj4nKTtcbiAgICB9XG5cbiAgICAkKGAjJHtpZH1Nb2RlbExhYmVsYCkuaHRtbChoZWFkZXIpO1xuICAgICQoYCMke2lkfU1vZGVsQm9keWApLmh0bWwoJycpO1xuICAgICQoYCMke2lkfU1vZGVsQm9keWApLmFwcGVuZChlbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgICAqIERlbGV0ZSBhbiBpdGVtXG4gICAgICogQG1ldGhvZCBkZWxldGVSb3dcbiAgICAgKiBAcGFyYW0gaWQge2ludH0gaWQgb2YgdGhlIGl0ZW0gdG8gZWRpdFxuICAgICAqL1xuXG4gIGRlbGV0ZVJvdyhpZCkge1xuICAgIHRoaXMuZGVsZXRlUGFyYW1zLmlkID0gaWQ7XG4gICAgdGhpcy5yZW5kZXJNb2RlbCgnZGVsZXRlJywgJ0NvbmZpcm0gRGVsZXRpb24nLCAnQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGlzIGl0ZW0gPycpO1xuICAgICQoJyNkZWxldGVNb2RlbCcpLm1vZGFsKCdzaG93Jyk7XG4gIH1cblxuICAvKipcbiAgICAgKiBTaG93IGEgcG9wdXAgd2l0aCBtZXNzYWdlXG4gICAgICogQG1ldGhvZCBzaG93TWVzc2FnZVxuICAgICAqIEBwYXJhbSB0aXRsZSB7U3RyaW5nfSB0aXRsZSBvZiB0aGUgbWVzc2FnZSBib3hcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIGNsb3NlQ2FsbGJhY2sge0Z1bmN0aW9ufSB0aGlzIHdpbGwgYmUgY2FsbGVkIG9uY2UgdGhlIGRpYWxvZyBpcyBjbG9zZWQgKG9wdGlvbmFsKVxuICAgICAqIEBwYXJhbSBjbG9zZUNhbGxiYWNrIHtGdW5jdGlvbn0gZGF0YSB0byBwYXNzIHRvIGNsb3NlIGNhbGxiYWNrIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0gY2xvc2VDYWxsYmFja0RhdGFcbiAgICAgKiBAcGFyYW0gaXNQbGFpbiB7Qm9vbGVhbn0gaWYgdHJ1ZSBidXR0b25zIGFyZSBub3Qgc2hvd24gKG9wdGlvbmFsIC8gZGVmYXVsdCA9IHRydWUpXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIHRoaXMuc2hvd01lc3NhZ2UoXCJFcnJvciBPY2N1cmVkIHdoaWxlIEFwcGx5aW5nIExlYXZlXCIsIGNhbGxCYWNrRGF0YSk7XG4gICAgICovXG4gIHNob3dNZXNzYWdlKHRpdGxlLCBtZXNzYWdlLCBjbG9zZUNhbGxiYWNrID0gbnVsbCwgY2xvc2VDYWxsYmFja0RhdGEgPSBudWxsLCBpc1BsYWluID0gZmFsc2UpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICBsZXQgbW9kZWxJZCA9ICcnO1xuICAgIGlmIChpc1BsYWluKSB7XG4gICAgICBtb2RlbElkID0gJyNwbGFpbk1lc3NhZ2VNb2RlbCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vZGVsSWQgPSAnI21lc3NhZ2VNb2RlbCc7XG4gICAgfVxuXG4gICAgJChtb2RlbElkKS5vZmYoKTtcblxuICAgIGlmIChpc1BsYWluKSB7XG4gICAgICB0aGlzLnJlbmRlck1vZGVsKCdwbGFpbk1lc3NhZ2UnLCB0aXRsZSwgbWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyTW9kZWwoJ21lc3NhZ2UnLCB0aXRsZSwgbWVzc2FnZSk7XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlQ2FsbGJhY2sgIT09IG51bGwgJiYgY2xvc2VDYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAkKG1vZGVsSWQpLm1vZGFsKHsgc2hvdzogdHJ1ZSB9KTtcbiAgICAgICQobW9kZWxJZCkub24oJ2hpZGRlbi5icy5tb2RhbCcsICgpID0+IHtcbiAgICAgICAgY2xvc2VDYWxsYmFjay5hcHBseSh0aGF0LCBjbG9zZUNhbGxiYWNrRGF0YSk7XG4gICAgICAgICQoJy5tb2RhbC1iYWNrZHJvcCcpLnJlbW92ZSgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQobW9kZWxJZCkubW9kYWwoe1xuICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzaG93RG9tRWxlbWVudCh0aXRsZSwgZWxlbWVudCwgY2xvc2VDYWxsYmFjaywgY2xvc2VDYWxsYmFja0RhdGEsIGlzUGxhaW4pIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICBsZXQgbW9kZWxJZCA9ICcnO1xuICAgIGlmIChpc1BsYWluKSB7XG4gICAgICBtb2RlbElkID0gJyNkYXRhTWVzc2FnZU1vZGVsJztcbiAgICB9IGVsc2Uge1xuICAgICAgbW9kZWxJZCA9ICcjbWVzc2FnZU1vZGVsJztcbiAgICB9XG5cbiAgICAkKG1vZGVsSWQpLnVuYmluZCgnaGlkZScpO1xuXG4gICAgaWYgKGlzUGxhaW4pIHtcbiAgICAgIHRoaXMucmVuZGVyTW9kZWxGcm9tRG9tKCdkYXRhTWVzc2FnZScsIHRpdGxlLCBlbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJNb2RlbEZyb21Eb20oJ21lc3NhZ2UnLCB0aXRsZSwgZWxlbWVudCk7XG4gICAgfVxuXG5cbiAgICBpZiAoY2xvc2VDYWxsYmFjayAhPT0gbnVsbCAmJiBjbG9zZUNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICQobW9kZWxJZCkubW9kYWwoeyBzaG93OiB0cnVlIH0pO1xuICAgICAgJChtb2RlbElkKS5vbignaGlkZGVuLmJzLm1vZGFsJywgKCkgPT4ge1xuICAgICAgICBjbG9zZUNhbGxiYWNrLmFwcGx5KHRoYXQsIGNsb3NlQ2FsbGJhY2tEYXRhKTtcbiAgICAgICAgJCgnLm1vZGFsLWJhY2tkcm9wJykucmVtb3ZlKCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJChtb2RlbElkKS5tb2RhbCh7XG4gICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbmZpcm1EZWxldGUoKSB7XG4gICAgaWYgKHRoaXMuZGVsZXRlUGFyYW1zLmlkICE9PSB1bmRlZmluZWQgfHwgdGhpcy5kZWxldGVQYXJhbXMuaWQgIT0gbnVsbCkge1xuICAgICAgdGhpcy5kZWxldGVPYmoodGhpcy5kZWxldGVQYXJhbXMuaWQsIFtdKTtcbiAgICB9XG4gICAgJCgnI2RlbGV0ZU1vZGVsJykubW9kYWwoJ2hpZGUnKTtcbiAgfVxuXG4gIGNhbmNlbERlbGV0ZSgpIHtcbiAgICAkKCcjZGVsZXRlTW9kZWwnKS5tb2RhbCgnaGlkZScpO1xuICAgIHRoaXMuZGVsZXRlUGFyYW1zLmlkID0gbnVsbDtcbiAgfVxuXG4gIGNsb3NlTWVzc2FnZSgpIHtcbiAgICAkKCcjbWVzc2FnZU1vZGVsJykubW9kYWwoJ2hpZGUnKTtcbiAgfVxuXG4gIGNhbmNlbFllc25vKCkge1xuICAgICQoJyN5ZXNub01vZGVsJykubW9kYWwoJ2hpZGUnKTtcbiAgfVxuXG4gIGNsb3NlTW9kYWwoaWQpIHtcbiAgICAkKGlkKS5tb2RhbCgnaGlkZScpO1xuICB9XG5cbiAgY2xvc2VQbGFpbk1lc3NhZ2UoKSB7XG4gICAgJCgnI3BsYWluTWVzc2FnZU1vZGVsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAkKCcjZGF0YU1lc3NhZ2VNb2RlbCcpLm1vZGFsKCdoaWRlJyk7XG4gIH1cblxuICBjbG9zZURhdGFNZXNzYWdlKCkge1xuICAgICQoJyNkYXRhTWVzc2FnZU1vZGVsJykubW9kYWwoJ2hpZGUnKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAgICogQ3JlYXRlIG9yIGVkaXQgYW4gZWxlbWVudFxuICAgICAqIEBtZXRob2Qgc2F2ZVxuICAgICAqIEBwYXJhbSBnZXRGdW5jdGlvbkNhbGxCYWNrRGF0YSB7QXJyYXl9IG9uY2UgYSBzdWNjZXNzIGlzIHJldHVybmVkIGNhbGwgZ2V0KCkgZnVuY3Rpb24gZm9yIHRoaXMgbW9kdWxlIHdpdGggdGhlc2UgcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBzdWNjZXNzQ2FsbGJhY2sge0Z1bmN0aW9ufSB0aGlzIHdpbGwgZ2V0IGNhbGxlZCBhZnRlciBzdWNjZXNzIHJlc3BvbnNlXG4gICAgICovXG5cbiAgc2F2ZShjYWxsR2V0RnVuY3Rpb24sIHN1Y2Nlc3NDYWxsYmFjaykge1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdGlvbihgJHt0aGlzLmdldFRhYmxlTmFtZSgpfV9zdWJtaXRgLCB0cnVlLCB7IFNob3dQb3B1cDogZmFsc2UsIExhYmVsRXJyb3JDbGFzczogJ2Vycm9yJyB9KTtcbiAgICBpZiAodmFsaWRhdG9yLmNoZWNrVmFsdWVzKCkpIHtcbiAgICAgIGxldCBwYXJhbXMgPSB2YWxpZGF0b3IuZ2V0Rm9ybVBhcmFtZXRlcnMoKTtcbiAgICAgIHBhcmFtcyA9IHRoaXMuZm9yY2VJbmplY3RWYWx1ZXNCZWZvcmVTYXZlKHBhcmFtcyk7XG4gICAgICBjb25zdCBtc2cgPSB0aGlzLmRvQ3VzdG9tVmFsaWRhdGlvbihwYXJhbXMpO1xuICAgICAgaWYgKG1zZyA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0aGlzLmNzcmZSZXF1aXJlZCkge1xuICAgICAgICAgIHBhcmFtcy5jc3JmID0gJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1Gb3JtYCkuZGF0YSgnY3NyZicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlkID0gJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1fc3VibWl0ICNpZGApLnZhbCgpO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCAmJiBpZCAhPT0gdW5kZWZpbmVkICYmIGlkICE9PSAnJykge1xuICAgICAgICAgIHBhcmFtcy5pZCA9IGlkO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcyA9IHRoaXMubWFrZUVtcHR5RGF0ZUZpZWxkc051bGwocGFyYW1zKTtcbiAgICAgICAgdGhpcy5hZGQocGFyYW1zLCBbXSwgY2FsbEdldEZ1bmN0aW9uLCBzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1Gb3JtIC5sYWJlbGApLmh0bWwobXNnKTtcbiAgICAgICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1Gb3JtIC5sYWJlbGApLnNob3coKTtcbiAgICAgICAgdGhpcy5zY3JvbGxUb1RvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgbWFrZUVtcHR5RGF0ZUZpZWxkc051bGwocGFyYW1zKSB7XG4gICAgY29uc3QgZmllbGRzID0gdGhpcy5nZXRGb3JtRmllbGRzKCk7XG4gICAgZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICBpZiAoKGZpZWxkWzFdLnR5cGUgPT09ICdkYXRlJyB8fCBmaWVsZFsxXS50eXBlID09PSAnZGF0ZXRpbWUnKVxuICAgICAgICAgICAgICAgICYmIChwYXJhbXNbZmllbGRbMF1dID09PSAnJyB8fCBwYXJhbXNbZmllbGRbMF1dID09PSAnMDAwMC0wMC0wMCcgfHwgcGFyYW1zW2ZpZWxkWzBdXSA9PT0gJzAwMDAtMDAtMDAgMDA6MDA6MDAnKSkge1xuICAgICAgICBpZiAoZmllbGRbMV0udmFsaWRhdGlvbiA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgcGFyYW1zW2ZpZWxkWzBdXSA9ICdOVUxMJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgcGFyYW1zW2ZpZWxkWzBdXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICB2YWxpZGF0ZVBhc3N3b3JkKHBhc3N3b3JkKSB7XG4gICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IDgpIHtcbiAgICAgIHJldHVybiB0aGlzLmd0KCdQYXNzd29yZCB0b28gc2hvcnQnKTtcbiAgICB9XG5cbiAgICBpZiAocGFzc3dvcmQubGVuZ3RoID4gMzApIHtcbiAgICAgIHJldHVybiB0aGlzLmd0KCdQYXNzd29yZCB0b28gbG9uZycpO1xuICAgIH1cblxuICAgIGNvbnN0IG51bWJlclRlc3RlciA9IC8uKlswLTldKy4qJC87XG4gICAgaWYgKCFwYXNzd29yZC5tYXRjaChudW1iZXJUZXN0ZXIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ndCgnUGFzc3dvcmQgbXVzdCBpbmNsdWRlIGF0IGxlYXN0IG9uZSBudW1iZXInKTtcbiAgICB9XG5cbiAgICBjb25zdCBsb3dlclRlc3RlciA9IC8uKlthLXpdKy4qJC87XG4gICAgaWYgKCFwYXNzd29yZC5tYXRjaChsb3dlclRlc3RlcikpIHtcbiAgICAgIHJldHVybiB0aGlzLmd0KCdQYXNzd29yZCBtdXN0IGluY2x1ZGUgYXQgbGVhc3Qgb25lIGxvd2VyY2FzZSBsZXR0ZXInKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cHBlclRlc3RlciA9IC8uKltBLVpdKy4qJC87XG4gICAgaWYgKCFwYXNzd29yZC5tYXRjaCh1cHBlclRlc3RlcikpIHtcbiAgICAgIHJldHVybiB0aGlzLmd0KCdQYXNzd29yZCBtdXN0IGluY2x1ZGUgYXQgbGVhc3Qgb25lIHVwcGVyY2FzZSBsZXR0ZXInKTtcbiAgICB9XG5cbiAgICBjb25zdCBzeW1ib2xUZXN0ZXIgPSAvLipbXFxXXSsuKiQvO1xuICAgIGlmICghcGFzc3dvcmQubWF0Y2goc3ltYm9sVGVzdGVyKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ3QoJ1Bhc3N3b3JkIG11c3QgaW5jbHVkZSBhdCBsZWFzdCBvbmUgc3ltYm9sJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBpbmplY3QgYXR0aXRpb25hbCBwYXJhbWV0ZXJzIG9yIG1vZGlmeSBleGlzdGluZyBwYXJhbWV0ZXJzIHJldHJpdmVkIGZyb21cbiAgICAgKiBhZGQvZWRpdCBmb3JtIGJlZm9yZSBzZW5kaW5nIHRvIHRoZSBzZXJ2ZXJcbiAgICAgKiBAbWV0aG9kIGZvcmNlSW5qZWN0VmFsdWVzQmVmb3JlU2F2ZVxuICAgICAqIEBwYXJhbSBwYXJhbXMge0FycmF5fSBrZXlzIGFuZCB2YWx1ZXMgaW4gZm9ybVxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gbW9kaWZpZWQgcGFyYW1ldGVyc1xuICAgICAqL1xuICBmb3JjZUluamVjdFZhbHVlc0JlZm9yZVNhdmUocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxuXG4gIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGRvIGN1c3RvbSB2YWxpZGF0aW9ucyBhdCBjbGllbnQgc2lkZVxuICAgICAqIEBtZXRob2QgZG9DdXN0b21WYWxpZGF0aW9uXG4gICAgICogQHBhcmFtIHBhcmFtcyB7QXJyYXl9IGtleXMgYW5kIHZhbHVlcyBpbiBmb3JtXG4gICAgICogQHJldHVybnMge051bGwgb3IgU3RyaW5nfSByZXR1cm4gbnVsbCBpZiB2YWxpZGF0aW9uIHN1Y2Nlc3MsIHJldHVybnMgZXJyb3IgbWVzc2FnZSBpZiB1bnN1Y2Nlc3NmdWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICBFbXBsb3llZUxlYXZlQWRhcHRlci5tZXRob2QoJ2RvQ3VzdG9tVmFsaWRhdGlvbihwYXJhbXMpIHtcbiAgICB0cnl7XG4gICAgICBpZihwYXJhbXNbJ2RhdGVfc3RhcnQnXSAhPSBwYXJhbXNbJ2RhdGVfZW5kJ10pe1xuICAgICAgICB2YXIgZHMgPSBuZXcgRGF0ZShwYXJhbXNbJ2RhdGVfc3RhcnQnXSk7XG4gICAgICAgIHZhciBkZSA9IG5ldyBEYXRlKHBhcmFtc1snZGF0ZV9lbmQnXSk7XG4gICAgICAgIGlmKGRlIDwgZHMpe1xuICAgICAgICAgIHJldHVybiBcIlN0YXJ0IGRhdGUgc2hvdWxkIGJlIGVhcmxpZXIgdGhhbiBlbmQgZGF0ZSBvZiB0aGUgbGVhdmUgcGVyaW9kXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9Y2F0Y2goZSl7XG5cbiAgICB9XG4gIHJldHVybiBudWxsO1xufVxuICAgICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgZG9DdXN0b21WYWxpZGF0aW9uKHBhcmFtcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZmlsdGVyUXVlcnkoKSB7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0aW9uKGAke3RoaXMuZ2V0VGFibGVOYW1lKCl9X2ZpbHRlcmAsIHRydWUsIHsgU2hvd1BvcHVwOiBmYWxzZSwgTGFiZWxFcnJvckNsYXNzOiAnZXJyb3InIH0pO1xuICAgIGlmICh2YWxpZGF0b3IuY2hlY2tWYWx1ZXMoKSkge1xuICAgICAgY29uc3QgcGFyYW1zID0gdmFsaWRhdG9yLmdldEZvcm1QYXJhbWV0ZXJzKCk7XG4gICAgICBpZiAodGhpcy5kb0N1c3RvbUZpbHRlclZhbGlkYXRpb24ocGFyYW1zKSkge1xuICAgICAgICAvLyByZW1vdmUgbnVsbCBwYXJhbXNcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIHBhcmFtcykge1xuICAgICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXNbcHJvcF0gPT09ICdOVUxMJykge1xuICAgICAgICAgICAgICBkZWxldGUgKHBhcmFtc1twcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRGaWx0ZXIocGFyYW1zKTtcbiAgICAgICAgdGhpcy5maWx0ZXJzQWxyZWFkeVNldCA9IHRydWU7XG4gICAgICAgICQoYCMke3RoaXMuZ2V0VGFibGVOYW1lKCl9X3Jlc2V0RmlsdGVyc2ApLnNob3coKTtcbiAgICAgICAgdGhpcy5jdXJyZW50RmlsdGVyU3RyaW5nID0gdGhpcy5nZXRGaWx0ZXJTdHJpbmcocGFyYW1zKTtcblxuICAgICAgICB0aGlzLmdldChbXSk7XG4gICAgICAgIHRoaXMuY2xvc2VQbGFpbk1lc3NhZ2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG4gIGdldEZpbHRlclN0cmluZyhmaWx0ZXJzKSB7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIGxldCBybWY7IGxldCBzb3VyY2U7IGxldCB2YWx1ZXM7IGxldCBzZWxlY3QyTVZhbDsgbGV0IHZhbHVlOyBsZXRcbiAgICAgIHZhbHVlT3JpZztcblxuICAgIGNvbnN0IGZpbHRlckZpZWxkcyA9IHRoaXMuZ2V0RmlsdGVycygpO1xuXG5cbiAgICBpZiAodmFsdWVzID09IG51bGwpIHtcbiAgICAgIHZhbHVlcyA9IFtdO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgcHJvcCBpbiBmaWx0ZXJzKSB7XG4gICAgICBpZiAoZmlsdGVycy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICB2YWx1ZXMgPSB0aGlzLmdldE1ldGFGaWVsZFZhbHVlcyhwcm9wLCBmaWx0ZXJGaWVsZHMpO1xuICAgICAgICBpZiAoIXZhbHVlcykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgIHZhbHVlT3JpZyA9IG51bGw7XG5cbiAgICAgICAgaWYgKCh2YWx1ZXMudHlwZSA9PT0gJ3NlbGVjdCcgfHwgdmFsdWVzLnR5cGUgPT09ICdzZWxlY3QyJykpIHtcbiAgICAgICAgICBpZiAodmFsdWVzWydyZW1vdGUtc291cmNlJ10gIT09IHVuZGVmaW5lZCAmJiB2YWx1ZXNbJ3JlbW90ZS1zb3VyY2UnXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBybWYgPSB2YWx1ZXNbJ3JlbW90ZS1zb3VyY2UnXTtcbiAgICAgICAgICAgIGlmIChmaWx0ZXJzW3Byb3BdID09PSAnTlVMTCcpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlc1snbnVsbC1sYWJlbCddICE9PSB1bmRlZmluZWQgJiYgdmFsdWVzWydudWxsLWxhYmVsJ10gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzWydudWxsLWxhYmVsJ107XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAnTm90IFNlbGVjdGVkJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbGV0IGtleSA9IGAke3JtZlswXX1fJHtybWZbMV19XyR7cm1mWzJdfWA7XG4gICAgICAgICAgICAgIGlmIChybWYubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgICAgIGtleSA9IGAke2tleX1fJHtybWZbM119YDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyB2YWx1ZSA9IHRoaXMuZmllbGRNYXN0ZXJEYXRhW2Ake3JtZlswXX1fJHtybWZbMV19XyR7cm1mWzJdfWBdW2ZpbHRlcnNbcHJvcF1dO1xuICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZmllbGRNYXN0ZXJEYXRhW2tleV1bZmlsdGVyc1twcm9wXV07XG4gICAgICAgICAgICAgIHZhbHVlT3JpZyA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzb3VyY2UgPSB2YWx1ZXMuc291cmNlWzBdO1xuICAgICAgICAgICAgaWYgKGZpbHRlcnNbcHJvcF0gPT09ICdOVUxMJykge1xuICAgICAgICAgICAgICBpZiAodmFsdWVzWydudWxsLWxhYmVsJ10gIT09IHVuZGVmaW5lZCAmJiB2YWx1ZXNbJ251bGwtbGFiZWwnXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbJ251bGwtbGFiZWwnXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICdOb3QgU2VsZWN0ZWQnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXJzW3Byb3BdID09PSB2YWx1ZXMuc291cmNlW2ldWzBdKSB7XG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5zb3VyY2VbaV1bMV07XG4gICAgICAgICAgICAgICAgICB2YWx1ZU9yaWcgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZXMudHlwZSA9PT0gJ3NlbGVjdDJtdWx0aScpIHtcbiAgICAgICAgICBzZWxlY3QyTVZhbCA9IFtdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZWxlY3QyTVZhbCA9IEpTT04ucGFyc2UoZmlsdGVyc1twcm9wXSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhbHVlID0gc2VsZWN0Mk1WYWwuam9pbignLCcpO1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHZhbHVlT3JpZyA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IGZpbHRlcnNbcHJvcF07XG4gICAgICAgICAgaWYgKHZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgdmFsdWVPcmlnID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlT3JpZyAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHN0ciAhPT0gJycpIHtcbiAgICAgICAgICAgIHN0ciArPSAnIHwgJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdHIgKz0gYCR7dmFsdWVzLmxhYmVsfSA9ICR7dmFsdWV9YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCB0byBkbyBjdXN0b20gdmFsaWRhdGlvbnMgYXQgY2xpZW50IHNpZGUgZm9yIHZhbHVlcyBzZWxlY3RlZCBpbiBmaWx0ZXJzXG4gICAgICogQG1ldGhvZCBkb0N1c3RvbUZpbHRlclZhbGlkYXRpb25cbiAgICAgKiBAcGFyYW0gcGFyYW1zIHtBcnJheX0ga2V5cyBhbmQgdmFsdWVzIGluIGZvcm1cbiAgICAgKiBAcmV0dXJucyB7TnVsbCBvciBTdHJpbmd9IHJldHVybiBudWxsIGlmIHZhbGlkYXRpb24gc3VjY2VzcywgcmV0dXJucyBlcnJvciBtZXNzYWdlIGlmIHVuc3VjY2Vzc2Z1bFxuICAgICAqL1xuICBkb0N1c3RvbUZpbHRlclZhbGlkYXRpb24ocGFyYW1zKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuXG4gIC8qKlxuICAgICAqIFJlc2V0IHNlbGVjdGVkIGZpbHRlcnNcbiAgICAgKiBAbWV0aG9kIHJlc2V0RmlsdGVyc1xuICAgICAqL1xuXG4gIHJlc2V0RmlsdGVycygpIHtcbiAgICB0aGlzLmZpbHRlciA9IHRoaXMub3JpZ0ZpbHRlcjtcbiAgICB0aGlzLmZpbHRlcnNBbHJlYWR5U2V0ID0gZmFsc2U7XG4gICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1fcmVzZXRGaWx0ZXJzYCkuaGlkZSgpO1xuICAgIHRoaXMuY3VycmVudEZpbHRlclN0cmluZyA9ICcnO1xuICAgIHRoaXMuZ2V0KFtdKTtcbiAgfVxuXG4gIHJlZGlyZWN0VG9VcmwodXJsKSB7XG4gICAgdG9wLmxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gIH1cblxuXG4gIHNob3dGaWx0ZXJzKG9iamVjdCkge1xuICAgIGxldCBmb3JtSHRtbCA9IHRoaXMudGVtcGxhdGVzLmZpbHRlclRlbXBsYXRlO1xuICAgIGxldCBodG1sID0gJyc7XG4gICAgY29uc3QgZmllbGRzID0gdGhpcy5nZXRGaWx0ZXJzKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbWV0YUZpZWxkID0gdGhpcy5nZXRNZXRhRmllbGRGb3JSZW5kZXJpbmcoZmllbGRzW2ldWzBdKTtcbiAgICAgIGlmIChtZXRhRmllbGQgPT09ICcnIHx8IG1ldGFGaWVsZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJGb3JtRmllbGQoZmllbGRzW2ldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1ldGFWYWwgPSBvYmplY3RbbWV0YUZpZWxkXTtcbiAgICAgICAgaWYgKG1ldGFWYWwgIT09ICcnICYmIG1ldGFWYWwgIT0gbnVsbCAmJiBtZXRhVmFsICE9PSB1bmRlZmluZWQgJiYgbWV0YVZhbC50cmltKCkgIT09ICcnKSB7XG4gICAgICAgICAgaHRtbCArPSB0aGlzLnJlbmRlckZvcm1GaWVsZChKU09OLnBhcnNlKG1ldGFWYWwpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBodG1sICs9IHRoaXMucmVuZGVyRm9ybUZpZWxkKGZpZWxkc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9ybUh0bWwgPSBmb3JtSHRtbC5yZXBsYWNlKC9faWRfL2csIGAke3RoaXMuZ2V0VGFibGVOYW1lKCl9X2ZpbHRlcmApO1xuICAgIGZvcm1IdG1sID0gZm9ybUh0bWwucmVwbGFjZSgvX2ZpZWxkc18vZywgaHRtbCk7XG5cbiAgICBjb25zdCByYW5kb21Gb3JtSWQgPSB0aGlzLmdlbmVyYXRlUmFuZG9tKDE0KTtcbiAgICBjb25zdCAkdGVtcERvbU9iaiA9ICQoJzxkaXYgY2xhc3M9XCJyZXZpZXdCbG9jayBwb3B1cEZvcm1cIiBkYXRhLWNvbnRlbnQ9XCJGb3JtXCI+PC9kaXY+Jyk7XG4gICAgJHRlbXBEb21PYmouYXR0cignaWQnLCByYW5kb21Gb3JtSWQpO1xuXG4gICAgJHRlbXBEb21PYmouaHRtbChmb3JtSHRtbCk7XG5cblxuICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5kYXRlZmllbGQnKS5kYXRlcGlja2VyKHsgdmlld01vZGU6IDIgfSk7XG4gICAgJHRlbXBEb21PYmouZmluZCgnLnRpbWVmaWVsZCcpLmRhdGV0aW1lcGlja2VyKHtcbiAgICAgIGxhbmd1YWdlOiAnZW4nLFxuICAgICAgcGlja0RhdGU6IGZhbHNlLFxuICAgIH0pO1xuICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5kYXRldGltZWZpZWxkJykuZGF0ZXRpbWVwaWNrZXIoe1xuICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgfSk7XG5cbiAgICAkdGVtcERvbU9iai5maW5kKCcuY29sb3JwaWNrJykuY29sb3JwaWNrZXIoKTtcbiAgICB0aW55bWNlLmluaXQoe1xuICAgICAgc2VsZWN0b3I6IGAjJHskdGVtcERvbU9iai5hdHRyKCdpZCcpfSAudGlueW1jZWAsXG4gICAgICBoZWlnaHQ6ICc0MDAnLFxuICAgIH0pO1xuXG4gICAgJHRlbXBEb21PYmouZmluZCgnLnNpbXBsZW1kZScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3Qgc2ltcGxlbWRlID0gbmV3IFNpbXBsZU1ERSh7IGVsZW1lbnQ6ICQodGhpcylbMF0gfSk7XG4gICAgICAkKHRoaXMpLmRhdGEoJ3NpbXBsZW1kZScsIHNpbXBsZW1kZSk7XG4gICAgICAvLyBzaW1wbGVtZGUudmFsdWUoJCh0aGlzKS52YWwoKSk7XG4gICAgfSk7XG5cbiAgICAvLyAkdGVtcERvbU9iai5maW5kKCcuc2VsZWN0MkZpZWxkJykuc2VsZWN0MigpO1xuICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5zZWxlY3QyRmllbGQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICQodGhpcykuc2VsZWN0MigpLnNlbGVjdDIoJ3ZhbCcsICQodGhpcykuZmluZCgnb3B0aW9uOmVxKDApJykudmFsKCkpO1xuICAgIH0pO1xuXG4gICAgJHRlbXBEb21PYmouZmluZCgnLnNlbGVjdDJNdWx0aScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgJCh0aGlzKS5zZWxlY3QyKCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFJvdyA9ICQodGhpcykucGFyZW50cygnLnJvdycpO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBwYXJlbnRSb3cuZmluZCgnLnNlbGVjdDItY2hvaWNlcycpLmhlaWdodCgpO1xuICAgICAgICBwYXJlbnRSb3cuaGVpZ2h0KHBhcnNlSW50KGhlaWdodCwgMTApKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLypcbiAgICAgICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5zaWduYXR1cmVGaWVsZCcpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAkKHRoaXMpLmRhdGEoJ3NpZ25hdHVyZVBhZCcsbmV3IFNpZ25hdHVyZVBhZCgkKHRoaXMpKSk7XG4gICAgICAgICB9KTtcbiAgICAgICAgICovXG5cbiAgICAvLyB2YXIgdEh0bWwgPSAkdGVtcERvbU9iai53cmFwKCc8ZGl2PicpLnBhcmVudCgpLmh0bWwoKTtcbiAgICB0aGlzLnNob3dEb21FbGVtZW50KCdFZGl0JywgJHRlbXBEb21PYmosIG51bGwsIG51bGwsIHRydWUpO1xuICAgICQoJy5maWx0ZXJCdG4nKS5vZmYoKTtcbiAgICAkKCcuZmlsdGVyQnRuJykub24oJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0cnkge1xuICAgICAgICBtb2RKcy5maWx0ZXJRdWVyeSgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmZpbHRlciAhPT0gdW5kZWZpbmVkICYmIHRoaXMuZmlsdGVyICE9IG51bGwgJiYgdGhpcy5maWx0ZXIgIT09ICcnKSB7XG4gICAgICB0aGlzLmZpbGxGb3JtKHRoaXMuZmlsdGVyLCBgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1fZmlsdGVyYCwgdGhpcy5nZXRGaWx0ZXJzKCkpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAgICogT3ZlcnJpZGUgdGhpcyBtZXRob2QgaW4geW91ciBtb2R1bGUgY2xhc3MgdG8gbWFrZSBjaGFuZ2VzIHRvIGRhdGEgZm8gdGhlIGZvcm0gYmVmb3JlIHNob3dpbmcgdGhlIGZvcm1cbiAgICAgKiBAbWV0aG9kIHByZVJlbmRlckZvcm1cbiAgICAgKiBAcGFyYW0gb2JqZWN0IHtBcnJheX0ga2V5cyB2YWx1ZSBsaXN0IGZvciBwb3B1bGF0aW5nIGZvcm1cbiAgICAgKi9cblxuICBwcmVSZW5kZXJGb3JtKG9iamVjdCkge1xuXG4gIH1cblxuICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGZvcm1cbiAgICAgKiBAbWV0aG9kIHJlbmRlckZvcm1cbiAgICAgKiBAcGFyYW0gb2JqZWN0IHtBcnJheX0ga2V5cyB2YWx1ZSBsaXN0IGZvciBwb3B1bGF0aW5nIGZvcm1cbiAgICAgKi9cblxuICByZW5kZXJGb3JtKG9iamVjdCkge1xuICAgIGNvbnN0IHNpZ25hdHVyZUlkcyA9IFtdO1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCB8fCBvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5jdXJyZW50SWQgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMucHJlUmVuZGVyRm9ybShvYmplY3QpO1xuXG4gICAgbGV0IGZvcm1IdG1sID0gdGhpcy50ZW1wbGF0ZXMuZm9ybVRlbXBsYXRlO1xuICAgIGxldCBodG1sID0gJyc7XG4gICAgY29uc3QgZmllbGRzID0gdGhpcy5nZXRGb3JtRmllbGRzKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbWV0YUZpZWxkID0gdGhpcy5nZXRNZXRhRmllbGRGb3JSZW5kZXJpbmcoZmllbGRzW2ldWzBdKTtcbiAgICAgIGlmIChtZXRhRmllbGQgPT09ICcnIHx8IG1ldGFGaWVsZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJGb3JtRmllbGQoZmllbGRzW2ldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1ldGFWYWwgPSBvYmplY3RbbWV0YUZpZWxkXTtcbiAgICAgICAgaWYgKG1ldGFWYWwgIT09ICcnICYmIG1ldGFWYWwgIT0gbnVsbCAmJiBtZXRhVmFsICE9PSB1bmRlZmluZWQgJiYgbWV0YVZhbC50cmltKCkgIT09ICcnKSB7XG4gICAgICAgICAgaHRtbCArPSB0aGlzLnJlbmRlckZvcm1GaWVsZChKU09OLnBhcnNlKG1ldGFWYWwpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBodG1sICs9IHRoaXMucmVuZGVyRm9ybUZpZWxkKGZpZWxkc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9ybUh0bWwgPSBmb3JtSHRtbC5yZXBsYWNlKC9faWRfL2csIGAke3RoaXMuZ2V0VGFibGVOYW1lKCl9X3N1Ym1pdGApO1xuICAgIGZvcm1IdG1sID0gZm9ybUh0bWwucmVwbGFjZSgvX2ZpZWxkc18vZywgaHRtbCk7XG5cblxuICAgIGxldCAkdGVtcERvbU9iajtcbiAgICBjb25zdCByYW5kb21Gb3JtSWQgPSB0aGlzLmdlbmVyYXRlUmFuZG9tKDE0KTtcbiAgICBpZiAoIXRoaXMuc2hvd0Zvcm1PblBvcHVwKSB7XG4gICAgICAkdGVtcERvbU9iaiA9ICQoYCMke3RoaXMuZ2V0VGFibGVOYW1lKCl9Rm9ybWApO1xuICAgIH0gZWxzZSB7XG4gICAgICAkdGVtcERvbU9iaiA9ICQoJzxkaXYgY2xhc3M9XCJyZXZpZXdCbG9jayBwb3B1cEZvcm1cIiBkYXRhLWNvbnRlbnQ9XCJGb3JtXCI+PC9kaXY+Jyk7XG4gICAgICAkdGVtcERvbU9iai5hdHRyKCdpZCcsIHJhbmRvbUZvcm1JZCk7XG4gICAgfVxuXG4gICAgJHRlbXBEb21PYmouaHRtbChmb3JtSHRtbCk7XG5cblxuICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5kYXRlZmllbGQnKS5kYXRlcGlja2VyKHsgdmlld01vZGU6IDIgfSk7XG4gICAgJHRlbXBEb21PYmouZmluZCgnLnRpbWVmaWVsZCcpLmRhdGV0aW1lcGlja2VyKHtcbiAgICAgIGxhbmd1YWdlOiAnZW4nLFxuICAgICAgcGlja0RhdGU6IGZhbHNlLFxuICAgIH0pO1xuICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5kYXRldGltZWZpZWxkJykuZGF0ZXRpbWVwaWNrZXIoe1xuICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgfSk7XG5cbiAgICAkdGVtcERvbU9iai5maW5kKCcuY29sb3JwaWNrJykuY29sb3JwaWNrZXIoKTtcblxuICAgIHRpbnltY2UuaW5pdCh7XG4gICAgICBzZWxlY3RvcjogYCMkeyR0ZW1wRG9tT2JqLmF0dHIoJ2lkJyl9IC50aW55bWNlYCxcbiAgICAgIGhlaWdodDogJzQwMCcsXG4gICAgfSk7XG5cbiAgICAkdGVtcERvbU9iai5maW5kKCcuc2ltcGxlbWRlJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBzaW1wbGVtZGUgPSBuZXcgU2ltcGxlTURFKHsgZWxlbWVudDogJCh0aGlzKVswXSB9KTtcbiAgICAgICQodGhpcykuZGF0YSgnc2ltcGxlbWRlJywgc2ltcGxlbWRlKTtcbiAgICAgIC8vIHNpbXBsZW1kZS52YWx1ZSgkKHRoaXMpLnZhbCgpKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGNvZGVNaXJyb3IgPSB0aGlzLmNvZGVNaXJyb3I7XG4gICAgaWYgKGNvZGVNaXJyb3IpIHtcbiAgICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5jb2RlJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGVkaXRvciA9IGNvZGVNaXJyb3IuZnJvbVRleHRBcmVhKCQodGhpcylbMF0sIHtcbiAgICAgICAgICBsaW5lTnVtYmVyczogZmFsc2UsXG4gICAgICAgICAgbWF0Y2hCcmFja2V0czogdHJ1ZSxcbiAgICAgICAgICBjb250aW51ZUNvbW1lbnRzOiAnRW50ZXInLFxuICAgICAgICAgIGV4dHJhS2V5czogeyAnQ3RybC1RJzogJ3RvZ2dsZUNvbW1lbnQnIH0sXG4gICAgICAgIH0pO1xuICAgICAgICAkKHRoaXMpLmRhdGEoJ2NvZGVtaXJyb3InLCBlZGl0b3IpO1xuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvLyAkdGVtcERvbU9iai5maW5kKCcuc2VsZWN0MkZpZWxkJykuc2VsZWN0MigpO1xuICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5zZWxlY3QyRmllbGQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICQodGhpcykuc2VsZWN0MigpLnNlbGVjdDIoJ3ZhbCcsICQodGhpcykuZmluZCgnb3B0aW9uOmVxKDApJykudmFsKCkpO1xuICAgIH0pO1xuXG4gICAgJHRlbXBEb21PYmouZmluZCgnLnNlbGVjdDJNdWx0aScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgJCh0aGlzKS5zZWxlY3QyKCkub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFJvdyA9ICQodGhpcykucGFyZW50cygnLnJvdycpO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBwYXJlbnRSb3cuZmluZCgnLnNlbGVjdDItY2hvaWNlcycpLmhlaWdodCgpO1xuICAgICAgICBwYXJlbnRSb3cuaGVpZ2h0KHBhcnNlSW50KGhlaWdodCwgMTApKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG5cbiAgICAkdGVtcERvbU9iai5maW5kKCcuc2lnbmF0dXJlRmllbGQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vICQodGhpcykuZGF0YSgnc2lnbmF0dXJlUGFkJyxuZXcgU2lnbmF0dXJlUGFkKCQodGhpcykpKTtcbiAgICAgIHNpZ25hdHVyZUlkcy5wdXNoKCQodGhpcykuYXR0cignaWQnKSk7XG4gICAgfSk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGZpZWxkc1tpXVsxXS50eXBlID09PSAnZGF0YWdyb3VwJykge1xuICAgICAgICAkdGVtcERvbU9iai5maW5kKGAjJHtmaWVsZHNbaV1bMF19YCkuZGF0YSgnZmllbGQnLCBmaWVsZHNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnNob3dTYXZlID09PSBmYWxzZSkge1xuICAgICAgJHRlbXBEb21PYmouZmluZCgnLnNhdmVCdG4nKS5yZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHRlbXBEb21PYmouZmluZCgnLnNhdmVCdG4nKS5vZmYoKTtcbiAgICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5zYXZlQnRuJykuZGF0YSgnbW9kSnMnLCB0aGlzKTtcbiAgICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5zYXZlQnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJCh0aGlzKS5kYXRhKCdtb2RKcycpLnNhdmVTdWNjZXNzSXRlbUNhbGxiYWNrICE9IG51bGwgJiYgJCh0aGlzKS5kYXRhKCdtb2RKcycpLnNhdmVTdWNjZXNzSXRlbUNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAkKHRoaXMpLmRhdGEoJ21vZEpzJykuc2F2ZSgkKHRoaXMpLmRhdGEoJ21vZEpzJykucmV0cml2ZUl0ZW1zQWZ0ZXJTYXZlKCksICQodGhpcykuZGF0YSgnbW9kSnMnKS5zYXZlU3VjY2Vzc0l0ZW1DYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJCh0aGlzKS5kYXRhKCdtb2RKcycpLnNhdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNob3dDYW5jZWwgPT09IGZhbHNlKSB7XG4gICAgICAkdGVtcERvbU9iai5maW5kKCcuY2FuY2VsQnRuJykucmVtb3ZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5jYW5jZWxCdG4nKS5vZmYoKTtcbiAgICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5jYW5jZWxCdG4nKS5kYXRhKCdtb2RKcycsIHRoaXMpO1xuICAgICAgJHRlbXBEb21PYmouZmluZCgnLmNhbmNlbEJ0bicpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCh0aGlzKS5kYXRhKCdtb2RKcycpLmNhbmNlbCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBJbnB1dCBtYXNrXG4gICAgJHRlbXBEb21PYmouZmluZCgnW21hc2tdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAkKHRoaXMpLmlucHV0bWFzaygkKHRoaXMpLmF0dHIoJ21hc2snKSk7XG4gICAgfSk7XG5cbiAgICAkdGVtcERvbU9iai5maW5kKCdbZGF0ZW1hc2tdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAkKHRoaXMpLmlucHV0bWFzayh7XG4gICAgICAgIG1hc2s6ICd5LTEtMicsXG4gICAgICAgIHBsYWNlaG9sZGVyOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgIGxlYXBkYXk6ICctMDItMjknLFxuICAgICAgICBzZXBhcmF0b3I6ICctJyxcbiAgICAgICAgYWxpYXM6ICd5eXl5L21tL2RkJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgJHRlbXBEb21PYmouZmluZCgnW2RhdGV0aW1lbWFza10nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICQodGhpcykuaW5wdXRtYXNrKCdkYXRldGltZScsIHtcbiAgICAgICAgbWFzazogJ3ktMi0xIGg6czowMCcsXG4gICAgICAgIHBsYWNlaG9sZGVyOiAnWVlZWS1NTS1ERCBoaDptbTpzcycsXG4gICAgICAgIGxlYXBkYXk6ICctMDItMjknLFxuICAgICAgICBzZXBhcmF0b3I6ICctJyxcbiAgICAgICAgYWxpYXM6ICd5eXl5L21tL2RkJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaWYgKCF0aGlzLnNob3dGb3JtT25Qb3B1cCkge1xuICAgICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1Gb3JtYCkuc2hvdygpO1xuICAgICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1gKS5oaWRlKCk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lnbmF0dXJlSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICQoYCMke3NpZ25hdHVyZUlkc1tpXX1gKVxuICAgICAgICAgIC5kYXRhKCdzaWduYXR1cmVQYWQnLFxuICAgICAgICAgICAgbmV3IFNpZ25hdHVyZVBhZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzaWduYXR1cmVJZHNbaV0pKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvYmplY3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmZpbGxGb3JtKG9iamVjdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldERlZmF1bHRWYWx1ZXMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zY3JvbGxUb1RvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB2YXIgdEh0bWwgPSAkdGVtcERvbU9iai53cmFwKCc8ZGl2PicpLnBhcmVudCgpLmh0bWwoKTtcbiAgICAgIC8vIHRoaXMuc2hvd01lc3NhZ2UoXCJFZGl0XCIsdEh0bWwsbnVsbCxudWxsLHRydWUpO1xuICAgICAgdGhpcy5zaG93TWVzc2FnZSgnRWRpdCcsICcnLCBudWxsLCBudWxsLCB0cnVlKTtcblxuICAgICAgJCgnI3BsYWluTWVzc2FnZU1vZGVsIC5tb2RhbC1ib2R5JykuaHRtbCgnJyk7XG4gICAgICAkKCcjcGxhaW5NZXNzYWdlTW9kZWwgLm1vZGFsLWJvZHknKS5hcHBlbmQoJHRlbXBEb21PYmopO1xuXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lnbmF0dXJlSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICQoYCMke3NpZ25hdHVyZUlkc1tpXX1gKVxuICAgICAgICAgIC5kYXRhKCdzaWduYXR1cmVQYWQnLFxuICAgICAgICAgICAgbmV3IFNpZ25hdHVyZVBhZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzaWduYXR1cmVJZHNbaV0pKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvYmplY3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmZpbGxGb3JtKG9iamVjdCwgYCMke3JhbmRvbUZvcm1JZH1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0RGVmYXVsdFZhbHVlcyhgIyR7cmFuZG9tRm9ybUlkfWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucG9zdFJlbmRlckZvcm0ob2JqZWN0LCAkdGVtcERvbU9iaik7XG4gIH1cblxuICBzZXREZWZhdWx0VmFsdWVzKGZvcm1JZCwgZmllbGRzKSB7XG4gICAgaWYgKGZpZWxkcyA9PSBudWxsIHx8IGZpZWxkcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmaWVsZHMgPSB0aGlzLmdldEZvcm1GaWVsZHMoKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybUlkID09IG51bGwgfHwgZm9ybUlkID09PSB1bmRlZmluZWQgfHwgZm9ybUlkID09PSAnJykge1xuICAgICAgZm9ybUlkID0gYCMke3RoaXMuZ2V0VGFibGVOYW1lKCl9Rm9ybWA7XG4gICAgfVxuXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGZpZWxkc1tpXVsxXS50eXBlICE9PSAndGV4dCcgJiYgZmllbGRzW2ldWzFdLnR5cGUgIT09ICd0ZXh0YXJlYScpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZHNbaV1bMV0uZGVmYXVsdCAhPT0gdW5kZWZpbmVkICYmIGZpZWxkc1tpXVsxXS5kZWZhdWx0ICE9PSBudWxsKSB7XG4gICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19YCkudmFsKGZpZWxkc1tpXVsxXS5kZWZhdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXRyaXZlSXRlbXNBZnRlclNhdmUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGlzIG1ldGhvZCBpbiB5b3VyIG1vZHVsZSBjbGFzcyB0byBtYWtlIGNoYW5nZXMgdG8gZGF0YSBmbyB0aGUgZm9ybSBhZnRlciBzaG93aW5nIGl0XG4gICAgICogQG1ldGhvZCBwb3N0UmVuZGVyRm9ybVxuICAgICAqIEBwYXJhbSBvYmplY3Qge0FycmF5fSBrZXlzIHZhbHVlIGxpc3QgZm9yIHBvcHVsYXRpbmcgZm9ybVxuICAgICAqIEBwYXJhbSAkdGVtcERvbU9iaiB7RE9NfSBhIERPTSBlbGVtZW50IGZvciB0aGUgZm9ybVxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBVc2VyQWRhcHRlci5tZXRob2QoJ3Bvc3RSZW5kZXJGb3JtKG9iamVjdCwgJHRlbXBEb21PYmopIHtcbiAgICBpZihvYmplY3QgPT0gbnVsbCB8fCBvYmplY3QgPT0gdW5kZWZpbmVkKXtcbiAgICAgICR0ZW1wRG9tT2JqLmZpbmQoXCIjY2hhbmdlUGFzc3dvcmRCdG5cIikucmVtb3ZlKCk7XG4gICAgfVxuICB9XG4gICAgICovXG5cbiAgcG9zdFJlbmRlckZvcm0ob2JqZWN0LCAkdGVtcERvbU9iaikge1xuXG4gIH1cblxuICAvKipcbiAgICAgKiBDb252ZXJ0IGRhdGEgZ3JvdXAgZmllbGQgdG8gSFRNTFxuICAgICAqIEBtZXRob2QgZGF0YUdyb3VwVG9IdG1sXG4gICAgICogQHBhcmFtIHZhbCB7U3RyaW5nfSB2YWx1ZSBpbiB0aGUgZmllbGRcbiAgICAgKiBAcGFyYW0gZmllbGQge0FycmF5fSBmaWVsZCBtZXRhIGRhdGFcbiAgICAgKi9cblxuICBkYXRhR3JvdXBUb0h0bWwodmFsLCBmaWVsZCkge1xuICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHZhbCk7XG5cblxuICAgIGxldCB0OyBsZXQgc29ydEZ1bmN0aW9uOyBsZXQgaXRlbTsgbGV0IGl0ZW1IdG1sOyBsZXQgaXRlbVZhbDtcblxuICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9ICc8YSBpZD1cIiNfaWRfI19kZWxldGVcIiBvbmNsaWNrPVwibW9kSnMuZGVsZXRlRGF0YUdyb3VwSXRlbShcXCcjX2lkXyNcXCcpO3JldHVybiBmYWxzZTtcIiB0eXBlPVwiYnV0dG9uXCIgc3R5bGU9XCJmbG9hdDpyaWdodDttYXJnaW4tcmlnaHQ6M3B4O1wiIHRvb2x0aXA9XCJEZWxldGVcIj48bGkgY2xhc3M9XCJmYSBmYS10aW1lc1wiPjwvbGk+PC9hPic7XG4gICAgY29uc3QgZWRpdEJ1dHRvbiA9ICc8YSBpZD1cIiNfaWRfI19lZGl0XCIgb25jbGljaz1cIm1vZEpzLmVkaXREYXRhR3JvdXBJdGVtKFxcJyNfaWRfI1xcJyk7cmV0dXJuIGZhbHNlO1wiIHR5cGU9XCJidXR0b25cIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi1yaWdodDo1cHg7XCIgdG9vbHRpcD1cIkVkaXRcIj48bGkgY2xhc3M9XCJmYSBmYS1lZGl0XCI+PC9saT48L2E+JztcblxuICAgIGNvbnN0IHRlbXBsYXRlID0gZmllbGRbMV0uaHRtbDtcblxuICAgIGlmIChkYXRhICE9IG51bGwgJiYgZGF0YSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkWzFdWydzb3J0LWZ1bmN0aW9uJ10gIT09IHVuZGVmaW5lZCAmJiBmaWVsZFsxXVsnc29ydC1mdW5jdGlvbiddICE9IG51bGwpIHtcbiAgICAgIGRhdGEuc29ydChmaWVsZFsxXVsnc29ydC1mdW5jdGlvbiddKTtcbiAgICB9XG5cblxuICAgIGNvbnN0IGh0bWwgPSAkKGA8ZGl2IGlkPVwiJHtmaWVsZFswXX1fZGl2X2lubmVyXCI+PC9kaXY+YCk7XG5cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaXRlbSA9IGRhdGFbaV07XG5cbiAgICAgIGlmIChmaWVsZFsxXVsncHJlLWZvcm1hdC1mdW5jdGlvbiddICE9PSB1bmRlZmluZWQgJiYgZmllbGRbMV1bJ3ByZS1mb3JtYXQtZnVuY3Rpb24nXSAhPSBudWxsKSB7XG4gICAgICAgIGl0ZW0gPSBmaWVsZFsxXVsncHJlLWZvcm1hdC1mdW5jdGlvbiddLmFwcGx5KHRoaXMsIFtpdGVtXSk7XG4gICAgICB9XG5cbiAgICAgIHQgPSB0ZW1wbGF0ZTtcbiAgICAgIHQgPSB0LnJlcGxhY2UoJyNfZGVsZXRlXyMnLCBkZWxldGVCdXR0b24pO1xuICAgICAgdCA9IHQucmVwbGFjZSgnI19lZGl0XyMnLCBlZGl0QnV0dG9uKTtcbiAgICAgIHQgPSB0LnJlcGxhY2UoLyNfaWRfIy9nLCBpdGVtLmlkKTtcblxuICAgICAgZm9yIChjb25zdCBrZXkgaW4gaXRlbSkge1xuICAgICAgICBpdGVtVmFsID0gaXRlbVtrZXldO1xuICAgICAgICBpZiAoaXRlbVZhbCAhPT0gdW5kZWZpbmVkICYmIGl0ZW1WYWwgIT0gbnVsbCAmJiB0eXBlb2YgaXRlbVZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpdGVtVmFsID0gaXRlbVZhbC5yZXBsYWNlKC8oPzpcXHJcXG58XFxyfFxcbikvZywgJzxiciAvPicpO1xuICAgICAgICB9XG4gICAgICAgIHQgPSB0LnJlcGxhY2UoYCNfJHtrZXl9XyNgLCBpdGVtVmFsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpZWxkWzFdLnJlbmRlciAhPT0gdW5kZWZpbmVkICYmIGZpZWxkWzFdLnJlbmRlciAhPSBudWxsKSB7XG4gICAgICAgIHQgPSB0LnJlcGxhY2UoJyNfcmVuZGVyRnVuY3Rpb25fIycsIGZpZWxkWzFdLnJlbmRlcihpdGVtKSk7XG4gICAgICB9XG5cbiAgICAgIGl0ZW1IdG1sID0gJCh0KTtcbiAgICAgIGl0ZW1IdG1sLmF0dHIoJ2ZpZWxkSWQnLCBgJHtmaWVsZFswXX1fZGl2YCk7XG4gICAgICBodG1sLmFwcGVuZChpdGVtSHRtbCk7XG4gICAgfVxuXG5cbiAgICByZXR1cm4gaHRtbDtcbiAgfVxuXG4gIC8qKlxuICAgICAqIFJlc2V0IHRoZSBEYXRhR3JvdXAgZm9yIGEgZ2l2ZW4gZmllbGRcbiAgICAgKiBAbWV0aG9kIHJlc2V0RGF0YUdyb3VwXG4gICAgICogQHBhcmFtIGZpZWxkIHtBcnJheX0gZmllbGQgbWV0YSBkYXRhXG4gICAgICovXG4gIHJlc2V0RGF0YUdyb3VwKGZpZWxkKSB7XG4gICAgJChgIyR7ZmllbGRbMF19YCkudmFsKCcnKTtcbiAgICAkKGAjJHtmaWVsZFswXX1fZGl2YCkuaHRtbCgnJyk7XG4gIH1cblxuICBzaG93RGF0YUdyb3VwKGZpZWxkLCBvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgbGV0IGZvcm1IdG1sID0gdGhpcy50ZW1wbGF0ZXMuZGF0YWdyb3VwVGVtcGxhdGU7XG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICBjb25zdCBmaWVsZHMgPSBmaWVsZFsxXS5mb3JtO1xuXG4gICAgaWYgKG9iamVjdCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdCAhPSBudWxsICYmIG9iamVjdC5pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmN1cnJlbnREYXRhR3JvdXBJdGVtSWQgPSBvYmplY3QuaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudERhdGFHcm91cEl0ZW1JZCA9IG51bGw7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGh0bWwgKz0gdGhpcy5yZW5kZXJGb3JtRmllbGQoZmllbGRzW2ldKTtcbiAgICB9XG4gICAgZm9ybUh0bWwgPSBmb3JtSHRtbC5yZXBsYWNlKC9faWRfL2csIGAke3RoaXMuZ2V0VGFibGVOYW1lKCl9X2ZpZWxkXyR7ZmllbGRbMF19YCk7XG4gICAgZm9ybUh0bWwgPSBmb3JtSHRtbC5yZXBsYWNlKC9fZmllbGRzXy9nLCBodG1sKTtcblxuICAgIGNvbnN0IHJhbmRvbUZvcm1JZCA9IHRoaXMuZ2VuZXJhdGVSYW5kb20oMTQpO1xuICAgIGNvbnN0ICR0ZW1wRG9tT2JqID0gJCgnPGRpdiBjbGFzcz1cInJldmlld0Jsb2NrIHBvcHVwRm9ybVwiIGRhdGEtY29udGVudD1cIkZvcm1cIj48L2Rpdj4nKTtcbiAgICAkdGVtcERvbU9iai5hdHRyKCdpZCcsIHJhbmRvbUZvcm1JZCk7XG5cbiAgICAkdGVtcERvbU9iai5odG1sKGZvcm1IdG1sKTtcblxuXG4gICAgJHRlbXBEb21PYmouZmluZCgnLmRhdGVmaWVsZCcpLmRhdGVwaWNrZXIoeyB2aWV3TW9kZTogMiB9KTtcbiAgICAkdGVtcERvbU9iai5maW5kKCcudGltZWZpZWxkJykuZGF0ZXRpbWVwaWNrZXIoe1xuICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgICBwaWNrRGF0ZTogZmFsc2UsXG4gICAgfSk7XG4gICAgJHRlbXBEb21PYmouZmluZCgnLmRhdGV0aW1lZmllbGQnKS5kYXRldGltZXBpY2tlcih7XG4gICAgICBsYW5ndWFnZTogJ2VuJyxcbiAgICB9KTtcblxuICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5jb2xvcnBpY2snKS5jb2xvcnBpY2tlcigpO1xuXG4gICAgdGlueW1jZS5pbml0KHtcbiAgICAgIHNlbGVjdG9yOiBgIyR7JHRlbXBEb21PYmouYXR0cignaWQnKX0gLnRpbnltY2VgLFxuICAgICAgaGVpZ2h0OiAnNDAwJyxcbiAgICB9KTtcblxuICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5zaW1wbGVtZGUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHNpbXBsZW1kZSA9IG5ldyBTaW1wbGVNREUoeyBlbGVtZW50OiAkKHRoaXMpWzBdIH0pO1xuICAgICAgJCh0aGlzKS5kYXRhKCdzaW1wbGVtZGUnLCBzaW1wbGVtZGUpO1xuICAgICAgLy8gc2ltcGxlbWRlLnZhbHVlKCQodGhpcykudmFsKCkpO1xuICAgIH0pO1xuXG4gICAgJHRlbXBEb21PYmouZmluZCgnLnNlbGVjdDJGaWVsZCcpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgJCh0aGlzKS5zZWxlY3QyKCkuc2VsZWN0MigndmFsJywgJCh0aGlzKS5maW5kKCdvcHRpb246ZXEoMCknKS52YWwoKSk7XG4gICAgfSk7XG5cblxuICAgICR0ZW1wRG9tT2JqLmZpbmQoJy5zZWxlY3QyTXVsdGknKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICQodGhpcykuc2VsZWN0MigpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBwYXJlbnRSb3cgPSAkKHRoaXMpLnBhcmVudHMoJy5yb3cnKTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gcGFyZW50Um93LmZpbmQoJy5zZWxlY3QyLWNob2ljZXMnKS5oZWlnaHQoKTtcbiAgICAgICAgcGFyZW50Um93LmhlaWdodChwYXJzZUludChoZWlnaHQsIDEwKSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuXG4gICAgdGhpcy5jdXJyZW50RGF0YUdyb3VwRmllbGQgPSBmaWVsZDtcbiAgICB0aGlzLnNob3dEb21FbGVtZW50KGBBZGQgJHtmaWVsZFsxXS5sYWJlbH1gLCAkdGVtcERvbU9iaiwgbnVsbCwgbnVsbCwgdHJ1ZSk7XG5cbiAgICBpZiAob2JqZWN0ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0ICE9IG51bGwpIHtcbiAgICAgIHRoaXMuZmlsbEZvcm0ob2JqZWN0LCBgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1fZmllbGRfJHtmaWVsZFswXX1gLCBmaWVsZFsxXS5mb3JtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXREZWZhdWx0VmFsdWVzKGAjJHt0aGlzLmdldFRhYmxlTmFtZSgpfV9maWVsZF8ke2ZpZWxkWzBdfWAsIGZpZWxkWzFdLmZvcm0pO1xuICAgIH1cblxuXG4gICAgJCgnLmdyb3VwQWRkQnRuJykub2ZmKCk7XG4gICAgaWYgKG9iamVjdCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdCAhPSBudWxsICYmIG9iamVjdC5pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAkKCcuZ3JvdXBBZGRCdG4nKS5vbignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbW9kSnMuZWRpdERhdGFHcm91cChjYWxsYmFjayk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBlZGl0aW5nIGRhdGEgZ3JvdXA6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoJy5ncm91cEFkZEJ0bicpLm9uKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBtb2RKcy5hZGREYXRhR3JvdXAoY2FsbGJhY2spO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgYWRkaW5nIGRhdGEgZ3JvdXA6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYWRkRGF0YUdyb3VwKGNhbGxiYWNrLCBleGlzdGluZ0RhdGEpIHtcbiAgICBjb25zdCBmaWVsZCA9IHRoaXMuY3VycmVudERhdGFHcm91cEZpZWxkO1xuICAgIGxldCB0ZW1wUGFyYW1zO1xuICAgICQoYCMke3RoaXMuZ2V0VGFibGVOYW1lKCl9X2ZpZWxkXyR7ZmllbGRbMF19X2Vycm9yYCkuaHRtbCgnJyk7XG4gICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1fZmllbGRfJHtmaWVsZFswXX1fZXJyb3JgKS5oaWRlKCk7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0aW9uKGAke3RoaXMuZ2V0VGFibGVOYW1lKCl9X2ZpZWxkXyR7ZmllbGRbMF19YCwgdHJ1ZSwgeyBTaG93UG9wdXA6IGZhbHNlLCBMYWJlbEVycm9yQ2xhc3M6ICdlcnJvcicgfSk7XG4gICAgaWYgKHZhbGlkYXRvci5jaGVja1ZhbHVlcygpKSB7XG4gICAgICBsZXQgcGFyYW1zID0gdmFsaWRhdG9yLmdldEZvcm1QYXJhbWV0ZXJzKCk7XG4gICAgICBpZiAoZmllbGRbMV1bJ2N1c3RvbS12YWxpZGF0ZS1mdW5jdGlvbiddICE9PSB1bmRlZmluZWQgJiYgZmllbGRbMV1bJ2N1c3RvbS12YWxpZGF0ZS1mdW5jdGlvbiddICE9IG51bGwpIHtcbiAgICAgICAgdGVtcFBhcmFtcyA9IGZpZWxkWzFdWydjdXN0b20tdmFsaWRhdGUtZnVuY3Rpb24nXS5hcHBseSh0aGlzLCBbcGFyYW1zXSk7XG4gICAgICAgIGlmICh0ZW1wUGFyYW1zLnZhbGlkKSB7XG4gICAgICAgICAgcGFyYW1zID0gdGVtcFBhcmFtcy5wYXJhbXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1fZmllbGRfJHtmaWVsZFswXX1fZXJyb3JgKS5odG1sKHRlbXBQYXJhbXMubWVzc2FnZSk7XG4gICAgICAgICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1fZmllbGRfJHtmaWVsZFswXX1fZXJyb3JgKS5zaG93KCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgdmFsID0gJ1tdJztcbiAgICAgIGlmIChleGlzdGluZ0RhdGEpIHtcbiAgICAgICAgdmFsID0gZXhpc3RpbmdEYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gJChgIyR7ZmllbGRbMF19YCkudmFsKCk7XG4gICAgICAgIGlmICh2YWwgPT09ICcnIHx8IHZhbCA9PSBudWxsKSB7XG4gICAgICAgICAgdmFsID0gJ1tdJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UodmFsKTtcblxuICAgICAgcGFyYW1zLmlkID0gYCR7ZmllbGRbMF19XyR7dGhpcy5kYXRhR3JvdXBHZXROZXh0QXV0b0luY3JlbWVudElkKGRhdGEpfWA7XG4gICAgICBkYXRhLnB1c2gocGFyYW1zKTtcblxuXG4gICAgICBpZiAoZmllbGRbMV1bJ3NvcnQtZnVuY3Rpb24nXSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkWzFdWydzb3J0LWZ1bmN0aW9uJ10gIT0gbnVsbCkge1xuICAgICAgICBkYXRhLnNvcnQoZmllbGRbMV1bJ3NvcnQtZnVuY3Rpb24nXSk7XG4gICAgICB9XG5cbiAgICAgIHZhbCA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuXG4gICAgICBjb25zdCBodG1sID0gdGhpcy5kYXRhR3JvdXBUb0h0bWwodmFsLCBmaWVsZCk7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sodmFsKTtcbiAgICAgIH1cblxuICAgICAgJChgIyR7ZmllbGRbMF19X2RpdmApLmh0bWwoJycpO1xuICAgICAgJChgIyR7ZmllbGRbMF19X2RpdmApLmFwcGVuZChodG1sKTtcblxuICAgICAgdGhpcy5tYWtlRGF0YUdyb3VwU29ydGFibGUoZmllbGQsICQoYCMke2ZpZWxkWzBdfV9kaXZfaW5uZXJgKSk7XG5cblxuICAgICAgJChgIyR7ZmllbGRbMF19YCkudmFsKHZhbCk7XG4gICAgICB0aGlzLm9yZGVyRGF0YUdyb3VwKGZpZWxkKTtcblxuICAgICAgdGhpcy5jbG9zZURhdGFNZXNzYWdlKCk7XG5cbiAgICAgIHRoaXMuc2hvd01lc3NhZ2UoJ0l0ZW0gQWRkZWQnLCAnVGhpcyBjaGFuZ2Ugd2lsbCBiZSBlZmZlY3RpdmUgb25seSB3aGVuIHlvdSBzYXZlIHRoZSBmb3JtJyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbmwyYnIoc3RyLCBsZW4pIHtcbiAgICBsZXQgdCA9ICcnO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBhcnIgPSBzdHIuc3BsaXQoJyAnKTtcbiAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb3VudCArPSBhcnJbaV0ubGVuZ3RoICsgMTtcbiAgICAgICAgaWYgKGNvdW50ID4gbGVuKSB7XG4gICAgICAgICAgdCArPSBgJHthcnJbaV19PGJyLz5gO1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ICs9IGAke2FycltpXX0gYDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIERvIG5vdGhpbmdcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG4gIH1cblxuICBtYWtlRGF0YUdyb3VwU29ydGFibGUoZmllbGQsIG9iaikge1xuICAgIG9iai5kYXRhKCdmaWVsZCcsIGZpZWxkKTtcbiAgICBvYmouZGF0YSgnZmlyc3RTb3J0JywgdHJ1ZSk7XG4gICAgb2JqLnNvcnRhYmxlKHtcblxuICAgICAgY3JlYXRlKCkge1xuICAgICAgICAkKHRoaXMpLmhlaWdodCgkKHRoaXMpLmhlaWdodCgpKTtcbiAgICAgIH0sXG5cbiAgICAgICd1aS1mbG9hdGluZyc6IGZhbHNlLFxuICAgICAgc3RhcnQoZSwgdWlTdGFydCkge1xuICAgICAgICAkKCcjc29ydGFibGUtdWwtc2VsZWN0b3ItaWQnKS5zb3J0YWJsZSh7XG4gICAgICAgICAgc29ydChldmVudCwgdWkpIHtcbiAgICAgICAgICAgIGNvbnN0ICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICBpZiAoIS9odG1sfGJvZHkvaS50ZXN0KCR0YXJnZXQub2Zmc2V0UGFyZW50KClbMF0udGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgY29uc3QgdG9wID0gZXZlbnQucGFnZVkgLSAkdGFyZ2V0Lm9mZnNldFBhcmVudCgpLm9mZnNldCgpLnRvcCAtICh1aS5oZWxwZXIub3V0ZXJIZWlnaHQodHJ1ZSkgLyAyKTtcbiAgICAgICAgICAgICAgdWkuaGVscGVyLmNzcyh7IHRvcDogYCR7dG9wfXB4YCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICByZXZlcnQ6IHRydWUsXG4gICAgICBzdG9wKCkge1xuICAgICAgICBtb2RKcy5vcmRlckRhdGFHcm91cCgkKHRoaXMpLmRhdGEoJ2ZpZWxkJykpO1xuICAgICAgfSxcbiAgICAgIGF4aXM6ICd5JyxcbiAgICAgIHNjcm9sbDogZmFsc2UsXG4gICAgICBwbGFjZWhvbGRlcjogJ3NvcnRhYmxlLXBsYWNlaG9sZGVyJyxcbiAgICAgIGN1cnNvcjogJ21vdmUnLFxuICAgIH0pO1xuICB9XG5cbiAgb3JkZXJEYXRhR3JvdXAoZmllbGQsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgbmV3QXJyID0gW107IGxldFxuICAgICAgaWQ7XG4gICAgY29uc3QgbGlzdCA9ICQoYCMke2ZpZWxkWzBdfV9kaXZfaW5uZXIgW2ZpZWxkaWQ9JyR7ZmllbGRbMF19X2RpdiddYCk7XG4gICAgbGV0IHZhbCA9ICQoYCMke2ZpZWxkWzBdfWApLnZhbCgpO1xuICAgIGlmICh2YWwgPT09ICcnIHx8IHZhbCA9PSBudWxsKSB7XG4gICAgICB2YWwgPSAnW10nO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSh2YWwpO1xuICAgIGxpc3QuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBpZCA9ICQodGhpcykuYXR0cignaWQnKTtcbiAgICAgIGZvciAoY29uc3QgaW5kZXggaW4gZGF0YSkge1xuICAgICAgICBpZiAoZGF0YVtpbmRleF0uaWQgPT09IGlkKSB7XG4gICAgICAgICAgbmV3QXJyLnB1c2goZGF0YVtpbmRleF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkKGAjJHtmaWVsZFswXX1gKS52YWwoSlNPTi5zdHJpbmdpZnkobmV3QXJyKSk7XG5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2sobmV3QXJyKTtcbiAgICB9XG4gIH1cblxuXG4gIGVkaXREYXRhR3JvdXAoY2FsbGJhY2ssIGV4aXN0aW5nRGF0YSkge1xuICAgIGNvbnN0IGZpZWxkID0gdGhpcy5jdXJyZW50RGF0YUdyb3VwRmllbGQ7XG4gICAgY29uc3QgaWQgPSB0aGlzLmN1cnJlbnREYXRhR3JvdXBJdGVtSWQ7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0aW9uKGAke3RoaXMuZ2V0VGFibGVOYW1lKCl9X2ZpZWxkXyR7ZmllbGRbMF19YCwgdHJ1ZSwgeyBTaG93UG9wdXA6IGZhbHNlLCBMYWJlbEVycm9yQ2xhc3M6ICdlcnJvcicgfSk7XG4gICAgaWYgKHZhbGlkYXRvci5jaGVja1ZhbHVlcygpKSB7XG4gICAgICBsZXQgcGFyYW1zID0gdmFsaWRhdG9yLmdldEZvcm1QYXJhbWV0ZXJzKCk7XG5cbiAgICAgIGlmIChmaWVsZFsxXVsnY3VzdG9tLXZhbGlkYXRlLWZ1bmN0aW9uJ10gIT09IHVuZGVmaW5lZCAmJiBmaWVsZFsxXVsnY3VzdG9tLXZhbGlkYXRlLWZ1bmN0aW9uJ10gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCB0ZW1wUGFyYW1zID0gZmllbGRbMV1bJ2N1c3RvbS12YWxpZGF0ZS1mdW5jdGlvbiddLmFwcGx5KHRoaXMsIFtwYXJhbXNdKTtcbiAgICAgICAgaWYgKHRlbXBQYXJhbXMudmFsaWQpIHtcbiAgICAgICAgICBwYXJhbXMgPSB0ZW1wUGFyYW1zLnBhcmFtcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKGAjJHt0aGlzLmdldFRhYmxlTmFtZSgpfV9maWVsZF8ke2ZpZWxkWzBdfV9lcnJvcmApLmh0bWwodGVtcFBhcmFtcy5tZXNzYWdlKTtcbiAgICAgICAgICAkKGAjJHt0aGlzLmdldFRhYmxlTmFtZSgpfV9maWVsZF8ke2ZpZWxkWzBdfV9lcnJvcmApLnNob3coKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICBpZiAodGhpcy5kb0N1c3RvbUZpbHRlclZhbGlkYXRpb24ocGFyYW1zKSkge1xuICAgICAgICBsZXQgdmFsID0gJ1tdJztcbiAgICAgICAgaWYgKGV4aXN0aW5nRGF0YSkge1xuICAgICAgICAgIHZhbCA9IGV4aXN0aW5nRGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSAkKGAjJHtmaWVsZFswXX1gKS52YWwoKTtcbiAgICAgICAgICBpZiAodmFsID09PSAnJyB8fCB2YWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsID0gJ1tdJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UodmFsKTtcblxuICAgICAgICBsZXQgZWRpdFZhbCA9IHt9O1xuICAgICAgICBsZXQgZWRpdFZhbEluZGV4ID0gLTE7XG4gICAgICAgIGNvbnN0IG5ld1ZhbHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IGRhdGFbaV07XG4gICAgICAgICAgaWYgKGl0ZW0uaWQgPT09IGlkKSB7XG4gICAgICAgICAgICBlZGl0VmFsID0gaXRlbTtcbiAgICAgICAgICAgIGVkaXRWYWxJbmRleCA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5ld1ZhbHMucHVzaChpdGVtKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcGFyYW1zLmlkID0gZWRpdFZhbC5pZDtcbiAgICAgICAgbmV3VmFsc1tlZGl0VmFsSW5kZXhdID0gcGFyYW1zO1xuXG4gICAgICAgIGlmIChmaWVsZFsxXVsnc29ydC1mdW5jdGlvbiddICE9PSB1bmRlZmluZWQgJiYgZmllbGRbMV1bJ3NvcnQtZnVuY3Rpb24nXSAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3VmFscy5zb3J0KGZpZWxkWzFdWydzb3J0LWZ1bmN0aW9uJ10pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsID0gSlNPTi5zdHJpbmdpZnkobmV3VmFscyk7XG4gICAgICAgICQoYCMke2ZpZWxkWzBdfWApLnZhbCh2YWwpO1xuXG4gICAgICAgIGNvbnN0IGh0bWwgPSB0aGlzLmRhdGFHcm91cFRvSHRtbCh2YWwsIGZpZWxkKTtcblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayhuZXdWYWxzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3JkZXJEYXRhR3JvdXAoZmllbGQpO1xuXG4gICAgICAgICQoYCMke2ZpZWxkWzBdfV9kaXZgKS5odG1sKCcnKTtcbiAgICAgICAgJChgIyR7ZmllbGRbMF19X2RpdmApLmFwcGVuZChodG1sKTtcblxuICAgICAgICB0aGlzLm1ha2VEYXRhR3JvdXBTb3J0YWJsZShmaWVsZCwgJChgIyR7ZmllbGRbMF19X2Rpdl9pbm5lcmApKTtcblxuXG4gICAgICAgIHRoaXMuY2xvc2VEYXRhTWVzc2FnZSgpO1xuXG4gICAgICAgIHRoaXMuc2hvd01lc3NhZ2UoJ0l0ZW0gRWRpdGVkJywgJ1RoaXMgY2hhbmdlIHdpbGwgYmUgZWZmZWN0aXZlIG9ubHkgd2hlbiB5b3Ugc2F2ZSB0aGUgZm9ybScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZWRpdERhdGFHcm91cEl0ZW0oaWQsIGV4aXN0aW5nRGF0YSwgZmllbGQpIHtcbiAgICBjb25zdCBmaWVsZElkID0gaWQuc3Vic3RyaW5nKDAsIGlkLmxhc3RJbmRleE9mKCdfJykpO1xuXG4gICAgbGV0IHZhbDtcbiAgICBpZiAoZXhpc3RpbmdEYXRhKSB7XG4gICAgICB2YWwgPSBkZWNvZGVVUkkoZXhpc3RpbmdEYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsID0gJChgIyR7ZmllbGRJZH1gKS52YWwoKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UodmFsKTtcblxuICAgIGxldCBlZGl0VmFsID0ge307XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhW2ldO1xuICAgICAgaWYgKGl0ZW0uaWQgPT09IGlkKSB7XG4gICAgICAgIGVkaXRWYWwgPSBpdGVtO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmaWVsZCkge1xuICAgICAgZmllbGQgPSBKU09OLnBhcnNlKGRlY29kZVVSSShmaWVsZCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaWVsZCA9ICQoYCMke2ZpZWxkSWR9YCkuZGF0YSgnZmllbGQnKTtcbiAgICB9XG5cbiAgICB0aGlzLnNob3dEYXRhR3JvdXAoZmllbGQsIGVkaXRWYWwpO1xuICB9XG5cbiAgZGF0YUdyb3VwR2V0TmV4dEF1dG9JbmNyZW1lbnRJZChkYXRhKSB7XG4gICAgbGV0IGF1dG9JZCA9IDE7IGxldFxuICAgICAgaWQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZGF0YVtpXTtcbiAgICAgIGlmIChpdGVtLmlkID09PSB1bmRlZmluZWQgfHwgaXRlbS5pZCA9PSBudWxsKSB7XG4gICAgICAgIGl0ZW0uaWQgPSAxO1xuICAgICAgfVxuICAgICAgaWQgPSBpdGVtLmlkLnN1YnN0cmluZyhpdGVtLmlkLmxhc3RJbmRleE9mKCdfJykgKyAxLCBpdGVtLmlkLmxlbmd0aCk7XG4gICAgICBpZiAoaWQgPj0gYXV0b0lkKSB7XG4gICAgICAgIGF1dG9JZCA9IHBhcnNlSW50KGlkLCAxMCkgKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhdXRvSWQ7XG4gIH1cblxuXG4gIGRlbGV0ZURhdGFHcm91cEl0ZW0oaWQsIGV4aXN0aW5nRGF0YSkge1xuICAgIGNvbnN0IGZpZWxkSWQgPSBpZC5zdWJzdHJpbmcoMCwgaWQubGFzdEluZGV4T2YoJ18nKSk7XG5cbiAgICBsZXQgdmFsO1xuICAgIGlmIChleGlzdGluZ0RhdGEpIHtcbiAgICAgIHZhbCA9IGRlY29kZVVSSShleGlzdGluZ0RhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSAkKGAjJHtmaWVsZElkfWApLnZhbCgpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSh2YWwpO1xuXG4gICAgY29uc3QgbmV3VmFsID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhW2ldO1xuICAgICAgaWYgKGl0ZW0uaWQgIT09IGlkKSB7XG4gICAgICAgIG5ld1ZhbC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgICQoYCMke2ZpZWxkSWR9YCkudmFsKEpTT04uc3RyaW5naWZ5KG5ld1ZhbCkpO1xuXG4gICAgJChgIyR7aWR9YCkucmVtb3ZlKCk7XG5cbiAgICB0aGlzLnNob3dNZXNzYWdlKCdJdGVtIFJlbW92ZWQnLCAnSXRlbSByZW1vdmVkLiBUaGlzIGNoYW5nZSB3aWxsIGJlIGVmZmVjdGl2ZSBvbmx5IHdoZW4geW91IHNhdmUgdGhlIGZvcm0nKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAgICogRmlsbCBhIGZvcm0gd2l0aCByZXF1aXJlZCB2YWx1ZXMgYWZ0ZXIgc2hvd2luZyBpdFxuICAgICAqIEBtZXRob2QgZmlsbEZvcm1cbiAgICAgKiBAcGFyYW0gb2JqZWN0IHtBcnJheX0gZm9ybSBkYXRhXG4gICAgICogQHBhcmFtIGZvcm1JZCB7U3RyaW5nfSBpZCBvZiB0aGUgZm9ybVxuICAgICAqIEBwYXJhbSBmb3JtSWQge0FycmF5fSBmaWVsZCBtZXRhIGRhdGFcbiAgICAgKi9cblxuICBmaWxsRm9ybShvYmplY3QsIGZvcm1JZCwgZmllbGRzKSB7XG4gICAgbGV0IHBsYWNlSG9sZGVyVmFsO1xuICAgIGlmIChmaWVsZHMgPT0gbnVsbCB8fCBmaWVsZHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmllbGRzID0gdGhpcy5nZXRGb3JtRmllbGRzKCk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1JZCA9PSBudWxsIHx8IGZvcm1JZCA9PT0gdW5kZWZpbmVkIHx8IGZvcm1JZCA9PT0gJycpIHtcbiAgICAgIGZvcm1JZCA9IGAjJHt0aGlzLmdldFRhYmxlTmFtZSgpfUZvcm1gO1xuICAgIH1cblxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChmaWVsZHNbaV1bMV0udHlwZSA9PT0gJ2RhdGUnKSB7XG4gICAgICAgIGlmIChvYmplY3RbZmllbGRzW2ldWzBdXSAhPT0gJzAwMDAtMDAtMDAnICYmIG9iamVjdFtmaWVsZHNbaV1bMF1dICE9PSAnJyAmJiBvYmplY3RbZmllbGRzW2ldWzBdXSAhPSBudWxsICYmIG9iamVjdFtmaWVsZHNbaV1bMF1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAkKGAke2Zvcm1JZH0gIyR7ZmllbGRzW2ldWzBdfV9kYXRlYCkuZGF0ZXBpY2tlcignc2V0VmFsdWUnLCBvYmplY3RbZmllbGRzW2ldWzBdXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZmllbGRzW2ldWzFdLnR5cGUgPT09ICdjb2xvcnBpY2snKSB7XG4gICAgICAgIGlmIChvYmplY3RbZmllbGRzW2ldWzBdXSAhPSBudWxsICYmIG9iamVjdFtmaWVsZHNbaV1bMF1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAkKGAke2Zvcm1JZH0gIyR7ZmllbGRzW2ldWzBdfV9jb2xvcnBpY2tgKS5jb2xvcnBpY2tlcignc2V0VmFsdWUnLCBvYmplY3RbZmllbGRzW2ldWzBdXSk7XG4gICAgICAgICAgJChgJHtmb3JtSWR9ICMke2ZpZWxkc1tpXVswXX1gKS52YWwob2JqZWN0W2ZpZWxkc1tpXVswXV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkc1tpXVsxXS50eXBlID09PSAnZGF0ZXRpbWUnIHx8IGZpZWxkc1tpXVsxXS50eXBlID09PSAndGltZScpIHtcbiAgICAgICAgaWYgKG9iamVjdFtmaWVsZHNbaV1bMF1dICE9PSAnMDAwMC0wMC0wMCAwMDowMDowMCcgJiYgb2JqZWN0W2ZpZWxkc1tpXVswXV0gIT09ICcnICYmIG9iamVjdFtmaWVsZHNbaV1bMF1dICE9IG51bGwgJiYgb2JqZWN0W2ZpZWxkc1tpXVswXV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnN0IHRlbXBEYXRlID0gb2JqZWN0W2ZpZWxkc1tpXVswXV07XG4gICAgICAgICAgY29uc3QgYXJyID0gdGVtcERhdGUuc3BsaXQoJyAnKTtcbiAgICAgICAgICBjb25zdCBkYXRlQXJyID0gYXJyWzBdLnNwbGl0KCctJyk7XG4gICAgICAgICAgY29uc3QgdGltZUFyciA9IGFyclsxXS5zcGxpdCgnOicpO1xuICAgICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19X2RhdGV0aW1lYCkuZGF0YSgnZGF0ZXRpbWVwaWNrZXInKS5zZXRMb2NhbERhdGUobmV3IERhdGUoZGF0ZUFyclswXSwgcGFyc2VJbnQoZGF0ZUFyclsxXSwgMTApIC0gMSwgZGF0ZUFyclsyXSwgdGltZUFyclswXSwgdGltZUFyclsxXSwgdGltZUFyclsyXSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkc1tpXVsxXS50eXBlID09PSAnbGFiZWwnKSB7XG4gICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19YCkuaHRtbChvYmplY3RbZmllbGRzW2ldWzBdXSk7XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkc1tpXVsxXS50eXBlID09PSAncGxhY2Vob2xkZXInKSB7XG4gICAgICAgIGlmIChmaWVsZHNbaV1bMV1bJ3JlbW90ZS1zb3VyY2UnXSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkc1tpXVsxXVsncmVtb3RlLXNvdXJjZSddICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBjb25zdCBrZXkgPSBgJHtmaWVsZHNbaV1bMV1bJ3JlbW90ZS1zb3VyY2UnXVswXX1fJHtmaWVsZHNbaV1bMV1bJ3JlbW90ZS1zb3VyY2UnXVsxXX1fJHtmaWVsZHNbaV1bMV1bJ3JlbW90ZS1zb3VyY2UnXVsyXX1gO1xuICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZ2V0UmVtb3RlU291cmNlS2V5KGZpZWxkc1tpXSk7XG4gICAgICAgICAgcGxhY2VIb2xkZXJWYWwgPSB0aGlzLmZpZWxkTWFzdGVyRGF0YVtrZXldW29iamVjdFtmaWVsZHNbaV1bMF1dXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwbGFjZUhvbGRlclZhbCA9IG9iamVjdFtmaWVsZHNbaV1bMF1dO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBsYWNlSG9sZGVyVmFsID09PSB1bmRlZmluZWQgfHwgcGxhY2VIb2xkZXJWYWwgPT0gbnVsbCkge1xuICAgICAgICAgIHBsYWNlSG9sZGVyVmFsID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBsYWNlSG9sZGVyVmFsID0gcGxhY2VIb2xkZXJWYWwucmVwbGFjZSgvKD86XFxyXFxufFxccnxcXG4pL2csICc8YnIgLz4nKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpZWxkc1tpXVsxXS5mb3JtYXR0ZXIgIT09IHVuZGVmaW5lZCAmJiBmaWVsZHNbaV1bMV0uZm9ybWF0dGVyICYmICQuaXNGdW5jdGlvbihmaWVsZHNbaV1bMV0uZm9ybWF0dGVyKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwbGFjZUhvbGRlclZhbCA9IGZpZWxkc1tpXVsxXS5mb3JtYXR0ZXIocGxhY2VIb2xkZXJWYWwpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAkKGAke2Zvcm1JZH0gIyR7ZmllbGRzW2ldWzBdfWApLmh0bWwocGxhY2VIb2xkZXJWYWwpO1xuICAgICAgfSBlbHNlIGlmIChmaWVsZHNbaV1bMV0udHlwZSA9PT0gJ2ZpbGV1cGxvYWQnKSB7XG4gICAgICAgIGlmIChvYmplY3RbZmllbGRzW2ldWzBdXSAhPSBudWxsICYmIG9iamVjdFtmaWVsZHNbaV1bMF1dICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0W2ZpZWxkc1tpXVswXV0gIT09ICcnKSB7XG4gICAgICAgICAgJChgJHtmb3JtSWR9ICMke2ZpZWxkc1tpXVswXX1gKS5odG1sKG9iamVjdFtmaWVsZHNbaV1bMF1dKTtcbiAgICAgICAgICAkKGAke2Zvcm1JZH0gIyR7ZmllbGRzW2ldWzBdfWApLmF0dHIoJ3ZhbCcsIG9iamVjdFtmaWVsZHNbaV1bMF1dKTtcbiAgICAgICAgICAkKGAke2Zvcm1JZH0gIyR7ZmllbGRzW2ldWzBdfWApLnNob3coKTtcbiAgICAgICAgICAkKGAke2Zvcm1JZH0gIyR7ZmllbGRzW2ldWzBdfV9kb3dubG9hZGApLnNob3coKTtcbiAgICAgICAgICAkKGAke2Zvcm1JZH0gIyR7ZmllbGRzW2ldWzBdfV9yZW1vdmVgKS5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpZWxkc1tpXVsxXS5yZWFkb25seSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19X3VwbG9hZGApLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkc1tpXVsxXS50eXBlID09PSAnc2VsZWN0Jykge1xuICAgICAgICBpZiAob2JqZWN0W2ZpZWxkc1tpXVswXV0gPT09IHVuZGVmaW5lZCB8fCBvYmplY3RbZmllbGRzW2ldWzBdXSA9PSBudWxsIHx8IG9iamVjdFtmaWVsZHNbaV1bMF1dID09PSAnJykge1xuICAgICAgICAgIG9iamVjdFtmaWVsZHNbaV1bMF1dID0gJ05VTEwnO1xuICAgICAgICB9XG4gICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19YCkudmFsKG9iamVjdFtmaWVsZHNbaV1bMF1dKTtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGRzW2ldWzFdLnR5cGUgPT09ICdzZWxlY3QyJykge1xuICAgICAgICBpZiAob2JqZWN0W2ZpZWxkc1tpXVswXV0gPT09IHVuZGVmaW5lZCB8fCBvYmplY3RbZmllbGRzW2ldWzBdXSA9PSBudWxsIHx8IG9iamVjdFtmaWVsZHNbaV1bMF1dID09PSAnJykge1xuICAgICAgICAgIG9iamVjdFtmaWVsZHNbaV1bMF1dID0gJ05VTEwnO1xuICAgICAgICB9XG4gICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19YCkuc2VsZWN0MigndmFsJywgb2JqZWN0W2ZpZWxkc1tpXVswXV0pO1xuICAgICAgfSBlbHNlIGlmIChmaWVsZHNbaV1bMV0udHlwZSA9PT0gJ3NlbGVjdDJtdWx0aScpIHtcbiAgICAgICAgLy8gVE9ETyAtIFNNXG4gICAgICAgIGlmIChvYmplY3RbZmllbGRzW2ldWzBdXSA9PT0gdW5kZWZpbmVkIHx8IG9iamVjdFtmaWVsZHNbaV1bMF1dID09IG51bGwgfHwgb2JqZWN0W2ZpZWxkc1tpXVswXV0gPT09ICcnKSB7XG4gICAgICAgICAgb2JqZWN0W2ZpZWxkc1tpXVswXV0gPSAnTlVMTCc7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbXNWYWwgPSBbXTtcbiAgICAgICAgaWYgKG9iamVjdFtmaWVsZHNbaV1bMF1dICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0W2ZpZWxkc1tpXVswXV0gIT0gbnVsbCAmJiBvYmplY3RbZmllbGRzW2ldWzBdXSAhPT0gJycpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbXNWYWwgPSBKU09OLnBhcnNlKG9iamVjdFtmaWVsZHNbaV1bMF1dKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJChgJHtmb3JtSWR9ICMke2ZpZWxkc1tpXVswXX1gKS5zZWxlY3QyKCd2YWwnLCBtc1ZhbCk7XG4gICAgICAgIGNvbnN0IHNlbGVjdDJIZWlnaHQgPSAkKGAke2Zvcm1JZH0gIyR7ZmllbGRzW2ldWzBdfWApLmZpbmQoJy5zZWxlY3QyLWNob2ljZXMnKS5oZWlnaHQoKTtcbiAgICAgICAgJChgJHtmb3JtSWR9ICMke2ZpZWxkc1tpXVswXX1gKS5maW5kKCcuY29udHJvbHMnKS5jc3MoJ21pbi1oZWlnaHQnLCBgJHtzZWxlY3QySGVpZ2h0fXB4YCk7XG4gICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19YCkuY3NzKCdtaW4taGVpZ2h0JywgYCR7c2VsZWN0MkhlaWdodH1weGApO1xuICAgICAgfSBlbHNlIGlmIChmaWVsZHNbaV1bMV0udHlwZSA9PT0gJ2RhdGFncm91cCcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBodG1sID0gdGhpcy5kYXRhR3JvdXBUb0h0bWwob2JqZWN0W2ZpZWxkc1tpXVswXV0sIGZpZWxkc1tpXSk7XG4gICAgICAgICAgJChgJHtmb3JtSWR9ICMke2ZpZWxkc1tpXVswXX1gKS52YWwob2JqZWN0W2ZpZWxkc1tpXVswXV0pO1xuICAgICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19X2RpdmApLmh0bWwoJycpO1xuICAgICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19X2RpdmApLmFwcGVuZChodG1sKTtcblxuICAgICAgICAgIHRoaXMubWFrZURhdGFHcm91cFNvcnRhYmxlKGZpZWxkc1tpXSwgJChgJHtmb3JtSWR9ICMke2ZpZWxkc1tpXVswXX1fZGl2X2lubmVyYCkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkc1tpXVsxXS50eXBlID09PSAnc2lnbmF0dXJlJykge1xuICAgICAgICBpZiAob2JqZWN0W2ZpZWxkc1tpXVswXV0gIT09ICcnIHx8IG9iamVjdFtmaWVsZHNbaV1bMF1dICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgfHwgb2JqZWN0W2ZpZWxkc1tpXVswXV0gIT0gbnVsbCkge1xuICAgICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19YCkuZGF0YSgnc2lnbmF0dXJlUGFkJykuZnJvbURhdGFVUkwob2JqZWN0W2ZpZWxkc1tpXVswXV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkc1tpXVsxXS50eXBlID09PSAnc2ltcGxlbWRlJykge1xuICAgICAgICAkKGAke2Zvcm1JZH0gIyR7ZmllbGRzW2ldWzBdfWApLmRhdGEoJ3NpbXBsZW1kZScpLnZhbHVlKG9iamVjdFtmaWVsZHNbaV1bMF1dKTtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGRzW2ldWzFdLnR5cGUgPT09ICdjb2RlJykge1xuICAgICAgICBjb25zdCBjbSA9ICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19YCkuZGF0YSgnY29kZW1pcnJvcicpO1xuICAgICAgICBpZiAoY20pIHtcbiAgICAgICAgICBjbS5nZXREb2MoKS5zZXRWYWx1ZShvYmplY3RbZmllbGRzW2ldWzBdXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCR7Zm9ybUlkfSAjJHtmaWVsZHNbaV1bMF19YCkudmFsKG9iamVjdFtmaWVsZHNbaV1bMF1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICAgKiBDYW5jZWwgZWRpdCBvciBhZGQgbmV3IG9uIG1vZHVsZXNcbiAgICAgKiBAbWV0aG9kIGNhbmNlbFxuICAgICAqL1xuXG4gIGNhbmNlbCgpIHtcbiAgICAkKGAjJHt0aGlzLmdldFRhYmxlTmFtZSgpfUZvcm1gKS5oaWRlKCk7XG4gICAgJChgIyR7dGhpcy5nZXRUYWJsZU5hbWUoKX1gKS5zaG93KCk7XG4gIH1cblxuICByZW5kZXJGb3JtRmllbGQoZmllbGQpIHtcbiAgICBsZXQgdXNlcklkID0gMDtcbiAgICBpZiAodGhpcy5maWVsZFRlbXBsYXRlc1tmaWVsZFsxXS50eXBlXSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuZmllbGRUZW1wbGF0ZXNbZmllbGRbMV0udHlwZV0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBsZXQgdCA9IHRoaXMuZmllbGRUZW1wbGF0ZXNbZmllbGRbMV0udHlwZV07XG4gICAgZmllbGRbMV0ubGFiZWwgPSB0aGlzLmd0KGZpZWxkWzFdLmxhYmVsKTtcbiAgICBpZiAoZmllbGRbMV0udmFsaWRhdGlvbiAhPT0gJ25vbmUnICYmIGZpZWxkWzFdLnZhbGlkYXRpb24gIT09ICdlbWFpbE9yRW1wdHknICYmIGZpZWxkWzFdLnZhbGlkYXRpb24gIT09ICdudW1iZXJPckVtcHR5JyAmJiBmaWVsZFsxXS50eXBlICE9PSAncGxhY2Vob2xkZXInICYmIGZpZWxkWzFdLmxhYmVsLmluZGV4T2YoJyonKSA8IDApIHtcbiAgICAgIGNvbnN0IHRlbXBTZWxlY3RCb3hlcyA9IFsnc2VsZWN0JywgJ3NlbGVjdDInXTtcbiAgICAgIGlmICghKHRlbXBTZWxlY3RCb3hlcy5pbmRleE9mKGZpZWxkWzFdLnR5cGUpID49IDAgJiYgZmllbGRbMV1bJ2FsbG93LW51bGwnXSA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgZmllbGRbMV0ubGFiZWwgPSBgJHtmaWVsZFsxXS5sYWJlbH08Zm9udCBjbGFzcz1cInJlZEZvbnRcIj4qPC9mb250PmA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkWzFdLnR5cGUgPT09ICdzZWxlY3QnIHx8IGZpZWxkWzFdLnR5cGUgPT09ICdzZWxlY3QyJyB8fCBmaWVsZFsxXS50eXBlID09PSAnc2VsZWN0Mm11bHRpJykge1xuICAgICAgdCA9IHQucmVwbGFjZSgvX2lkXy9nLCBmaWVsZFswXSk7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fbGFiZWxfL2csIGZpZWxkWzFdLmxhYmVsKTtcbiAgICAgIGlmIChmaWVsZFsxXS5zb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBmaWVsZFsxXS5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICB0ID0gdC5yZXBsYWNlKCdfb3B0aW9uc18nLCB0aGlzLnJlbmRlckZvcm1TZWxlY3RPcHRpb25zKGZpZWxkWzFdLnNvdXJjZSwgZmllbGQpKTtcbiAgICAgIH0gZWxzZSBpZiAoZmllbGRbMV1bJ3JlbW90ZS1zb3VyY2UnXSAhPT0gdW5kZWZpbmVkICYmIGZpZWxkWzFdWydyZW1vdGUtc291cmNlJ10gIT0gbnVsbCkge1xuICAgICAgICAvLyBsZXQga2V5ID0gYCR7ZmllbGRbMV1bJ3JlbW90ZS1zb3VyY2UnXVswXX1fJHtmaWVsZFsxXVsncmVtb3RlLXNvdXJjZSddWzFdfV8ke2ZpZWxkWzFdWydyZW1vdGUtc291cmNlJ11bMl19YDtcbiAgICAgICAgLy8gaWYgKGZpZWxkWzFdWydyZW1vdGUtc291cmNlJ10ubGVuZ3RoID09PSA0KSB7XG4gICAgICAgIC8vICAga2V5ID0gYCR7a2V5fV8ke2ZpZWxkWzFdWydyZW1vdGUtc291cmNlJ11bM119YDtcbiAgICAgICAgLy8gfVxuICAgICAgICBjb25zdCBrZXkgPSB0aGlzLmdldFJlbW90ZVNvdXJjZUtleShmaWVsZCk7XG4gICAgICAgIHQgPSB0LnJlcGxhY2UoJ19vcHRpb25zXycsIHRoaXMucmVuZGVyRm9ybVNlbGVjdE9wdGlvbnNSZW1vdGUodGhpcy5maWVsZE1hc3RlckRhdGFba2V5XSwgZmllbGQpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZpZWxkWzFdLnR5cGUgPT09ICdjb2xvcnBpY2snKSB7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9faWRfL2csIGZpZWxkWzBdKTtcbiAgICAgIHQgPSB0LnJlcGxhY2UoL19sYWJlbF8vZywgZmllbGRbMV0ubGFiZWwpO1xuICAgIH0gZWxzZSBpZiAoZmllbGRbMV0udHlwZSA9PT0gJ2RhdGUnKSB7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9faWRfL2csIGZpZWxkWzBdKTtcbiAgICAgIHQgPSB0LnJlcGxhY2UoL19sYWJlbF8vZywgZmllbGRbMV0ubGFiZWwpO1xuICAgIH0gZWxzZSBpZiAoZmllbGRbMV0udHlwZSA9PT0gJ2RhdGV0aW1lJykge1xuICAgICAgdCA9IHQucmVwbGFjZSgvX2lkXy9nLCBmaWVsZFswXSk7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fbGFiZWxfL2csIGZpZWxkWzFdLmxhYmVsKTtcbiAgICB9IGVsc2UgaWYgKGZpZWxkWzFdLnR5cGUgPT09ICd0aW1lJykge1xuICAgICAgdCA9IHQucmVwbGFjZSgvX2lkXy9nLCBmaWVsZFswXSk7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fbGFiZWxfL2csIGZpZWxkWzFdLmxhYmVsKTtcbiAgICB9IGVsc2UgaWYgKGZpZWxkWzFdLnR5cGUgPT09ICdmaWxldXBsb2FkJykge1xuICAgICAgdCA9IHQucmVwbGFjZSgvX2lkXy9nLCBmaWVsZFswXSk7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fbGFiZWxfL2csIGZpZWxkWzFdLmxhYmVsKTtcbiAgICAgIGNvbnN0IGNlID0gdGhpcy5nZXRDdXJyZW50UHJvZmlsZSgpO1xuICAgICAgaWYgKGNlICE9IG51bGwgJiYgY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1c2VySWQgPSBjZS5pZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVzZXJJZCA9IHRoaXMuZ2V0VXNlcigpLmlkICogLTE7XG4gICAgICB9XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fdXNlcklkXy9nLCB1c2VySWQpO1xuICAgICAgdCA9IHQucmVwbGFjZSgvX2dyb3VwXy9nLCB0aGlzLnRhYik7XG5cbiAgICAgIGlmIChmaWVsZFsxXS5maWxldHlwZXMgIT09IHVuZGVmaW5lZCAmJiBmaWVsZFsxXS5maWxldHlwZXMgIT0gbnVsbCkge1xuICAgICAgICB0ID0gdC5yZXBsYWNlKC9fZmlsZXR5cGVzXy9nLCBmaWVsZFsxXS5maWxldHlwZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdCA9IHQucmVwbGFjZSgvX2ZpbGV0eXBlc18vZywgJ2FsbCcpO1xuICAgICAgfVxuXG4gICAgICB0ID0gdC5yZXBsYWNlKC9fcmFuZF8vZywgdGhpcy5nZW5lcmF0ZVJhbmRvbSgxNCkpO1xuICAgIH0gZWxzZSBpZiAoZmllbGRbMV0udHlwZSA9PT0gJ2RhdGFncm91cCcpIHtcbiAgICAgIHQgPSB0LnJlcGxhY2UoL19pZF8vZywgZmllbGRbMF0pO1xuICAgICAgdCA9IHQucmVwbGFjZSgvX2xhYmVsXy9nLCBmaWVsZFsxXS5sYWJlbCk7XG4gICAgfSBlbHNlIGlmIChmaWVsZFsxXS50eXBlID09PSAnc2lnbmF0dXJlJykge1xuICAgICAgdCA9IHQucmVwbGFjZSgvX2lkXy9nLCBmaWVsZFswXSk7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fbGFiZWxfL2csIGZpZWxkWzFdLmxhYmVsKTtcbiAgICB9IGVsc2UgaWYgKGZpZWxkWzFdLnR5cGUgPT09ICd0aW55bWNlJyB8fCBmaWVsZFsxXS50eXBlID09PSAnc2ltcGxlbWRlJykge1xuICAgICAgdCA9IHQucmVwbGFjZSgvX2lkXy9nLCBmaWVsZFswXSk7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fbGFiZWxfL2csIGZpZWxkWzFdLmxhYmVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdCA9IHQucmVwbGFjZSgvX2lkXy9nLCBmaWVsZFswXSk7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fbGFiZWxfL2csIGZpZWxkWzFdLmxhYmVsKTtcbiAgICB9XG5cblxuICAgIGlmIChmaWVsZFsxXS52YWxpZGF0aW9uICE9PSB1bmRlZmluZWQgJiYgZmllbGRbMV0udmFsaWRhdGlvbiAhPSBudWxsICYmIGZpZWxkWzFdLnZhbGlkYXRpb24gIT09ICcnKSB7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fdmFsaWRhdGlvbl8vZywgYHZhbGlkYXRpb249XCIke2ZpZWxkWzFdLnZhbGlkYXRpb259XCJgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdCA9IHQucmVwbGFjZSgvX3ZhbGlkYXRpb25fL2csICcnKTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGRbMV0uaGVscCAhPT0gdW5kZWZpbmVkICYmIGZpZWxkWzFdLmhlbHAgIT09IG51bGwpIHtcbiAgICAgIHQgPSB0LnJlcGxhY2UoL19oZWxwbGluZV8vZywgZmllbGRbMV0uaGVscCk7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9faGlkZGVuX2NsYXNzX2hlbHBfL2csICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdCA9IHQucmVwbGFjZSgvX2hlbHBsaW5lXy9nLCAnJyk7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9faGlkZGVuX2NsYXNzX2hlbHBfL2csICdoaWRlJyk7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkWzFdLnBsYWNlaG9sZGVyICE9PSB1bmRlZmluZWQgJiYgZmllbGRbMV0ucGxhY2Vob2xkZXIgIT09IG51bGwpIHtcbiAgICAgIHQgPSB0LnJlcGxhY2UoL19wbGFjZWhvbGRlcl8vZywgYHBsYWNlaG9sZGVyPVwiJHtmaWVsZFsxXS5wbGFjZWhvbGRlcn1cImApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fcGxhY2Vob2xkZXJfL2csICcnKTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGRbMV0ubWFzayAhPT0gdW5kZWZpbmVkICYmIGZpZWxkWzFdLm1hc2sgIT09IG51bGwpIHtcbiAgICAgIHQgPSB0LnJlcGxhY2UoL19tYXNrXy9nLCBgbWFzaz1cIiR7ZmllbGRbMV0ubWFza31cImApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ID0gdC5yZXBsYWNlKC9fbWFza18vZywgJycpO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xuICB9XG5cbiAgcmVuZGVyRm9ybVNlbGVjdE9wdGlvbnMob3B0aW9ucywgZmllbGQpIHtcbiAgICBsZXQgaHRtbCA9ICcnO1xuXG4gICAgaWYgKGZpZWxkICE9IG51bGwgJiYgZmllbGQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGZpZWxkWzFdWydhbGxvdy1udWxsJ10gPT09IHRydWUpIHtcbiAgICAgICAgaWYgKGZpZWxkWzFdWydudWxsLWxhYmVsJ10gIT09IHVuZGVmaW5lZCAmJiBmaWVsZFsxXVsnbnVsbC1sYWJlbCddICE9IG51bGwpIHtcbiAgICAgICAgICBodG1sICs9IGA8b3B0aW9uIHZhbHVlPVwiTlVMTFwiPiR7dGhpcy5ndChmaWVsZFsxXVsnbnVsbC1sYWJlbCddKX08L29wdGlvbj5gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGh0bWwgKz0gJzxvcHRpb24gdmFsdWU9XCJOVUxMXCI+U2VsZWN0PC9vcHRpb24+JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gU29ydCBvcHRpb25zXG5cbiAgICBjb25zdCB0dXBsZXMgPSBbXTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIHR1cGxlcy5wdXNoKG9wdGlvbnNba2V5XSk7XG4gICAgfVxuICAgIGlmIChmaWVsZFsxXS5zb3J0ID09PSB0cnVlKSB7XG4gICAgICB0dXBsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBhID0gYVsxXTtcbiAgICAgICAgYiA9IGJbMV07XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogKGEgPiBiID8gMSA6IDApO1xuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR1cGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcHJvcCA9IHR1cGxlc1tpXVswXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gdHVwbGVzW2ldWzFdO1xuICAgICAgbGV0IHQgPSAnPG9wdGlvbiB2YWx1ZT1cIl9pZF9cIj5fdmFsXzwvb3B0aW9uPic7XG4gICAgICB0ID0gdC5yZXBsYWNlKCdfaWRfJywgcHJvcCk7XG4gICAgICB0ID0gdC5yZXBsYWNlKCdfdmFsXycsIHRoaXMuZ3QodmFsdWUpKTtcbiAgICAgIGh0bWwgKz0gdDtcbiAgICB9XG4gICAgcmV0dXJuIGh0bWw7XG4gIH1cblxuICByZW5kZXJGb3JtU2VsZWN0T3B0aW9uc1JlbW90ZShvcHRpb25zLCBmaWVsZCkge1xuICAgIGxldCBodG1sID0gJyc7XG4gICAgaWYgKGZpZWxkWzFdWydhbGxvdy1udWxsJ10gPT09IHRydWUpIHtcbiAgICAgIGlmIChmaWVsZFsxXVsnbnVsbC1sYWJlbCddICE9PSB1bmRlZmluZWQgJiYgZmllbGRbMV1bJ251bGwtbGFiZWwnXSAhPSBudWxsKSB7XG4gICAgICAgIGh0bWwgKz0gYDxvcHRpb24gdmFsdWU9XCJOVUxMXCI+JHt0aGlzLmd0KGZpZWxkWzFdWydudWxsLWxhYmVsJ10pfTwvb3B0aW9uPmA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBodG1sICs9ICc8b3B0aW9uIHZhbHVlPVwiTlVMTFwiPlNlbGVjdDwvb3B0aW9uPic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU29ydCBvcHRpb25zXG5cbiAgICBjb25zdCB0dXBsZXMgPSBbXTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIHR1cGxlcy5wdXNoKFtrZXksIG9wdGlvbnNba2V5XV0pO1xuICAgIH1cbiAgICBpZiAoZmllbGRbMV0uc29ydCA9PT0gJ3RydWUnKSB7XG4gICAgICB0dXBsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBhID0gYVsxXTtcbiAgICAgICAgYiA9IGJbMV07XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogKGEgPiBiID8gMSA6IDApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0dXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHByb3AgPSB0dXBsZXNbaV1bMF07XG4gICAgICBjb25zdCB2YWx1ZSA9IHR1cGxlc1tpXVsxXTtcblxuICAgICAgbGV0IHQgPSAnPG9wdGlvbiB2YWx1ZT1cIl9pZF9cIj5fdmFsXzwvb3B0aW9uPic7XG4gICAgICB0ID0gdC5yZXBsYWNlKCdfaWRfJywgcHJvcCk7XG4gICAgICB0ID0gdC5yZXBsYWNlKCdfdmFsXycsIHRoaXMuZ3QodmFsdWUpKTtcbiAgICAgIGh0bWwgKz0gdDtcbiAgICB9XG5cblxuICAgIHJldHVybiBodG1sO1xuICB9XG5cbiAgc2V0Q3VzdG9tVGVtcGxhdGVzKHRlbXBsYXRlcykge1xuICAgIHRoaXMuY3VzdG9tVGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICB9XG5cbiAgc2V0RW1haWxUZW1wbGF0ZXModGVtcGxhdGVzKSB7XG4gICAgdGhpcy5lbWFpbFRlbXBsYXRlcyA9IHRlbXBsYXRlcztcbiAgfVxuXG4gIGdldEN1c3RvbVRlbXBsYXRlKGZpbGUpIHtcbiAgICByZXR1cm4gdGhpcy5jdXN0b21UZW1wbGF0ZXNbZmlsZV07XG4gIH1cblxuICBzZXRGaWVsZFRlbXBsYXRlcyh0ZW1wbGF0ZXMpIHtcbiAgICB0aGlzLmZpZWxkVGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICB9XG5cblxuICBnZXRNZXRhRmllbGRGb3JSZW5kZXJpbmcoZmllbGROYW1lKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY2xlYXJEZWxldGVQYXJhbXMoKSB7XG4gICAgdGhpcy5kZWxldGVQYXJhbXMgPSB7fTtcbiAgfVxuXG4gIGdldFNob3dBZGROZXcoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hvd0FkZE5ldztcbiAgfVxuXG4gIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGNoYW5nZSBhZGQgbmV3IGJ1dHRvbiBsYWJlbFxuICAgICAqIEBtZXRob2QgZ2V0QWRkTmV3TGFiZWxcbiAgICAgKi9cblxuICBnZXRBZGROZXdMYWJlbCgpIHtcbiAgICByZXR1cm4gJ0FkZCBOZXcnO1xuICB9XG5cbiAgLyoqXG4gICAgICogVXNlZCB0byBzZXQgd2hldGhlciB0byBzaG93IHRoZSBhZGQgbmV3IGJ1dHRvbiBmb3IgYSBtb2R1bGVcbiAgICAgKiBAbWV0aG9kIHNldFNob3dBZGROZXdcbiAgICAgKiBAcGFyYW0gc2hvd0FkZE5ldyB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKi9cblxuICBzZXRTaG93QWRkTmV3KHNob3dBZGROZXcpIHtcbiAgICB0aGlzLnNob3dBZGROZXcgPSBzaG93QWRkTmV3O1xuICB9XG5cbiAgLyoqXG4gICAgICogVXNlZCB0byBzZXQgd2hldGhlciB0byBzaG93IGRlbGV0ZSBidXR0b24gZm9yIGVhY2ggZW50cnkgaW4gbW9kdWxlXG4gICAgICogQG1ldGhvZCBzZXRTaG93RGVsZXRlXG4gICAgICogQHBhcmFtIHZhbCB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKi9cbiAgc2V0U2hvd0RlbGV0ZSh2YWwpIHtcbiAgICB0aGlzLnNob3dEZWxldGUgPSB2YWw7XG4gIH1cblxuXG4gIC8qKlxuICAgICAqIFVzZWQgdG8gc2V0IHdoZXRoZXIgdG8gc2hvdyBlZGl0IGJ1dHRvbiBmb3IgZWFjaCBlbnRyeSBpbiBtb2R1bGVcbiAgICAgKiBAbWV0aG9kIHNldFNob3dFZGl0XG4gICAgICogQHBhcmFtIHZhbCB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKi9cblxuICBzZXRTaG93RWRpdCh2YWwpIHtcbiAgICB0aGlzLnNob3dFZGl0ID0gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAgICogVXNlZCB0byBzZXQgd2hldGhlciB0byBzaG93IHNhdmUgYnV0dG9uIGluIGZvcm1cbiAgICAgKiBAbWV0aG9kIHNldFNob3dTYXZlXG4gICAgICogQHBhcmFtIHZhbCB7Qm9vbGVhbn0gdmFsdWVcbiAgICAgKi9cblxuXG4gIHNldFNob3dTYXZlKHZhbCkge1xuICAgIHRoaXMuc2hvd1NhdmUgPSB2YWw7XG4gIH1cblxuXG4gIC8qKlxuICAgICAqIFVzZWQgdG8gc2V0IHdoZXRoZXIgdG8gc2hvdyBjYW5jZWwgYnV0dG9uIGluIGZvcm1cbiAgICAgKiBAbWV0aG9kIHNldFNob3dDYW5jZWxcbiAgICAgKiBAcGFyYW0gdmFsIHtCb29sZWFufSB2YWx1ZVxuICAgICAqL1xuXG4gIHNldFNob3dDYW5jZWwodmFsKSB7XG4gICAgdGhpcy5zaG93Q2FuY2VsID0gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAgICogRGF0YXRhYmxlIG9wdGlvbiBhcnJheSB3aWxsIGJlIGV4dGVuZGVkIHdpdGggYXNzb2NpYXRpdmUgYXJyYXkgcHJvdmlkZWQgaGVyZVxuICAgICAqIEBtZXRob2QgZ2V0Q3VzdG9tVGFibGVQYXJhbXNcbiAgICAgKiBAcGFyYW0gdmFsIHtCb29sZWFufSB2YWx1ZVxuICAgICAqL1xuXG5cbiAgZ2V0Q3VzdG9tVGFibGVQYXJhbXMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgZ2V0QWN0aW9uQnV0dG9ucyhvYmopIHtcbiAgICByZXR1cm4gbW9kSnMuZ2V0QWN0aW9uQnV0dG9uc0h0bWwob2JqLmFEYXRhWzBdLCBvYmouYURhdGEpO1xuICB9XG5cblxuICAvKipcbiAgICAgKiBUaGlzIHJldHVybiBodG1sIGZvciBhY3Rpb24gYnV0dG9ucyBpbiBlYWNoIHJvdy4gT3ZlcnJpZGUgdGhpcyBtZXRob2QgaWYgeW91IG5lZWQgdG8gbWFrZSBjaGFuZ2VzIHRvIGFjdGlvbiBidXR0b25zLlxuICAgICAqIEBtZXRob2QgZ2V0QWN0aW9uQnV0dG9uc0h0bWxcbiAgICAgKiBAcGFyYW0gaWQge2ludH0gaWQgb2YgdGhlIHJvd1xuICAgICAqIEBwYXJhbSBkYXRhIHtBcnJheX0gZGF0YSBmb3IgdGhlIHJvd1xuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IGh0bWwgZm9yIGFjdGlvbiBidXR0b25zXG4gICAgICovXG5cbiAgZ2V0QWN0aW9uQnV0dG9uc0h0bWwoaWQsIGRhdGEpIHtcbiAgICBjb25zdCBlZGl0QnV0dG9uID0gJzxpbWcgY2xhc3M9XCJ0YWJsZUFjdGlvbkJ1dHRvblwiIHNyYz1cIl9CQVNFX2ltYWdlcy9lZGl0LnBuZ1wiIHN0eWxlPVwiY3Vyc29yOnBvaW50ZXI7XCIgcmVsPVwidG9vbHRpcFwiIHRpdGxlPVwiRWRpdFwiIG9uY2xpY2s9XCJtb2RKcy5lZGl0KF9pZF8pO3JldHVybiBmYWxzZTtcIj48L2ltZz4nO1xuICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9ICc8aW1nIGNsYXNzPVwidGFibGVBY3Rpb25CdXR0b25cIiBzcmM9XCJfQkFTRV9pbWFnZXMvZGVsZXRlLnBuZ1wiIHN0eWxlPVwibWFyZ2luLWxlZnQ6MTVweDtjdXJzb3I6cG9pbnRlcjtcIiByZWw9XCJ0b29sdGlwXCIgdGl0bGU9XCJEZWxldGVcIiBvbmNsaWNrPVwibW9kSnMuZGVsZXRlUm93KF9pZF8pO3JldHVybiBmYWxzZTtcIj48L2ltZz4nO1xuICAgIGNvbnN0IGNsb25lQnV0dG9uID0gJzxpbWcgY2xhc3M9XCJ0YWJsZUFjdGlvbkJ1dHRvblwiIHNyYz1cIl9CQVNFX2ltYWdlcy9jbG9uZS5wbmdcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjE1cHg7Y3Vyc29yOnBvaW50ZXI7XCIgcmVsPVwidG9vbHRpcFwiIHRpdGxlPVwiQ29weVwiIG9uY2xpY2s9XCJtb2RKcy5jb3B5Um93KF9pZF8pO3JldHVybiBmYWxzZTtcIj48L2ltZz4nO1xuICAgIGxldCBodG1sID0gJzxkaXYgc3R5bGU9XCJ3aWR0aDo4MHB4O1wiPl9lZGl0X19kZWxldGVfX2Nsb25lXzwvZGl2Pic7XG5cbiAgICBpZiAodGhpcy5zaG93QWRkTmV3KSB7XG4gICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCdfY2xvbmVfJywgY2xvbmVCdXR0b24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCdfY2xvbmVfJywgJycpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNob3dEZWxldGUpIHtcbiAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoJ19kZWxldGVfJywgZGVsZXRlQnV0dG9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgnX2RlbGV0ZV8nLCAnJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2hvd0VkaXQpIHtcbiAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoJ19lZGl0XycsIGVkaXRCdXR0b24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCdfZWRpdF8nLCAnJyk7XG4gICAgfVxuXG4gICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvX2lkXy9nLCBpZCk7XG4gICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvX0JBU0VfL2csIHRoaXMuYmFzZVVybCk7XG4gICAgcmV0dXJuIGh0bWw7XG4gIH1cblxuXG4gIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHJhbmRvbSBzdHJpbmdcbiAgICAgKiBAbWV0aG9kIGdlbmVyYXRlUmFuZG9tXG4gICAgICogQHBhcmFtIGxlbmd0aCB7aW50fSByZXF1aXJlZCBsZW5ndGggb2YgdGhlIHN0cmluZ1xuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHJhbmRvbSBzdHJpbmdcbiAgICAgKi9cblxuICBnZW5lcmF0ZVJhbmRvbShsZW5ndGgpIHtcbiAgICBjb25zdCBkID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBjaGFycyA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWic7XG4gICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgIGZvciAobGV0IGkgPSBsZW5ndGg7IGkgPiAwOyAtLWkpIHJlc3VsdCArPSBjaGFyc1tNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAoY2hhcnMubGVuZ3RoIC0gMSkpXTtcbiAgICByZXR1cm4gcmVzdWx0ICsgZC5nZXRUaW1lKCk7XG4gIH1cblxuXG4gIGNoZWNrRmlsZVR5cGUoZWxlbWVudE5hbWUsIGZpbGVUeXBlcykge1xuICAgIGNvbnN0IGZpbGVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudE5hbWUpO1xuICAgIGxldCBmaWxlRXh0ZW5zaW9uID0gJyc7XG4gICAgaWYgKGZpbGVFbGVtZW50LnZhbHVlLmxhc3RJbmRleE9mKCcuJykgPiAwKSB7XG4gICAgICBmaWxlRXh0ZW5zaW9uID0gZmlsZUVsZW1lbnQudmFsdWUuc3Vic3RyaW5nKGZpbGVFbGVtZW50LnZhbHVlLmxhc3RJbmRleE9mKCcuJykgKyAxLCBmaWxlRWxlbWVudC52YWx1ZS5sZW5ndGgpO1xuICAgIH1cblxuICAgIGZpbGVFeHRlbnNpb24gPSBmaWxlRXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBjb25zdCBhbGxvd2VkID0gZmlsZVR5cGVzLnNwbGl0KCcsJyk7XG5cbiAgICBpZiAoYWxsb3dlZC5pbmRleE9mKGZpbGVFeHRlbnNpb24pIDwgMCkge1xuICAgICAgZmlsZUVsZW1lbnQudmFsdWUgPSAnJztcbiAgICAgIHRoaXMuc2hvd01lc3NhZ2UoJ0ZpbGUgVHlwZSBFcnJvcicsICdTZWxlY3RlZCBmaWxlIHR5cGUgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgdGhpcy5jbGVhckZpbGVFbGVtZW50KGVsZW1lbnROYW1lKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNsZWFyRmlsZUVsZW1lbnQoZWxlbWVudE5hbWUpIHtcbiAgICBsZXQgY29udHJvbCA9ICQoYCMke2VsZW1lbnROYW1lfWApO1xuICAgIGNvbnRyb2wucmVwbGFjZVdpdGgoY29udHJvbCA9IGNvbnRyb2wudmFsKCcnKS5jbG9uZSh0cnVlKSk7XG4gIH1cblxuXG4gIGZpeEpTT04oanNvbikge1xuICAgIGlmICh0aGlzLm5vSlNPTlJlcXVlc3RzID09PSAnMScpIHtcbiAgICAgIGpzb24gPSB3aW5kb3cuYnRvYShqc29uKTtcbiAgICB9XG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuXG4gIGdldENsaWVudERhdGUoZGF0ZSkge1xuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuZ2V0Q2xpZW50R01UT2Zmc2V0KCk7XG4gICAgY29uc3QgdHpEYXRlID0gZGF0ZS5hZGRNaW51dGVzKG9mZnNldCAqIDYwKTtcbiAgICByZXR1cm4gdHpEYXRlO1xuICB9XG5cbiAgZ2V0Q2xpZW50R01UT2Zmc2V0KCkge1xuICAgIGNvbnN0IHJpZ2h0Tm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBqYW4xID0gbmV3IERhdGUocmlnaHROb3cuZ2V0RnVsbFllYXIoKSwgMCwgMSwgMCwgMCwgMCwgMCk7XG4gICAgY29uc3QgdGVtcCA9IGphbjEudG9HTVRTdHJpbmcoKTtcbiAgICBjb25zdCBqYW4yID0gbmV3IERhdGUodGVtcC5zdWJzdHJpbmcoMCwgdGVtcC5sYXN0SW5kZXhPZignICcpIC0gMSkpO1xuICAgIHJldHVybiAoamFuMSAtIGphbjIpIC8gKDEwMDAgKiA2MCAqIDYwKTtcbiAgfVxuXG4gIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIGluIGEgbW9kdWxlIHRvIHByb3ZpZGUgdGhlIGhlbHAgbGluayBmb3IgdGhlIG1vZHVsZS4gSGVscCBsaW5rIG9mIHRoZSBtb2R1bGUgb24gZnJvbnRlbmQgd2lsbCBnZXQgdXBkYXRlZCB3aXRoIHRoaXMuXG4gICAgICogQG1ldGhvZCBnZXRIZWxwTGlua1xuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IGhlbHAgbGlua1xuICAgICAqL1xuXG4gIGdldEhlbHBMaW5rKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc2hvd0xvYWRlcigpIHtcbiAgICAkKCcjaWNlbG9hZGVyJykuc2hvdygpO1xuICB9XG5cbiAgaGlkZUxvYWRlcigpIHtcbiAgICAkKCcjaWNlbG9hZGVyJykuaGlkZSgpO1xuICB9XG5cbiAgZ2VuZXJhdGVPcHRpb25zKGRhdGEpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9ICc8b3B0aW9uIHZhbHVlPVwiX192YWxfX1wiPl9fdGV4dF9fPC9vcHRpb24+JztcbiAgICBsZXQgb3B0aW9ucyA9ICcnO1xuICAgIGZvciAoY29uc3QgaW5kZXggaW4gZGF0YSkge1xuICAgICAgb3B0aW9ucyArPSB0ZW1wbGF0ZS5yZXBsYWNlKCdfX3ZhbF9fJywgaW5kZXgpLnJlcGxhY2UoJ19fdGV4dF9fJywgZGF0YVtpbmRleF0pO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgaXNNb2R1bGVJbnN0YWxsZWQodHlwZSwgbmFtZSkge1xuICAgIGlmIChtb2R1bGVzSW5zdGFsbGVkID09PSB1bmRlZmluZWQgfHwgbW9kdWxlc0luc3RhbGxlZCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAobW9kdWxlc0luc3RhbGxlZFtgJHt0eXBlfV8ke25hbWV9YF0gPT09IDEpO1xuICB9XG5cblxuICBzZXRDdXN0b21GaWVsZHMoZmllbGRzKSB7XG4gICAgbGV0IGZpZWxkOyBsZXRcbiAgICAgIHBhcnNlZDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgZmllbGQgPSBmaWVsZHNbaV07XG4gICAgICBpZiAoZmllbGQuZGlzcGxheSAhPT0gJ0hpZGRlbicgJiYgZmllbGQuZGF0YSAhPT0gJycgJiYgZmllbGQuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcGFyc2VkID0gSlNPTi5wYXJzZShmaWVsZC5kYXRhKTtcbiAgICAgICAgICBpZiAocGFyc2VkID09PSB1bmRlZmluZWQgfHwgcGFyc2VkID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFyc2VkLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJzZWRbMV0udHlwZSA9PT0gdW5kZWZpbmVkIHx8IHBhcnNlZFsxXS50eXBlID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmN1c3RvbUZpZWxkcy5wdXNoKHBhcnNlZCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhZGRDdXN0b21GaWVsZHMoZmllbGRzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmN1c3RvbUZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgZmllbGRzLnB1c2godGhpcy5jdXN0b21GaWVsZHNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBmaWVsZHM7XG4gIH1cblxuICBnZXRJbWFnZVVybEZyb21OYW1lKGZpcnN0TmFtZSwgbGFzdE5hbWUpIHtcbiAgICBsZXQgc2VlZCA9IGZpcnN0TmFtZS5zdWJzdHJpbmcoMCwgMSk7XG4gICAgaWYgKCFsYXN0TmFtZSAmJiBsYXN0TmFtZS5sZW5ndGggPiAwKSB7XG4gICAgICBzZWVkICs9IGZpcnN0TmFtZS5zdWJzdHJpbmcoZmlyc3ROYW1lLmxlbmd0aCAtIDEsIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWVkICs9IGxhc3ROYW1lLnN1YnN0cmluZygwLCAxKTtcbiAgICB9XG5cbiAgICBjb25zdCBhcnIgPSBgJHtmaXJzdE5hbWV9JHtsYXN0TmFtZX1gLnNwbGl0KCcnKTtcbiAgICBzZWVkICs9IGFyci5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gcGFyc2VJbnQoaXRlbS5jaGFyQ29kZUF0KDApLCAxMCkgKyBhY2MsIDApO1xuXG4gICAgcmV0dXJuIGBodHRwczovL2F2YXRhcnMuZGljZWJlYXIuY29tL2FwaS9pbml0aWFscy86JHtzZWVkfS5zdmdgO1xuICB9XG5cbiAgZG93bmxvYWRQZGYodHlwZSwgZGF0YSkge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuY2xpZW50VXJsfXNlcnZpY2UucGhwP2E9cGRmJmg9JHt0eXBlfSZkYXRhPSR7ZGF0YX1gO1xuICAgIHdpbmRvdy5vcGVuKHVybCwnX2JsYW5rJyk7XG4gIH1cblxuICBjaGVja0lmVXNlckVtYWlsSXNHb29nbGVEb21haW4oZG9tYWluKSB7XG4gICAgbGV0IHVybCA9IGBodHRwczovL2Rucy5nb29nbGUuY29tL3Jlc29sdmU/bmFtZT0ke2RvbWFpbn0mdHlwZT1NWGBcbiAgICAkLmdldCh1cmwsIChkYXRhKSA9PiB7XG4gICAgICBpZiAoZGF0YSA9PSBudWxsIHx8IGRhdGEuQW5zd2VyID09IG51bGwgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCBoYXNHb29nbGUgPSBkYXRhLkFuc3dlci5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uZGF0YSAhPSBudWxsICYmIGl0ZW0uZGF0YS5pbmNsdWRlcygnZ29vZ2xlLmNvbScpKTtcbiAgICAgIGlmIChoYXNHb29nbGUubGVuZ3RoID4gMCkge1xuICAgICAgICAkKFwiI2dvb2dsZUNvbm5lY3RNb2RlbFwiKS5tb2RhbCh7XG4gICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kdWxlQmFzZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IFNwYWNlLCBUYWcgfSBmcm9tICdhbnRkJztcbmltcG9ydCB7XG4gIEVkaXRPdXRsaW5lZCwgRGVsZXRlT3V0bGluZWQsIENvcHlPdXRsaW5lZCwgTW9uaXRvck91dGxpbmVkLFxufSBmcm9tICdAYW50LWRlc2lnbi9pY29ucyc7XG5pbXBvcnQgQWRhcHRlckJhc2UgZnJvbSAnLi9BZGFwdGVyQmFzZSc7XG5pbXBvcnQgSWNlRm9ybU1vZGFsIGZyb20gJy4uL2NvbXBvbmVudHMvSWNlRm9ybU1vZGFsJztcbmltcG9ydCBJY2VTdGVwRm9ybU1vZGFsIGZyb20gJy4uL2NvbXBvbmVudHMvSWNlU3RlcEZyb21Nb2RhbCc7XG5pbXBvcnQgSWNlVGFibGUgZnJvbSAnLi4vY29tcG9uZW50cy9JY2VUYWJsZSc7XG5pbXBvcnQgTWFzdGVyRGF0YVJlYWRlciBmcm9tICcuL01hc3RlckRhdGFSZWFkZXInO1xuXG5cbmNsYXNzIFJlYWN0TW9kYWxBZGFwdGVyQmFzZSBleHRlbmRzIEFkYXB0ZXJCYXNlIHtcbiAgc3RhdGljIGdldCBNT0RBTF9UWVBFX05PUk1BTCgpIHsgcmV0dXJuICdOb3JtYWwnOyB9XG5cbiAgc3RhdGljIGdldCBNT0RBTF9UWVBFX1NURVBTKCkgeyByZXR1cm4gJ1N0ZXBzJzsgfVxuXG4gIGNvbnN0cnVjdG9yKGVuZFBvaW50LCB0YWIsIGZpbHRlciwgb3JkZXJCeSkge1xuICAgIHN1cGVyKGVuZFBvaW50LCB0YWIsIGZpbHRlciwgb3JkZXJCeSk7XG4gICAgdGhpcy5tb2RhbFR5cGUgPSB0aGlzLk1PREFMX1RZUEVfTk9STUFMO1xuICAgIHRoaXMuZGF0YVBpcGUgPSBudWxsO1xuICAgIHRoaXMuZm9ybUluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy50YWJsZUluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5hY2Nlc3MgPSBbXTtcbiAgICB0aGlzLmxvY2FsU3RvcmFnZUVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlzVjIgPSB0cnVlO1xuICAgIHRoaXMubWFzdGVyRGF0YVJlYWRlciA9IG5ldyBNYXN0ZXJEYXRhUmVhZGVyKHRoaXMpO1xuICB9XG5cbiAgZW5hYmxlTG9jYWxTdG9yYWdlKCkge1xuICAgIHRoaXMubG9jYWxTdG9yYWdlRW5hYmxlZCA9IHRydWU7XG4gIH1cblxuICBzZXRNb2RhbFR5cGUodHlwZSkge1xuICAgIHRoaXMubW9kYWxUeXBlID0gdHlwZTtcbiAgfVxuXG4gIHNldERhdGFQaXBlKGRhdGFQaXBlKSB7XG4gICAgdGhpcy5kYXRhUGlwZSA9IGRhdGFQaXBlO1xuICB9XG5cbiAgc2V0QWNjZXNzKGFjY2Vzcykge1xuICAgIGNvbnN0IHRtcCA9IFtdO1xuICAgIGZvciAoIGNvbnN0IGluZGV4IGluIGFjY2VzcyApe1xuICAgICAgdG1wLnB1c2goIGFjY2Vzc1sgaW5kZXggXSApO1xuICAgIH1cbiAgICB0aGlzLmFjY2VzcyA9IHRtcDtcbiAgfVxuXG4gIGhhc0FjY2Vzcyh0eXBlKSB7XG4gICAgcmV0dXJuIHRoaXMuYWNjZXNzLmluZGV4T2YodHlwZSkgPj0gMDtcbiAgfVxuXG4gIGhhc0N1c3RvbUJ1dHRvbnMoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaW5pdFRhYmxlKCkge1xuICAgIGlmICh0aGlzLnRhYmxlSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgdGFibGVEb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHt0aGlzLnRhYn1UYWJsZWApO1xuICAgIGlmICh0YWJsZURvbSkge1xuICAgICAgdGhpcy50YWJsZUNvbnRhaW5lciA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgbGV0IGNvbHVtbnMgPSB0aGlzLmdldFRhYmxlQ29sdW1ucygpO1xuICAgICAgaWYgKHRoaXMuaGFzQWNjZXNzKCdzYXZlJylcbiAgICAgICAgfHwgdGhpcy5oYXNBY2Nlc3MoJ2RlbGV0ZScpXG4gICAgICAgIHx8IHRoaXMuaGFzQWNjZXNzKCdlbGVtZW50JylcbiAgICAgICAgfHwgdGhpcy5oYXNDdXN0b21CdXR0b25zKClcbiAgICAgICkge1xuICAgICAgICBjb2x1bW5zLnB1c2goe1xuICAgICAgICAgIHRpdGxlOiAnQWN0aW9ucycsXG4gICAgICAgICAga2V5OiAnYWN0aW9ucycsXG4gICAgICAgICAgcmVuZGVyOiB0aGlzLmdldFRhYmxlQWN0aW9uQnV0dG9uSnN4KHRoaXMpLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29sdW1ucyA9IGNvbHVtbnMubWFwKChpdGVtKSA9PiB7XG4gICAgICAgIGl0ZW0udGl0bGUgPSB0aGlzLmd0KGl0ZW0udGl0bGUpO1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgIH0pO1xuXG4gICAgICBSZWFjdERPTS5yZW5kZXIoXG4gICAgICAgIDxJY2VUYWJsZVxuICAgICAgICAgIHJlZj17dGhpcy50YWJsZUNvbnRhaW5lcn1cbiAgICAgICAgICByZWFkZXI9e3RoaXMuZGF0YVBpcGV9XG4gICAgICAgICAgY29sdW1ucz17Y29sdW1uc31cbiAgICAgICAgICBhZGFwdGVyPXt0aGlzfVxuICAgICAgICA+XG4gICAgICAgICAge3RoaXMuZ2V0VGFibGVDaGlsZENvbXBvbmVudHMoKX1cbiAgICAgICAgPC9JY2VUYWJsZT4sXG4gICAgICAgIHRhYmxlRG9tLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLnRhYmxlSW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBrZWVwVGFibGVWaXNpYmxlV2hpbGVTaG93aW5nQ3VzdG9tVmlldygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBnZXRGb3JtTGF5b3V0KHZpZXdPbmx5KSB7XG4gICAgcmV0dXJuICdob3Jpem9udGFsJztcbiAgfVxuXG4gIGluaXRGb3JtKCkge1xuICAgIGlmICh0aGlzLmZvcm1Jbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmZvcm1Db250YWluZXIgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICBpZiAodGhpcy5tb2RhbFR5cGUgPT09IHRoaXMuTU9EQUxfVFlQRV9OT1JNQUwpIHtcbiAgICAgIFJlYWN0RE9NLnJlbmRlcihcbiAgICAgICAgPEljZUZvcm1Nb2RhbFxuICAgICAgICAgIHRpdGxlPXt0aGlzLnRpdGxlIHx8IHVuZGVmaW5lZH1cbiAgICAgICAgICByZWY9e3RoaXMuZm9ybUNvbnRhaW5lcn1cbiAgICAgICAgICBmaWVsZHM9e3RoaXMuZ2V0Rm9ybUZpZWxkcygpfVxuICAgICAgICAgIGFkYXB0ZXI9e3RoaXN9XG4gICAgICAgICAgZm9ybVJlZmVyZW5jZT17dGhpcy5mb3JtUmVmZXJlbmNlfVxuICAgICAgICAvPixcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7dGhpcy50YWJ9Rm9ybWApLFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgICA8SWNlU3RlcEZvcm1Nb2RhbFxuICAgICAgICAgIHJlZj17dGhpcy5mb3JtQ29udGFpbmVyfVxuICAgICAgICAgIGZpZWxkcz17dGhpcy5nZXRNYXBwZWRGaWVsZHMoKX1cbiAgICAgICAgICBhZGFwdGVyPXt0aGlzfVxuICAgICAgICAgIGZvcm1SZWZlcmVuY2U9e3RoaXMuZm9ybVJlZmVyZW5jZX1cbiAgICAgICAgLz4sXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3RoaXMudGFifUZvcm1gKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgZmlsdGVyRG9tID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7dGhpcy50YWJ9RmlsdGVyRm9ybWApO1xuICAgIGlmIChmaWx0ZXJEb20gJiYgdGhpcy5nZXRGaWx0ZXJzKCkpIHtcbiAgICAgIHRoaXMuZmlsdGVyc0NvbnRhaW5lciA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgICA8SWNlRm9ybU1vZGFsXG4gICAgICAgICAgdGl0bGU9e3RoaXMudGl0bGUgfHwgdW5kZWZpbmVkfVxuICAgICAgICAgIHJlZj17dGhpcy5maWx0ZXJzQ29udGFpbmVyfVxuICAgICAgICAgIGZpZWxkcz17dGhpcy5nZXRGaWx0ZXJzKCl9XG4gICAgICAgICAgYWRhcHRlcj17dGhpc31cbiAgICAgICAgICBzYXZlQ2FsbGJhY2s9eyh2YWx1ZXMsIHNob3dFcnJvciwgY2xvc2VNb2RhbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRGaWx0ZXIodmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyc0FscmVhZHlTZXQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5nZXQoW10pO1xuICAgICAgICAgICAgdGhpcy50YWJsZUNvbnRhaW5lci5jdXJyZW50LnNldEZpbHRlckRhdGEodmFsdWVzKTtcbiAgICAgICAgICAgIGNsb3NlTW9kYWwoKTtcbiAgICAgICAgICB9fVxuICAgICAgICAvPixcbiAgICAgICAgZmlsdGVyRG9tLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm1Jbml0aWFsaXplZCA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBnZXRUYWJsZUNoaWxkQ29tcG9uZW50cygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZWxvYWRDdXJyZW50RWxlbWVudCgpIHtcbiAgICB0aGlzLnZpZXdFbGVtZW50KHRoaXMuY3VycmVudElkKTtcbiAgfVxuXG4gIGdldFRhYmxlQWN0aW9uQnV0dG9uSnN4KGFkYXB0ZXIpIHtcbiAgICByZXR1cm4gKHRleHQsIHJlY29yZCkgPT4gKFxuICAgICAgPFNwYWNlIHNpemU9XCJtaWRkbGVcIj5cbiAgICAgICAge2FkYXB0ZXIuaGFzQWNjZXNzKCdzYXZlJykgJiYgYWRhcHRlci5zaG93RWRpdFxuICAgICAgICAgICYmIChcbiAgICAgICAgICA8VGFnIGNvbG9yPVwiZ3JlZW5cIiBvbkNsaWNrPXsoKSA9PiBtb2RKcy5lZGl0KHJlY29yZC5pZCl9IHN0eWxlPXt7IGN1cnNvcjogJ3BvaW50ZXInIH19PlxuICAgICAgICAgICAgPEVkaXRPdXRsaW5lZCAvPlxuICAgICAgICAgICAge2AgJHthZGFwdGVyLmd0KCdFZGl0Jyl9YH1cbiAgICAgICAgICA8L1RhZz5cbiAgICAgICAgICApfVxuICAgICAgICB7YWRhcHRlci5oYXNBY2Nlc3MoJ2VsZW1lbnQnKVxuICAgICAgICAmJiAoXG4gICAgICAgICAgPFRhZyBjb2xvcj1cImJsdWVcIiBvbkNsaWNrPXsoKSA9PiBtb2RKcy52aWV3RWxlbWVudChyZWNvcmQuaWQpfSBzdHlsZT17eyBjdXJzb3I6ICdwb2ludGVyJyB9fT5cbiAgICAgICAgICAgIDxNb25pdG9yT3V0bGluZWQgLz5cbiAgICAgICAgICAgIHtgICR7YWRhcHRlci5ndCgnVmlldycpfWB9XG4gICAgICAgICAgPC9UYWc+XG4gICAgICAgICl9XG4gICAgICAgIHthZGFwdGVyLmhhc0FjY2VzcygnZGVsZXRlJykgJiYgYWRhcHRlci5zaG93RGVsZXRlXG4gICAgICAgICYmIChcbiAgICAgICAgPFRhZyBjb2xvcj1cInZvbGNhbm9cIiBvbkNsaWNrPXsoKSA9PiBtb2RKcy5kZWxldGVSb3cocmVjb3JkLmlkKX0gc3R5bGU9e3sgY3Vyc29yOiAncG9pbnRlcicgfX0+XG4gICAgICAgICAgPERlbGV0ZU91dGxpbmVkIC8+XG4gICAgICAgICAge2AgJHthZGFwdGVyLmd0KCdEZWxldGUnKX1gfVxuICAgICAgICA8L1RhZz5cbiAgICAgICAgKX1cbiAgICAgICAge2FkYXB0ZXIuaGFzQWNjZXNzKCdzYXZlJykgJiYgYWRhcHRlci5zaG93QWRkTmV3XG4gICAgICAgICYmIChcbiAgICAgICAgPFRhZyBjb2xvcj1cImN5YW5cIiBvbkNsaWNrPXsoKSA9PiBtb2RKcy5jb3B5Um93KHJlY29yZC5pZCl9IHN0eWxlPXt7IGN1cnNvcjogJ3BvaW50ZXInIH19PlxuICAgICAgICAgIDxDb3B5T3V0bGluZWQgLz5cbiAgICAgICAgICB7YCAke2FkYXB0ZXIuZ3QoJ0NvcHknKX1gfVxuICAgICAgICA8L1RhZz5cbiAgICAgICAgKX1cbiAgICAgIDwvU3BhY2U+XG4gICAgKTtcbiAgfVxuXG4gIHNldFRhYmxlTG9hZGluZyh2YWx1ZSkge1xuICAgIHRoaXMudGFibGVDb250YWluZXIuY3VycmVudC5zZXRMb2FkaW5nKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSB2aWV3IGZvcm0gZm9yIGFuIGl0ZW1cbiAgICogQG1ldGhvZCB2aWV3RWxlbWVudFxuICAgKiBAcGFyYW0gaWQge2ludH0gaWQgb2YgdGhlIGl0ZW0gdG8gdmlld1xuICAgKi9cbiAgdmlld0VsZW1lbnQoaWQpIHtcbiAgICB0aGlzLnNldFRhYmxlTG9hZGluZyh0cnVlKTtcbiAgICB0aGlzLmN1cnJlbnRJZCA9IGlkO1xuICAgIHRoaXMuZ2V0RWxlbWVudChpZCwge1xuICAgICAgbm9SZW5kZXI6IHRydWUsXG4gICAgICBjYWxsQmFjazogKGVsZW1lbnQpID0+IHtcbiAgICAgICAgdGhpcy5zaG93RWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgdGhpcy5zZXRUYWJsZUxvYWRpbmcoZmFsc2UpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHNob3dFbGVtZW50KGVsZW1lbnQpIHtcbiAgICB0aGlzLnJlbmRlckZvcm0oZWxlbWVudCwgdHJ1ZSk7XG4gIH1cblxuICBoaWRlRWxlbWVudCgpIHtcbiAgICB0aGlzLnRhYmxlQ29udGFpbmVyLmN1cnJlbnQuc2V0Q3VycmVudEVsZW1lbnQoZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNob3cgdGhlIGVkaXQgZm9ybSBmb3IgYW4gaXRlbVxuICAgKiBAbWV0aG9kIGVkaXRcbiAgICogQHBhcmFtIGlkIHtpbnR9IGlkIG9mIHRoZSBpdGVtIHRvIGVkaXRcbiAgICovXG4gIGVkaXQoaWQpIHtcbiAgICB0aGlzLnNldFRhYmxlTG9hZGluZyh0cnVlKTtcbiAgICB0aGlzLmN1cnJlbnRJZCA9IGlkO1xuICAgIHRoaXMuZ2V0RWxlbWVudChpZCwgW10pO1xuICB9XG5cbiAgZ2V0RGVmYXVsdFZhbHVlcygpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJlbmRlckZvcm0ob2JqZWN0ID0gbnVsbCwgdmlld09ubHkgPSBmYWxzZSkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgdGhpcy5jdXJyZW50SWQgPSBudWxsO1xuICAgICAgdGhpcy5jdXJyZW50RWxlbWVudCA9IG51bGw7XG4gICAgICBvYmplY3QgPSB0aGlzLmdldERlZmF1bHRWYWx1ZXMoKTtcbiAgICB9XG4gICAgdGhpcy5zZXRUYWJsZUxvYWRpbmcoZmFsc2UpO1xuICAgIHRoaXMuaW5pdEZvcm0oKTtcbiAgICB0aGlzLmZvcm1Db250YWluZXIuY3VycmVudC5zZXRWaWV3T25seSh2aWV3T25seSk7XG4gICAgdGhpcy5mb3JtQ29udGFpbmVyLmN1cnJlbnQuc2hvdyhvYmplY3QpO1xuICB9XG5cbiAgc2hvd0ZpbHRlcnMoKSB7XG4gICAgdGhpcy5pbml0Rm9ybSgpO1xuICAgIHRoaXMuZmlsdGVyc0NvbnRhaW5lci5jdXJyZW50LnNob3codGhpcy5maWx0ZXIpO1xuICB9XG5cbiAgcmVzZXRGaWx0ZXJzKCkge1xuICAgIHRoaXMuZmlsdGVyID0gdGhpcy5vcmlnRmlsdGVyO1xuICAgIHRoaXMuZmlsdGVyc0FscmVhZHlTZXQgPSBmYWxzZTtcbiAgICB0aGlzLmN1cnJlbnRGaWx0ZXJTdHJpbmcgPSAnJztcbiAgICB0aGlzLmdldChbXSk7XG4gICAgdGhpcy50YWJsZUNvbnRhaW5lci5jdXJyZW50LnNldEZpbHRlckRhdGEodGhpcy5maWx0ZXIpO1xuICB9XG5cbiAgZ2V0KCkge1xuICAgIGlmICh0aGlzLnRhYmxlQ29udGFpbmVyICYmIHRoaXMudGFibGVDb250YWluZXIuY3VycmVudCkge1xuICAgICAgdGhpcy50YWJsZUNvbnRhaW5lci5jdXJyZW50LnNldEN1cnJlbnRFbGVtZW50KG51bGwpO1xuICAgIH1cbiAgICB0aGlzLmluaXRUYWJsZSgpO1xuICAgIHRoaXMubWFzdGVyRGF0YVJlYWRlci51cGRhdGVBbGxNYXN0ZXJEYXRhKClcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMudGFibGVDb250YWluZXIpIHtcbiAgICAgICAgICB0aGlzLnRhYmxlQ29udGFpbmVyLmN1cnJlbnQucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgdGhpcy50cmFja0V2ZW50KCdnZXQnLCB0aGlzLnRhYiwgdGhpcy50YWJsZSk7XG4gIH1cblxuICBzaG93TG9hZGVyKCkge1xuICAgIC8vICQoJyNpY2Vsb2FkZXInKS5zaG93KCk7XG4gIH1cblxuICBhZGRBY3R1YWxGaWVsZHNGb3JTdGVwTW9kYWwoc3RlcHMsIGZpZWxkcykge1xuICAgIHJldHVybiBzdGVwcy5tYXAoKGl0ZW0pID0+IHtcbiAgICAgIGl0ZW0uZmllbGRzID0gaXRlbS5maWVsZHMucmVkdWNlKChhY2MsIGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBmaWVsZCA9IGZpZWxkcy5maW5kKChbbmFtZV0pID0+IG5hbWUgPT09IGZpZWxkTmFtZSk7XG4gICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgIGFjYy5wdXNoKGZpZWxkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwgW10pO1xuXG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhc0N1c3RvbVRvcEJ1dHRvbnMoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0Q3VzdG9tVG9wQnV0dG9ucygpIHtcbiAgICByZXR1cm4gKDw+PC8+KTtcbiAgfVxuXG4gIGdldEZvcm1PcHRpb25zKCkge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogMTAyNCxcbiAgICAgIHR3b0NvbHVtbkxheW91dDogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIGdldFdpZHRoKCkge1xuICAgIHJldHVybiA4MDA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RNb2RhbEFkYXB0ZXJCYXNlO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU2tldGNoUGlja2VyIH0gZnJvbSAncmVhY3QtY29sb3InO1xuXG5mdW5jdGlvbiB1c2VDb21wb25lbnRWaXNpYmxlKGluaXRpYWxJc1Zpc2libGUpIHtcbiAgY29uc3QgW2lzQ29tcG9uZW50VmlzaWJsZSwgc2V0SXNDb21wb25lbnRWaXNpYmxlXSA9IHVzZVN0YXRlKGluaXRpYWxJc1Zpc2libGUpO1xuICBjb25zdCByZWYgPSB1c2VSZWYobnVsbCk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKHJlZi5jdXJyZW50ICYmICFyZWYuY3VycmVudC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICBzZXRJc0NvbXBvbmVudFZpc2libGUoZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2tPdXRzaWRlLCB0cnVlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVDbGlja091dHNpZGUsIHRydWUpO1xuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiB7IHJlZiwgaXNDb21wb25lbnRWaXNpYmxlLCBzZXRJc0NvbXBvbmVudFZpc2libGUgfTtcbn1cblxuZnVuY3Rpb24gSWNlQ29sb3JQaWNrKHByb3BzKSB7XG4gIGNvbnN0IHsgdmFsdWUsIG9uQ2hhbmdlLCByZWFkT25seSB9ID0gcHJvcHM7XG5cbiAgY29uc3QgeyByZWYsIGlzQ29tcG9uZW50VmlzaWJsZSwgc2V0SXNDb21wb25lbnRWaXNpYmxlIH0gPSB1c2VDb21wb25lbnRWaXNpYmxlKHRydWUpO1xuXG4gIGNvbnN0IFtjb2xvciwgc2V0Q29sb3JdID0gdXNlU3RhdGUodmFsdWUgfHwgJyNGRkYnKTtcbiAgY29uc3QgW3Nob3dQaWNrZXIsIHNldFNob3dQaWNrZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpc0NvbXBvbmVudFZpc2libGUpIHtcbiAgICAgIHNldFNob3dQaWNrZXIoZmFsc2UpO1xuICAgIH1cbiAgfSwgW2lzQ29tcG9uZW50VmlzaWJsZV0pXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHNldENvbG9yKHZhbHVlKTtcbiAgICB9XG4gICAgXG4gIH0sIFt2YWx1ZV0pO1xuXG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNvbG9ycGlja2VyLWNvbnRhaW5lclwiPlxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cImNvbG9ycGlja2VyLXByZXZpZXdcIlxuICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBpZiAoIXNob3dQaWNrZXIpIHtcbiAgICAgICAgICBzZXRJc0NvbXBvbmVudFZpc2libGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0U2hvd1BpY2tlcighc2hvd1BpY2tlcik7XG4gICAgICB9fVxuICAgICAgc3R5bGU9eyB7IGJhY2tncm91bmRDb2xvcjogY29sb3J9IH1cbiAgICAvPlxuICAgIDxkaXYgcmVmPXtyZWZ9IGNsYXNzTmFtZT17YGNvbG9ycGlja2VyLWNvbXBvbmVudCAkeyhyZWFkT25seSB8fCAhc2hvd1BpY2tlcikgPyAnaGlkZGVuJzogJyd9YCB9PlxuICAgICAgPFNrZXRjaFBpY2tlclxuICAgICAgICBjb2xvcj17Y29sb3J9XG4gICAgICAgIGRpc2FibGVBbHBoYVxuICAgICAgICBwcmVzZXRDb2xvcnM9e1tdfVxuICAgICAgICBvbkNoYW5nZUNvbXBsZXRlPXsoeyBoZXggfSkgPT4ge1xuICAgICAgICAgIG9uQ2hhbmdlKGhleCk7XG4gICAgICAgICAgc2V0Q29sb3IoaGV4KTtcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gIDwvZGl2Pjtcbn0gXG5cbmV4cG9ydCBkZWZhdWx0IEljZUNvbG9yUGljaztcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEJ1dHRvbiwgU2VsZWN0LCBTcGFjZSwgQ2FyZCwgVGFibGUgfSBmcm9tIFwiYW50ZFwiO1xuLy8gaW1wb3J0IEljZURhdGFHcm91cE1vZGFsIGZyb20gXCIuL0ljZURhdGFHcm91cE1vZGFsXCI7XG5pbXBvcnQgSWNlRm9ybU1vZGFsIGZyb20gXCIuL0ljZUZvcm1Nb2RhbFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcbmNvbnN0IHsgT3B0aW9uIH0gPSBTZWxlY3Q7XG5cbmNsYXNzIEljZURhdGFHcm91cCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRlID0ge307XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlO1xuICAgIHRoaXMuZm9ybVJlZmVyZW5jZSA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZmllbGQsIGFkYXB0ZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHsgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICB2YWx1ZSA9IHRoaXMucGFyc2VWYWx1ZSh2YWx1ZSk7XG4gICAgdmFsdWUgPSB2YWx1ZS5tYXAoaXRlbSA9PiAoeyAuLi5pdGVtLCBrZXk6IGl0ZW0uaWQgfSkpO1xuICAgIGNvbnN0IGNvbHVtbnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGZpZWxkWzFdLmNvbHVtbnMpKTtcblxuICAgIGlmICghdGhpcy5wcm9wcy5yZWFkT25seSkge1xuICAgICAgY29sdW1ucy5wdXNoKHtcbiAgICAgICAgdGl0bGU6ICdBY3Rpb24nLFxuICAgICAgICBrZXk6ICdhY3Rpb24nLFxuICAgICAgICByZW5kZXI6ICh0ZXh0LCByZWNvcmQpID0+IChcbiAgICAgICAgICB0aGlzLmdldERlZmF1bHRCdXR0b25zKHJlY29yZC5pZClcbiAgICAgICAgKSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8ZGl2IGlkPVwiZGF0YUdyb3VwQ29udGFpbmVyXCI+PC9kaXY+XG4gICAgICAgIHshdGhpcy5wcm9wcy5yZWFkT25seSAmJlxuICAgICAgICAgIDxTcGFjZSBkaXJlY3Rpb249XCJob3Jpem9udGFsXCI+XG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJsaW5rXCIgaHRtbFR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuY3JlYXRlRm9ybShmaWVsZCwgYWRhcHRlciwge30pXG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgQWRkXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJsaW5rXCIgaHRtbFR5cGU9XCJidXR0b25cIiBkYW5nZXIgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnJlc2V0RGF0YUdyb3VwKClcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICBSZXNldFxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvU3BhY2U+XG4gICAgICAgIH1cbiAgICAgICAgPFRhYmxlIGNvbHVtbnM9e2NvbHVtbnN9IGRhdGFTb3VyY2U9e3ZhbHVlfSAvPlxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxuXG4gIGNyZWF0ZUZvcm0oZmllbGQsIGFkYXB0ZXIsIG9iamVjdCkge1xuICAgIHRoaXMuZm9ybUNvbnRhaW5lciA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgIGNvbnN0IGZvcm1GaWVsZHMgPSBmaWVsZFsxXS5mb3JtO1xuICAgIGZvcm1GaWVsZHMudW5zaGlmdChbJ2lkJywgeyBsYWJlbDogJ0lEJywgdHlwZTogJ2hpZGRlbicgfV0pO1xuICAgIFJlYWN0RE9NLnJlbmRlcihcbiAgICAgIDxJY2VGb3JtTW9kYWxcbiAgICAgICAgcmVmPXt0aGlzLmZvcm1Db250YWluZXJ9XG4gICAgICAgIGZpZWxkcz17Zm9ybUZpZWxkc31cbiAgICAgICAgdGl0bGU9e3RoaXMucHJvcHMudGl0bGV9XG4gICAgICAgIGFkYXB0ZXI9e2FkYXB0ZXJ9XG4gICAgICAgIGZvcm1SZWZlcmVuY2U9e3RoaXMuZm9ybVJlZmVyZW5jZX1cbiAgICAgICAgc2F2ZUNhbGxiYWNrPXt0aGlzLnNhdmUuYmluZCh0aGlzKX1cbiAgICAgICAgY2FuY2VsQ2FsbGJhY2s9e3RoaXMudW5tb3VudEZvcm0uYmluZCh0aGlzKX1cbiAgICAgIC8+LFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhdGFHcm91cENvbnRhaW5lcicpLFxuICAgICk7XG4gICAgdGhpcy5mb3JtQ29udGFpbmVyLmN1cnJlbnQuc2hvdyhvYmplY3QpO1xuICB9XG5cbiAgdW5tb3VudEZvcm0oKSB7XG4gICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGF0YUdyb3VwQ29udGFpbmVyJykpO1xuICB9XG5cbiAgc2hvdyhkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmlzaWJsZTogdHJ1ZSB9KTtcbiAgICAgIHRoaXMudXBkYXRlRmllbGRzKGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgdmlzaWJsZTogdHJ1ZSB9KTtcbiAgICAgIGlmICh0aGlzLmZvcm1SZWZlcmVuY2UuY3VycmVudCkge1xuICAgICAgICB0aGlzLnVwZGF0ZUZpZWxkcyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud2FpdEZvckl0KFxuICAgICAgICAgICgpID0+IHRoaXMuZm9ybVJlZmVyZW5jZS5jdXJyZW50ICE9IG51bGwsXG4gICAgICAgICAgKCkgPT4geyB0aGlzLnVwZGF0ZUZpZWxkcyhkYXRhKTsgfSxcbiAgICAgICAgICAxMDAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcGFyc2VWYWx1ZSh2YWx1ZSkge1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHZhbHVlID0gW107XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICB2YWx1ZSA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBzYXZlKHBhcmFtcywgZXJyb3JDYWxsYmFjaywgY2xvc2VDYWxsYmFjaykge1xuICAgIGNvbnN0IHsgZmllbGQsIHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGZpZWxkWzFdWydjdXN0b20tdmFsaWRhdGUtZnVuY3Rpb24nXSAhPSBudWxsKSB7XG4gICAgICBsZXQgdGVtcFBhcmFtcyA9IGZpZWxkWzFdWydjdXN0b20tdmFsaWRhdGUtZnVuY3Rpb24nXS5hcHBseSh0aGlzLCBbcGFyYW1zXSk7XG4gICAgICBpZiAodGVtcFBhcmFtcy52YWxpZCkge1xuICAgICAgICBwYXJhbXMgPSB0ZW1wUGFyYW1zLnBhcmFtcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVycm9yQ2FsbGJhY2sodGVtcFBhcmFtcy5tZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnBhcnNlVmFsdWUodmFsdWUpO1xuXG4gICAgbGV0IG5ld0RhdGEgPSBbXTtcbiAgICBpZiAoIXBhcmFtcy5pZCkge1xuICAgICAgcGFyYW1zLmlkID0gYCR7ZmllbGRbMF19XyR7dGhpcy5kYXRhR3JvdXBHZXROZXh0QXV0b0luY3JlbWVudElkKGRhdGEpfWA7XG4gICAgICBkYXRhLnB1c2gocGFyYW1zKTtcbiAgICAgIG5ld0RhdGEgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGRhdGFbaV07XG4gICAgICAgIGlmIChpdGVtLmlkICE9PSBwYXJhbXMuaWQpIHtcbiAgICAgICAgICBuZXdEYXRhLnB1c2goaXRlbSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3RGF0YS5wdXNoKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZmllbGRbMV1bJ3NvcnQtZnVuY3Rpb24nXSAhPSBudWxsKSB7XG4gICAgICBuZXdEYXRhLnNvcnQoZmllbGRbMV1bJ3NvcnQtZnVuY3Rpb24nXSk7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsID0gSlNPTi5zdHJpbmdpZnkobmV3RGF0YSk7XG5cbiAgICB0aGlzLm9uQ2hhbmdlKHZhbCk7XG5cbiAgICB0aGlzLnVubW91bnRGb3JtKCk7XG4gIH1cblxuICBjcmVhdGVDYXJkKGl0ZW0pIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChmaWVsZFsxXVsncHJlLWZvcm1hdC1mdW5jdGlvbiddICE9IG51bGwpIHtcbiAgICAgIGl0ZW0gPSBmaWVsZFsxXVsncHJlLWZvcm1hdC1mdW5jdGlvbiddLmFwcGx5KHRoaXMsIFtpdGVtXSk7XG4gICAgfVxuXG4gICAgY29uc3QgdGVtcGxhdGUgPSBmaWVsZFsxXS5odG1sO1xuICAgIGxldCB0ID0gdGVtcGxhdGUucmVwbGFjZSgnI19kZWxldGVfIycsICcnKTtcbiAgICB0ID0gdC5yZXBsYWNlKCcjX2VkaXRfIycsICcnKTtcbiAgICB0ID0gdC5yZXBsYWNlKC8jX2lkXyMvZywgaXRlbS5pZCk7XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpdGVtKSB7XG4gICAgICBsZXQgaXRlbVZhbCA9IGl0ZW1ba2V5XTtcbiAgICAgIGlmIChpdGVtVmFsICE9PSB1bmRlZmluZWQgJiYgaXRlbVZhbCAhPSBudWxsICYmIHR5cGVvZiBpdGVtVmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBpdGVtVmFsID0gaXRlbVZhbC5yZXBsYWNlKC8oPzpcXHJcXG58XFxyfFxcbikvZywgJzxiciAvPicpO1xuICAgICAgfVxuICAgICAgdCA9IHQucmVwbGFjZShgI18ke2tleX1fI2AsIGl0ZW1WYWwpO1xuICAgIH1cblxuICAgIGlmIChmaWVsZFsxXS5yZW5kZXIgIT09IHVuZGVmaW5lZCAmJiBmaWVsZFsxXS5yZW5kZXIgIT0gbnVsbCkge1xuICAgICAgdCA9IHQucmVwbGFjZSgnI19yZW5kZXJGdW5jdGlvbl8jJywgZmllbGRbMV0ucmVuZGVyKGl0ZW0pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENhcmQga2V5PXtpdGVtLmlkfSB0aXRsZT1cIlwiIGV4dHJhPXt0aGlzLmdldERlZmF1bHRCdXR0b25zKGl0ZW0uaWQpfT5cbiAgICAgICAgPGRpdiBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHQgfX0+PC9kaXY+XG4gICAgICA8L0NhcmQ+XG4gICAgKTtcbiAgfVxuXG4gIGdldERlZmF1bHRCdXR0b25zKGlkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTcGFjZT5cbiAgICAgICAgPGEgaHJlZj1cIiNcIiBvbkNsaWNrPXsoKSA9PiB7IHRoaXMuZWRpdERhdGFHcm91cEl0ZW0oaWQpIH19PjxsaSBjbGFzc05hbWU9XCJmYSBmYS1lZGl0XCIgLz48L2E+XG4gICAgICAgIDxhIGhyZWY9XCIjXCIgb25DbGljaz17KCkgPT4geyB0aGlzLmRlbGV0ZURhdGFHcm91cEl0ZW0oaWQpIH19PjxsaSBjbGFzc05hbWU9XCJmYSBmYS10aW1lc1wiIC8+PC9hPlxuICAgICAgPC9TcGFjZT5cbiAgICApO1xuICB9XG5cbiAgZGVsZXRlRGF0YUdyb3VwSXRlbShpZCkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucGFyc2VWYWx1ZSh2YWx1ZSk7XG5cbiAgICBjb25zdCBuZXdWYWwgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGRhdGFbaV07XG4gICAgICBpZiAoaXRlbS5pZCAhPT0gaWQpIHtcbiAgICAgICAgbmV3VmFsLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdmFsID0gSlNPTi5zdHJpbmdpZnkobmV3VmFsKTtcblxuICAgIHRoaXMub25DaGFuZ2UodmFsKTtcbiAgfVxuXG4gIGVkaXREYXRhR3JvdXBJdGVtKGlkKSB7XG4gICAgY29uc3QgeyBmaWVsZCwgYWRhcHRlciwgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMucGFyc2VWYWx1ZSh2YWx1ZSk7XG5cbiAgICBsZXQgZWRpdFZhbCA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZGF0YVtpXTtcbiAgICAgIGlmIChpdGVtLmlkID09PSBpZCkge1xuICAgICAgICBlZGl0VmFsID0gaXRlbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNyZWF0ZUZvcm0oZmllbGQsIGFkYXB0ZXIsIGVkaXRWYWwpO1xuICB9XG5cbiAgcmVzZXREYXRhR3JvdXAoKSB7XG4gICAgdGhpcy5vbkNoYW5nZSgnW10nKTtcbiAgfVxuXG4gIGRhdGFHcm91cEdldE5leHRBdXRvSW5jcmVtZW50SWQoZGF0YSkge1xuICAgIGxldCBhdXRvSWQgPSAxOyBsZXQgaWQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZGF0YVtpXTtcbiAgICAgIGlmIChpdGVtLmlkID09PSB1bmRlZmluZWQgfHwgaXRlbS5pZCA9PSBudWxsKSB7XG4gICAgICAgIGl0ZW0uaWQgPSAxO1xuICAgICAgfVxuICAgICAgaWQgPSBpdGVtLmlkLnN1YnN0cmluZyhpdGVtLmlkLmxhc3RJbmRleE9mKCdfJykgKyAxLCBpdGVtLmlkLmxlbmd0aCk7XG4gICAgICBpZiAoaWQgPj0gYXV0b0lkKSB7XG4gICAgICAgIGF1dG9JZCA9IHBhcnNlSW50KGlkLCAxMCkgKyAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhdXRvSWQ7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBJY2VEYXRhR3JvdXA7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgRWRpdG9ySlMgZnJvbSAnQGVkaXRvcmpzL2VkaXRvcmpzJztcbmltcG9ydCBFbWJlZCBmcm9tICdAZWRpdG9yanMvZW1iZWQnO1xuaW1wb3J0IFRhYmxlIGZyb20gJ0BlZGl0b3Jqcy90YWJsZSc7XG5pbXBvcnQgUGFyYWdyYXBoIGZyb20gJ0BlZGl0b3Jqcy9wYXJhZ3JhcGgnO1xuaW1wb3J0IExpc3QgZnJvbSAnQGVkaXRvcmpzL2xpc3QnO1xuLy8gaW1wb3J0IFdhcm5pbmcgZnJvbSAnQGVkaXRvcmpzL3dhcm5pbmcnO1xuaW1wb3J0IENvZGUgZnJvbSAnQGVkaXRvcmpzL2NvZGUnO1xuLy8gaW1wb3J0IExpbmtUb29sIGZyb20gJ0BlZGl0b3Jqcy9saW5rJztcbmltcG9ydCBSYXcgZnJvbSAnQGVkaXRvcmpzL3Jhdyc7XG5pbXBvcnQgSGVhZGVyIGZyb20gJ0BlZGl0b3Jqcy9oZWFkZXInO1xuaW1wb3J0IFF1b3RlIGZyb20gJ0BlZGl0b3Jqcy9xdW90ZSc7XG5pbXBvcnQgTWFya2VyIGZyb20gJ0BlZGl0b3Jqcy9tYXJrZXInO1xuaW1wb3J0IENoZWNrTGlzdCBmcm9tICdAZWRpdG9yanMvY2hlY2tsaXN0Jztcbi8vIGltcG9ydCBEZWxpbWl0ZXIgZnJvbSAnQGVkaXRvcmpzL2RlbGltaXRlcic7XG5pbXBvcnQgSW5saW5lQ29kZSBmcm9tICdAZWRpdG9yanMvaW5saW5lLWNvZGUnO1xuXG5leHBvcnQgY29uc3QgRURJVE9SX0pTX1RPT0xTID0ge1xuICBlbWJlZDogRW1iZWQsXG4gIHRhYmxlOiB7XG4gICAgY2xhc3M6IFRhYmxlLFxuICAgIGlubGluZVRvb2xiYXI6IHRydWUsXG4gIH0sXG4gIHBhcmFncmFwaDoge1xuICAgIGNsYXNzOiBQYXJhZ3JhcGgsXG4gICAgaW5saW5lVG9vbGJhcjogdHJ1ZSxcbiAgfSxcbiAgbGlzdDoge1xuICAgIGNsYXNzOiBMaXN0LFxuICAgIGlubGluZVRvb2xiYXI6IHRydWUsXG4gIH0sXG4gIC8vIHdhcm5pbmc6IHtcbiAgLy8gICBjbGFzczogV2FybmluZyxcbiAgLy8gICBpbmxpbmVUb29sYmFyOiB0cnVlXG4gIC8vIH0sXG4gIGNvZGU6IHtcbiAgICBjbGFzczogQ29kZSxcbiAgICBpbmxpbmVUb29sYmFyOiB0cnVlLFxuICB9LFxuICAvLyBsaW5rVG9vbDoge1xuICAvLyAgIGNsYXNzOiBMaW5rVG9vbCxcbiAgLy8gICBpbmxpbmVUb29sYmFyOiB0cnVlXG4gIC8vIH0sXG4gIHJhdzoge1xuICAgIGNsYXNzOiBSYXcsXG4gICAgaW5saW5lVG9vbGJhcjogdHJ1ZSxcbiAgfSxcbiAgaGVhZGVyOiB7XG4gICAgY2xhc3M6IEhlYWRlcixcbiAgICBpbmxpbmVUb29sYmFyOiB0cnVlLFxuICB9LFxuICBxdW90ZToge1xuICAgIGNsYXNzOiBRdW90ZSxcbiAgICBpbmxpbmVUb29sYmFyOiB0cnVlLFxuICB9LFxuICBtYXJrZXI6IHtcbiAgICBjbGFzczogTWFya2VyLFxuICAgIGlubGluZVRvb2xiYXI6IHRydWUsXG4gIH0sXG4gIGNoZWNrbGlzdDoge1xuICAgIGNsYXNzOiBDaGVja0xpc3QsXG4gICAgaW5saW5lVG9vbGJhcjogdHJ1ZSxcbiAgfSxcbiAgLy8gZGVsaW1pdGVyOiB7XG4gIC8vICAgY2xhc3M6IERlbGltaXRlcixcbiAgLy8gICBpbmxpbmVUb29sYmFyOiB0cnVlLFxuICAvLyB9LFxuICBpbmxpbmVDb2RlOiB7XG4gICAgY2xhc3M6IElubGluZUNvZGUsXG4gICAgaW5saW5lVG9vbGJhcjogdHJ1ZSxcbiAgfSxcbn07XG5cbmNvbnN0IHBhcnNlVmFsdWUgPSAodmFsdWUpID0+IHtcbiAgbGV0IGNoZWNrVmFsdWUgPSB7XG4gICAgLy8gdGltZTogKG5ldyBEYXRlKCkpLmdldFRpbWUoKSxcbiAgICB2ZXJzaW9uOiAnMi4xOS4zJyxcbiAgICBibG9ja3M6IFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB0ZXh0OiB2YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfTtcblxuICB0cnkge1xuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlLnRpbWUpIHtcbiAgICAgIGNoZWNrVmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IGpzb25WYWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgaWYgKGpzb25WYWx1ZS5ibG9ja3MpIHtcbiAgICAgICAgY2hlY2tWYWx1ZSA9IGpzb25WYWx1ZTtcblxuICAgICAgICBpZiAoY2hlY2tWYWx1ZS5ibG9ja3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgY2hlY2tWYWx1ZS5ibG9ja3MgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxuICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgdGV4dDogJycsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIHJldHVybiBjaGVja1ZhbHVlO1xufTtcblxuZnVuY3Rpb24gSWNlRWRpdG9yKHByb3BzKSB7XG4gIGNvbnN0IHsgdmFsdWUsIG9uQ2hhbmdlLCByZWFkT25seSA9IGZhbHNlIH0gPSBwcm9wcztcbiAgY29uc3QgW2tlZXBWYWx1ZSwgc2V0S2VlcFZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlIHx8ICcnKTtcbiAgY29uc3QgW2VkaXRvciwgc2V0RWRpdG9yXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbZWRpdG9yTG9hZGluZywgc2V0RWRpdG9yTG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgZWRpdG9yQmxvY2sgPSB1c2VSZWYobnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBlZGl0b3JKcyA9IG5ldyBFZGl0b3JKUyh7XG4gICAgICBob2xkZXI6IGVkaXRvckJsb2NrLmN1cnJlbnQsXG4gICAgICB0b29sczogRURJVE9SX0pTX1RPT0xTLFxuICAgICAgb25DaGFuZ2U6ICh2YWx1ZSkgPT4gdmFsdWUuc2F2ZXIuc2F2ZSgpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIG9uQ2hhbmdlKEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICB9KSxcbiAgICAgIG9uUmVhZHk6ICgpID0+IHtcbiAgICAgICAgc2V0RWRpdG9yKGVkaXRvckpzKTtcbiAgICAgICAgc2V0RWRpdG9yTG9hZGluZyhmYWxzZSk7XG4gICAgICB9LFxuICAgICAgZGF0YToge30sXG4gICAgICByZWFkT25seSxcbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoZWRpdG9yICYmIHR5cGVvZiBlZGl0b3IuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBlZGl0b3IuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2YWx1ZSAmJiAha2VlcFZhbHVlKSB7XG4gICAgICBzZXRLZWVwVmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfSwgW3ZhbHVlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWVkaXRvckxvYWRpbmcgJiYga2VlcFZhbHVlKSB7XG4gICAgICBlZGl0b3IucmVuZGVyKHBhcnNlVmFsdWUoa2VlcFZhbHVlKSk7XG4gICAgfVxuICB9LCBbZWRpdG9yTG9hZGluZywga2VlcFZhbHVlXSk7XG5cbiAgcmV0dXJuIDxkaXYgcmVmPXtlZGl0b3JCbG9ja30gLz47XG59XG5cbmV4cG9ydCBkZWZhdWx0IEljZUVkaXRvcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBBbGVydCwgQ29sLCBEYXRlUGlja2VyLCBUaW1lUGlja2VyLCBGb3JtLCBJbnB1dCwgUm93LCBUb29sdGlwLCBTbGlkZXIsXG59IGZyb20gJ2FudGQnO1xuaW1wb3J0IHtcbiAgSW5mb0NpcmNsZU91dGxpbmVkLFxufSBmcm9tICdAYW50LWRlc2lnbi9pY29ucyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgSWNlVXBsb2FkIGZyb20gJy4vSWNlVXBsb2FkJztcbmltcG9ydCBJY2VEYXRhR3JvdXAgZnJvbSAnLi9JY2VEYXRhR3JvdXAnO1xuaW1wb3J0IEljZVNlbGVjdCBmcm9tICcuL0ljZVNlbGVjdCc7XG5pbXBvcnQgSWNlTGFiZWwgZnJvbSAnLi9JY2VMYWJlbCc7XG5pbXBvcnQgSWNlQ29sb3JQaWNrIGZyb20gJy4vSWNlQ29sb3JQaWNrJztcbmltcG9ydCBJY2VTaWduYXR1cmUgZnJvbSAnLi9JY2VTaWduYXR1cmUnO1xuaW1wb3J0IEljZUVkaXRvciBmcm9tICcuL0ljZUVkaXRvcic7XG5cblxuY29uc3QgVmFsaWRhdGlvblJ1bGVzID0ge1xuXG4gIGZsb2F0KHN0cikge1xuICAgIGNvbnN0IGZsb2F0c3RyID0gL15bLStdP1swLTldKyhcXC5bMC05XSspPyQvO1xuICAgIGlmIChzdHIgIT0gbnVsbCAmJiBzdHIubWF0Y2goZmxvYXRzdHIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIG51bWJlcihzdHIpIHtcbiAgICBjb25zdCBudW1zdHIgPSAvXlswLTldKyQvO1xuICAgIGlmIChzdHIgIT0gbnVsbCAmJiBzdHIubWF0Y2gobnVtc3RyKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBudW1iZXJPckVtcHR5KHN0cikge1xuICAgIGlmIChzdHIgPT09ICcnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgbnVtc3RyID0gL15bMC05XSskLztcbiAgICBpZiAoc3RyICE9IG51bGwgJiYgc3RyLm1hdGNoKG51bXN0cikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgZW1haWwoc3RyKSB7XG4gICAgY29uc3QgZW1haWxQYXR0ZXJuID0gL15cXHMqW1xcd1xcLStfXSsoXFwuW1xcd1xcLStfXSspKkBbXFx3XFwtK19dK1xcLltcXHdcXC0rX10rKFxcLltcXHdcXC0rX10rKSpcXHMqJC87XG4gICAgcmV0dXJuIHN0ciAhPSBudWxsICYmIGVtYWlsUGF0dGVybi50ZXN0KHN0cik7XG4gIH0sXG5cbiAgZW1haWxPckVtcHR5KHN0cikge1xuICAgIGlmIChzdHIgPT09ICcnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZW1haWxQYXR0ZXJuID0gL15cXHMqW1xcd1xcLStfXSsoXFwuW1xcd1xcLStfXSspKkBbXFx3XFwtK19dK1xcLltcXHdcXC0rX10rKFxcLltcXHdcXC0rX10rKSpcXHMqJC87XG4gICAgcmV0dXJuIHN0ciAhPSBudWxsICYmIGVtYWlsUGF0dGVybi50ZXN0KHN0cik7XG4gIH0sXG5cbiAgdXNlcm5hbWUoc3RyKSB7XG4gICAgY29uc3QgdXNlcm5hbWUgPSAvXlthLXpBLVowLTkuLV0rJC87XG4gICAgcmV0dXJuIHN0ciAhPSBudWxsICYmIHVzZXJuYW1lLnRlc3Qoc3RyKTtcbiAgfSxcbn07XG5cblxuY2xhc3MgSWNlRm9ybSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMudmFsaWRhdGlvblJ1bGVzID0ge307XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZhbGlkYXRpb25zOiB7fSxcbiAgICAgIGVycm9yTXNnOiBmYWxzZSxcbiAgICB9O1xuICAgIHRoaXMuZm9ybVJlZmVyZW5jZSA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICB9XG5cbiAgc2hvd0Vycm9yKGVycm9yTXNnKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yTXNnIH0pO1xuICB9XG5cbiAgaGlkZUVycm9yKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvck1zZzogZmFsc2UgfSk7XG4gIH1cblxuICBpc1JlYWR5KCkge1xuICAgIHJldHVybiB0aGlzLmZvcm1SZWZlcmVuY2UuY3VycmVudCAhPSBudWxsO1xuICB9XG5cbiAgdmFsaWRhdGVGaWVsZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybVJlZmVyZW5jZS5jdXJyZW50LnZhbGlkYXRlRmllbGRzKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmaWVsZHMsIHR3b0NvbHVtbkxheW91dCwgYWRhcHRlciB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgZm9ybUlucHV0cyA9IFtdO1xuICAgIGNvbnN0IGZvcm1JbnB1dHMxID0gW107XG4gICAgY29uc3QgZm9ybUlucHV0czIgPSBbXTtcbiAgICBjb25zdCBjb2x1bW5zID0gIXR3b0NvbHVtbkxheW91dCA/IDEgOiAyO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3JtSW5wdXRzLnB1c2goXG4gICAgICAgIGFkYXB0ZXIuYmVmb3JlUmVuZGVyRmllbGRIb29rKFxuICAgICAgICAgIGZpZWxkc1tpXVswXSxcbiAgICAgICAgICB0aGlzLmNyZWF0ZUZyb21GaWVsZChmaWVsZHNbaV0sIHRoaXMucHJvcHMudmlld09ubHkpLFxuICAgICAgICAgIGZpZWxkc1tpXVsxXSxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfVxuICAgIGZvcm1JbnB1dHMgPSBmb3JtSW5wdXRzLmZpbHRlcigoaW5wdXQpID0+ICEhaW5wdXQpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb3JtSW5wdXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZm9ybUlucHV0c1tpXSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChjb2x1bW5zID09PSAxKSB7XG4gICAgICAgICAgZm9ybUlucHV0czEucHVzaChmb3JtSW5wdXRzW2ldKTtcbiAgICAgICAgfSBlbHNlIGlmIChpICUgMiA9PT0gMCkge1xuICAgICAgICAgIGZvcm1JbnB1dHMxLnB1c2goZm9ybUlucHV0c1tpXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9ybUlucHV0czIucHVzaChmb3JtSW5wdXRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG9uRm9ybUxheW91dENoYW5nZSA9ICgpID0+IHsgfTtcblxuICAgIGxldCBsYXlvdXQgPSB0aGlzLnByb3BzLmxheW91dCB8fCAnaG9yaXpvbnRhbCc7XG4gICAgaWYgKCAhdGhpcy5wcm9wcy5sYXlvdXQgKSB7XG4gICAgICBsYXlvdXQgPSBhZGFwdGVyLmdldEZvcm1MYXlvdXQodGhpcy5wcm9wcy52aWV3T25seSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxGb3JtXG4gICAgICAgIHJlZj17dGhpcy5mb3JtUmVmZXJlbmNlfVxuICAgICAgICBsYWJlbENvbD17eyBzcGFuOiA2IH19XG4gICAgICAgIHdyYXBwZXJDb2w9e3sgc3BhbjogMTYgfX1cbiAgICAgICAgbGF5b3V0PXsgbGF5b3V0IH1cbiAgICAgICAgaW5pdGlhbFZhbHVlcz17eyBzaXplOiAnbWlkZGxlJyB9fVxuICAgICAgICBvblZhbHVlc0NoYW5nZT17b25Gb3JtTGF5b3V0Q2hhbmdlfVxuICAgICAgICBzaXplPVwibWlkZGxlXCJcbiAgICAgID5cbiAgICAgICAge3RoaXMuc3RhdGUuZXJyb3JNc2dcbiAgICAgICAgICAmJiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8QWxlcnQgbWVzc2FnZT17dGhpcy5zdGF0ZS5lcnJvck1zZ30gdHlwZT1cImVycm9yXCIgc2hvd0ljb24gLz5cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApfVxuICAgICAgICB7Y29sdW1ucyA9PT0gMSAmJiBmb3JtSW5wdXRzMX1cbiAgICAgICAge2NvbHVtbnMgPT09IDIgJiYgKFxuICAgICAgICAgIDxSb3cgZ3V0dGVyPXsxNn0+XG4gICAgICAgICAgICA8Q29sIGNsYXNzTmFtZT1cImd1dHRlci1yb3dcIiBzcGFuPXsxMn0+XG4gICAgICAgICAgICAgIHtmb3JtSW5wdXRzMX1cbiAgICAgICAgICAgIDwvQ29sPlxuICAgICAgICAgICAgPENvbCBjbGFzc05hbWU9XCJndXR0ZXItcm93XCIgc3Bhbj17MTJ9PlxuICAgICAgICAgICAgICB7Zm9ybUlucHV0czJ9XG4gICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgKX1cbiAgICAgIDwvRm9ybT5cbiAgICApO1xuICB9XG5cbiAgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy52YWxpZGF0aW9uUnVsZXMpLnJlZHVjZSgoYWNjLCBmaWVsZE5hbWUpID0+IGFjYyAmJiAodGhpcy5zdGF0ZVtmaWVsZE5hbWVdID09PSAnc3VjY2VzcycgfHwgdGhpcy5zdGF0ZVtmaWVsZE5hbWVdID09IG51bGwpLCB0cnVlKTtcbiAgfVxuXG4gIHZhbGlkYXRlT25DaGFuZ2UoZXZlbnQpIHtcbiAgICBjb25zdCB2YWxpZGF0aW9uUnVsZSA9IHRoaXMudmFsaWRhdGlvblJ1bGVzW2V2ZW50LnRhcmdldC5pZF07XG4gICAgY29uc3QgeyB2YWxpZGF0aW9ucyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmICh2YWxpZGF0aW9uUnVsZSkge1xuICAgICAgaWYgKHZhbGlkYXRpb25SdWxlLnJ1bGUoZXZlbnQudGFyZ2V0LnZhbHVlKSkge1xuICAgICAgICB0aGlzLnN0YXRlW2V2ZW50LnRhcmdldC5pZF0gPSAnc3VjY2Vzcyc7XG4gICAgICAgIHRoaXMuc3RhdGVbYCR7ZXZlbnQudGFyZ2V0LmlkfV9tZXNzYWdlYF0gPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGF0ZVtldmVudC50YXJnZXQuaWRdID0gJ2Vycm9yJztcbiAgICAgICAgdGhpcy5zdGF0ZVtgJHtldmVudC50YXJnZXQuaWR9X21lc3NhZ2VgXSA9IHZhbGlkYXRpb25SdWxlLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWxpZGF0aW9ucyB9KTtcbiAgfVxuXG4gIGNyZWF0ZUZyb21GaWVsZChmaWVsZCwgdmlld09ubHkgPSBmYWxzZSkge1xuICAgIGxldCB1c2VySWQgPSAwO1xuICAgIGNvbnN0IHJ1bGVzID0gW107XG4gICAgY29uc3QgcmVxdWlyZWRSdWxlID0geyByZXF1aXJlZDogdHJ1ZSB9O1xuICAgIGNvbnN0IFtuYW1lLCBkYXRhXSA9IGZpZWxkO1xuICAgIGNvbnN0IHsgYWRhcHRlciB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgeyBsYXlvdXQgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHZhbGlkYXRpb25SdWxlID0gbnVsbDtcbiAgICBkYXRhLmxhYmVsID0gYWRhcHRlci5ndChkYXRhLmxhYmVsKTtcblxuICAgIHZpZXdPbmx5ID0gdmlld09ubHkgfHwgKGRhdGEucmVhZG9ubHkgPT09IHRydWUpO1xuXG4gICAgaWYgKCAhbGF5b3V0ICkge1xuICAgICAgbGF5b3V0ID0gYWRhcHRlci5nZXRGb3JtTGF5b3V0KHRoaXMucHJvcHMudmlld09ubHkpO1xuICAgIH1cblxuICAgIGNvbnN0IGxhYmVsU3BhbiA9IGxheW91dCA9PT0gJ3ZlcnRpY2FsJyA/IHsgc3BhbjogMjQgfSA6IHsgc3BhbjogNiB9O1xuXG4gICAgY29uc3QgdGVtcFNlbGVjdEJveGVzID0gWydzZWxlY3QnLCAnc2VsZWN0MicsICdzZWxlY3QybXVsdGknXTtcbiAgICBpZiAodGVtcFNlbGVjdEJveGVzLmluZGV4T2YoZGF0YS50eXBlKSA+PSAwICYmIGRhdGFbJ2FsbG93LW51bGwnXSA9PT0gdHJ1ZSkge1xuICAgICAgcmVxdWlyZWRSdWxlLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChkYXRhLnZhbGlkYXRpb24gPT09ICdub25lJ1xuICAgICAgfHwgZGF0YS52YWxpZGF0aW9uID09PSAnZW1haWxPckVtcHR5J1xuICAgICAgfHwgZGF0YS52YWxpZGF0aW9uID09PSAnbnVtYmVyT3JFbXB0eSdcbiAgICApIHtcbiAgICAgIHJlcXVpcmVkUnVsZS5yZXF1aXJlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1aXJlZFJ1bGUucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgcmVxdWlyZWRSdWxlLm1lc3NhZ2UgPSB0aGlzLmdlbmVyYXRlRmllbGRNZXNzYWdlKGRhdGEubGFiZWwpO1xuICAgIH1cblxuICAgIHJ1bGVzLnB1c2gocmVxdWlyZWRSdWxlKTtcblxuICAgIGNvbnN0IGxhYmVsID0gKFxuICAgICAgPGRpdj5cbiAgICAgICAgeycgJ31cbiAgICAgICAge2RhdGEubGFiZWx9XG4gICAgICAgIHsnICd9XG4gICAgICAgIHsgZGF0YS5oZWxwXG4gICAgICAgICYmICg8VG9vbHRpcCB0aXRsZT17ZGF0YS5oZWxwfT48SW5mb0NpcmNsZU91dGxpbmVkIHN0eWxlPXt7IGZvbnRTaXplOiAnMTZweCcsIGNvbG9yOiAnIzE4OTBmZicgfX0gLz48L1Rvb2x0aXA+KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG5cbiAgICBpZiAoZGF0YS50eXBlID09PSAnaGlkZGVuJykge1xuICAgICAgcmVxdWlyZWRSdWxlLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgbGFiZWxDb2w9e2xhYmVsU3Bhbn1cbiAgICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiAnbm9uZScgfX1cbiAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgcnVsZXM9e3J1bGVzfVxuICAgICAgICA+XG4gICAgICAgICAgPElucHV0IC8+XG4gICAgICAgIDwvRm9ybS5JdGVtPlxuICAgICAgKTtcbiAgICB9IGlmIChkYXRhLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgaWYgKGRhdGEudmFsaWRhdGlvbikge1xuICAgICAgICAvLyBUT0RPIC0gbm90IHN1cmUgd2h5IGZvbGxvd2luZyBsaW5lIHdhcyB0aGVyZS4gVGhpcyBzdG9wIGNvcnJlY3QgdmFsaWRhdGlvbnMgZm9yIHJ1bGVzIGxpa2UgbnVtYmVyT3JFbXB0eVxuICAgICAgICAvL2RhdGEudmFsaWRhdGlvbiA9IGRhdGEudmFsaWRhdGlvbi5yZXBsYWNlKCdPckVtcHR5JywgJycpO1xuICAgICAgICB2YWxpZGF0aW9uUnVsZSA9IHRoaXMuZ2V0VmFsaWRhdGlvblJ1bGUoZGF0YSk7XG4gICAgICAgIGlmICh2YWxpZGF0aW9uUnVsZSkge1xuICAgICAgICAgIHRoaXMudmFsaWRhdGlvblJ1bGVzW25hbWVdID0ge1xuICAgICAgICAgICAgcnVsZTogdmFsaWRhdGlvblJ1bGUsXG4gICAgICAgICAgICBtZXNzYWdlOiBgSW52YWxpZCB2YWx1ZSBmb3IgJHtkYXRhLmxhYmVsfWAsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHZhbGlkYXRpb25SdWxlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgICBsYWJlbENvbD17bGFiZWxTcGFufVxuICAgICAgICAgICAgbGFiZWw9e2xhYmVsfVxuICAgICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgICAgIHJ1bGVzPXtydWxlc31cbiAgICAgICAgICAgIHZhbGlkYXRlU3RhdHVzPXt0aGlzLnN0YXRlW25hbWVdfVxuICAgICAgICAgICAgaGVscD17dGhpcy5zdGF0ZVtgJHtuYW1lfV9tZXNzYWdlYF19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3ZpZXdPbmx5XG4gICAgICAgICAgICAgID8gPEljZUxhYmVsIC8+XG4gICAgICAgICAgICAgIDogPElucHV0IG9uQ2hhbmdlPXt0aGlzLnZhbGlkYXRlT25DaGFuZ2UuYmluZCh0aGlzKX0gLz59XG4gICAgICAgICAgPC9Gb3JtLkl0ZW0+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgbGFiZWxDb2w9e2xhYmVsU3Bhbn1cbiAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgcnVsZXM9e3J1bGVzfVxuICAgICAgICA+XG4gICAgICAgICAge3ZpZXdPbmx5XG4gICAgICAgICAgICA/IDxJY2VMYWJlbCAvPlxuICAgICAgICAgICAgOiA8SW5wdXQgLz59XG4gICAgICAgIDwvRm9ybS5JdGVtPlxuICAgICAgKTtcbiAgICB9IGlmIChkYXRhLnR5cGUgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgIGlmICghZGF0YS5yb3dzKSB7XG4gICAgICAgIGRhdGEucm93cyA9IDQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgbGFiZWxDb2w9e2xhYmVsU3Bhbn1cbiAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgcnVsZXM9e3J1bGVzfVxuICAgICAgICA+XG4gICAgICAgICAge3ZpZXdPbmx5XG4gICAgICAgICAgICA/IDxJY2VMYWJlbCAvPlxuICAgICAgICAgICAgOiA8SW5wdXQuVGV4dEFyZWEgcm93cz17ZGF0YS5yb3dzfSAvPn1cbiAgICAgICAgPC9Gb3JtLkl0ZW0+XG4gICAgICApO1xuICAgIH0gaWYgKGRhdGEudHlwZSA9PT0gJ2RhdGUnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgbGFiZWxDb2w9e2xhYmVsU3Bhbn1cbiAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgcnVsZXM9e3J1bGVzfVxuICAgICAgICA+XG4gICAgICAgICAgPERhdGVQaWNrZXIgZGlzYWJsZWQ9e3ZpZXdPbmx5fSAvPlxuICAgICAgICA8L0Zvcm0uSXRlbT5cbiAgICAgICk7XG4gICAgfSBpZiAoZGF0YS50eXBlID09PSAnZGF0ZXRpbWUnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgbGFiZWxDb2w9e2xhYmVsU3Bhbn1cbiAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgcnVsZXM9e3J1bGVzfVxuICAgICAgICA+XG4gICAgICAgICAgPERhdGVQaWNrZXIgZm9ybWF0PVwiWVlZWS1NTS1ERCBISDptbTpzc1wiIHNob3dUaW1lIGRpc2FibGVkPXt2aWV3T25seX0gLz5cbiAgICAgICAgPC9Gb3JtLkl0ZW0+XG4gICAgICApO1xuICAgIH0gaWYgKGRhdGEudHlwZSA9PT0gJ3RpbWUnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgbGFiZWxDb2w9e2xhYmVsU3Bhbn1cbiAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgcnVsZXM9e3J1bGVzfVxuICAgICAgICA+XG4gICAgICAgICAgPFRpbWVQaWNrZXJcbiAgICAgICAgICAgIGZvcm1hdD1cIkhIOm1tXCJcbiAgICAgICAgICAgIGRpc2FibGVkPXt2aWV3T25seX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0Zvcm0uSXRlbT5cbiAgICAgICk7XG4gICAgfSBpZiAoZGF0YS50eXBlID09PSAnZmlsZXVwbG9hZCcpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRFbXBsb3llZSA9IGFkYXB0ZXIuZ2V0Q3VycmVudFByb2ZpbGUoKTtcbiAgICAgIGlmIChjdXJyZW50RW1wbG95ZWUgIT0gbnVsbCkge1xuICAgICAgICB1c2VySWQgPSBjdXJyZW50RW1wbG95ZWUuaWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1c2VySWQgPSBhZGFwdGVyLmdldFVzZXIoKS5pZCAqIC0xO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5maWxldHlwZXMgPT0gbnVsbCkge1xuICAgICAgICBkYXRhLmZpbGV0eXBlcyA9ICcuZG9jLC5kb2N4J1xuICAgICAgICAgICsgJ2FwcGxpY2F0aW9uL21zd29yZCxhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCwnXG4gICAgICAgICAgKyAnaW1hZ2UvKiwnXG4gICAgICAgICAgKyAnLnBkZic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxGb3JtLkl0ZW1cbiAgICAgICAgICBsYWJlbENvbD17bGFiZWxTcGFufVxuICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgIGxhYmVsPXtsYWJlbH1cbiAgICAgICAgPlxuICAgICAgICAgIDxJY2VVcGxvYWRcbiAgICAgICAgICAgIHVzZXI9e3VzZXJJZH1cbiAgICAgICAgICAgIGZpbGVHcm91cD17YWRhcHRlci50YWJ9XG4gICAgICAgICAgICBmaWxlTmFtZT17bmFtZX1cbiAgICAgICAgICAgIGFkYXB0ZXI9e2FkYXB0ZXJ9XG4gICAgICAgICAgICBhY2NlcHQ9e2RhdGEuZmlsZXR5cGVzfVxuICAgICAgICAgICAgcmVhZE9ubHk9e3ZpZXdPbmx5fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRm9ybS5JdGVtPlxuICAgICAgKTtcbiAgICB9IGlmIChkYXRhLnR5cGUgPT09ICdkYXRhZ3JvdXAnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgbGFiZWxDb2w9e2xhYmVsU3Bhbn1cbiAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgIGtleT17bmFtZX1cbiAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNlRGF0YUdyb3VwXG4gICAgICAgICAgICBhZGFwdGVyPXthZGFwdGVyfVxuICAgICAgICAgICAgZmllbGQ9e2ZpZWxkfVxuICAgICAgICAgICAgdGl0bGU9e2xhYmVsfVxuICAgICAgICAgICAgcmVhZE9ubHk9e3ZpZXdPbmx5fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRm9ybS5JdGVtPlxuICAgICAgKTtcbiAgICB9IGlmIChkYXRhLnR5cGUgPT09ICdzZWxlY3QyJyB8fCBkYXRhLnR5cGUgPT09ICdzZWxlY3QnIHx8IGRhdGEudHlwZSA9PT0gJ3NlbGVjdDJtdWx0aScpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxGb3JtLkl0ZW1cbiAgICAgICAgICBsYWJlbENvbD17bGFiZWxTcGFufVxuICAgICAgICAgIGxhYmVsPXtsYWJlbH1cbiAgICAgICAgICBrZXk9e25hbWV9XG4gICAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgICBydWxlcz17cnVsZXN9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNlU2VsZWN0XG4gICAgICAgICAgICBhZGFwdGVyPXthZGFwdGVyfVxuICAgICAgICAgICAgZmllbGQ9e2ZpZWxkfVxuICAgICAgICAgICAgcmVhZE9ubHk9e3ZpZXdPbmx5fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRm9ybS5JdGVtPlxuICAgICAgKTtcbiAgICB9IGlmIChkYXRhLnR5cGUgPT09ICdjb2xvcnBpY2snKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgbGFiZWxDb2w9e2xhYmVsU3Bhbn1cbiAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgIGtleT17bmFtZX1cbiAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgID5cbiAgICAgICAgICA8SWNlQ29sb3JQaWNrXG4gICAgICAgICAgICBhZGFwdGVyPXthZGFwdGVyfVxuICAgICAgICAgICAgZmllbGQ9e2ZpZWxkfVxuICAgICAgICAgICAgdGl0bGU9e2xhYmVsfVxuICAgICAgICAgICAgcmVhZE9ubHk9e3ZpZXdPbmx5fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRm9ybS5JdGVtPlxuICAgICAgKTtcbiAgICB9IGlmIChkYXRhLnR5cGUgPT09ICdzaWduYXR1cmUnKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybS5JdGVtXG4gICAgICAgICAgbGFiZWxDb2w9e2xhYmVsU3Bhbn1cbiAgICAgICAgICBsYWJlbD17bGFiZWx9XG4gICAgICAgICAga2V5PXtuYW1lfVxuICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgcnVsZXM9e3J1bGVzfVxuICAgICAgICA+XG4gICAgICAgICAgPEljZVNpZ25hdHVyZSByZWFkT25seT17dmlld09ubHl9IC8+XG4gICAgICAgIDwvRm9ybS5JdGVtPlxuICAgICAgKTtcbiAgICB9IGlmIChkYXRhLnR5cGUgPT09ICdwbGFjZWhvbGRlcicpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxGb3JtLkl0ZW1cbiAgICAgICAgICBsYWJlbENvbD17bGFiZWxTcGFufVxuICAgICAgICAgIGxhYmVsPXtsYWJlbH1cbiAgICAgICAgICBrZXk9e25hbWV9XG4gICAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgICBydWxlcz17cnVsZXN9XG4gICAgICAgICAgc2hvdWxkVXBkYXRlXG4gICAgICAgID5cbiAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgIGJvcmRlcmVkPXtmYWxzZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0Zvcm0uSXRlbT5cbiAgICAgICk7XG4gICAgfSBpZiAoZGF0YS50eXBlID09PSAnZWRpdG9yJykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm0uSXRlbVxuICAgICAgICAgIGxhYmVsQ29sPXtsYWJlbFNwYW59XG4gICAgICAgICAgbGFiZWw9e2xhYmVsfVxuICAgICAgICAgIGtleT17bmFtZX1cbiAgICAgICAgICBuYW1lPXtuYW1lfVxuICAgICAgICAgIHJ1bGVzPXtydWxlc31cbiAgICAgICAgICBzaG91bGRVcGRhdGVcbiAgICAgICAgPlxuICAgICAgICAgIDxJY2VFZGl0b3JcbiAgICAgICAgICAgIGFkYXB0ZXI9e2FkYXB0ZXJ9XG4gICAgICAgICAgICBmaWVsZD17ZmllbGR9XG4gICAgICAgICAgICB0aXRsZT17bGFiZWx9XG4gICAgICAgICAgICByZWFkT25seT17dmlld09ubHl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Gb3JtLkl0ZW0+XG4gICAgICApO1xuICAgIH0gaWYgKGRhdGEudHlwZSA9PT0gJ3NsaWRlcicpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxGb3JtLkl0ZW1cbiAgICAgICAgICBsYWJlbENvbD17bGFiZWxTcGFufVxuICAgICAgICAgIGxhYmVsPXtsYWJlbH1cbiAgICAgICAgICBrZXk9e25hbWV9XG4gICAgICAgICAgbmFtZT17bmFtZX1cbiAgICAgICAgICBydWxlcz17cnVsZXN9XG4gICAgICAgID5cbiAgICAgICAgICA8U2xpZGVyXG4gICAgICAgICAgICBtaW49e2RhdGEubWlufVxuICAgICAgICAgICAgbWF4PXtkYXRhLm1heH1cbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17ZGF0YS5kZWZhdWx0VmFsdWUgPyBkYXRhLmRlZmF1bHRWYWx1ZSA6IDB9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Gb3JtLkl0ZW0+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdlbmVyYXRlRmllbGRNZXNzYWdlKGxhYmVsKSB7XG4gICAgcmV0dXJuIGAke2xhYmVsfTogJHt0aGlzLnByb3BzLmFkYXB0ZXIuZ3QoJ2lzIHJlcXVpcmVkJyl9YDtcbiAgfVxuXG4gIGdldFZhbGlkYXRpb25SdWxlKGRhdGEpIHtcbiAgICBpZiAoVmFsaWRhdGlvblJ1bGVzW2RhdGEudmFsaWRhdGlvbl0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFZhbGlkYXRpb25SdWxlc1tkYXRhLnZhbGlkYXRpb25dO1xuICB9XG5cbiAgZGF0YVRvRm9ybUZpZWxkcyhkYXRhLCBmaWVsZHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgW2tleSwgZm9ybUlucHV0RGF0YV0gPSBmaWVsZHNbaV07XG4gICAgICBpZiAoZm9ybUlucHV0RGF0YS50eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgZGF0YVtrZXldID0gZGF0YVtrZXldID8gbW9tZW50KGRhdGFba2V5XSwgJ1lZWVktTU0tREQnKSA6IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKGZvcm1JbnB1dERhdGEudHlwZSA9PT0gJ2RhdGV0aW1lJykge1xuICAgICAgICBkYXRhW2tleV0gPSBkYXRhW2tleV0gPyBtb21lbnQoZGF0YVtrZXldLCAnWVlZWS1NTS1ERCBISDptbTpzcycpIDogbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybUlucHV0RGF0YS50eXBlID09PSAndGltZScpIHtcbiAgICAgICAgZGF0YVtrZXldID0gZGF0YVtrZXldID8gbW9tZW50KGRhdGFba2V5XSwgJ0hIOm1tJykgOiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZm9ybUZpZWxkc1RvRGF0YShwYXJhbXMsIGZpZWxkcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBba2V5LCBmb3JtSW5wdXREYXRhXSA9IGZpZWxkc1tpXTtcbiAgICAgIGlmIChmb3JtSW5wdXREYXRhLnR5cGUgPT09ICdkYXRlJykge1xuICAgICAgICBwYXJhbXNba2V5XSA9IHBhcmFtc1trZXldID8gcGFyYW1zW2tleV0uZm9ybWF0KCdZWVlZLU1NLUREJykgOiAnTlVMTCc7XG4gICAgICB9IGVsc2UgaWYgKGZvcm1JbnB1dERhdGEudHlwZSA9PT0gJ2RhdGV0aW1lJykge1xuICAgICAgICBwYXJhbXNba2V5XSA9IHBhcmFtc1trZXldID8gcGFyYW1zW2tleV0uZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tOnNzJykgOiAnTlVMTCc7XG4gICAgICB9IGVsc2UgaWYgKGZvcm1JbnB1dERhdGEudHlwZSA9PT0gJ3RpbWUnKSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gcGFyYW1zW2tleV0gPyBwYXJhbXNba2V5XS5mb3JtYXQoJ0hIOm1tJykgOiAnTlVMTCc7XG4gICAgICB9IGVsc2UgaWYgKChmb3JtSW5wdXREYXRhLnR5cGUgPT09ICdzZWxlY3QnIHx8IGZvcm1JbnB1dERhdGEudHlwZSA9PT0gJ3NlbGVjdDInKSAmJiBwYXJhbXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gJ05VTEwnO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICB1cGRhdGVGaWVsZHMoZGF0YSkge1xuICAgIGNvbnN0IHsgZmllbGRzIH0gPSB0aGlzLnByb3BzO1xuICAgIGRhdGEgPSB0aGlzLmRhdGFUb0Zvcm1GaWVsZHMoZGF0YSwgZmllbGRzKTtcbiAgICB0aGlzLmZvcm1SZWZlcmVuY2UuY3VycmVudC5yZXNldEZpZWxkcygpO1xuICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZm9ybVJlZmVyZW5jZS5jdXJyZW50LnNldEZpZWxkc1ZhbHVlKGRhdGEpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2V0RmllbGRzKCkge1xuICAgIHRoaXMuZm9ybVJlZmVyZW5jZS5jdXJyZW50LnJlc2V0RmllbGRzKCk7XG4gIH1cblxuICBzZXRGaWVsZHNWYWx1ZShkYXRhKSB7XG4gICAgdGhpcy5mb3JtUmVmZXJlbmNlLmN1cnJlbnQuc2V0RmllbGRzVmFsdWUoZGF0YSk7XG4gIH1cblxuICBzYXZlKHBhcmFtcywgc3VjY2Vzcykge1xuICAgIGNvbnN0IHsgYWRhcHRlciwgZmllbGRzIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCB2YWx1ZXMgPSBwYXJhbXM7XG4gICAgdmFsdWVzID0gYWRhcHRlci5mb3JjZUluamVjdFZhbHVlc0JlZm9yZVNhdmUodmFsdWVzKTtcbiAgICBjb25zdCBtc2cgPSBhZGFwdGVyLmRvQ3VzdG9tVmFsaWRhdGlvbih2YWx1ZXMpO1xuICAgIGlmIChtc2cgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuc2hvd0Vycm9yKG1zZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhZGFwdGVyLmNzcmZSZXF1aXJlZCkge1xuICAgICAgdmFsdWVzLmNzcmYgPSAkKGAjJHthZGFwdGVyLmdldFRhYmxlTmFtZSgpfUZvcm1gKS5kYXRhKCdjc3JmJyk7XG4gICAgfVxuXG4gICAgY29uc3QgaWQgPSAoYWRhcHRlci5jdXJyZW50RWxlbWVudCAhPSBudWxsKSA/IGFkYXB0ZXIuY3VycmVudEVsZW1lbnQuaWQgOiBudWxsO1xuICAgIGlmIChpZCAhPSBudWxsICYmIGlkICE9PSAnJykge1xuICAgICAgdmFsdWVzLmlkID0gaWQ7XG4gICAgfVxuICAgIHZhbHVlcyA9IHRoaXMuZm9ybUZpZWxkc1RvRGF0YSh2YWx1ZXMsIGZpZWxkcyk7XG4gICAgYWRhcHRlci5hZGQodmFsdWVzLCBbXSwgKCkgPT4gYWRhcHRlci5nZXQoW10pLCAoKSA9PiB7XG4gICAgICB0aGlzLmZvcm1SZWZlcmVuY2UuY3VycmVudC5yZXNldEZpZWxkcygpO1xuICAgICAgdGhpcy5zaG93RXJyb3IoZmFsc2UpO1xuICAgICAgc3VjY2VzcygpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEljZUZvcm07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQnV0dG9uLCBDb2wsIE1vZGFsLCBSb3csIFNwYWNlLFxufSBmcm9tICdhbnRkJztcbmltcG9ydCBJY2VGb3JtIGZyb20gJy4vSWNlRm9ybSc7XG5cbmNsYXNzIEljZUZvcm1Nb2RhbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgIHZpZXdPbmx5OiBmYWxzZSxcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgIH07XG4gICAgdGhpcy5pY2VGb3JtUmVmZXJlbmNlID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gIH1cblxuICBzZXRWaWV3T25seSh2YWx1ZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB2aWV3T25seTogdmFsdWUgfSk7XG4gIH1cblxuICBnZXRXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5hZGFwdGVyLmdldFdpZHRoKCk7XG4gIH1cblxuICBzaG93KGRhdGEpIHtcbiAgICB0aGlzLnByb3BzLmFkYXB0ZXIuYmVmb3JlUmVuZGVyRmllbGRIb29rID0gdGhpcy5wcm9wcy5hZGFwdGVyLmJlZm9yZVJlbmRlckZpZWxkID8gdGhpcy5wcm9wcy5hZGFwdGVyLmJlZm9yZVJlbmRlckZpZWxkKGRhdGEpIDogKGZpZWxkTmFtZSwgZmllbGQpID0+IGZpZWxkO1xuICAgIGlmICghZGF0YSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IHRydWUgfSk7XG4gICAgICBpZiAodGhpcy5pY2VGb3JtUmVmZXJlbmNlLmN1cnJlbnQpIHtcbiAgICAgICAgdGhpcy5pY2VGb3JtUmVmZXJlbmNlLmN1cnJlbnQucmVzZXRGaWVsZHMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IHRydWUgfSk7XG4gICAgICBpZiAodGhpcy5pY2VGb3JtUmVmZXJlbmNlLmN1cnJlbnQgJiYgdGhpcy5pY2VGb3JtUmVmZXJlbmNlLmN1cnJlbnQuaXNSZWFkeSgpKSB7XG4gICAgICAgIHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50LnVwZGF0ZUZpZWxkcyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud2FpdEZvckl0KFxuICAgICAgICAgICgpID0+IHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50ICYmIHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50LmlzUmVhZHkoKSxcbiAgICAgICAgICAoKSA9PiB7IHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50LnVwZGF0ZUZpZWxkcyhkYXRhKTsgfSxcbiAgICAgICAgICAxMDAwLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHdhaXRGb3JJdChjb25kaXRpb24sIGNhbGxiYWNrLCB0aW1lKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY29uZGl0aW9uKCkpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud2FpdEZvckl0KGNvbmRpdGlvbiwgY2FsbGJhY2ssIHRpbWUpO1xuICAgICAgfVxuICAgIH0sIHRpbWUpO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmlzaWJsZTogZmFsc2UgfSk7XG4gIH1cblxuICBzYXZlKHBhcmFtcykge1xuICAgIGNvbnN0IHsgc2F2ZUNvbXBsZXRlQ2FsbGJhY2sgfSA9IHRoaXMucHJvcHM7XG4gICAgdGhpcy5pY2VGb3JtUmVmZXJlbmNlLmN1cnJlbnQuc2F2ZShwYXJhbXMsICgpID0+IHtcbiAgICAgIHRoaXMuY2xvc2VNb2RhbCgpO1xuICAgICAgaWYgKHNhdmVDb21wbGV0ZUNhbGxiYWNrKSB7XG4gICAgICAgIHNhdmVDb21wbGV0ZUNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjbG9zZU1vZGFsKCkge1xuICAgIHRoaXMuaGlkZSgpO1xuICAgIHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50LnNob3dFcnJvcihmYWxzZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgZmllbGRzLCBhZGFwdGVyLCBzYXZlQ2FsbGJhY2ssIGNhbmNlbENhbGxiYWNrLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgYWRkaXRpb25hbFByb3BzID0ge307XG4gICAgYWRkaXRpb25hbFByb3BzLmZvb3RlciA9IChcbiAgICAgIDxSb3cgZ3V0dGVyPXsxNn0+XG4gICAgICAgIDxDb2wgY2xhc3NOYW1lPVwiZ3V0dGVyLXJvd1wiIHNwYW49ezEyfSBzdHlsZT17e319IC8+XG4gICAgICAgIDxDb2wgY2xhc3NOYW1lPVwiZ3V0dGVyLXJvd1wiIHNwYW49ezEyfSBzdHlsZT17eyB0ZXh0QWxpZ246ICdyaWdodCcgfX0+XG4gICAgICAgICAgPFNwYWNlPlxuICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChjYW5jZWxDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbmNlbENhbGxiYWNrKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZU1vZGFsKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt0aGlzLnByb3BzLmFkYXB0ZXIuZ3QoJ0NhbmNlbCcpfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGxvYWRpbmc9e3RoaXMuc3RhdGUubG9hZGluZ31cbiAgICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaWNlRnJvbSA9IHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50O1xuICAgICAgICAgICAgICAgIGljZUZyb21cbiAgICAgICAgICAgICAgICAgIC52YWxpZGF0ZUZpZWxkcygpXG4gICAgICAgICAgICAgICAgICAudGhlbigodmFsdWVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaWNlRnJvbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzYXZlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICBzYXZlQ2FsbGJhY2sodmFsdWVzLCBpY2VGcm9tLnNob3dFcnJvci5iaW5kKHRoaXMpLCB0aGlzLmNsb3NlTW9kYWwuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlKHZhbHVlcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIC5jYXRjaCgoaW5mbykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3RoaXMuc3RhdGUudmlld09ubHkgPyB0aGlzLnByb3BzLmFkYXB0ZXIuZ3QoJ0RvbmUnKSA6IHRoaXMucHJvcHMuYWRhcHRlci5ndCgnU2F2ZScpfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgPC9TcGFjZT5cbiAgICAgICAgPC9Db2w+XG4gICAgICA8L1Jvdz5cbiAgICApO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUudmlld09ubHkpIHtcbiAgICAgIGFkZGl0aW9uYWxQcm9wcy5mb290ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8TW9kYWxcbiAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS52aXNpYmxlfVxuICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy5hZGFwdGVyLmd0KHRoaXMucHJvcHMudGl0bGUgfHwgYWRhcHRlci5vYmplY3RUeXBlTmFtZSl9XG4gICAgICAgIG1hc2tDbG9zYWJsZT17ZmFsc2V9XG4gICAgICAgIHdpZHRoPXt0aGlzLmdldFdpZHRoKCl9XG4gICAgICAgIG9uQ2FuY2VsPXsoKSA9PiB7XG4gICAgICAgICAgaWYgKGNhbmNlbENhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYW5jZWxDYWxsYmFjaygpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH19XG4gICAgICAgIHsuLi5hZGRpdGlvbmFsUHJvcHN9XG4gICAgICA+XG4gICAgICAgIDxJY2VGb3JtXG4gICAgICAgICAgcmVmPXt0aGlzLmljZUZvcm1SZWZlcmVuY2V9XG4gICAgICAgICAgYWRhcHRlcj17YWRhcHRlcn1cbiAgICAgICAgICBmaWVsZHM9e2ZpZWxkc31cbiAgICAgICAgICB2aWV3T25seT17dGhpcy5zdGF0ZS52aWV3T25seX1cbiAgICAgICAgLz5cbiAgICAgIDwvTW9kYWw+XG4gICAgKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEljZUZvcm1Nb2RhbDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTcGFjZSB9IGZyb20gJ2FudGQnO1xuXG5jbGFzcyBJY2VMYWJlbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFNwYWNlPlxuICAgICAgICA8ZGl2IGNvbnRlbnRFZGl0YWJsZT0ndHJ1ZScgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLm5sMmJyKHZhbHVlIHx8ICcnKSB9fT48L2Rpdj5cbiAgICAgIDwvU3BhY2U+XG4gICAgKTtcbiAgfVxuXG4gIG5sMmJyKHN0cikge1xuICAgIHJldHVybiAoYCR7c3RyfWApLnJlcGxhY2UoLyhbXj5cXHJcXG5dPykoXFxyXFxufFxcblxccnxcXHJ8XFxuKS9nLCAnPGJyIC8+Jyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSWNlTGFiZWw7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybSwgU2VsZWN0IH0gZnJvbSAnYW50ZCc7XG5cbmNvbnN0IHsgT3B0aW9uIH0gPSBTZWxlY3Q7XG5cbmNsYXNzIEljZVNlbGVjdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgb3B0aW9ucztcbiAgICBjb25zdCB7IGZpZWxkLCBhZGFwdGVyIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGRhdGEgPSBmaWVsZFsxXTtcbiAgICBpZiAoZGF0YVsncmVtb3RlLXNvdXJjZSddICE9IG51bGwpIHtcbiAgICAgIGxldCBrZXkgPSBgJHtkYXRhWydyZW1vdGUtc291cmNlJ11bMF19XyR7ZGF0YVsncmVtb3RlLXNvdXJjZSddWzFdfV8ke2RhdGFbJ3JlbW90ZS1zb3VyY2UnXVsyXX1gO1xuICAgICAgaWYgKGRhdGFbJ3JlbW90ZS1zb3VyY2UnXS5sZW5ndGggPT09IDQpIHtcbiAgICAgICAga2V5ID0gYCR7a2V5fV8ke2RhdGFbJ3JlbW90ZS1zb3VyY2UnXVszXX1gO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IGFkYXB0ZXIuZmllbGRNYXN0ZXJEYXRhW2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSBkYXRhLnNvdXJjZTtcbiAgICB9XG4gICAgY29uc3Qgb3B0aW9uRGF0YSA9IHRoaXMuZ2V0Rm9ybVNlbGVjdE9wdGlvbnNSZW1vdGUob3B0aW9ucywgZmllbGQsIGFkYXB0ZXIpO1xuXG4gICAgLy8gdmFsdWUgc2hvdWxkIGJlIGFuIGFycmF5IGlmIG11bHRpLXNlbGVjdFxuICAgIGlmIChkYXRhLnR5cGUgPT09ICdzZWxlY3QybXVsdGknKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgIHZhbHVlID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5tYXAoKGl0ZW0pID0+IGAke2l0ZW19YCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHZhbHVlID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgPyB2YWx1ZS50b1N0cmluZygpIDogdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxTZWxlY3RcbiAgICAgICAgbW9kZT17ZGF0YS50eXBlID09PSAnc2VsZWN0Mm11bHRpJyA/ICdtdWx0aXBsZScgOiB1bmRlZmluZWR9XG4gICAgICAgIHNob3dTZWFyY2hcbiAgICAgICAgcGxhY2Vob2xkZXI9e2BTZWxlY3QgJHtkYXRhLmxhYmVsfWB9XG4gICAgICAgIG9wdGlvbkZpbHRlclByb3A9XCJjaGlsZHJlblwiXG4gICAgICAgIGZpbHRlck9wdGlvbj17XG4gICAgICAgICAgKGlucHV0LCBvcHRpb24pID0+IGlucHV0ICE9IG51bGxcbiAgICAgICAgICAgICYmIG9wdGlvbi5sYWJlbC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoaW5wdXQudG9Mb3dlckNhc2UoKSkgPj0gMFxuICAgICAgICB9XG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgb3B0aW9ucz17b3B0aW9uRGF0YX1cbiAgICAgICAgYWxsb3dDbGVhclxuICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKX1cbiAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMucmVhZE9ubHl9XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICBoYW5kbGVDaGFuZ2UodmFsdWUpIHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGRhdGEgPSBmaWVsZFsxXTtcbiAgICBpZiAoZGF0YS50eXBlID09PSAnc2VsZWN0Mm11bHRpJykge1xuICAgICAgdGhpcy5vbkNoYW5nZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBtYWtlT3B0aW9uKG9wdGlvbikge1xuICAgIHJldHVybiA8T3B0aW9uIGtleT17YCR7b3B0aW9uWzBdfWB9IHZhbHVlPXtgJHtvcHRpb25bMF19YH0+e29wdGlvblsxXX08L09wdGlvbj47XG4gIH1cblxuICBnZXRGb3JtU2VsZWN0T3B0aW9uc1JlbW90ZShvcHRpb25zLCBmaWVsZCwgYWRhcHRlcikge1xuICAgIGNvbnN0IG9wdGlvbkRhdGEgPSBbXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb3B0aW9uRGF0YS5wdXNoKHtcbiAgICAgICAgICBsYWJlbDogb3B0aW9uc1tpXVsxXSxcbiAgICAgICAgICB2YWx1ZTogb3B0aW9uc1tpXVswXSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9uRGF0YS5wdXNoKHtcbiAgICAgICAgICBsYWJlbDogb3B0aW9uc1trZXldLFxuICAgICAgICAgIHZhbHVlOiBrZXksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIChmaWVsZFsxXS5zb3J0ID09PSAndHJ1ZScpIHtcbiAgICAvLyAgIHR1cGxlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgLy8gICAgIGEgPSBhWzFdO1xuICAgIC8vICAgICBiID0gYlsxXTtcbiAgICAvL1xuICAgIC8vICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICAvLyAgICAgcmV0dXJuIGEgPCBiID8gLTEgOiAoYSA+IGIgPyAxIDogMCk7XG4gICAgLy8gICB9KTtcbiAgICAvLyB9XG5cbiAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IHR1cGxlcy5sZW5ndGg7IGkrKykge1xuICAgIC8vICAgY29uc3QgcHJvcCA9IHR1cGxlc1tpXVswXTtcbiAgICAvLyAgIGNvbnN0IHZhbHVlID0gdHVwbGVzW2ldWzFdO1xuICAgIC8vICAgb3B0aW9uRGF0YS5wdXNoKFtwcm9wLCBhZGFwdGVyLmd0KHZhbHVlKV0pO1xuICAgIC8vIH1cblxuICAgIHJldHVybiBvcHRpb25EYXRhO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEljZVNlbGVjdDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU2lnbmF0dXJlQ2FudmFzIGZyb20gJ3JlYWN0LXNpZ25hdHVyZS1jYW52YXMnO1xuaW1wb3J0IHsgQnV0dG9uLCBNb2RhbCwgVGFnIH0gZnJvbSAnYW50ZCc7XG5pbXBvcnQgeyBWZXJpZmllZE91dGxpbmVkIH0gZnJvbSAnQGFudC1kZXNpZ24vaWNvbnMnO1xuXG5jbGFzcyBJY2VTaWduYXR1cmUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2U7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgIH07XG4gICAgdGhpcy5zaWduYXR1cmUgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICB9XG5cbiAgc2hvdygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmlzaWJsZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIHNldFNpZ25hdHVyZShyZWYpIHtcbiAgICBpZiAocmVmID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZS5sZW5ndGggPiAxMCkge1xuICAgICAgcmVmLmZyb21EYXRhVVJMKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBoaWRlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyB2aXNpYmxlOiBmYWxzZSB9KTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc2lnbmF0dXJlLmNsZWFyKCk7XG4gIH1cblxuICBzYXZlKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnNpZ25hdHVyZS50b0RhdGFVUkwoJ2ltYWdlL3BuZycpO1xuICAgIHRoaXMub25DaGFuZ2UoZGF0YSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IGZhbHNlIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcmVhZE9ubHkgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPE1vZGFsXG4gICAgICAgICAgdmlzaWJsZT17dGhpcy5zdGF0ZS52aXNpYmxlfVxuICAgICAgICAgIHRpdGxlPVwiU2lnbmF0dXJlXCJcbiAgICAgICAgICBtYXNrQ2xvc2FibGU9e2ZhbHNlfVxuICAgICAgICAgIGNlbnRlcmVkXG4gICAgICAgICAgd2lkdGg9ezMwMH1cbiAgICAgICAgICBvbkNhbmNlbD17KCkgPT4geyB0aGlzLmhpZGUoKTsgfX1cbiAgICAgICAgICBmb290ZXI9e1tcbiAgICAgICAgICAgIDxCdXR0b24ga2V5PVwiY2FuY2VsXCIgb25DbGljaz17KCkgPT4geyB0aGlzLmhpZGUoKTsgfX0+XG4gICAgICAgICAgICAgIENhbmNlbFxuICAgICAgICAgICAgPC9CdXR0b24+LFxuICAgICAgICAgICAgPEJ1dHRvbiBrZXk9XCJjbGVhclwiIGRpc2FibGVkPXtyZWFkT25seX0gdHlwZT1cImRhc2hlZFwiIG9uQ2xpY2s9eygpID0+IHsgaWYgKCFyZWFkT25seSkgeyB0aGlzLmNsZWFyKCk7IH0gfX0+XG4gICAgICAgICAgICAgIENsZWFyXG4gICAgICAgICAgICA8L0J1dHRvbj4sXG4gICAgICAgICAgICA8QnV0dG9uIGtleT1cIm9rXCIgZGlzYWJsZWQ9e3JlYWRPbmx5fSB0eXBlPVwicHJpbWFyeVwiIG9uQ2xpY2s9eygpID0+IHsgaWYgKCFyZWFkT25seSkgeyB0aGlzLnNhdmUoKTsgfSB9fT5cbiAgICAgICAgICAgICAgU3VibWl0XG4gICAgICAgICAgICA8L0J1dHRvbj4sXG4gICAgICAgICAgXX1cbiAgICAgICAgPlxuICAgICAgICAgIDxTaWduYXR1cmVDYW52YXMgcmVmPXsocmVmKSA9PiB7IHRoaXMuc2lnbmF0dXJlID0gcmVmOyB0aGlzLnNldFNpZ25hdHVyZShyZWYpOyB9fSBjYW52YXNQcm9wcz17eyB3aWR0aDogMjUwLCBoZWlnaHQ6IDIwMCwgY2xhc3NOYW1lOiAnc2lnQ2FudmFzJywgLi4uKCByZWFkT25seSA/IHsgcmVhZE9ubHkgfSA6IHt9KSwgfX0gLz5cbiAgICAgICAgPC9Nb2RhbD5cbiAgICAgICAgPFRhZyBjb2xvcj1cImJsdWVcIiBzdHlsZT17eyBjdXJzb3I6ICdwb2ludGVyJyB9fSBvbkNsaWNrPXsoKSA9PiB7IHRoaXMuc2hvdygpOyB9fT5cbiAgICAgICAgICA8VmVyaWZpZWRPdXRsaW5lZCAvPlxuICAgICAgICAgIHsnICd9XG4gICAgICAgICAgU2lnblxuICAgICAgICA8L1RhZz5cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSWNlU2lnbmF0dXJlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIEJ1dHRvbiwgRGl2aWRlciwgU3RlcHMsIFJvdywgQ29sLCBTcGFjZSxcbn0gZnJvbSAnYW50ZCc7XG5pbXBvcnQgSWNlRm9ybSBmcm9tICcuL0ljZUZvcm0nO1xuXG5jb25zdCB7IFN0ZXAgfSA9IFN0ZXBzO1xuXG5jbGFzcyBJY2VTdGVwRm9ybSBleHRlbmRzIEljZUZvcm0ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMub25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZTtcblxuICAgIGxldCBzdGVwcyA9IHRoaXMucHJvcHMuZmllbGRzLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgIC4uLml0ZW0sXG4gICAgICByZWY6IFJlYWN0LmNyZWF0ZVJlZigpLFxuICAgIH0pKTtcblxuICAgIHN0ZXBzID0gc3RlcHMubWFwKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCB7IHJlZiwgZmllbGRzIH0gPSBpdGVtO1xuICAgICAgaXRlbS5jb250ZW50ID0gKFxuICAgICAgICA8SWNlRm9ybVxuICAgICAgICAgIHJlZj17cmVmfVxuICAgICAgICAgIGFkYXB0ZXI9e3Byb3BzLmFkYXB0ZXJ9XG4gICAgICAgICAgZmllbGRzPXtmaWVsZHN9XG4gICAgICAgICAgdHdvQ29sdW1uTGF5b3V0PXtwcm9wcy50d29Db2x1bW5MYXlvdXR9XG4gICAgICAgICAgd2lkdGg9e3Byb3BzLndpZHRofVxuICAgICAgICAgIGxheW91dD17cHJvcHMubGF5b3V0IHx8ICdob3Jpem9udGFsJ31cbiAgICAgICAgLz5cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICBzdGVwcyxcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICBtb3ZlVG9TdGVwKGN1cnJlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudCB9KTtcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgaWYgKHRoaXMudmFsaWRhdGVGaWVsZHMoZmFsc2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2hvd0Vycm9yKGZhbHNlKTtcbiAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5zdGF0ZS5jdXJyZW50ICsgMTtcbiAgICB0aGlzLnNldFN0YXRlKHsgY3VycmVudCB9KTtcbiAgfVxuXG4gIHByZXYoKSB7XG4gICAgY29uc3QgY3VycmVudCA9IHRoaXMuc3RhdGUuY3VycmVudCAtIDE7XG4gICAgaWYgKGN1cnJlbnQgPCAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoeyBjdXJyZW50IH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgYWRhcHRlciB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGN1cnJlbnQsIHN0ZXBzIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8U3RlcHMgY3VycmVudD17Y3VycmVudH0+XG4gICAgICAgICAge3N0ZXBzLm1hcCgoaXRlbSwgaW5kZXgpID0+IChcbiAgICAgICAgICAgIDxTdGVwIGtleT17aXRlbS50aXRsZX0gdGl0bGU9e2l0ZW0udGl0bGV9IG9uQ2xpY2s9eygpID0+IHRoaXMubW92ZVRvU3RlcChpbmRleCl9IC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvU3RlcHM+XG4gICAgICAgIDxEaXZpZGVyIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3RlcHMtY29udGVudFwiPlxuICAgICAgICAgIHtzdGVwcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6IGluZGV4ID09PSBjdXJyZW50ID8gJ2Jsb2NrJyA6ICdub25lJyB9fT5cbiAgICAgICAgICAgICAge2l0ZW0uY29udGVudH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICkpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPERpdmlkZXIgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdGVwcy1hY3Rpb25cIj5cbiAgICAgICAgICA8Um93IGd1dHRlcj17MTZ9PlxuICAgICAgICAgICAgPENvbCBjbGFzc05hbWU9XCJndXR0ZXItcm93XCIgc3Bhbj17MTJ9IHN0eWxlPXt7fX0+XG4gICAgICAgICAgICAgIDxTcGFjZT5cbiAgICAgICAgICAgICAgICB7Y3VycmVudCA8IHN0ZXBzLmxlbmd0aCAtIDEgJiYgKFxuICAgICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIG9uQ2xpY2s9eygpID0+IHRoaXMubmV4dCgpfT5cbiAgICAgICAgICAgICAgICAgICAge2FkYXB0ZXIuZ3QoJ05leHQnKX1cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAge2N1cnJlbnQgPiAwICYmIChcbiAgICAgICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5wcmV2KCl9PlxuICAgICAgICAgICAgICAgICAgICB7YWRhcHRlci5ndCgnUHJldmlvdXMnKX1cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvU3BhY2U+XG4gICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICAgIDxDb2wgY2xhc3NOYW1lPVwiZ3V0dGVyLXJvd1wiIHNwYW49ezEyfSBzdHlsZT17eyB0ZXh0QWxpZ246ICdyaWdodCcgfX0+XG4gICAgICAgICAgICAgIDxTcGFjZT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMuY2xvc2VNb2RhbCgpfT5cbiAgICAgICAgICAgICAgICAgIHthZGFwdGVyLmd0KCdDYW5jZWwnKX1cbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICA8QnV0dG9uIHR5cGU9XCJwcmltYXJ5XCIgbG9hZGluZz17dGhpcy5zdGF0ZS5sb2FkaW5nfSBvbkNsaWNrPXsoKSA9PiB0aGlzLnNhdmVEYXRhKCl9PlxuICAgICAgICAgICAgICAgICAge2FkYXB0ZXIuZ3QoJ1NhdmUnKX1cbiAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgPC9TcGFjZT5cbiAgICAgICAgICAgIDwvQ29sPlxuICAgICAgICAgIDwvUm93PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cblxuICBhc3luYyBzYXZlRGF0YSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy52YWxpZGF0ZUZpZWxkcyh0cnVlKTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgdGhpcy5zYXZlKGRhdGEsICgpID0+IHRoaXMucHJvcHMuY2xvc2VNb2RhbCgpKTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuICB9XG5cbiAgc2F2ZShwYXJhbXMsIHN1Y2Nlc3MpIHtcbiAgICBjb25zdCB7IGFkYXB0ZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgYWRhcHRlci5hZGQocGFyYW1zLCBbXSwgKCkgPT4gYWRhcHRlci5nZXQoW10pLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2V0RmllbGRzKCk7XG4gICAgICB0aGlzLnNob3dFcnJvcihmYWxzZSk7XG4gICAgICBzdWNjZXNzKCk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVGaWVsZHMoZGF0YSkge1xuICAgIHRoaXMuc3RhdGUuc3RlcHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgY29uc3Qgc3ViRGF0YSA9IHt9O1xuICAgICAgaXRlbS5maWVsZHMuZm9yRWFjaCgoW2tleV0pID0+IHtcbiAgICAgICAgc3ViRGF0YVtrZXldID0gZGF0YVtrZXldO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnVwZGF0ZUZpZWxkc1N1YkZvcm0oaXRlbS5yZWYsIGl0ZW0uZmllbGRzLCBzdWJEYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUZpZWxkc1N1YkZvcm0ocmVmLCBmaWVsZHMsIGRhdGEpIHtcbiAgICBkYXRhID0gdGhpcy5kYXRhVG9Gb3JtRmllbGRzKGRhdGEsIGZpZWxkcyk7XG4gICAgcmVmLmN1cnJlbnQucmVzZXRGaWVsZHMoKTtcbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZWYuY3VycmVudC5zZXRGaWVsZHNWYWx1ZShkYXRhKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB2YWxpZGF0ZUZpZWxkcyhhbGwpIHtcbiAgICBjb25zdCB7IGFkYXB0ZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgc3RlcHMgPSBhbGwgPyB0aGlzLnN0YXRlLnN0ZXBzIDogdGhpcy5zdGF0ZS5zdGVwcy5zbGljZSgwLCB0aGlzLnN0YXRlLmN1cnJlbnQgKyAxKTtcbiAgICBjb25zdCBwcm9taXNlTGlzdCA9IHN0ZXBzLm1hcChcbiAgICAgIChpdGVtKSA9PiBpdGVtLnJlZi5jdXJyZW50LnZhbGlkYXRlRmllbGRzKClcbiAgICAgICAgLnRoZW4oKHZhbHVlcykgPT4ge1xuICAgICAgICAgIGlmICghaXRlbS5yZWYuY3VycmVudC5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IGZhbHNlKSxcbiAgICApO1xuXG4gICAgY29uc3QgYWxsRGF0YSA9IGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VMaXN0KTtcbiAgICBjb25zdCBmYWlsZWRJbmRleCA9IGFsbERhdGEuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtID09PSBmYWxzZSk7XG5cbiAgICBpZiAoZmFpbGVkSW5kZXggPj0gMCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJlbnQ6IGZhaWxlZEluZGV4IH0pO1xuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmFsbERhdGEpO1xuICAgIHZhbHVlcyA9IGFkYXB0ZXIuZm9yY2VJbmplY3RWYWx1ZXNCZWZvcmVTYXZlKHZhbHVlcyk7XG4gICAgY29uc3QgbXNnID0gYWRhcHRlci5kb0N1c3RvbVZhbGlkYXRpb24odmFsdWVzKTtcblxuICAgIGlmIChtc2cgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuc2hvd0Vycm9yKG1zZyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGFkYXB0ZXIuY3NyZlJlcXVpcmVkKSB7XG4gICAgICB2YWx1ZXMuY3NyZiA9ICQoYCMke2FkYXB0ZXIuZ2V0VGFibGVOYW1lKCl9Rm9ybWApLmRhdGEoJ2NzcmYnKTtcbiAgICB9XG5cbiAgICBjb25zdCBpZCA9IChhZGFwdGVyLmN1cnJlbnRFbGVtZW50ICE9IG51bGwpID8gYWRhcHRlci5jdXJyZW50RWxlbWVudC5pZCA6IG51bGw7XG4gICAgaWYgKGlkICE9IG51bGwgJiYgaWQgIT09ICcnKSB7XG4gICAgICB2YWx1ZXMuaWQgPSBpZDtcbiAgICB9XG5cbiAgICBjb25zdCBmaWVsZHMgPSBbXS5jb25jYXQuYXBwbHkoW10sIHRoaXMuc3RhdGUuc3RlcHMubWFwKChpdGVtKSA9PiBpdGVtLmZpZWxkcykpO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybUZpZWxkc1RvRGF0YSh2YWx1ZXMsIGZpZWxkcyk7XG4gIH1cblxuICBnZXRTdWJGb3JtRGF0YShyZWYsIGZpZWxkcywgcGFyYW1zKSB7XG4gICAgY29uc3QgeyBhZGFwdGVyIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCB2YWx1ZXMgPSBwYXJhbXM7XG4gICAgdmFsdWVzID0gYWRhcHRlci5mb3JjZUluamVjdFZhbHVlc0JlZm9yZVNhdmUodmFsdWVzKTtcbiAgICBjb25zdCBtc2cgPSBhZGFwdGVyLmRvQ3VzdG9tVmFsaWRhdGlvbih2YWx1ZXMpO1xuICAgIGlmIChtc2cgIT09IG51bGwpIHtcbiAgICAgIHJlZi5jdXJyZW50LnNob3dFcnJvcihtc2cpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChhZGFwdGVyLmNzcmZSZXF1aXJlZCkge1xuICAgICAgdmFsdWVzLmNzcmYgPSAkKGAjJHthZGFwdGVyLmdldFRhYmxlTmFtZSgpfUZvcm1gKS5kYXRhKCdjc3JmJyk7XG4gICAgfVxuXG4gICAgY29uc3QgaWQgPSAoYWRhcHRlci5jdXJyZW50RWxlbWVudCAhPSBudWxsKSA/IGFkYXB0ZXIuY3VycmVudEVsZW1lbnQuaWQgOiBudWxsO1xuICAgIGlmIChpZCAhPSBudWxsICYmIGlkICE9PSAnJykge1xuICAgICAgdmFsdWVzLmlkID0gaWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZm9ybUZpZWxkc1RvRGF0YSh2YWx1ZXMsIGZpZWxkcyk7XG4gIH1cblxuICBzaG93RXJyb3IoZXJyb3JNc2cpIHtcbiAgICB0aGlzLnN0YXRlLnN0ZXBzLmZvckVhY2goKGl0ZW0pID0+IGl0ZW0ucmVmLmN1cnJlbnQuc2hvd0Vycm9yKGVycm9yTXNnKSk7XG4gIH1cblxuICByZXNldEZpZWxkcygpIHtcbiAgICB0aGlzLnN0YXRlLnN0ZXBzLmZvckVhY2goKGl0ZW0pID0+IGl0ZW0ucmVmLmN1cnJlbnQucmVzZXRGaWVsZHMoKSk7XG4gIH1cblxuICBoaWRlRXJyb3IoKSB7XG4gICAgdGhpcy5zdGF0ZS5zdGVwcy5mb3JFYWNoKChpdGVtKSA9PiBpdGVtLnJlZi5jdXJyZW50LmhpZGVFcnJvcigpKTtcbiAgfVxuXG4gIGlzUmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuc3RlcHMucmVkdWNlKChhY2MsIGl0ZW0pID0+IGFjYyAmJiBpdGVtLnJlZi5jdXJyZW50ICE9IG51bGwsIHRydWUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEljZVN0ZXBGb3JtO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE1vZGFsIH0gZnJvbSAnYW50ZCc7XG5pbXBvcnQgSWNlRm9ybU1vZGFsIGZyb20gJy4vSWNlRm9ybU1vZGFsJztcbmltcG9ydCBJY2VTdGVwRm9ybSBmcm9tICcuL0ljZVN0ZXBGb3JtJztcblxuY2xhc3MgSWNlU3RlcEZvcm1Nb2RhbCBleHRlbmRzIEljZUZvcm1Nb2RhbCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMud2lkdGggPSA4NTA7XG4gIH1cblxuICBzaG93KGRhdGEpIHtcbiAgICB0aGlzLnByb3BzLmFkYXB0ZXIuYmVmb3JlUmVuZGVyRmllbGRIb29rID0gdGhpcy5wcm9wcy5hZGFwdGVyLmJlZm9yZVJlbmRlckZpZWxkID8gdGhpcy5wcm9wcy5hZGFwdGVyLmJlZm9yZVJlbmRlckZpZWxkKGRhdGEpIDogKGZpZWxkTmFtZSwgZmllbGQpID0+IGZpZWxkO1xuICAgIGlmICghZGF0YSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IHRydWUgfSk7XG4gICAgICBpZiAodGhpcy5pY2VGb3JtUmVmZXJlbmNlLmN1cnJlbnQpIHtcbiAgICAgICAgdGhpcy5pY2VGb3JtUmVmZXJlbmNlLmN1cnJlbnQucmVzZXRGaWVsZHMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IHRydWUgfSk7XG4gICAgICBpZiAodGhpcy5pY2VGb3JtUmVmZXJlbmNlLmN1cnJlbnQgJiYgdGhpcy5pY2VGb3JtUmVmZXJlbmNlLmN1cnJlbnQuaXNSZWFkeSgpKSB7XG4gICAgICAgIHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50Lm1vdmVUb1N0ZXAoMCk7XG4gICAgICAgIHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50LnVwZGF0ZUZpZWxkcyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud2FpdEZvckl0KFxuICAgICAgICAgICgpID0+IHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50ICYmIHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50LmlzUmVhZHkoKSxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmljZUZvcm1SZWZlcmVuY2UuY3VycmVudC51cGRhdGVGaWVsZHMoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLmljZUZvcm1SZWZlcmVuY2UuY3VycmVudC5tb3ZlVG9TdGVwKDApO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgMTAwMCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoaWRlKCkge1xuICAgIHRoaXMuaWNlRm9ybVJlZmVyZW5jZS5jdXJyZW50Lm1vdmVUb1N0ZXAoMCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHZpc2libGU6IGZhbHNlIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZmllbGRzLCBhZGFwdGVyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgd2lkdGgsIHR3b0NvbHVtbkxheW91dCwgbGF5b3V0IH0gPSB0aGlzLnByb3BzLmFkYXB0ZXIuZ2V0Rm9ybU9wdGlvbnMoKTtcbiAgICByZXR1cm4gKFxuICAgICAgPE1vZGFsXG4gICAgICAgIHZpc2libGU9e3RoaXMuc3RhdGUudmlzaWJsZX1cbiAgICAgICAgdGl0bGU9e3RoaXMucHJvcHMuYWRhcHRlci5ndCh0aGlzLnByb3BzLnRpdGxlIHx8IGFkYXB0ZXIub2JqZWN0VHlwZU5hbWUpfVxuICAgICAgICBtYXNrQ2xvc2FibGU9e2ZhbHNlfVxuICAgICAgICB3aWR0aD17d2lkdGggfHwgdGhpcy53aWR0aH1cbiAgICAgICAgZm9vdGVyPXtbXX1cbiAgICAgICAgb25DYW5jZWw9eygpID0+IHtcbiAgICAgICAgICB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPEljZVN0ZXBGb3JtXG4gICAgICAgICAgcmVmPXt0aGlzLmljZUZvcm1SZWZlcmVuY2V9XG4gICAgICAgICAgYWRhcHRlcj17YWRhcHRlcn1cbiAgICAgICAgICBmaWVsZHM9e2ZpZWxkc31cbiAgICAgICAgICBjbG9zZU1vZGFsPXsoKSA9PiB7IHRoaXMuY2xvc2VNb2RhbCgpOyB9fVxuICAgICAgICAgIHR3b0NvbHVtbkxheW91dD17dHdvQ29sdW1uTGF5b3V0IHx8IGZhbHNlfVxuICAgICAgICAgIGxheW91dD17bGF5b3V0fVxuICAgICAgICAvPlxuICAgICAgPC9Nb2RhbD5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEljZVN0ZXBGb3JtTW9kYWw7XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7Q29sLCBGb3JtLCBJbnB1dCwgUm93LCBUYWJsZSwgU3BhY2UsIEJ1dHRvbiwgVGFnLCBtZXNzYWdlfSBmcm9tICdhbnRkJztcbmltcG9ydCB7XG4gIEZpbHRlck91dGxpbmVkLFxuICBQbHVzQ2lyY2xlT3V0bGluZWQsXG59IGZyb20gJ0BhbnQtZGVzaWduL2ljb25zJztcbmNvbnN0IHsgU2VhcmNoIH0gPSBJbnB1dDtcblxuY2xhc3MgSWNlVGFibGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0ZSA9IHtcbiAgICBkYXRhOiBbXSxcbiAgICBwYWdpbmF0aW9uOiB7fSxcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGZldGNoQ29uZmlnOiBmYWxzZSxcbiAgICAvL2ZpbHRlcjogbnVsbCxcbiAgICBzaG93TG9hZGluZzogdHJ1ZSxcbiAgICBjdXJyZW50RWxlbWVudDogbnVsbCxcbiAgICBmZXRjaENvbXBsZXRlZDogZmFsc2UsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCBmZXRjaENvbmZpZyA9IHtcbiAgICAgIHBhZ2U6IDEsXG4gICAgfTtcbiAgICBtZXNzYWdlLmNvbmZpZyh7XG4gICAgICB0b3A6IDQwLFxuICAgIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZmV0Y2hDb25maWcsXG4gICAgICAvL2ZpbHRlcjogdGhpcy5wcm9wcy5hZGFwdGVyLmZpbHRlcixcbiAgICAgIHBhZ2luYXRpb246IHsgJ3BhZ2VTaXplJzogdGhpcy5wcm9wcy5yZWFkZXIucGFnZVNpemUgfVxuICAgIH0pO1xuICAgIC8vdGhpcy5mZXRjaChmZXRjaENvbmZpZyk7XG4gIH1cblxuICBoYW5kbGVUYWJsZUNoYW5nZSA9IChwYWdpbmF0aW9uLCBmaWx0ZXJzLCBzb3J0ZXIpID0+IHtcbiAgICBjb25zdCBwYWdlciA9IHsgLi4udGhpcy5zdGF0ZS5wYWdpbmF0aW9uIH07XG4gICAgY29uc3QgeyBzZWFyY2ggfSA9IHRoaXMuc3RhdGU7XG4gICAgcGFnZXIuY3VycmVudCA9IHBhZ2luYXRpb24uY3VycmVudDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHBhZ2luYXRpb246IHBhZ2VyLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZmV0Y2hDb25maWcgPSB7XG4gICAgICBsaW1pdDogcGFnaW5hdGlvbi5wYWdlU2l6ZSxcbiAgICAgIHBhZ2U6IHBhZ2luYXRpb24uY3VycmVudCxcbiAgICAgIHNvcnRGaWVsZDogc29ydGVyLmZpZWxkLFxuICAgICAgc29ydE9yZGVyOiBzb3J0ZXIub3JkZXIsXG4gICAgICBmaWx0ZXJzOiBKU09OLnN0cmluZ2lmeShmaWx0ZXJzKSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgIH07XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGZldGNoQ29uZmlnXG4gICAgfSk7XG5cbiAgICB0aGlzLmZldGNoKGZldGNoQ29uZmlnKTtcbiAgfTtcblxuICByZWxvYWQgPSAoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hDb25maWcgPSB0aGlzLnN0YXRlLmZldGNoQ29uZmlnO1xuICAgIGlmIChmZXRjaENvbmZpZykge1xuICAgICAgdGhpcy5mZXRjaChmZXRjaENvbmZpZylcbiAgICB9XG4gIH07XG5cbiAgc2VhcmNoID0gKHZhbHVlKSA9PiB7XG4gICAgY29uc3QgcGFnZXIgPSB7IC4uLnRoaXMuc3RhdGUucGFnaW5hdGlvbiB9O1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWFyY2g6IHZhbHVlLCByZWZyZXNoU2VhcmNoOiB0cnVlIH0pO1xuICAgIGNvbnN0IGZldGNoQ29uZmlnID0gdGhpcy5zdGF0ZS5mZXRjaENvbmZpZztcbiAgICBjb25zb2xlLmxvZyhmZXRjaENvbmZpZyk7XG4gICAgaWYgKGZldGNoQ29uZmlnKSB7XG4gICAgICBmZXRjaENvbmZpZy5wYWdlID0gMTtcbiAgICAgIC8vcGFnZXIuY3VycmVudCA9IDE7XG4gICAgICBmZXRjaENvbmZpZy5zZWFyY2ggPSB2YWx1ZTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmZXRjaENvbmZpZyxcbiAgICAgICAgcGFnaW5hdGlvbjogcGFnZXIsXG4gICAgICB9LCAoKSA9PiB0aGlzLmZldGNoKGZldGNoQ29uZmlnKSk7XG4gICAgfVxuICB9XG5cbiAgYWRkTmV3ID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMuYWRhcHRlci5yZW5kZXJGb3JtKCk7XG4gIH1cblxuICBzaG93RmlsdGVycyA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLmFkYXB0ZXIuc2hvd0ZpbHRlcnMoKTtcbiAgfVxuXG4gIHNldEZpbHRlckRhdGEgPSAoZmlsdGVyKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBmaWx0ZXIsXG4gICAgfSk7XG4gIH1cblxuICBzZXRDdXJyZW50RWxlbWVudCA9IChjdXJyZW50RWxlbWVudCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe2N1cnJlbnRFbGVtZW50fSk7XG4gIH1cblxuICBzZXRMb2FkaW5nKHZhbHVlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IHZhbHVlIH0pO1xuICB9XG5cbiAgZmV0Y2ggPSAocGFyYW1zID0ge30pID0+IHtcbiAgICAvL3RoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0aGlzLnN0YXRlLnNob3dMb2FkaW5nIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0cnVlIH0pO1xuICAgIC8vY29uc3QgaGlkZU1lc3NhZ2UgPSBtZXNzYWdlLmxvYWRpbmcoeyBjb250ZW50OiAnTG9hZGluZyBMYXRlc3QgRGF0YSAuLi4nLCBrZXk6ICdsb2FkaW5nVGFibGUnLCBkdXJhdGlvbjogMX0pO1xuICAgIGNvbnN0IHBhZ2luYXRpb24gPSB7IC4uLnRoaXMuc3RhdGUucGFnaW5hdGlvbiB9O1xuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRhcHRlci5sb2NhbFN0b3JhZ2VFbmFibGVkKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjYWNoZWRSZXNwb25zZSA9IHRoaXMucHJvcHMucmVhZGVyLmdldENhY2hlZFJlc3BvbnNlKHBhcmFtcyk7XG4gICAgICAgIGlmIChjYWNoZWRSZXNwb25zZS5pdGVtcykge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBkYXRhOiBjYWNoZWRSZXNwb25zZS5pdGVtcyxcbiAgICAgICAgICAgIHBhZ2luYXRpb24sXG4gICAgICAgICAgICBzaG93TG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5yZWFkZXIuY2xlYXJDYWNoZWRSZXNwb25zZShwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRoaXMucHJvcHMucmVhZGVyLmNsZWFyQ2FjaGVkUmVzcG9uc2UocGFyYW1zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLnJlYWRlci5nZXQocGFyYW1zKVxuICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIC8vIFJlYWQgdG90YWwgY291bnQgZnJvbSBzZXJ2ZXJcbiAgICAgICAgLy8gcGFnaW5hdGlvbi50b3RhbCA9IGRhdGEudG90YWxDb3VudDtcbiAgICAgICAgcGFnaW5hdGlvbi50b3RhbCA9IGRhdGEudG90YWw7XG4gICAgICAgIC8vaGlkZU1lc3NhZ2UoKTtcbiAgICAgICAgLy8gc2V0VGltZW91dChcbiAgICAgICAgLy8gICAoKSA9PiBtZXNzYWdlLnN1Y2Nlc3MoeyBjb250ZW50OiAnTG9hZGluZyBDb21wbGV0ZWQhJywga2V5OiAnbG9hZGluZ1N1Y2Nlc3MnLCBkdXJhdGlvbjogMSB9KSxcbiAgICAgICAgLy8gICA2MDBcbiAgICAgICAgLy8gKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgZGF0YTogZGF0YS5pdGVtcyxcbiAgICAgICAgICBwYWdpbmF0aW9uLFxuICAgICAgICAgIHNob3dMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBmZXRjaENvbXBsZXRlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfTtcblxuICBnZXRDaGlsZHJlbldpdGhQcm9wcyhlbGVtZW50KSB7XG4gICAgY29uc3QgY2hpbGRyZW5XaXRoUHJvcHMgPSBSZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbiwgY2hpbGQgPT4ge1xuICAgICAgLy8gY2hlY2tpbmcgaXNWYWxpZEVsZW1lbnQgaXMgdGhlIHNhZmUgd2F5IGFuZCBhdm9pZHMgYSB0eXBlc2NyaXB0IGVycm9yIHRvb1xuICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIGFkYXB0ZXI6IHRoaXMucHJvcHMuYWRhcHRlcixcbiAgICAgICAgbG9hZGluZzogdGhpcy5zdGF0ZS5sb2FkaW5nLFxuICAgICAgfTtcbiAgICAgIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgcHJvcHMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuV2l0aFByb3BzO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Um93IGRpcmVjdGlvbj1cInZlcnRpY2FsXCIgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fT5cbiAgICAgICAgeyghdGhpcy5zdGF0ZS5jdXJyZW50RWxlbWVudCB8fCB0aGlzLnByb3BzLmFkYXB0ZXIua2VlcFRhYmxlVmlzaWJsZVdoaWxlU2hvd2luZ0N1c3RvbVZpZXcoKSkgJiZcbiAgICAgICAgPENvbCBzcGFuPXsyNH0+XG4gICAgICAgICAgPFJvdyBndXR0ZXI9ezI0fT5cbiAgICAgICAgICAgIDxDb2wgc3Bhbj17MTh9PlxuICAgICAgICAgICAgICA8U3BhY2U+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYWRhcHRlci5oYXNBY2Nlc3MoJ3NhdmUnKSAmJiB0aGlzLnByb3BzLmFkYXB0ZXIuZ2V0U2hvd0FkZE5ldygpICYmXG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0eXBlPVwicHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMuYWRkTmV3fT48UGx1c0NpcmNsZU91dGxpbmVkLz4gQWRkIE5ldzwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5hZGFwdGVyLmhhc0N1c3RvbVRvcEJ1dHRvbnMoKSAmJlxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuYWRhcHRlci5nZXRDdXN0b21Ub3BCdXR0b25zKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYWRhcHRlci5nZXRGaWx0ZXJzKCkgJiZcbiAgICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuc2hvd0ZpbHRlcnN9PjxGaWx0ZXJPdXRsaW5lZC8+IEZpbHRlcnM8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5mZXRjaENvbXBsZXRlZFxuICAgICAgICAgICAgICAgICYmIHRoaXMucHJvcHMuYWRhcHRlci5nZXRGaWx0ZXJzKClcbiAgICAgICAgICAgICAgICAmJiB0aGlzLnByb3BzLmFkYXB0ZXIuZmlsdGVyICE9IG51bGxcbiAgICAgICAgICAgICAgICAmJiB0aGlzLnByb3BzLmFkYXB0ZXIuZmlsdGVyICE9PSBbXVxuICAgICAgICAgICAgICAgICYmIHRoaXMucHJvcHMuYWRhcHRlci5maWx0ZXIgIT09ICcnXG4gICAgICAgICAgICAgICAgJiYgdGhpcy5wcm9wcy5hZGFwdGVyLmdldEZpbHRlclN0cmluZyh0aGlzLnByb3BzLmFkYXB0ZXIuZmlsdGVyKSAhPT0gJycgJiZcbiAgICAgICAgICAgICAgICA8VGFnIGNsb3NhYmxlXG4gICAgICAgICAgICAgICAgICAgICBzdHlsZT17eydsaW5lSGVpZ2h0JzogJzMwcHgnfX1cbiAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVwiYmx1ZVwiXG4gICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXsoKSA9PiB0aGlzLnByb3BzLmFkYXB0ZXIucmVzZXRGaWx0ZXJzKCl9XG4gICAgICAgICAgICAgICAgICAgICB2aXNpYmxlPXt0aGlzLnByb3BzLmFkYXB0ZXIuZmlsdGVyICE9IG51bGwgJiYgdGhpcy5wcm9wcy5hZGFwdGVyLmZpbHRlciAhPT0gW10gJiYgdGhpcy5wcm9wcy5hZGFwdGVyLmZpbHRlciAhPT0gJyd9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYWRhcHRlci5nZXRGaWx0ZXJTdHJpbmcodGhpcy5wcm9wcy5hZGFwdGVyLmZpbHRlcil9XG4gICAgICAgICAgICAgICAgPC9UYWc+XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIDwvU3BhY2U+XG4gICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICAgIDxDb2wgc3Bhbj17Nn0+XG4gICAgICAgICAgICAgIDxGb3JtXG4gICAgICAgICAgICAgICAgcmVmPXsoZm9ybVJlZikgPT4gdGhpcy5mb3JtID0gZm9ybVJlZn1cbiAgICAgICAgICAgICAgICBuYW1lPVwiYWR2YW5jZWRfc2VhcmNoXCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhbnQtYWR2YW5jZWQtc2VhcmNoLWZvcm1cIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEZvcm0uSXRlbSBuYW1lPVwic2VhcmNoVGVybVwiIGxhYmVsPVwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVzPXtbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxTZWFyY2hcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJpbnB1dCBzZWFyY2ggdGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIGVudGVyQnV0dG9uPVwiU2VhcmNoXCJcbiAgICAgICAgICAgICAgICAgICAgb25TZWFyY2g9e3ZhbHVlID0+IHRoaXMuc2VhcmNoKHZhbHVlKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Gb3JtLkl0ZW0+XG4gICAgICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgICAgIDwvQ29sPlxuICAgICAgICAgIDwvUm93PlxuICAgICAgICAgIDxSb3cgZ3V0dGVyPXsyNH0+XG4gICAgICAgICAgICA8Q29sIHNwYW49ezI0fT5cbiAgICAgICAgICAgICAgPFRhYmxlXG4gICAgICAgICAgICAgICAgLy8gYm9yZGVyZWRcbiAgICAgICAgICAgICAgICByb3dDbGFzc05hbWU9eyhyZWNvcmQsIGluZGV4KSA9PiBpbmRleCAlIDIgPT09IDAgPyAndGFibGUtcm93LWxpZ2h0JyA6ICd0YWJsZS1yb3ctZGFyayd9XG4gICAgICAgICAgICAgICAgY29sdW1ucz17dGhpcy5wcm9wcy5jb2x1bW5zfVxuICAgICAgICAgICAgICAgIHJvd0tleT17cmVjb3JkID0+IHJlY29yZC5pZH1cbiAgICAgICAgICAgICAgICBkYXRhU291cmNlPXt0aGlzLnN0YXRlLmRhdGF9XG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbj17dGhpcy5zdGF0ZS5wYWdpbmF0aW9ufVxuICAgICAgICAgICAgICAgIGxvYWRpbmc9e3RoaXMuc3RhdGUubG9hZGluZ31cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVUYWJsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICByZWFkZXI9e3RoaXMucHJvcHMuZGF0YVBpcGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0NvbD5cbiAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgPC9Db2w+XG4gICAgICAgIH1cbiAgICAgICAge3RoaXMuc3RhdGUuY3VycmVudEVsZW1lbnQgJiZcbiAgICAgICAgICB0aGlzLmdldENoaWxkcmVuV2l0aFByb3BzKHRoaXMuc3RhdGUuY3VycmVudEVsZW1lbnQpXG4gICAgICAgIH1cbiAgICAgIDwvUm93PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSWNlVGFibGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge0J1dHRvbiwgbWVzc2FnZSwgU3BhY2UsIFVwbG9hZCwgVGFnfSBmcm9tIFwiYW50ZFwiO1xuaW1wb3J0IHsgVXBsb2FkT3V0bGluZWQsIERvd25sb2FkT3V0bGluZWQsIERlbGV0ZU91dGxpbmVkIH0gZnJvbSAnQGFudC1kZXNpZ24vaWNvbnMnO1xuXG5jbGFzcyBJY2VVcGxvYWQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0ZSA9IHtcbiAgICBmaWxlTGlzdDogW10sXG4gICAgdXBsb2FkZWQ6IGZhbHNlLFxuICB9O1xuXG4gIF9pc01vdW50ZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLm9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2U7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIG1lc3NhZ2UuY29uZmlnKHtcbiAgICAgIHRvcDogNTUsXG4gICAgICBkdXJhdGlvbjogMixcbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaGFuZGxlRGVsZXRlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBmaWxlTGlzdDogW10sIHZhbHVlOiBudWxsLCB1cGxvYWRlZDogZmFsc2V9KTtcbiAgICB0aGlzLm9uQ2hhbmdlKG51bGwpO1xuICB9O1xuXG4gIGhhbmRsZVZpZXcgPSAoKSA9PiB7XG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgaWYgKHRoaXMuc3RhdGUudmFsdWUgIT0gbnVsbCAmJiB0aGlzLnN0YXRlLnZhbHVlICE9PSAnJykge1xuICAgICAgY3VycmVudFZhbHVlID0gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA9PSBudWxsIHx8IGN1cnJlbnRWYWx1ZSA9PT0gJycpIHtcbiAgICAgIG1lc3NhZ2UuZXJyb3IoJ0ZpbGUgbm90IGZvdW5kJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgeyBhZGFwdGVyIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgYWRhcHRlci5nZXRGaWxlKGN1cnJlbnRWYWx1ZSlcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB7XG4gICAgICAgICAga2V5OiBkYXRhLnVpZCxcbiAgICAgICAgICB1aWQ6IGRhdGEudWlkLFxuICAgICAgICAgIG5hbWU6IGRhdGEubmFtZSxcbiAgICAgICAgICBzdGF0dXM6IGRhdGEuc3RhdHVzLFxuICAgICAgICAgIHVybDogZGF0YS5maWxlbmFtZSxcbiAgICAgICAgfTtcbiAgICAgICAgd2luZG93Lm9wZW4oZmlsZS51cmwpO1xuICAgICAgfSkuY2F0Y2goKGUpID0+IHtcblxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZUNoYW5nZSA9IGluZm8gPT4ge1xuICAgIGxldCBmaWxlTGlzdCA9IFsuLi5pbmZvLmZpbGVMaXN0XTtcblxuICAgIGlmIChmaWxlTGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogbnVsbCB9KTtcbiAgICAgIHRoaXMub25DaGFuZ2UobnVsbCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtmaWxlTGlzdDogW119KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3VwbG9hZGVkOiBmYWxzZX0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZpbGVMaXN0ID0gZmlsZUxpc3Quc2xpY2UoLTEpO1xuXG4gICAgaWYgKGZpbGVMaXN0WzBdLnJlc3BvbnNlICYmIGZpbGVMaXN0WzBdLnJlc3BvbnNlLnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiBudWxsIH0pO1xuICAgICAgdGhpcy5vbkNoYW5nZShudWxsKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2ZpbGVMaXN0OiBbXX0pO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7dXBsb2FkZWQ6IGZhbHNlfSk7XG4gICAgICBtZXNzYWdlLmVycm9yKGBFcnJvcjogJHtmaWxlTGlzdFswXS5yZXNwb25zZS5tZXNzYWdlfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZpbGVMaXN0ID0gZmlsZUxpc3QubWFwKGZpbGUgPT4ge1xuICAgICAgaWYgKGZpbGUucmVzcG9uc2UpIHtcbiAgICAgICAgLy8gQ29tcG9uZW50IHdpbGwgc2hvdyBmaWxlLnVybCBhcyBsaW5rXG4gICAgICAgIGZpbGUubmFtZSA9IGZpbGUucmVzcG9uc2UubmFtZTtcbiAgICAgICAgZmlsZS51cmwgPSBmaWxlLnJlc3BvbnNlLnVybDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmaWxlO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7ZmlsZUxpc3R9KTtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IHRoaXMuZ2V0RmlsZU5hbWUoZmlsZUxpc3QpLCB1cGxvYWRlZDogdHJ1ZSB9KTtcbiAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuZ2V0RmlsZU5hbWUoZmlsZUxpc3QpKTtcbiAgfTtcblxuICBnZXRGaWxlTmFtZShmaWxlTGlzdCkge1xuICAgIGxldCBmaWxlID0gbnVsbDtcbiAgICBpZiAoZmlsZUxpc3QpIHtcbiAgICAgIGZpbGUgPSBmaWxlTGlzdFswXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZSA/IGZpbGUubmFtZSA6ICcnO1xuICB9XG5cbiAgZ2VuZXJhdGVSYW5kb20obGVuZ3RoKSB7XG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgY2hhcnMgPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonO1xuICAgIGxldCByZXN1bHQgPSAnJztcbiAgICBmb3IgKGxldCBpID0gbGVuZ3RoOyBpID4gMDsgLS1pKSByZXN1bHQgKz0gY2hhcnNbTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogKGNoYXJzLmxlbmd0aCAtIDEpKV07XG4gICAgcmV0dXJuIHJlc3VsdCArIGQuZ2V0VGltZSgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCBmaWxlTmFtZSA9IHRoaXMuZ2VuZXJhdGVSYW5kb20oMTQpO1xuXG4gICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICBhY3Rpb246IGAke3dpbmRvdy5DTElFTlRfQkFTRV9VUkx9ZmlsZXVwbG9hZC1uZXcucGhwP3VzZXI9JHt0aGlzLnByb3BzLnVzZXJ9JmZpbGVfZ3JvdXA9JHt0aGlzLnByb3BzLmZpbGVHcm91cH0mZmlsZV9uYW1lPSR7ZmlsZU5hbWV9YCxcbiAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgIG9uUmVtb3ZlOiB0aGlzLmhhbmRsZURlbGV0ZSxcbiAgICAgIG11bHRpcGxlOiBmYWxzZSxcbiAgICAgIGxpc3RUeXBlOiAncGljdHVyZScsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U3BhY2UgZGlyZWN0aW9uPXsndmVydGljYWwnfT5cbiAgICAgICAgeyF0aGlzLnByb3BzLnJlYWRPbmx5ICYmXG4gICAgICAgIDxTcGFjZT5cbiAgICAgICAgICA8VXBsb2FkIHsuLi5wcm9wc30gZmlsZUxpc3Q9e3RoaXMuc3RhdGUuZmlsZUxpc3R9PlxuICAgICAgICAgICAgPFRhZyBjb2xvcj1cImJsdWVcIiBzdHlsZT17eyBjdXJzb3I6ICdwb2ludGVyJyB9fT5cbiAgICAgICAgICAgICAgPFVwbG9hZE91dGxpbmVkIC8+XG4gICAgICAgICAgICAgIHsnICd9XG4gICAgICAgICAgICAgIFVwbG9hZFxuICAgICAgICAgICAgPC9UYWc+XG4gICAgICAgICAgPC9VcGxvYWQ+XG4gICAgICAgIDwvU3BhY2U+XG4gICAgICAgIH1cbiAgICAgICAgPFNwYWNlPlxuICAgICAgICAgIHsgKCgodGhpcy5wcm9wcy52YWx1ZSAhPSBudWxsICYmIHRoaXMucHJvcHMudmFsdWUgIT09ICcnKSB8fCAodGhpcy5zdGF0ZS52YWx1ZSAhPSBudWxsICYmIHRoaXMuc3RhdGUudmFsdWUgIT09ICcnKSkgJiYgIXRoaXMuc3RhdGUudXBsb2FkZWQpICYmXG4gICAgICAgICAgPEJ1dHRvbiB0eXBlPVwibGlua1wiIGh0bWxUeXBlPVwiYnV0dG9uXCIgb25DbGljaz17dGhpcy5oYW5kbGVWaWV3fT5cbiAgICAgICAgICAgIDxEb3dubG9hZE91dGxpbmVkLz4gVmlldyBGaWxlXG4gICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgfVxuICAgICAgICAgIHsgKCgodGhpcy5wcm9wcy52YWx1ZSAhPSBudWxsICYmIHRoaXMucHJvcHMudmFsdWUgIT09ICcnKSB8fCAodGhpcy5zdGF0ZS52YWx1ZSAhPSBudWxsICYmIHRoaXMuc3RhdGUudmFsdWUgIT09ICcnKSkgJiYgIXRoaXMuc3RhdGUudXBsb2FkZWQgJiYgIXRoaXMucHJvcHMucmVhZE9ubHkpICYmXG4gICAgICAgICAgPEJ1dHRvbiB0eXBlPVwibGlua1wiIGh0bWxUeXBlPVwiYnV0dG9uXCIgZGFuZ2VyIG9uQ2xpY2s9e3RoaXMuaGFuZGxlRGVsZXRlfT5cbiAgICAgICAgICAgIDxEZWxldGVPdXRsaW5lZC8+IERlbGV0ZVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIH1cbiAgICAgICAgPC9TcGFjZT5cbiAgICAgIDwvU3BhY2U+XG5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEljZVVwbG9hZDtcbiIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuQ2hlY2tsaXN0PXQoKTplLkNoZWNrbGlzdD10KCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIG89dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsbiksby5sPSEwLG8uZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1uKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgbyBpbiBlKW4uZChyLG8sZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxvKSk7cmV0dXJuIHJ9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsXCJhXCIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9XCIvXCIsbihuLnM9Nil9KFtmdW5jdGlvbihlLHQsbil7dmFyIHI9bigxKTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1tlLmkscixcIlwiXV0pO3ZhciBvPXtobXI6ITAsdHJhbnNmb3JtOnZvaWQgMCxpbnNlcnRJbnRvOnZvaWQgMH07bigzKShyLG8pO3IubG9jYWxzJiYoZS5leHBvcnRzPXIubG9jYWxzKX0sZnVuY3Rpb24oZSx0LG4peyhlLmV4cG9ydHM9bigyKSghMSkpLnB1c2goW2UuaSxcIi5jZHgtY2hlY2tsaXN0X19pdGVtIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gICAgfVxcblxcbiAgICAgICAgLmNkeC1jaGVja2xpc3RfX2l0ZW0tdGV4dCB7XFxuICAgICAgICAgICAgb3V0bGluZTogbm9uZTtcXG4gICAgICAgICAgICBmbGV4LWdyb3c6IDE7XFxuICAgICAgICAgICAgcGFkZGluZzogNXB4IDA7XFxuICAgICAgICB9XFxuXFxuICAgICAgICAuY2R4LWNoZWNrbGlzdF9faXRlbS1jaGVja2JveCB7XFxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgICAgIGZsZXgtc2hyaW5rOiAwO1xcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgICAgICB3aWR0aDogMjBweDtcXG4gICAgICAgICAgICBoZWlnaHQ6IDIwcHg7XFxuICAgICAgICAgICAgbWFyZ2luOiAgNXB4O1xcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogN3B4O1xcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjZDBkMGQwO1xcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XFxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgLmNkeC1jaGVja2xpc3RfX2l0ZW0tY2hlY2tib3g6aG92ZXIge1xcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICNiNWI1YjU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgLmNkeC1jaGVja2xpc3RfX2l0ZW0tY2hlY2tib3g6OmFmdGVyIHtcXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgICAgICAgICAgICB0b3A6IDZweDtcXG4gICAgICAgICAgICAgICAgbGVmdDogNXB4O1xcbiAgICAgICAgICAgICAgICB3aWR0aDogOXB4O1xcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDRweDtcXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgI2ZmZjtcXG4gICAgICAgICAgICAgICAgYm9yZGVyLXRvcDogbm9uZTtcXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiBub25lO1xcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgICAgICAgICAgICAgY29udGVudDogJyc7XFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZyk7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgLmNkeC1jaGVja2xpc3RfX2l0ZW0tLWNoZWNrZWQgLmNkeC1jaGVja2xpc3RfX2l0ZW0tY2hlY2tib3gge1xcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjMzg4YWU1O1xcbiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICMzODhhZTU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgLmNkeC1jaGVja2xpc3RfX2l0ZW0tLWNoZWNrZWQgLmNkeC1jaGVja2xpc3RfX2l0ZW0tY2hlY2tib3g6aG92ZXIge1xcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIzMwN2NkMTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgLmNkeC1jaGVja2xpc3RfX2l0ZW0tLWNoZWNrZWQgLmNkeC1jaGVja2xpc3RfX2l0ZW0tY2hlY2tib3g6OmFmdGVyIHtcXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDE7XFxuICAgICAgICAgICAgICAgIH1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiB0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKChmdW5jdGlvbih0KXt2YXIgbj1mdW5jdGlvbihlLHQpe3ZhciBuPWVbMV18fFwiXCIscj1lWzNdO2lmKCFyKXJldHVybiBuO2lmKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBvPShjPXIsXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoYykpKSkrXCIgKi9cIiksaT1yLnNvdXJjZXMubWFwKChmdW5jdGlvbihlKXtyZXR1cm5cIi8qIyBzb3VyY2VVUkw9XCIrci5zb3VyY2VSb290K2UrXCIgKi9cIn0pKTtyZXR1cm5bbl0uY29uY2F0KGkpLmNvbmNhdChbb10pLmpvaW4oXCJcXG5cIil9dmFyIGM7cmV0dXJuW25dLmpvaW4oXCJcXG5cIil9KHQsZSk7cmV0dXJuIHRbMl0/XCJAbWVkaWEgXCIrdFsyXStcIntcIituK1wifVwiOm59KSkuam9pbihcIlwiKX0sdC5pPWZ1bmN0aW9uKGUsbil7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPVtbbnVsbCxlLFwiXCJdXSk7Zm9yKHZhciByPXt9LG89MDtvPHRoaXMubGVuZ3RoO28rKyl7dmFyIGk9dGhpc1tvXVswXTtcIm51bWJlclwiPT10eXBlb2YgaSYmKHJbaV09ITApfWZvcihvPTA7bzxlLmxlbmd0aDtvKyspe3ZhciBjPWVbb107XCJudW1iZXJcIj09dHlwZW9mIGNbMF0mJnJbY1swXV18fChuJiYhY1syXT9jWzJdPW46biYmKGNbMl09XCIoXCIrY1syXStcIikgYW5kIChcIituK1wiKVwiKSx0LnB1c2goYykpfX0sdH19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcixvLGk9e30sYz0ocj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYn0sZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09byYmKG89ci5hcHBseSh0aGlzLGFyZ3VtZW50cykpLG99KSxzPWZ1bmN0aW9uKGUpe3JldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpfSxhPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O3JldHVybiBmdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKXJldHVybiBlKCk7aWYodm9pZCAwPT09dFtlXSl7dmFyIG49cy5jYWxsKHRoaXMsZSk7aWYod2luZG93LkhUTUxJRnJhbWVFbGVtZW50JiZuIGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KXRyeXtuPW4uY29udGVudERvY3VtZW50LmhlYWR9Y2F0Y2goZSl7bj1udWxsfXRbZV09bn1yZXR1cm4gdFtlXX19KCksbD1udWxsLHU9MCxmPVtdLGQ9big0KTtmdW5jdGlvbiBwKGUsdCl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl0sbz1pW3IuaWRdO2lmKG8pe28ucmVmcysrO2Zvcih2YXIgYz0wO2M8by5wYXJ0cy5sZW5ndGg7YysrKW8ucGFydHNbY10oci5wYXJ0c1tjXSk7Zm9yKDtjPHIucGFydHMubGVuZ3RoO2MrKylvLnBhcnRzLnB1c2goZyhyLnBhcnRzW2NdLHQpKX1lbHNle3ZhciBzPVtdO2ZvcihjPTA7YzxyLnBhcnRzLmxlbmd0aDtjKyspcy5wdXNoKGcoci5wYXJ0c1tjXSx0KSk7aVtyLmlkXT17aWQ6ci5pZCxyZWZzOjEscGFydHM6c319fX1mdW5jdGlvbiBoKGUsdCl7Zm9yKHZhciBuPVtdLHI9e30sbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgaT1lW29dLGM9dC5iYXNlP2lbMF0rdC5iYXNlOmlbMF0scz17Y3NzOmlbMV0sbWVkaWE6aVsyXSxzb3VyY2VNYXA6aVszXX07cltjXT9yW2NdLnBhcnRzLnB1c2gocyk6bi5wdXNoKHJbY109e2lkOmMscGFydHM6W3NdfSl9cmV0dXJuIG59ZnVuY3Rpb24gbShlLHQpe3ZhciBuPWEoZS5pbnNlcnRJbnRvKTtpZighbil0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTt2YXIgcj1mW2YubGVuZ3RoLTFdO2lmKFwidG9wXCI9PT1lLmluc2VydEF0KXI/ci5uZXh0U2libGluZz9uLmluc2VydEJlZm9yZSh0LHIubmV4dFNpYmxpbmcpOm4uYXBwZW5kQ2hpbGQodCk6bi5pbnNlcnRCZWZvcmUodCxuLmZpcnN0Q2hpbGQpLGYucHVzaCh0KTtlbHNlIGlmKFwiYm90dG9tXCI9PT1lLmluc2VydEF0KW4uYXBwZW5kQ2hpbGQodCk7ZWxzZXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5pbnNlcnRBdHx8IWUuaW5zZXJ0QXQuYmVmb3JlKXRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO3ZhciBvPWEoZS5pbnNlcnRJbnRvK1wiIFwiK2UuaW5zZXJ0QXQuYmVmb3JlKTtuLmluc2VydEJlZm9yZSh0LG8pfX1mdW5jdGlvbiB2KGUpe2lmKG51bGw9PT1lLnBhcmVudE5vZGUpcmV0dXJuITE7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpO3ZhciB0PWYuaW5kZXhPZihlKTt0Pj0wJiZmLnNwbGljZSh0LDEpfWZ1bmN0aW9uIGIoZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3JldHVybiB2b2lkIDA9PT1lLmF0dHJzLnR5cGUmJihlLmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiKSx5KHQsZS5hdHRycyksbShlLHQpLHR9ZnVuY3Rpb24geShlLHQpe09iamVjdC5rZXlzKHQpLmZvckVhY2goKGZ1bmN0aW9uKG4pe2Uuc2V0QXR0cmlidXRlKG4sdFtuXSl9KSl9ZnVuY3Rpb24gZyhlLHQpe3ZhciBuLHIsbyxpO2lmKHQudHJhbnNmb3JtJiZlLmNzcyl7aWYoIShpPXQudHJhbnNmb3JtKGUuY3NzKSkpcmV0dXJuIGZ1bmN0aW9uKCl7fTtlLmNzcz1pfWlmKHQuc2luZ2xldG9uKXt2YXIgYz11Kys7bj1sfHwobD1iKHQpKSxyPVMuYmluZChudWxsLG4sYywhMSksbz1TLmJpbmQobnVsbCxuLGMsITApfWVsc2UgZS5zb3VyY2VNYXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgQmxvYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYT8obj1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtyZXR1cm4gdm9pZCAwPT09ZS5hdHRycy50eXBlJiYoZS5hdHRycy50eXBlPVwidGV4dC9jc3NcIiksZS5hdHRycy5yZWw9XCJzdHlsZXNoZWV0XCIseSh0LGUuYXR0cnMpLG0oZSx0KSx0fSh0KSxyPUMuYmluZChudWxsLG4sdCksbz1mdW5jdGlvbigpe3Yobiksbi5ocmVmJiZVUkwucmV2b2tlT2JqZWN0VVJMKG4uaHJlZil9KToobj1iKHQpLHI9dy5iaW5kKG51bGwsbiksbz1mdW5jdGlvbigpe3Yobil9KTtyZXR1cm4gcihlKSxmdW5jdGlvbih0KXtpZih0KXtpZih0LmNzcz09PWUuY3NzJiZ0Lm1lZGlhPT09ZS5tZWRpYSYmdC5zb3VyY2VNYXA9PT1lLnNvdXJjZU1hcClyZXR1cm47cihlPXQpfWVsc2UgbygpfX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgREVCVUcmJkRFQlVHJiZcIm9iamVjdFwiIT10eXBlb2YgZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpOyh0PXR8fHt9KS5hdHRycz1cIm9iamVjdFwiPT10eXBlb2YgdC5hdHRycz90LmF0dHJzOnt9LHQuc2luZ2xldG9ufHxcImJvb2xlYW5cIj09dHlwZW9mIHQuc2luZ2xldG9ufHwodC5zaW5nbGV0b249YygpKSx0Lmluc2VydEludG98fCh0Lmluc2VydEludG89XCJoZWFkXCIpLHQuaW5zZXJ0QXR8fCh0Lmluc2VydEF0PVwiYm90dG9tXCIpO3ZhciBuPWgoZSx0KTtyZXR1cm4gcChuLHQpLGZ1bmN0aW9uKGUpe2Zvcih2YXIgcj1bXSxvPTA7bzxuLmxlbmd0aDtvKyspe3ZhciBjPW5bb107KHM9aVtjLmlkXSkucmVmcy0tLHIucHVzaChzKX1lJiZwKGgoZSx0KSx0KTtmb3Iobz0wO288ci5sZW5ndGg7bysrKXt2YXIgcztpZigwPT09KHM9cltvXSkucmVmcyl7Zm9yKHZhciBhPTA7YTxzLnBhcnRzLmxlbmd0aDthKyspcy5wYXJ0c1thXSgpO2RlbGV0ZSBpW3MuaWRdfX19fTt2YXIgeCxrPSh4PVtdLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHhbZV09dCx4LmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpfSk7ZnVuY3Rpb24gUyhlLHQsbixyKXt2YXIgbz1uP1wiXCI6ci5jc3M7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PWsodCxvKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG8pLGM9ZS5jaGlsZE5vZGVzO2NbdF0mJmUucmVtb3ZlQ2hpbGQoY1t0XSksYy5sZW5ndGg/ZS5pbnNlcnRCZWZvcmUoaSxjW3RdKTplLmFwcGVuZENoaWxkKGkpfX1mdW5jdGlvbiB3KGUsdCl7dmFyIG49dC5jc3Mscj10Lm1lZGlhO2lmKHImJmUuc2V0QXR0cmlidXRlKFwibWVkaWFcIixyKSxlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9bjtlbHNle2Zvcig7ZS5maXJzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKSl9fWZ1bmN0aW9uIEMoZSx0LG4pe3ZhciByPW4uY3NzLG89bi5zb3VyY2VNYXAsaT12b2lkIDA9PT10LmNvbnZlcnRUb0Fic29sdXRlVXJscyYmbzsodC5jb252ZXJ0VG9BYnNvbHV0ZVVybHN8fGkpJiYocj1kKHIpKSxvJiYocis9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KG8pKSkpK1wiICovXCIpO3ZhciBjPW5ldyBCbG9iKFtyXSx7dHlwZTpcInRleHQvY3NzXCJ9KSxzPWUuaHJlZjtlLmhyZWY9VVJMLmNyZWF0ZU9iamVjdFVSTChjKSxzJiZVUkwucmV2b2tlT2JqZWN0VVJMKHMpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmxvY2F0aW9uO2lmKCF0KXRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO2lmKCFlfHxcInN0cmluZ1wiIT10eXBlb2YgZSlyZXR1cm4gZTt2YXIgbj10LnByb3RvY29sK1wiLy9cIit0Lmhvc3Qscj1uK3QucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLFwiL1wiKTtyZXR1cm4gZS5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwoZnVuY3Rpb24oZSx0KXt2YXIgbyxpPXQudHJpbSgpLnJlcGxhY2UoL15cIiguKilcIiQvLChmdW5jdGlvbihlLHQpe3JldHVybiB0fSkpLnJlcGxhY2UoL14nKC4qKSckLywoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdH0pKTtyZXR1cm4vXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KGkpP2U6KG89MD09PWkuaW5kZXhPZihcIi8vXCIpP2k6MD09PWkuaW5kZXhPZihcIi9cIik/bitpOnIraS5yZXBsYWNlKC9eXFwuXFwvLyxcIlwiKSxcInVybChcIitKU09OLnN0cmluZ2lmeShvKStcIilcIil9KSl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7RWxlbWVudC5wcm90b3R5cGUubWF0Y2hlc3x8KEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXM9RWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3J8fEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciksRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdHx8KEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3Q9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZighZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHQpKXJldHVybiBudWxsO2Rve2lmKHQubWF0Y2hlcyhlKSlyZXR1cm4gdDt0PXQucGFyZW50RWxlbWVudHx8dC5wYXJlbnROb2RlfXdoaWxlKG51bGwhPT10JiYxPT09dC5ub2RlVHlwZSk7cmV0dXJuIG51bGx9KX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGZ1bmN0aW9uKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpcmV0dXJuIG8oZSl9KGUpfHxmdW5jdGlvbihlKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGUpKXJldHVybiBBcnJheS5mcm9tKGUpfShlKXx8ZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm47aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIG8oZSx0KTt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7XCJPYmplY3RcIj09PW4mJmUuY29uc3RydWN0b3ImJihuPWUuY29uc3RydWN0b3IubmFtZSk7aWYoXCJNYXBcIj09PW58fFwiU2V0XCI9PT1uKXJldHVybiBBcnJheS5mcm9tKGUpO2lmKFwiQXJndW1lbnRzXCI9PT1ufHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSlyZXR1cm4gbyhlLHQpfShlKXx8ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX0oKX1mdW5jdGlvbiBvKGUsdCl7KG51bGw9PXR8fHQ+ZS5sZW5ndGgpJiYodD1lLmxlbmd0aCk7Zm9yKHZhciBuPTAscj1uZXcgQXJyYXkodCk7bjx0O24rKylyW25dPWVbbl07cmV0dXJuIHJ9ZnVuY3Rpb24gaSgpe3ZhciBlPWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQsdD13aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKSxuPXQuY2xvbmVSYW5nZSgpO3JldHVybiBuLnNlbGVjdE5vZGVDb250ZW50cyhlKSxuLnNldFN0YXJ0KHQuZW5kQ29udGFpbmVyLHQuZW5kT2Zmc2V0KSxuLmV4dHJhY3RDb250ZW50cygpfWZ1bmN0aW9uIGMoZSl7dmFyIHQsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbCxvPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fSxpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZSk7QXJyYXkuaXNBcnJheShuKT8odD1pLmNsYXNzTGlzdCkuYWRkLmFwcGx5KHQscihuKSk6biYmaS5jbGFzc0xpc3QuYWRkKG4pO2Zvcih2YXIgYyBpbiBvKWlbY109b1tjXTtyZXR1cm4gaX1mdW5jdGlvbiBzKGUpe3JldHVybiBlLmlubmVySFRNTC5yZXBsYWNlKFwiPGJyPlwiLFwiIFwiKS50cmltKCl9ZnVuY3Rpb24gYShlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnZvaWQgMCxyPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCksbz13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7ci5zZWxlY3ROb2RlQ29udGVudHMoZSksdm9pZCAwIT09biYmKHIuc2V0U3RhcnQoZSxuKSxyLnNldEVuZChlLG4pKSxyLmNvbGxhcHNlKHQpLG8ucmVtb3ZlQWxsUmFuZ2VzKCksby5hZGRSYW5nZShyKX1uLnIodCksbi5kKHQsXCJkZWZhdWx0XCIsKGZ1bmN0aW9uKCl7cmV0dXJuIGZ9KSk7bigwKSxuKDUpO2Z1bmN0aW9uIGwoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIHUoZSx0LG4pe3JldHVybiB0JiZsKGUucHJvdG90eXBlLHQpLG4mJmwoZSxuKSxlfXZhciBmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt2YXIgbj10LmRhdGEscj0odC5jb25maWcsdC5hcGkpLG89dC5yZWFkT25seTshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuX2VsZW1lbnRzPXt3cmFwcGVyOm51bGwsaXRlbXM6W119LHRoaXMucmVhZE9ubHk9byx0aGlzLmFwaT1yLHRoaXMuZGF0YT1ufHx7fX1yZXR1cm4gdShlLG51bGwsW3trZXk6XCJpc1JlYWRPbmx5U3VwcG9ydGVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuITB9fSx7a2V5OlwiZW5hYmxlTGluZUJyZWFrc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiEwfX0se2tleTpcInRvb2xib3hcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57aWNvbjonPHN2ZyB3aWR0aD1cIjE1XCIgaGVpZ2h0PVwiMTVcIiB2aWV3Qm94PVwiMCAwIDE1IDE1XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNNy41IDE1YTcuNSA3LjUgMCAxIDEgMC0xNSA3LjUgNy41IDAgMCAxIDAgMTV6bTAtMi4zOTRhNS4xMDYgNS4xMDYgMCAxIDAgMC0xMC4yMTIgNS4xMDYgNS4xMDYgMCAwIDAgMCAxMC4yMTJ6bS0uNjc1LTQuNjY1bDIuNzA4LTIuNzA4IDEuMzkyIDEuMzkyLTIuNzA4IDIuNzA4LTEuMzkyIDEuMzkxLTIuOTcxLTIuOTcxTDUuMjQ1IDYuMzZsMS41OCAxLjU4elwiLz48L3N2Zz4nLHRpdGxlOlwiQ2hlY2tsaXN0XCJ9fX0se2tleTpcImNvbnZlcnNpb25Db25maWdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57ZXhwb3J0OmZ1bmN0aW9uKGUpe3JldHVybiBlLml0ZW1zLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUudGV4dH0pKS5qb2luKFwiLiBcIil9LGltcG9ydDpmdW5jdGlvbihlKXtyZXR1cm57aXRlbXM6W3t0ZXh0OmUsY2hlY2tlZDohMX1dfX19fX1dKSx1KGUsW3trZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuX2VsZW1lbnRzLndyYXBwZXI9YyhcImRpdlwiLFt0aGlzLkNTUy5iYXNlQmxvY2ssdGhpcy5DU1Mud3JhcHBlcl0pLHRoaXMuZGF0YS5pdGVtc3x8KHRoaXMuZGF0YS5pdGVtcz1be3RleHQ6XCJcIixjaGVja2VkOiExfV0pLHRoaXMuZGF0YS5pdGVtcy5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj1lLmNyZWF0ZUNoZWNrbGlzdEl0ZW0odCk7ZS5fZWxlbWVudHMud3JhcHBlci5hcHBlbmRDaGlsZChuKX0pKSx0aGlzLnJlYWRPbmx5fHwodGhpcy5fZWxlbWVudHMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLChmdW5jdGlvbih0KXtzd2l0Y2godC5rZXlDb2RlKXtjYXNlIDEzOmUuZW50ZXJQcmVzc2VkKHQpO2JyZWFrO2Nhc2UgODplLmJhY2tzcGFjZSh0KX19KSwhMSksdGhpcy5fZWxlbWVudHMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoZnVuY3Rpb24odCl7ZS50b2dnbGVDaGVja2JveCh0KX0pKSksdGhpcy5fZWxlbWVudHMud3JhcHBlcn19LHtrZXk6XCJzYXZlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5pdGVtcy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybnt0ZXh0OnMoZS5nZXRJdGVtSW5wdXQodCkpLGNoZWNrZWQ6dC5jbGFzc0xpc3QuY29udGFpbnMoZS5DU1MuaXRlbUNoZWNrZWQpfX0pKTtyZXR1cm57aXRlbXM6dD10LmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIDAhPT1lLnRleHQudHJpbSgpLmxlbmd0aH0pKX19fSx7a2V5OlwidmFsaWRhdGVcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4hIWUuaXRlbXMubGVuZ3RofX0se2tleTpcInRvZ2dsZUNoZWNrYm94XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQuY2xvc2VzdChcIi5cIi5jb25jYXQodGhpcy5DU1MuaXRlbSkpO3QucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQodGhpcy5DU1MuY2hlY2tib3gpKS5jb250YWlucyhlLnRhcmdldCkmJnQuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLkNTUy5pdGVtQ2hlY2tlZCl9fSx7a2V5OlwiY3JlYXRlQ2hlY2tsaXN0SXRlbVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHQ9YyhcImRpdlwiLHRoaXMuQ1NTLml0ZW0pLG49YyhcInNwYW5cIix0aGlzLkNTUy5jaGVja2JveCkscj1jKFwiZGl2XCIsdGhpcy5DU1MudGV4dEZpZWxkLHtpbm5lckhUTUw6ZS50ZXh0P2UudGV4dDpcIlwiLGNvbnRlbnRFZGl0YWJsZTohdGhpcy5yZWFkT25seX0pO3JldHVybiBlLmNoZWNrZWQmJnQuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5pdGVtQ2hlY2tlZCksdC5hcHBlbmRDaGlsZChuKSx0LmFwcGVuZENoaWxkKHIpLHR9fSx7a2V5OlwiZW50ZXJQcmVzc2VkXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpO3ZhciB0PXRoaXMuaXRlbXMsbj1kb2N1bWVudC5hY3RpdmVFbGVtZW50LmNsb3Nlc3QoXCIuXCIuY29uY2F0KHRoaXMuQ1NTLml0ZW0pKTtpZih0LmluZGV4T2Yobik9PT10Lmxlbmd0aC0xJiYwPT09cyh0aGlzLmdldEl0ZW1JbnB1dChuKSkubGVuZ3RoKXt2YXIgcj10aGlzLmFwaS5ibG9ja3MuZ2V0Q3VycmVudEJsb2NrSW5kZXgoKTtyZXR1cm4gbi5yZW1vdmUoKSx0aGlzLmFwaS5ibG9ja3MuaW5zZXJ0KCksdm9pZCB0aGlzLmFwaS5jYXJldC5zZXRUb0Jsb2NrKHIrMSl9dmFyIG8sYyxsPWkoKSx1PShvPWwsKGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuYXBwZW5kQ2hpbGQobyksYy5pbm5lckhUTUwpLGY9dGhpcy5jcmVhdGVDaGVja2xpc3RJdGVtKHt0ZXh0OnUsY2hlY2tlZDohMX0pO3RoaXMuX2VsZW1lbnRzLndyYXBwZXIuaW5zZXJ0QmVmb3JlKGYsbi5uZXh0U2libGluZyksYSh0aGlzLmdldEl0ZW1JbnB1dChmKSwhMCl9fSx7a2V5OlwiYmFja3NwYWNlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQuY2xvc2VzdChcIi5cIi5jb25jYXQodGhpcy5DU1MuaXRlbSkpLG49dGhpcy5pdGVtcy5pbmRleE9mKHQpLHI9dGhpcy5pdGVtc1tuLTFdO2lmKHImJjA9PT13aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZm9jdXNPZmZzZXQpe2UucHJldmVudERlZmF1bHQoKTt2YXIgbz1pKCksYz10aGlzLmdldEl0ZW1JbnB1dChyKSxzPWMuY2hpbGROb2Rlcy5sZW5ndGg7Yy5hcHBlbmRDaGlsZChvKSxhKGMsdm9pZCAwLHMpLHQucmVtb3ZlKCl9fX0se2tleTpcImdldEl0ZW1JbnB1dFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KHRoaXMuQ1NTLnRleHRGaWVsZCkpfX0se2tleTpcIkNTU1wiLGdldDpmdW5jdGlvbigpe3JldHVybntiYXNlQmxvY2s6dGhpcy5hcGkuc3R5bGVzLmJsb2NrLHdyYXBwZXI6XCJjZHgtY2hlY2tsaXN0XCIsaXRlbTpcImNkeC1jaGVja2xpc3RfX2l0ZW1cIixpdGVtQ2hlY2tlZDpcImNkeC1jaGVja2xpc3RfX2l0ZW0tLWNoZWNrZWRcIixjaGVja2JveDpcImNkeC1jaGVja2xpc3RfX2l0ZW0tY2hlY2tib3hcIix0ZXh0RmllbGQ6XCJjZHgtY2hlY2tsaXN0X19pdGVtLXRleHRcIn19fSx7a2V5OlwiaXRlbXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9lbGVtZW50cy53cmFwcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIuY29uY2F0KHRoaXMuQ1NTLml0ZW0pKSl9fV0pLGV9KCl9XSkuZGVmYXVsdH0pKTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLkNvZGVUb29sPXQoKTplLkNvZGVUb29sPXQoKX0od2luZG93LChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKHIpe2lmKHRbcl0pcmV0dXJuIHRbcl0uZXhwb3J0czt2YXIgbz10W3JdPXtpOnIsbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtyXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyxuKSxvLmw9ITAsby5leHBvcnRzfXJldHVybiBuLm09ZSxuLmM9dCxuLmQ9ZnVuY3Rpb24oZSx0LHIpe24ubyhlLHQpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGdldDpyfSl9LG4ucj1mdW5jdGlvbihlKXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxuLnQ9ZnVuY3Rpb24oZSx0KXtpZigxJnQmJihlPW4oZSkpLDgmdClyZXR1cm4gZTtpZig0JnQmJlwib2JqZWN0XCI9PXR5cGVvZiBlJiZlJiZlLl9fZXNNb2R1bGUpcmV0dXJuIGU7dmFyIHI9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIociksT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6ZX0pLDImdCYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpZm9yKHZhciBvIGluIGUpbi5kKHIsbyxmdW5jdGlvbih0KXtyZXR1cm4gZVt0XX0uYmluZChudWxsLG8pKTtyZXR1cm4gcn0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCxcImFcIix0KSx0fSxuLm89ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCl9LG4ucD1cIi9cIixuKG4ucz00KX0oW2Z1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDEpLG89bigyKTtcInN0cmluZ1wiPT10eXBlb2Yobz1vLl9fZXNNb2R1bGU/by5kZWZhdWx0Om8pJiYobz1bW2UuaSxvLFwiXCJdXSk7dmFyIGE9e2luc2VydDpcImhlYWRcIixzaW5nbGV0b246ITF9O3IobyxhKTtlLmV4cG9ydHM9by5sb2NhbHN8fHt9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIHIsbz1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1yJiYocj1Cb29sZWFuKHdpbmRvdyYmZG9jdW1lbnQmJmRvY3VtZW50LmFsbCYmIXdpbmRvdy5hdG9iKSkscn0sYT1mdW5jdGlvbigpe3ZhciBlPXt9O3JldHVybiBmdW5jdGlvbih0KXtpZih2b2lkIDA9PT1lW3RdKXt2YXIgbj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpO2lmKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCYmbiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCl0cnl7bj1uLmNvbnRlbnREb2N1bWVudC5oZWFkfWNhdGNoKGUpe249bnVsbH1lW3RdPW59cmV0dXJuIGVbdF19fSgpLGk9W107ZnVuY3Rpb24gYyhlKXtmb3IodmFyIHQ9LTEsbj0wO248aS5sZW5ndGg7bisrKWlmKGlbbl0uaWRlbnRpZmllcj09PWUpe3Q9bjticmVha31yZXR1cm4gdH1mdW5jdGlvbiB1KGUsdCl7Zm9yKHZhciBuPXt9LHI9W10sbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgYT1lW29dLHU9dC5iYXNlP2FbMF0rdC5iYXNlOmFbMF0scz1uW3VdfHwwLGw9XCJcIi5jb25jYXQodSxcIiBcIikuY29uY2F0KHMpO25bdV09cysxO3ZhciBkPWMobCksZj17Y3NzOmFbMV0sbWVkaWE6YVsyXSxzb3VyY2VNYXA6YVszXX07LTEhPT1kPyhpW2RdLnJlZmVyZW5jZXMrKyxpW2RdLnVwZGF0ZXIoZikpOmkucHVzaCh7aWRlbnRpZmllcjpsLHVwZGF0ZXI6YihmLHQpLHJlZmVyZW5jZXM6MX0pLHIucHVzaChsKX1yZXR1cm4gcn1mdW5jdGlvbiBzKGUpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxyPWUuYXR0cmlidXRlc3x8e307aWYodm9pZCAwPT09ci5ub25jZSl7dmFyIG89bi5uYztvJiYoci5ub25jZT1vKX1pZihPYmplY3Qua2V5cyhyKS5mb3JFYWNoKChmdW5jdGlvbihlKXt0LnNldEF0dHJpYnV0ZShlLHJbZV0pfSkpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuaW5zZXJ0KWUuaW5zZXJ0KHQpO2Vsc2V7dmFyIGk9YShlLmluc2VydHx8XCJoZWFkXCIpO2lmKCFpKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7aS5hcHBlbmRDaGlsZCh0KX1yZXR1cm4gdH12YXIgbCxkPShsPVtdLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGxbZV09dCxsLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpfSk7ZnVuY3Rpb24gZihlLHQsbixyKXt2YXIgbz1uP1wiXCI6ci5tZWRpYT9cIkBtZWRpYSBcIi5jb25jYXQoci5tZWRpYSxcIiB7XCIpLmNvbmNhdChyLmNzcyxcIn1cIik6ci5jc3M7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PWQodCxvKTtlbHNle3ZhciBhPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG8pLGk9ZS5jaGlsZE5vZGVzO2lbdF0mJmUucmVtb3ZlQ2hpbGQoaVt0XSksaS5sZW5ndGg/ZS5pbnNlcnRCZWZvcmUoYSxpW3RdKTplLmFwcGVuZENoaWxkKGEpfX1mdW5jdGlvbiBwKGUsdCxuKXt2YXIgcj1uLmNzcyxvPW4ubWVkaWEsYT1uLnNvdXJjZU1hcDtpZihvP2Uuc2V0QXR0cmlidXRlKFwibWVkaWFcIixvKTplLnJlbW92ZUF0dHJpYnV0ZShcIm1lZGlhXCIpLGEmJmJ0b2EmJihyKz1cIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGEpKSkpLFwiICovXCIpKSxlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9cjtlbHNle2Zvcig7ZS5maXJzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShyKSl9fXZhciBoPW51bGwsdj0wO2Z1bmN0aW9uIGIoZSx0KXt2YXIgbixyLG87aWYodC5zaW5nbGV0b24pe3ZhciBhPXYrKztuPWh8fChoPXModCkpLHI9Zi5iaW5kKG51bGwsbixhLCExKSxvPWYuYmluZChudWxsLG4sYSwhMCl9ZWxzZSBuPXModCkscj1wLmJpbmQobnVsbCxuLHQpLG89ZnVuY3Rpb24oKXshZnVuY3Rpb24oZSl7aWYobnVsbD09PWUucGFyZW50Tm9kZSlyZXR1cm4hMTtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9KG4pfTtyZXR1cm4gcihlKSxmdW5jdGlvbih0KXtpZih0KXtpZih0LmNzcz09PWUuY3NzJiZ0Lm1lZGlhPT09ZS5tZWRpYSYmdC5zb3VyY2VNYXA9PT1lLnNvdXJjZU1hcClyZXR1cm47cihlPXQpfWVsc2UgbygpfX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXsodD10fHx7fSkuc2luZ2xldG9ufHxcImJvb2xlYW5cIj09dHlwZW9mIHQuc2luZ2xldG9ufHwodC5zaW5nbGV0b249bygpKTt2YXIgbj11KGU9ZXx8W10sdCk7cmV0dXJuIGZ1bmN0aW9uKGUpe2lmKGU9ZXx8W10sXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKXtmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIG89YyhuW3JdKTtpW29dLnJlZmVyZW5jZXMtLX1mb3IodmFyIGE9dShlLHQpLHM9MDtzPG4ubGVuZ3RoO3MrKyl7dmFyIGw9YyhuW3NdKTswPT09aVtsXS5yZWZlcmVuY2VzJiYoaVtsXS51cGRhdGVyKCksaS5zcGxpY2UobCwxKSl9bj1hfX19fSxmdW5jdGlvbihlLHQsbil7KHQ9bigzKSghMSkpLnB1c2goW2UuaSxcIi5jZS1jb2RlX190ZXh0YXJlYSB7XFxuICAgIG1pbi1oZWlnaHQ6IDIwMHB4O1xcbiAgICBmb250LWZhbWlseTogTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIENvdXJpZXIgTmV3LCBtb25vc3BhY2U7XFxuICAgIGNvbG9yOiAjNDEzMTRlO1xcbiAgICBsaW5lLWhlaWdodDogMS42ZW07XFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgYmFja2dyb3VuZDogI2Y4ZjdmYTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2YxZjFmNDtcXG4gICAgYm94LXNoYWRvdzogbm9uZTtcXG4gICAgd2hpdGUtc3BhY2U6IHByZTtcXG4gICAgd29yZC13cmFwOiBub3JtYWw7XFxuICAgIG92ZXJmbG93LXg6IGF1dG87XFxuICAgIHJlc2l6ZTogdmVydGljYWw7XFxufVxcblwiLFwiXCJdKSxlLmV4cG9ydHM9dH0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1bXTtyZXR1cm4gdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcCgoZnVuY3Rpb24odCl7dmFyIG49ZnVuY3Rpb24oZSx0KXt2YXIgbj1lWzFdfHxcIlwiLHI9ZVszXTtpZighcilyZXR1cm4gbjtpZih0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hKXt2YXIgbz0oaT1yLGM9YnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoaSkpKSksdT1cInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChjKSxcIi8qIyBcIi5jb25jYXQodSxcIiAqL1wiKSksYT1yLnNvdXJjZXMubWFwKChmdW5jdGlvbihlKXtyZXR1cm5cIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KHIuc291cmNlUm9vdHx8XCJcIikuY29uY2F0KGUsXCIgKi9cIil9KSk7cmV0dXJuW25dLmNvbmNhdChhKS5jb25jYXQoW29dKS5qb2luKFwiXFxuXCIpfXZhciBpLGMsdTtyZXR1cm5bbl0uam9pbihcIlxcblwiKX0odCxlKTtyZXR1cm4gdFsyXT9cIkBtZWRpYSBcIi5jb25jYXQodFsyXSxcIiB7XCIpLmNvbmNhdChuLFwifVwiKTpufSkpLmpvaW4oXCJcIil9LHQuaT1mdW5jdGlvbihlLG4scil7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPVtbbnVsbCxlLFwiXCJdXSk7dmFyIG89e307aWYocilmb3IodmFyIGE9MDthPHRoaXMubGVuZ3RoO2ErKyl7dmFyIGk9dGhpc1thXVswXTtudWxsIT1pJiYob1tpXT0hMCl9Zm9yKHZhciBjPTA7YzxlLmxlbmd0aDtjKyspe3ZhciB1PVtdLmNvbmNhdChlW2NdKTtyJiZvW3VbMF1dfHwobiYmKHVbMl0/dVsyXT1cIlwiLmNvbmNhdChuLFwiIGFuZCBcIikuY29uY2F0KHVbMl0pOnVbMl09biksdC5wdXNoKHUpKX19LHR9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7bi5yKHQpLG4uZCh0LFwiZGVmYXVsdFwiLChmdW5jdGlvbigpe3JldHVybiBhfSkpO24oMCk7ZnVuY3Rpb24gcihlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19ZnVuY3Rpb24gbyhlLHQsbil7cmV0dXJuIHQmJnIoZS5wcm90b3R5cGUsdCksbiYmcihlLG4pLGV9XG4vKipcbiAqIENvZGVUb29sIGZvciBFZGl0b3IuanNcbiAqXG4gKiBAYXV0aG9yIENvZGVYICh0ZWFtQGlmbW8uc3UpXG4gKiBAY29weXJpZ2h0IENvZGVYIDIwMThcbiAqIEBsaWNlbnNlIE1JVFxuICogQHZlcnNpb24gMi4wLjBcbiAqL3ZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt2YXIgbj10LmRhdGEscj10LmNvbmZpZyxvPXQuYXBpLGE9dC5yZWFkT25seTshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuYXBpPW8sdGhpcy5yZWFkT25seT1hLHRoaXMucGxhY2Vob2xkZXI9dGhpcy5hcGkuaTE4bi50KHIucGxhY2Vob2xkZXJ8fGUuREVGQVVMVF9QTEFDRUhPTERFUiksdGhpcy5DU1M9e2Jhc2VDbGFzczp0aGlzLmFwaS5zdHlsZXMuYmxvY2ssaW5wdXQ6dGhpcy5hcGkuc3R5bGVzLmlucHV0LHdyYXBwZXI6XCJjZS1jb2RlXCIsdGV4dGFyZWE6XCJjZS1jb2RlX190ZXh0YXJlYVwifSx0aGlzLm5vZGVzPXtob2xkZXI6bnVsbCx0ZXh0YXJlYTpudWxsfSx0aGlzLmRhdGE9e2NvZGU6bi5jb2RlfHxcIlwifSx0aGlzLm5vZGVzLmhvbGRlcj10aGlzLmRyYXdWaWV3KCl9cmV0dXJuIG8oZSxudWxsLFt7a2V5OlwiaXNSZWFkT25seVN1cHBvcnRlZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiEwfX0se2tleTpcImVuYWJsZUxpbmVCcmVha3NcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH19XSksbyhlLFt7a2V5OlwiZHJhd1ZpZXdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO3JldHVybiB0LmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYmFzZUNsYXNzLHRoaXMuQ1NTLndyYXBwZXIpLG4uY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy50ZXh0YXJlYSx0aGlzLkNTUy5pbnB1dCksbi50ZXh0Q29udGVudD10aGlzLmRhdGEuY29kZSxuLnBsYWNlaG9sZGVyPXRoaXMucGxhY2Vob2xkZXIsdGhpcy5yZWFkT25seSYmKG4uZGlzYWJsZWQ9ITApLHQuYXBwZW5kQ2hpbGQobiksbi5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLChmdW5jdGlvbih0KXtzd2l0Y2godC5jb2RlKXtjYXNlXCJUYWJcIjplLnRhYkhhbmRsZXIodCl9fSkpLHRoaXMubm9kZXMudGV4dGFyZWE9bix0fX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZXMuaG9sZGVyfX0se2tleTpcInNhdmVcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm57Y29kZTplLnF1ZXJ5U2VsZWN0b3IoXCJ0ZXh0YXJlYVwiKS52YWx1ZX19fSx7a2V5Olwib25QYXN0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUuZGV0YWlsLmRhdGE7dGhpcy5kYXRhPXtjb2RlOnQudGV4dENvbnRlbnR9fX0se2tleTpcInRhYkhhbmRsZXJcIix2YWx1ZTpmdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpLGUucHJldmVudERlZmF1bHQoKTt2YXIgdCxuPWUudGFyZ2V0LHI9ZS5zaGlmdEtleSxvPW4uc2VsZWN0aW9uU3RhcnQsYT1uLnZhbHVlO2lmKHIpe3ZhciBpPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVwiXCI7XCJcXG5cIiE9PW4mJnQ+MDspdC09MSxuPWUuc3Vic3RyKHQsMSk7cmV0dXJuXCJcXG5cIj09PW4mJih0Kz0xKSx0fShhLG8pO2lmKFwiICBcIiE9PWEuc3Vic3RyKGksXCIgIFwiLmxlbmd0aCkpcmV0dXJuO24udmFsdWU9YS5zdWJzdHJpbmcoMCxpKSthLnN1YnN0cmluZyhpK1wiICBcIi5sZW5ndGgpLHQ9by1cIiAgXCIubGVuZ3RofWVsc2UgdD1vK1wiICBcIi5sZW5ndGgsbi52YWx1ZT1hLnN1YnN0cmluZygwLG8pK1wiICBcIithLnN1YnN0cmluZyhvKTtuLnNldFNlbGVjdGlvblJhbmdlKHQsdCl9fSx7a2V5OlwiZGF0YVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9kYXRhfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5fZGF0YT1lLHRoaXMubm9kZXMudGV4dGFyZWEmJih0aGlzLm5vZGVzLnRleHRhcmVhLnRleHRDb250ZW50PWUuY29kZSl9fV0sW3trZXk6XCJ0b29sYm94XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue2ljb246Jzxzdmcgd2lkdGg9XCIxNFwiIGhlaWdodD1cIjE0XCIgdmlld0JveD1cIjAgLTEgMTQgMTRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgPiA8cGF0aCBkPVwiTTMuMTc3IDYuODUyYy4yMDUuMjUzLjM0Ny41NzIuNDI3Ljk1NC4wNzguMzcyLjExNy44NDQuMTE3IDEuNDE3IDAgLjQxOC4wMS43MjUuMDMuOTIuMDIuMTguMDU3LjMxNC4xMDcuMzk2LjA0Ni4wNzUuMDkzLjExNy4xNC4xMzQuMDc1LjAyNy4yMTguMDU2LjQyLjA4M2EuODU1Ljg1NSAwIDAgMSAuNTYuMjk3Yy4xNDUuMTY3LjIxNS4zOC4yMTUuNjM2IDAgLjYxMi0uNDMyLjkzNC0xLjIxNi45MzQtLjQ1NyAwLS44Ny0uMDg3LTEuMjMzLS4yNjJhMS45OTUgMS45OTUgMCAwIDEtLjg1My0uNzUxIDIuMDkgMi4wOSAwIDAgMS0uMzA1LTEuMDk3Yy0uMDE0LS42NDgtLjAyOS0xLjE2OC0uMDQzLTEuNTYtLjAxMy0uMzgzLS4wMzQtLjYzMS0uMDYtLjczMy0uMDY0LS4yNjMtLjE1OC0uNDU1LS4yNzYtLjU3OGEyLjE2MyAyLjE2MyAwIDAgMC0uNTA1LS4zNzZjLS4yMzgtLjEzNC0uNDEtLjI1Ni0uNTE5LS4zNzFDLjA1OCA2Ljc2IDAgNi41NjcgMCA2LjMxNWMwLS4zNy4xNjYtLjY1Ny40OTMtLjg0Ni4zMjktLjE4Ni41Ni0uMzQyLjY5My0uNDY2YS45NDIuOTQyIDAgMCAwIC4yNi0uNDQ3Yy4wNTYtLjIuMDg4LS40Mi4wOTctLjY1OC4wMS0uMjUuMDI0LS44NS4wNDMtMS44MDIuMDE1LS42MjkuMjM5LTEuMTQuNjcyLTEuNTIyQzIuNjkxLjE5IDMuMjY4IDAgMy45NzcgMGMuNzgzIDAgMS4yMTYuMzE3IDEuMjE2LjkyMSAwIC4yNjQtLjA2OS40OC0uMjExLjY0M2EuODU4Ljg1OCAwIDAgMS0uNTYzLjI5Yy0uMjQ5LjAzLS40MTcuMDc2LS40OTguMTI2LS4wNjIuMDQtLjExMi4xMzQtLjEzOS4yOTEtLjAzMS4xODctLjA1Mi41NjItLjA2MSAxLjExOWE4LjgyOCA4LjgyOCAwIDAgMS0uMTEyIDEuMzc4IDIuMjQgMi4yNCAwIDAgMS0uNDA0Ljk2M2MtLjE1OS4yMTItLjM3My40MDYtLjY0LjU4My4yNS4xNjMuNDU0LjM0Mi42MTIuNTM4em03LjM0IDBjLjE1Ny0uMTk2LjM2Mi0uMzc1LjYxMi0uNTM4YTIuNTQ0IDIuNTQ0IDAgMCAxLS42NDEtLjU4MyAyLjI0IDIuMjQgMCAwIDEtLjQwNC0uOTYzIDguODI4IDguODI4IDAgMCAxLS4xMTItMS4zNzhjLS4wMDktLjU1Ny0uMDMtLjkzMi0uMDYxLTEuMTE5LS4wMjctLjE1Ny0uMDc3LS4yNTEtLjE0LS4yOS0uMDgtLjA1MS0uMjQ4LS4wOTYtLjQ5Ni0uMTI3YS44NTguODU4IDAgMCAxLS41NjQtLjI5QzguNTcgMS40MDEgOC41IDEuMTg1IDguNS45MjEgOC41LjMxNyA4LjkzMyAwIDkuNzE2IDBjLjcxIDAgMS4yODYuMTkgMS43Mi41NzQuNDMyLjM4Mi42NTYuODkzLjY3MSAxLjUyMi4wMi45NTIuMDMzIDEuNTUzLjA0MyAxLjgwMi4wMDkuMjM4LjA0MS40NTguMDk3LjY1OGEuOTQyLjk0MiAwIDAgMCAuMjYuNDQ3Yy4xMzMuMTI0LjM2NC4yOC42OTMuNDY2YS45MjYuOTI2IDAgMCAxIC40OTMuODQ2YzAgLjI1Mi0uMDU4LjQ0Ni0uMTgzLjU4LS4xMDkuMTE1LS4yODEuMjM3LS41Mi4zNzEtLjIxLjExOC0uMzc3LjI0NC0uNTA0LjM3Ni0uMTE4LjEyMy0uMjEyLjMxNS0uMjc3LjU3OC0uMDI1LjEwMi0uMDQ1LjM1LS4wNi43MzMtLjAxMy4zOTItLjAyNy45MTItLjA0MiAxLjU2YTIuMDkgMi4wOSAwIDAgMS0uMzA1IDEuMDk3Yy0uMi4zMjMtLjQ4Ni41NzQtLjg1My43NWEyLjgxMSAyLjgxMSAwIDAgMS0xLjIzMy4yNjNjLS43ODQgMC0xLjIxNi0uMzIyLTEuMjE2LS45MzQgMC0uMjU2LjA3LS40Ny4yMTQtLjYzNmEuODU1Ljg1NSAwIDAgMSAuNTYyLS4yOTdjLjIwMS0uMDI3LjM0NC0uMDU2LjQxOC0uMDgzLjA0OC0uMDE3LjA5Ni0uMDYuMTQtLjEzNGEuOTk2Ljk5NiAwIDAgMCAuMTA3LS4zOTZjLjAyLS4xOTUuMDMxLS41MDIuMDMxLS45MiAwLS41NzMuMDM5LTEuMDQ1LjExNy0xLjQxNy4wOC0uMzgyLjIyMi0uNzAxLjQyNy0uOTU0elwiIC8+IDwvc3ZnPicsdGl0bGU6XCJDb2RlXCJ9fX0se2tleTpcIkRFRkFVTFRfUExBQ0VIT0xERVJcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIkVudGVyIGEgY29kZVwifX0se2tleTpcInBhc3RlQ29uZmlnXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue3RhZ3M6W1wicHJlXCJdfX19LHtrZXk6XCJzYW5pdGl6ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybntjb2RlOiEwfX19XSksZX0oKX1dKS5kZWZhdWx0fSkpOyIsIi8qISBGb3IgbGljZW5zZSBpbmZvcm1hdGlvbiBwbGVhc2Ugc2VlIGVkaXRvci5qcy5MSUNFTlNFLnR4dCAqL1xuIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5FZGl0b3JKUz1lKCk6dC5FZGl0b3JKUz1lKCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gbihvKXtpZihlW29dKXJldHVybiBlW29dLmV4cG9ydHM7dmFyIHI9ZVtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsbiksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gbi5tPXQsbi5jPWUsbi5kPWZ1bmN0aW9uKHQsZSxvKXtuLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6b30pfSxuLnI9ZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1uKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBvPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKG8pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgciBpbiB0KW4uZChvLHIsZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxyKSk7cmV0dXJuIG99LG4ubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gbi5kKGUsXCJhXCIsZSksZX0sbi5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxuLnA9XCJcIixuKG4ucz0xODEpfShbZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oOSkscj1uKDE3KSxpPW4oMjcpLGE9bigyMykscz1uKDMwKSxjPWZ1bmN0aW9uKHQsZSxuKXt2YXIgbCx1LGYsZCxwPXQmYy5GLGg9dCZjLkcsdj10JmMuUyxnPXQmYy5QLHk9dCZjLkIsYj1oP286dj9vW2VdfHwob1tlXT17fSk6KG9bZV18fHt9KS5wcm90b3R5cGUsbT1oP3I6cltlXXx8KHJbZV09e30pLGs9bS5wcm90b3R5cGV8fChtLnByb3RvdHlwZT17fSk7Zm9yKGwgaW4gaCYmKG49ZSksbilmPSgodT0hcCYmYiYmdm9pZCAwIT09YltsXSk/YjpuKVtsXSxkPXkmJnU/cyhmLG8pOmcmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGY/cyhGdW5jdGlvbi5jYWxsLGYpOmYsYiYmYShiLGwsZix0JmMuVSksbVtsXSE9ZiYmaShtLGwsZCksZyYma1tsXSE9ZiYmKGtbbF09Zil9O28uY29yZT1yLGMuRj0xLGMuRz0yLGMuUz00LGMuUD04LGMuQj0xNixjLlc9MzIsYy5VPTY0LGMuUj0xMjgsdC5leHBvcnRzPWN9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX19LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxvLmtleSxvKX19dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxvKXtyZXR1cm4gZSYmbih0LnByb3RvdHlwZSxlKSxvJiZuKHQsbyksdH19LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbihlKXtyZXR1cm4gdC5leHBvcnRzPW49T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5nZXRQcm90b3R5cGVPZjpmdW5jdGlvbih0KXtyZXR1cm4gdC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KX0sbihlKX10LmV4cG9ydHM9bn0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTA3KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLGUmJm8odCxlKX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDE0Mykscj1uKDM2Nik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIWV8fFwib2JqZWN0XCIhPT1vKGUpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlP3IodCk6ZX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDM3MyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHM9bigxKTtmdW5jdGlvbiBjKHQpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBTeW1ib2x8fG51bGw9PXRbU3ltYm9sLml0ZXJhdG9yXSl7aWYoQXJyYXkuaXNBcnJheSh0KXx8KHQ9ZnVuY3Rpb24odCxlKXtpZih0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm4gbCh0LGUpO3ZhciBuPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KS5zbGljZSg4LC0xKTtyZXR1cm5cIk9iamVjdFwiPT09biYmdC5jb25zdHJ1Y3RvciYmKG49dC5jb25zdHJ1Y3Rvci5uYW1lKSxcIk1hcFwiPT09bnx8XCJTZXRcIj09PW4/QXJyYXkuZnJvbShuKTpcIkFyZ3VtZW50c1wiPT09bnx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3Qobik/bCh0LGUpOnZvaWQgMH19KHQpKSl7dmFyIGU9MCxuPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpuLG46ZnVuY3Rpb24oKXtyZXR1cm4gZT49dC5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOnRbZSsrXX19LGU6ZnVuY3Rpb24odCl7dGhyb3cgdH0sZjpufX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIG8scixpPSEwLGE9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXtvPXRbU3ltYm9sLml0ZXJhdG9yXSgpfSxuOmZ1bmN0aW9uKCl7dmFyIHQ9by5uZXh0KCk7cmV0dXJuIGk9dC5kb25lLHR9LGU6ZnVuY3Rpb24odCl7YT0hMCxyPXR9LGY6ZnVuY3Rpb24oKXt0cnl7aXx8bnVsbD09by5yZXR1cm58fG8ucmV0dXJuKCl9ZmluYWxseXtpZihhKXRocm93IHJ9fX19ZnVuY3Rpb24gbCh0LGUpeyhudWxsPT1lfHxlPnQubGVuZ3RoKSYmKGU9dC5sZW5ndGgpO2Zvcih2YXIgbj0wLG89bmV3IEFycmF5KGUpO248ZTtuKyspb1tuXT10W25dO3JldHVybiBvfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1zKHIpLGk9cyhpKSxhPXMoYSk7dmFyIHU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3ZhciBuPXRoaXMsbz1lLmNvbmZpZyxpPWUuZXZlbnRzRGlzcGF0Y2hlcjtpZigoMCxyLmRlZmF1bHQpKHRoaXMsdCksdGhpcy5ub2Rlcz17fSx0aGlzLmxpc3RlbmVycz1uZXcgYS5kZWZhdWx0LHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzPXtvbjpmdW5jdGlvbih0LGUsbyl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10mJmFyZ3VtZW50c1szXTtuLm11dGFibGVMaXN0ZW5lcklkcy5wdXNoKG4ubGlzdGVuZXJzLm9uKHQsZSxvLHIpKX0sY2xlYXJBbGw6ZnVuY3Rpb24oKXt2YXIgdCxlPWMobi5tdXRhYmxlTGlzdGVuZXJJZHMpO3RyeXtmb3IoZS5zKCk7ISh0PWUubigpKS5kb25lOyl7dmFyIG89dC52YWx1ZTtuLmxpc3RlbmVycy5vZmZCeUlkKG8pfX1jYXRjaCh0KXtlLmUodCl9ZmluYWxseXtlLmYoKX1uLm11dGFibGVMaXN0ZW5lcklkcz1bXX19LHRoaXMubXV0YWJsZUxpc3RlbmVySWRzPVtdLCh0aGlzIGluc3RhbmNlb2YgdD90aGlzLmNvbnN0cnVjdG9yOnZvaWQgMCk9PT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJDb25zdHJ1Y3RvcnMgZm9yIGFic3RyYWN0IGNsYXNzIE1vZHVsZSBhcmUgbm90IGFsbG93ZWQuXCIpO3RoaXMuY29uZmlnPW8sdGhpcy5ldmVudHNEaXNwYXRjaGVyPWl9cmV0dXJuKDAsaS5kZWZhdWx0KSh0LFt7a2V5OlwicmVtb3ZlQWxsTm9kZXNcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0aGlzLm5vZGVzKXt2YXIgZT10aGlzLm5vZGVzW3RdO2UgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCYmZS5yZW1vdmUoKX19fSx7a2V5Olwic3RhdGVcIixzZXQ6ZnVuY3Rpb24odCl7dGhpcy5FZGl0b3I9dH19LHtrZXk6XCJpc1J0bFwiLGdldDpmdW5jdGlvbigpe3JldHVyblwicnRsXCI9PT10aGlzLmNvbmZpZy5pMThuLmRpcmVjdGlvbn19XSksdH0oKTtvLmRlZmF1bHQ9dSx1LmRpc3BsYXlOYW1lPVwiTW9kdWxlXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyMSksbigzNjUpLG4oMjIpLG4oMTUpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKHQsZSxvLHIsaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGEscz1uKDEpO2Z1bmN0aW9uIGModCxlKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06XCJsb2dcIixvPWFyZ3VtZW50cy5sZW5ndGg+Mz9hcmd1bWVudHNbM106dm9pZCAwLHI9YXJndW1lbnRzLmxlbmd0aD40JiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOlwiY29sb3I6IGluaGVyaXRcIjtpZihcImNvbnNvbGVcImluIHdpbmRvdyYmd2luZG93LmNvbnNvbGVbbl0pe3ZhciBpPVtcImluZm9cIixcImxvZ1wiLFwid2FyblwiLFwiZXJyb3JcIl0uaW5jbHVkZXMobikscz1bXTtzd2l0Y2goYy5sb2dMZXZlbCl7Y2FzZSBhLkVSUk9SOmlmKFwiZXJyb3JcIiE9PW4pcmV0dXJuO2JyZWFrO2Nhc2UgYS5XQVJOOmlmKCFbXCJlcnJvclwiLFwid2FyblwiXS5pbmNsdWRlcyhuKSlyZXR1cm47YnJlYWs7Y2FzZSBhLklORk86aWYoIWl8fHQpcmV0dXJufW8mJnMucHVzaChvKTt2YXIgbD1cIkVkaXRvci5qcyBcIi5jb25jYXQoXCIyLjE5LjNcIiksdT1cImxpbmUtaGVpZ2h0OiAxZW07XFxuICAgICAgICAgICAgY29sb3I6ICMwMDZGRUE7XFxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTFweDtcXG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMWVtO1xcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxuICAgICAgICAgICAgcGFkZGluZzogNHB4IDlweDtcXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzMHB4O1xcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoNTYsIDEzOCwgMjI5LCAwLjE2KTtcXG4gICAgICAgICAgICBtYXJnaW46IDRweCA1cHggNHB4IDA7XCI7dCYmKGk/KHMudW5zaGlmdCh1LHIpLGU9XCIlY1wiLmNvbmNhdChsLFwiJWMgXCIpLmNvbmNhdChlKSk6ZT1cIiggXCIuY29uY2F0KGwsXCIgKVwiKS5jb25jYXQoZSkpO3RyeXtpZihpKWlmKG8pe3ZhciBmOyhmPWNvbnNvbGUpW25dLmFwcGx5KGYsW1wiXCIuY29uY2F0KGUsXCIgJW9cIildLmNvbmNhdChzKSl9ZWxzZXt2YXIgZDsoZD1jb25zb2xlKVtuXS5hcHBseShkLFtlXS5jb25jYXQocykpfWVsc2UgY29uc29sZVtuXShlKX1jYXRjaCh0KXt9fX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LnNldExvZ0xldmVsPWZ1bmN0aW9uKHQpe2MubG9nTGV2ZWw9dH0sdC50eXBlT2Y9Zix0LmlzRnVuY3Rpb249ZCx0LmlzT2JqZWN0PXAsdC5pc1N0cmluZz1mdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT09Zih0KX0sdC5pc0Jvb2xlYW49ZnVuY3Rpb24odCl7cmV0dXJuXCJib29sZWFuXCI9PT1mKHQpfSx0LmlzTnVtYmVyPWZ1bmN0aW9uKHQpe3JldHVyblwibnVtYmVyXCI9PT1mKHQpfSx0LmlzVW5kZWZpbmVkPWgsdC5pc0NsYXNzPWZ1bmN0aW9uKHQpe3JldHVybiBkKHQpJiYvXlxccypjbGFzc1xccysvLnRlc3QodC50b1N0cmluZygpKX0sdC5pc0VtcHR5PWZ1bmN0aW9uKHQpe3JldHVybiF0fHwwPT09T2JqZWN0LmtleXModCkubGVuZ3RoJiZ0LmNvbnN0cnVjdG9yPT09T2JqZWN0fSx0LmlzUHJvbWlzZT1mdW5jdGlvbih0KXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHQpPT09dH0sdC5pc1ByaW50YWJsZUtleT1mdW5jdGlvbih0KXtyZXR1cm4gdD40NyYmdDw1OHx8MzI9PT10fHwxMz09PXR8fDIyOT09PXR8fHQ+NjQmJnQ8OTF8fHQ+OTUmJnQ8MTEyfHx0PjE4NSYmdDwxOTN8fHQ+MjE4JiZ0PDIyM30sdC5zZXF1ZW5jZT1mdW5jdGlvbih0KXtyZXR1cm4gdi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHQuYXJyYXk9ZnVuY3Rpb24odCl7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQpfSx0LmRlbGF5PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG49dGhpcyxvPWFyZ3VtZW50czt3aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseShuLG8pfSksZSl9fSx0LmdldEZpbGVFeHRlbnNpb249ZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZS5zcGxpdChcIi5cIikucG9wKCl9LHQuaXNWYWxpZE1pbWVUeXBlPWZ1bmN0aW9uKHQpe3JldHVybi9eWy1cXHddK1xcLyhbLStcXHddK3xcXCopJC8udGVzdCh0KX0sdC5kZWJvdW5jZT1mdW5jdGlvbih0LGUsbil7dmFyIG8scj1hcmd1bWVudHMsaT10aGlzO3JldHVybiBmdW5jdGlvbigpe3ZhciBhPWkscz1yLGM9biYmIW87d2luZG93LmNsZWFyVGltZW91dChvKSxvPXdpbmRvdy5zZXRUaW1lb3V0KChmdW5jdGlvbigpe289bnVsbCxufHx0LmFwcGx5KGEscyl9KSxlKSxjJiZ0LmFwcGx5KGEscyl9fSx0LmNvcHlUZXh0VG9DbGlwYm9hcmQ9ZnVuY3Rpb24odCl7dmFyIGU9aS5kZWZhdWx0Lm1ha2UoXCJkaXZcIixcImNvZGV4LWVkaXRvci1jbGlwYm9hcmRcIix7aW5uZXJIVE1MOnR9KTtkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpO3ZhciBuPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxvPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7by5zZWxlY3ROb2RlKGUpLHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5yZW1vdmVBbGxSYW5nZXMoKSxuLmFkZFJhbmdlKG8pLGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKSxkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGUpfSx0LmdldFVzZXJPUz1nLHQuY2FwaXRhbGl6ZT1mdW5jdGlvbih0KXtyZXR1cm4gdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSl9LHQuZGVlcE1lcmdlPWZ1bmN0aW9uIHQoZSl7Zm9yKHZhciBuPWFyZ3VtZW50cy5sZW5ndGgscj1uZXcgQXJyYXkobj4xP24tMTowKSxpPTE7aTxuO2krKylyW2ktMV09YXJndW1lbnRzW2ldO2lmKCFyLmxlbmd0aClyZXR1cm4gZTt2YXIgYT1yLnNoaWZ0KCk7aWYocChlKSYmcChhKSlmb3IodmFyIHMgaW4gYSlwKGFbc10pPyhlW3NdfHxPYmplY3QuYXNzaWduKGUsKDAsby5kZWZhdWx0KSh7fSxzLHt9KSksdChlW3NdLGFbc10pKTpPYmplY3QuYXNzaWduKGUsKDAsby5kZWZhdWx0KSh7fSxzLGFbc10pKTtyZXR1cm4gdC5hcHBseSh2b2lkIDAsW2VdLmNvbmNhdChyKSl9LHQuYmVhdXRpZnlTaG9ydGN1dD1mdW5jdGlvbih0KXt2YXIgZT1nKCk7cmV0dXJuIHQ9dC5yZXBsYWNlKC9zaGlmdC9naSxcIuKHp1wiKS5yZXBsYWNlKC9iYWNrc3BhY2UvZ2ksXCLijKtcIikucmVwbGFjZSgvZW50ZXIvZ2ksXCLij45cIikucmVwbGFjZSgvdXAvZ2ksXCLihpFcIikucmVwbGFjZSgvbGVmdC9naSxcIuKGklwiKS5yZXBsYWNlKC9kb3duL2dpLFwi4oaTXCIpLnJlcGxhY2UoL3JpZ2h0L2dpLFwi4oaQXCIpLnJlcGxhY2UoL2VzY2FwZS9naSxcIuKOi1wiKS5yZXBsYWNlKC9pbnNlcnQvZ2ksXCJJbnNcIikucmVwbGFjZSgvZGVsZXRlL2dpLFwi4pChXCIpLnJlcGxhY2UoL1xcKy9naSxcIiArIFwiKSx0PWUubWFjP3QucmVwbGFjZSgvY3RybHxjbWQvZ2ksXCLijJhcIikucmVwbGFjZSgvYWx0L2dpLFwi4oylXCIpOnQucmVwbGFjZSgvY21kL2dpLFwiQ3RybFwiKS5yZXBsYWNlKC93aW5kb3dzL2dpLFwiV0lOXCIpfSx0LmdldFZhbGlkVXJsPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gbmV3IFVSTCh0KS5ocmVmfWNhdGNoKHQpe31yZXR1cm5cIi8vXCI9PT10LnN1YnN0cmluZygwLDIpP3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCt0OndpbmRvdy5sb2NhdGlvbi5vcmlnaW4rdH0sdC5vcGVuVGFiPWZ1bmN0aW9uKHQpe3dpbmRvdy5vcGVuKHQsXCJfYmxhbmtcIil9LHQuZ2VuZXJhdGVJZD1mdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcIlwiO3JldHVyblwiXCIuY29uY2F0KHQpLmNvbmNhdChNYXRoLmZsb29yKDFlOCpNYXRoLnJhbmRvbSgpKS50b1N0cmluZygxNikpfSx0LmRlcHJlY2F0aW9uQXNzZXJ0PWZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1cIsKrXCIuY29uY2F0KGUsXCLCuyBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHVzZSB0aGUgwqtcIikuY29uY2F0KG4sXCLCuyBpbnN0ZWFkLlwiKTt0JiZ1KG8sXCJ3YXJuXCIpfSx0LmlzVG91Y2hTdXBwb3J0ZWQ9dC5sb2dMYWJlbGVkPXQubG9nPXQubW91c2VCdXR0b25zPXQua2V5Q29kZXM9dC5Mb2dMZXZlbHM9dm9pZCAwLGU9cyhlKSxvPXMobykscj1zKHIpLGk9cyhpKSx0LkxvZ0xldmVscz1hLGZ1bmN0aW9uKHQpe3QuVkVSQk9TRT1cIlZFUkJPU0VcIix0LklORk89XCJJTkZPXCIsdC5XQVJOPVwiV0FSTlwiLHQuRVJST1I9XCJFUlJPUlwifShhfHwodC5Mb2dMZXZlbHM9YT17fSkpLHQua2V5Q29kZXM9e0JBQ0tTUEFDRTo4LFRBQjo5LEVOVEVSOjEzLFNISUZUOjE2LENUUkw6MTcsQUxUOjE4LEVTQzoyNyxTUEFDRTozMixMRUZUOjM3LFVQOjM4LERPV046NDAsUklHSFQ6MzksREVMRVRFOjQ2LE1FVEE6OTF9LHQubW91c2VCdXR0b25zPXtMRUZUOjAsV0hFRUw6MSxSSUdIVDoyLEJBQ0tXQVJEOjMsRk9SV0FSRDo0fSxjLmxvZ0xldmVsPWEuVkVSQk9TRTt2YXIgbD1jLmJpbmQod2luZG93LCExKTt0LmxvZz1sO3ZhciB1PWMuYmluZCh3aW5kb3csITApO2Z1bmN0aW9uIGYodCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KS5tYXRjaCgvXFxzKFthLXpBLVpdKykvKVsxXS50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIGQodCl7cmV0dXJuXCJmdW5jdGlvblwiPT09Zih0KX1mdW5jdGlvbiBwKHQpe3JldHVyblwib2JqZWN0XCI9PT1mKHQpfWZ1bmN0aW9uIGgodCl7cmV0dXJuXCJ1bmRlZmluZWRcIj09PWYodCl9ZnVuY3Rpb24gdigpe3JldHVybih2PSgwLHIuZGVmYXVsdCkoZS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQobil7dmFyIG8saSxhLHMsYz1hcmd1bWVudHM7cmV0dXJuIGUuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gcz1mdW5jdGlvbigpe3JldHVybihzPSgwLHIuZGVmYXVsdCkoZS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQobixvLHIpe3JldHVybiBlLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHQucHJldj0wLHQubmV4dD0zLG4uZnVuY3Rpb24obi5kYXRhKTtjYXNlIDM6cmV0dXJuIHQubmV4dD01LG8oaChuLmRhdGEpP3t9Om4uZGF0YSk7Y2FzZSA1OnQubmV4dD0xMDticmVhaztjYXNlIDc6dC5wcmV2PTcsdC50MD10LmNhdGNoKDApLHIoaChuLmRhdGEpP3t9Om4uZGF0YSk7Y2FzZSAxMDpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCxudWxsLFtbMCw3XV0pfSkpKSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxhPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gcy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG89Yy5sZW5ndGg+MSYmdm9pZCAwIT09Y1sxXT9jWzFdOmZ1bmN0aW9uKCl7fSxpPWMubGVuZ3RoPjImJnZvaWQgMCE9PWNbMl0/Y1syXTpmdW5jdGlvbigpe30sdC5hYnJ1cHQoXCJyZXR1cm5cIixuLnJlZHVjZShmdW5jdGlvbigpe3ZhciB0PSgwLHIuZGVmYXVsdCkoZS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQobixyKXtyZXR1cm4gZS5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiB0Lm5leHQ9MixuO2Nhc2UgMjpyZXR1cm4gdC5hYnJ1cHQoXCJyZXR1cm5cIixhKHIsbyxpKSk7Y2FzZSAzOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0KX0pKSk7cmV0dXJuIGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKSxQcm9taXNlLnJlc29sdmUoKSkpO2Nhc2UgNTpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCl9KSkpKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gZygpe3ZhciB0PXt3aW46ITEsbWFjOiExLHgxMTohMSxsaW51eDohMX0sZT1PYmplY3Qua2V5cyh0KS5maW5kKChmdW5jdGlvbih0KXtyZXR1cm4tMSE9PW5hdmlnYXRvci5hcHBWZXJzaW9uLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0KX0pKTtyZXR1cm4gZT8odFtlXT0hMCx0KTp0fXQubG9nTGFiZWxlZD11O3ZhciB5PVwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7dC5pc1RvdWNoU3VwcG9ydGVkPXl9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5leHBvcnRzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT1NYXRoP3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZi5NYXRoPT1NYXRoP3NlbGY6RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1wibnVtYmVyXCI9PXR5cGVvZiBfX2cmJihfX2c9bil9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4hIXQoKX1jYXRjaCh0KXtyZXR1cm4hMH19fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxMik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKCFvKHQpKXRocm93IFR5cGVFcnJvcih0K1wiIGlzIG5vdCBhbiBvYmplY3QhXCIpO3JldHVybiB0fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIHQ/bnVsbCE9PXQ6XCJmdW5jdGlvblwiPT10eXBlb2YgdH19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDE0Myk7ZnVuY3Rpb24gcigpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIFdlYWtNYXApcmV0dXJuIG51bGw7dmFyIHQ9bmV3IFdlYWtNYXA7cmV0dXJuIHI9ZnVuY3Rpb24oKXtyZXR1cm4gdH0sdH10LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYodCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O2lmKG51bGw9PT10fHxcIm9iamVjdFwiIT09byh0KSYmXCJmdW5jdGlvblwiIT10eXBlb2YgdClyZXR1cm57ZGVmYXVsdDp0fTt2YXIgZT1yKCk7aWYoZSYmZS5oYXModCkpcmV0dXJuIGUuZ2V0KHQpO3ZhciBuPXt9LGk9T2JqZWN0LmRlZmluZVByb3BlcnR5JiZPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO2Zvcih2YXIgYSBpbiB0KWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGEpKXt2YXIgcz1pP09iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxhKTpudWxsO3MmJihzLmdldHx8cy5zZXQpP09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLGEscyk6blthXT10W2FdfXJldHVybiBuLmRlZmF1bHQ9dCxlJiZlLnNldCh0LG4pLG59fSxmdW5jdGlvbih0LGUsbil7dmFyIG89big2NykoXCJ3a3NcIikscj1uKDQzKSxpPW4oOSkuU3ltYm9sLGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaTsodC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBvW3RdfHwob1t0XT1hJiZpW3RdfHwoYT9pOnIpKFwiU3ltYm9sLlwiK3QpKX0pLnN0b3JlPW99LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oNTgpLG4oMiksbigzKSxuKDgpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGM9bigxMyksbD1uKDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1sKHIpLGk9bChpKSxhPWwoYSkscz1jKHMpO3ZhciB1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpeygwLGkuZGVmYXVsdCkodGhpcyx0KX1yZXR1cm4oMCxhLmRlZmF1bHQpKHQsbnVsbCxbe2tleTpcImlzU2luZ2xlVGFnXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHQudGFnTmFtZSYmW1wiQVJFQVwiLFwiQkFTRVwiLFwiQlJcIixcIkNPTFwiLFwiQ09NTUFORFwiLFwiRU1CRURcIixcIkhSXCIsXCJJTUdcIixcIklOUFVUXCIsXCJLRVlHRU5cIixcIkxJTktcIixcIk1FVEFcIixcIlBBUkFNXCIsXCJTT1VSQ0VcIixcIlRSQUNLXCIsXCJXQlJcIl0uaW5jbHVkZXModC50YWdOYW1lKX19LHtrZXk6XCJpc0xpbmVCcmVha1RhZ1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0LnRhZ05hbWUmJltcIkJSXCIsXCJXQlJcIl0uaW5jbHVkZXModC50YWdOYW1lKX19LHtrZXk6XCJtYWtlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGUsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbCxvPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fSxpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCk7Zm9yKHZhciBhIGluIEFycmF5LmlzQXJyYXkobik/KGU9aS5jbGFzc0xpc3QpLmFkZC5hcHBseShlLCgwLHIuZGVmYXVsdCkobikpOm4mJmkuY2xhc3NMaXN0LmFkZChuKSxvKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLGEpJiYoaVthXT1vW2FdKTtyZXR1cm4gaX19LHtrZXk6XCJ0ZXh0XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpfX0se2tleTpcInN2Z1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXToxNCxuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXToxNCxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJzdmdcIik7cmV0dXJuIG8uY2xhc3NMaXN0LmFkZChcImljb25cIixcImljb24tLVwiK3QpLG8uc2V0QXR0cmlidXRlKFwid2lkdGhcIixlK1wicHhcIiksby5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIixuK1wicHhcIiksby5pbm5lckhUTUw9Jzx1c2UgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgeGxpbms6aHJlZj1cIiMnLmNvbmNhdCh0LCdcIj48L3VzZT4nKSxvfX0se2tleTpcImFwcGVuZFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7QXJyYXkuaXNBcnJheShlKT9lLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiB0LmFwcGVuZENoaWxkKGUpfSkpOnQuYXBwZW5kQ2hpbGQoZSl9fSx7a2V5OlwicHJlcGVuZFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7QXJyYXkuaXNBcnJheShlKT8oZT1lLnJldmVyc2UoKSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIHQucHJlcGVuZChlKX0pKTp0LnByZXBlbmQoZSl9fSx7a2V5Olwic3dhcFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxvPXQucGFyZW50Tm9kZTtvLmluc2VydEJlZm9yZShuLHQpLG8uaW5zZXJ0QmVmb3JlKHQsZSksby5pbnNlcnRCZWZvcmUoZSxuKSxvLnJlbW92ZUNoaWxkKG4pfX0se2tleTpcImZpbmRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpkb2N1bWVudCxlPWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwO3JldHVybiB0LnF1ZXJ5U2VsZWN0b3IoZSl9fSx7a2V5OlwiZ2V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHQpfX0se2tleTpcImZpbmRBbGxcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpkb2N1bWVudCxlPWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwO3JldHVybiB0LnF1ZXJ5U2VsZWN0b3JBbGwoZSl9fSx7a2V5OlwiZmluZEFsbElucHV0c1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBzLmFycmF5KGUucXVlcnlTZWxlY3RvckFsbCh0LmFsbElucHV0c1NlbGVjdG9yKSkucmVkdWNlKChmdW5jdGlvbihlLG4pe3JldHVybiB0LmlzTmF0aXZlSW5wdXQobil8fHQuY29udGFpbnNPbmx5SW5saW5lRWxlbWVudHMobik/W10uY29uY2F0KCgwLHIuZGVmYXVsdCkoZSksW25dKTpbXS5jb25jYXQoKDAsci5kZWZhdWx0KShlKSwoMCxyLmRlZmF1bHQpKHQuZ2V0RGVlcGVzdEJsb2NrRWxlbWVudHMobikpKX0pLFtdKX19LHtrZXk6XCJnZXREZWVwZXN0Tm9kZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbz1uP1wibGFzdENoaWxkXCI6XCJmaXJzdENoaWxkXCIscj1uP1wicHJldmlvdXNTaWJsaW5nXCI6XCJuZXh0U2libGluZ1wiO2lmKGUmJmUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmZVtvXSl7dmFyIGk9ZVtvXTtpZih0LmlzU2luZ2xlVGFnKGkpJiYhdC5pc05hdGl2ZUlucHV0KGkpJiYhdC5pc0xpbmVCcmVha1RhZyhpKSlpZihpW3JdKWk9aVtyXTtlbHNle2lmKCFpLnBhcmVudE5vZGVbcl0pcmV0dXJuIGkucGFyZW50Tm9kZTtpPWkucGFyZW50Tm9kZVtyXX1yZXR1cm4gdGhpcy5nZXREZWVwZXN0Tm9kZShpLG4pfXJldHVybiBlfX0se2tleTpcImlzRWxlbWVudFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiFzLmlzTnVtYmVyKHQpJiZ0JiZ0Lm5vZGVUeXBlJiZ0Lm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREV9fSx7a2V5OlwiaXNGcmFnbWVudFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiFzLmlzTnVtYmVyKHQpJiZ0JiZ0Lm5vZGVUeXBlJiZ0Lm5vZGVUeXBlPT09Tm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFfX0se2tleTpcImlzQ29udGVudEVkaXRhYmxlXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuXCJ0cnVlXCI9PT10LmNvbnRlbnRFZGl0YWJsZX19LHtrZXk6XCJpc05hdGl2ZUlucHV0XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuISghdHx8IXQudGFnTmFtZSkmJltcIklOUFVUXCIsXCJURVhUQVJFQVwiXS5pbmNsdWRlcyh0LnRhZ05hbWUpfX0se2tleTpcImNhblNldENhcmV0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG49ITA7aWYodC5pc05hdGl2ZUlucHV0KGUpKXN3aXRjaChlLnR5cGUpe2Nhc2VcImZpbGVcIjpjYXNlXCJjaGVja2JveFwiOmNhc2VcInJhZGlvXCI6Y2FzZVwiaGlkZGVuXCI6Y2FzZVwic3VibWl0XCI6Y2FzZVwiYnV0dG9uXCI6Y2FzZVwiaW1hZ2VcIjpjYXNlXCJyZXNldFwiOm49ITF9ZWxzZSBuPXQuaXNDb250ZW50RWRpdGFibGUoZSk7cmV0dXJuIG59fSx7a2V5OlwiaXNOb2RlRW1wdHlcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4hKHRoaXMuaXNTaW5nbGVUYWcodCkmJiF0aGlzLmlzTGluZUJyZWFrVGFnKHQpKSYmMD09PSh0aGlzLmlzRWxlbWVudCh0KSYmdGhpcy5pc05hdGl2ZUlucHV0KHQpP3QudmFsdWU6dC50ZXh0Q29udGVudC5yZXBsYWNlKFwi4oCLXCIsXCJcIikpLnRyaW0oKS5sZW5ndGh9fSx7a2V5OlwiaXNMZWFmXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuISF0JiYwPT09dC5jaGlsZE5vZGVzLmxlbmd0aH19LHtrZXk6XCJpc0VtcHR5XCIsdmFsdWU6ZnVuY3Rpb24odCl7dC5ub3JtYWxpemUoKTtmb3IodmFyIGU9W3RdO2UubGVuZ3RoPjA7KWlmKHQ9ZS5zaGlmdCgpKXtpZih0aGlzLmlzTGVhZih0KSYmIXRoaXMuaXNOb2RlRW1wdHkodCkpcmV0dXJuITE7dC5jaGlsZE5vZGVzJiZlLnB1c2guYXBwbHkoZSwoMCxyLmRlZmF1bHQpKEFycmF5LmZyb20odC5jaGlsZE5vZGVzKSkpfXJldHVybiEwfX0se2tleTpcImlzSFRNTFN0cmluZ1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciBuPXQubWFrZShcImRpdlwiKTtyZXR1cm4gbi5pbm5lckhUTUw9ZSxuLmNoaWxkRWxlbWVudENvdW50PjB9fSx7a2V5OlwiZ2V0Q29udGVudExlbmd0aFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0LmlzTmF0aXZlSW5wdXQoZSk/ZS52YWx1ZS5sZW5ndGg6ZS5ub2RlVHlwZT09PU5vZGUuVEVYVF9OT0RFP2UubGVuZ3RoOmUudGV4dENvbnRlbnQubGVuZ3RofX0se2tleTpcImNvbnRhaW5zT25seUlubGluZUVsZW1lbnRzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG47cmV0dXJuIHMuaXNTdHJpbmcoZSk/KG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuaW5uZXJIVE1MPWU6bj1lLEFycmF5LmZyb20obi5jaGlsZHJlbikuZXZlcnkoKGZ1bmN0aW9uIGUobil7cmV0dXJuIXQuYmxvY2tFbGVtZW50cy5pbmNsdWRlcyhuLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkmJkFycmF5LmZyb20obi5jaGlsZHJlbikuZXZlcnkoZSl9KSl9fSx7a2V5OlwiZ2V0RGVlcGVzdEJsb2NrRWxlbWVudHNcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdC5jb250YWluc09ubHlJbmxpbmVFbGVtZW50cyhlKT9bZV06QXJyYXkuZnJvbShlLmNoaWxkcmVuKS5yZWR1Y2UoKGZ1bmN0aW9uKGUsbil7cmV0dXJuW10uY29uY2F0KCgwLHIuZGVmYXVsdCkoZSksKDAsci5kZWZhdWx0KSh0LmdldERlZXBlc3RCbG9ja0VsZW1lbnRzKG4pKSl9KSxbXSl9fSx7a2V5OlwiZ2V0SG9sZGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHMuaXNTdHJpbmcodCk/ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCk6dH19LHtrZXk6XCJpc0V4dGVuc2lvbk5vZGVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmW1wiR1JBTU1BUkxZLUVYVEVOU0lPTlwiXS5pbmNsdWRlcyh0Lm5vZGVOYW1lKX19LHtrZXk6XCJpc0FuY2hvclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVyblwiYVwiPT09dC50YWdOYW1lLnRvTG93ZXJDYXNlKCl9fSx7a2V5OlwiYWxsSW5wdXRzU2VsZWN0b3JcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIltjb250ZW50ZWRpdGFibGVdLCB0ZXh0YXJlYSwgaW5wdXQ6bm90KFt0eXBlXSksIFwiK1tcInRleHRcIixcInBhc3N3b3JkXCIsXCJlbWFpbFwiLFwibnVtYmVyXCIsXCJzZWFyY2hcIixcInRlbFwiLFwidXJsXCJdLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuJ2lucHV0W3R5cGU9XCInLmNvbmNhdCh0LCdcIl0nKX0pKS5qb2luKFwiLCBcIil9fSx7a2V5OlwiYmxvY2tFbGVtZW50c1wiLGdldDpmdW5jdGlvbigpe3JldHVybltcImFkZHJlc3NcIixcImFydGljbGVcIixcImFzaWRlXCIsXCJibG9ja3F1b3RlXCIsXCJjYW52YXNcIixcImRpdlwiLFwiZGxcIixcImR0XCIsXCJmaWVsZHNldFwiLFwiZmlnY2FwdGlvblwiLFwiZmlndXJlXCIsXCJmb290ZXJcIixcImZvcm1cIixcImgxXCIsXCJoMlwiLFwiaDNcIixcImg0XCIsXCJoNVwiLFwiaDZcIixcImhlYWRlclwiLFwiaGdyb3VwXCIsXCJoclwiLFwibGlcIixcIm1haW5cIixcIm5hdlwiLFwibm9zY3JpcHRcIixcIm9sXCIsXCJvdXRwdXRcIixcInBcIixcInByZVwiLFwicnVieVwiLFwic2VjdGlvblwiLFwidGFibGVcIixcInRyXCIsXCJ0Zm9vdFwiLFwidWxcIixcInZpZGVvXCJdfX1dKSx0fSgpO28uZGVmYXVsdD11LHUuZGlzcGxheU5hbWU9XCJEb21cIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigzMikscj1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHQ+MD9yKG8odCksOTAwNzE5OTI1NDc0MDk5MSk6MH19LGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5leHBvcnRzPXt2ZXJzaW9uOlwiMi42LjExXCJ9O1wibnVtYmVyXCI9PXR5cGVvZiBfX2UmJihfX2U9bil9LGZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9IW4oMTApKChmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDExKSxyPW4oMTA5KSxpPW4oNDApLGE9T2JqZWN0LmRlZmluZVByb3BlcnR5O2UuZj1uKDE4KT9PYmplY3QuZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24odCxlLG4pe2lmKG8odCksZT1pKGUsITApLG8obikscil0cnl7cmV0dXJuIGEodCxlLG4pfWNhdGNoKHQpe31pZihcImdldFwiaW4gbnx8XCJzZXRcImluIG4pdGhyb3cgVHlwZUVycm9yKFwiQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhXCIpO3JldHVyblwidmFsdWVcImluIG4mJih0W2VdPW4udmFsdWUpLHR9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigzNyk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3Qobyh0KSl9fSxmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPW4oMTQwKX0sZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBuKHQsZSxuLG8scixpLGEpe3RyeXt2YXIgcz10W2ldKGEpLGM9cy52YWx1ZX1jYXRjaCh0KXtyZXR1cm4gdm9pZCBuKHQpfXMuZG9uZT9lKGMpOlByb21pc2UucmVzb2x2ZShjKS50aGVuKG8scil9dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3ZhciBlPXRoaXMsbz1hcmd1bWVudHM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihyLGkpe3ZhciBhPXQuYXBwbHkoZSxvKTtmdW5jdGlvbiBzKHQpe24oYSxyLGkscyxjLFwibmV4dFwiLHQpfWZ1bmN0aW9uIGModCl7bihhLHIsaSxzLGMsXCJ0aHJvd1wiLHQpfXModm9pZCAwKX0pKX19fSxmdW5jdGlvbih0LGUsbil7dmFyIG89big5KSxyPW4oMjcpLGk9bigyNiksYT1uKDQzKShcInNyY1wiKSxzPW4oMTg2KSxjPShcIlwiK3MpLnNwbGl0KFwidG9TdHJpbmdcIik7bigxNykuaW5zcGVjdFNvdXJjZT1mdW5jdGlvbih0KXtyZXR1cm4gcy5jYWxsKHQpfSwodC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLHMpe3ZhciBsPVwiZnVuY3Rpb25cIj09dHlwZW9mIG47bCYmKGkobixcIm5hbWVcIil8fHIobixcIm5hbWVcIixlKSksdFtlXSE9PW4mJihsJiYoaShuLGEpfHxyKG4sYSx0W2VdP1wiXCIrdFtlXTpjLmpvaW4oU3RyaW5nKGUpKSkpLHQ9PT1vP3RbZV09bjpzP3RbZV0/dFtlXT1uOnIodCxlLG4pOihkZWxldGUgdFtlXSxyKHQsZSxuKSkpfSkoRnVuY3Rpb24ucHJvdG90eXBlLFwidG9TdHJpbmdcIiwoZnVuY3Rpb24oKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzJiZ0aGlzW2FdfHxzLmNhbGwodGhpcyl9KSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9bigxMCksaT1uKDM3KSxhPS9cIi9nLHM9ZnVuY3Rpb24odCxlLG4sbyl7dmFyIHI9U3RyaW5nKGkodCkpLHM9XCI8XCIrZTtyZXR1cm5cIlwiIT09biYmKHMrPVwiIFwiK24rJz1cIicrU3RyaW5nKG8pLnJlcGxhY2UoYSxcIiZxdW90O1wiKSsnXCInKSxzK1wiPlwiK3IrXCI8L1wiK2UrXCI+XCJ9O3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciBuPXt9O25bdF09ZShzKSxvKG8uUCtvLkYqcigoZnVuY3Rpb24oKXt2YXIgZT1cIlwiW3RdKCdcIicpO3JldHVybiBlIT09ZS50b0xvd2VyQ2FzZSgpfHxlLnNwbGl0KCdcIicpLmxlbmd0aD4zfSkpLFwiU3RyaW5nXCIsbil9fSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbig4KSxuKDE1KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhLHMpe1widXNlIHN0cmljdFwiO3ZhciBjPW4oMTMpLGw9bigxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9bChyKSxpPWwoaSksYT1jKGEpLHM9bChzKTt2YXIgdT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXsoMCxyLmRlZmF1bHQpKHRoaXMsdCksdGhpcy5pbnN0YW5jZT1udWxsLHRoaXMuc2VsZWN0aW9uPW51bGwsdGhpcy5zYXZlZFNlbGVjdGlvblJhbmdlPW51bGwsdGhpcy5pc0Zha2VCYWNrZ3JvdW5kRW5hYmxlZD0hMSx0aGlzLmNvbW1hbmRCYWNrZ3JvdW5kPVwiYmFja0NvbG9yXCIsdGhpcy5jb21tYW5kUmVtb3ZlRm9ybWF0PVwicmVtb3ZlRm9ybWF0XCJ9cmV0dXJuKDAsaS5kZWZhdWx0KSh0LFt7a2V5OlwicmVtb3ZlRmFrZUJhY2tncm91bmRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuaXNGYWtlQmFja2dyb3VuZEVuYWJsZWQmJih0aGlzLmlzRmFrZUJhY2tncm91bmRFbmFibGVkPSExLGRvY3VtZW50LmV4ZWNDb21tYW5kKHRoaXMuY29tbWFuZFJlbW92ZUZvcm1hdCkpfX0se2tleTpcInNldEZha2VCYWNrZ3JvdW5kXCIsdmFsdWU6ZnVuY3Rpb24oKXtkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmNvbW1hbmRCYWNrZ3JvdW5kLCExLFwiI2E4ZDZmZlwiKSx0aGlzLmlzRmFrZUJhY2tncm91bmRFbmFibGVkPSEwfX0se2tleTpcInNhdmVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2F2ZWRTZWxlY3Rpb25SYW5nZT10LnJhbmdlfX0se2tleTpcInJlc3RvcmVcIix2YWx1ZTpmdW5jdGlvbigpe2lmKHRoaXMuc2F2ZWRTZWxlY3Rpb25SYW5nZSl7dmFyIHQ9d2luZG93LmdldFNlbGVjdGlvbigpO3QucmVtb3ZlQWxsUmFuZ2VzKCksdC5hZGRSYW5nZSh0aGlzLnNhdmVkU2VsZWN0aW9uUmFuZ2UpfX19LHtrZXk6XCJjbGVhclNhdmVkXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnNhdmVkU2VsZWN0aW9uUmFuZ2U9bnVsbH19LHtrZXk6XCJjb2xsYXBzZVRvRW5kXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD13aW5kb3cuZ2V0U2VsZWN0aW9uKCksZT1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHQuZm9jdXNOb2RlKSxlLmNvbGxhcHNlKCExKSx0LnJlbW92ZUFsbFJhbmdlcygpLHQuYWRkUmFuZ2UoZSl9fSx7a2V5OlwiZmluZFBhcmVudFRhZ1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjEwLG89d2luZG93LmdldFNlbGVjdGlvbigpLHI9bnVsbDtpZighb3x8IW8uYW5jaG9yTm9kZXx8IW8uZm9jdXNOb2RlKXJldHVybiBudWxsO3ZhciBpPVtvLmFuY2hvck5vZGUsby5mb2N1c05vZGVdO3JldHVybiBpLmZvckVhY2goKGZ1bmN0aW9uKG8pe2Zvcih2YXIgaT1uO2k+MCYmby5wYXJlbnROb2RlJiYoby50YWdOYW1lIT09dHx8KHI9byxlJiZvLmNsYXNzTGlzdCYmIW8uY2xhc3NMaXN0LmNvbnRhaW5zKGUpJiYocj1udWxsKSwhcikpOylvPW8ucGFyZW50Tm9kZSxpLS19KSkscn19LHtrZXk6XCJleHBhbmRUb1RhZ1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXdpbmRvdy5nZXRTZWxlY3Rpb24oKTtlLnJlbW92ZUFsbFJhbmdlcygpO3ZhciBuPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7bi5zZWxlY3ROb2RlQ29udGVudHModCksZS5hZGRSYW5nZShuKX19XSxbe2tleTpcImdldFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5nZXRTZWxlY3Rpb24oKX19LHtrZXk6XCJzZXRDdXJzb3JcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MCxuPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCksbz13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7aWYocy5kZWZhdWx0LmlzTmF0aXZlSW5wdXQodCkpe2lmKCFzLmRlZmF1bHQuY2FuU2V0Q2FyZXQodCkpcmV0dXJuO3JldHVybiB0LmZvY3VzKCksdC5zZWxlY3Rpb25TdGFydD10LnNlbGVjdGlvbkVuZD1lLHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCl9cmV0dXJuIG4uc2V0U3RhcnQodCxlKSxuLnNldEVuZCh0LGUpLG8ucmVtb3ZlQWxsUmFuZ2VzKCksby5hZGRSYW5nZShuKSxuLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpfX0se2tleTpcIkNTU1wiLGdldDpmdW5jdGlvbigpe3JldHVybntlZGl0b3JXcmFwcGVyOlwiY29kZXgtZWRpdG9yXCIsZWRpdG9yWm9uZTpcImNvZGV4LWVkaXRvcl9fcmVkYWN0b3JcIn19fSx7a2V5OlwiYW5jaG9yTm9kZVwiLGdldDpmdW5jdGlvbigpe3ZhciB0PXdpbmRvdy5nZXRTZWxlY3Rpb24oKTtyZXR1cm4gdD90LmFuY2hvck5vZGU6bnVsbH19LHtrZXk6XCJhbmNob3JFbGVtZW50XCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9d2luZG93LmdldFNlbGVjdGlvbigpO2lmKCF0KXJldHVybiBudWxsO3ZhciBlPXQuYW5jaG9yTm9kZTtyZXR1cm4gZT9zLmRlZmF1bHQuaXNFbGVtZW50KGUpP2U6ZS5wYXJlbnRFbGVtZW50Om51bGx9fSx7a2V5OlwiYW5jaG9yT2Zmc2V0XCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9d2luZG93LmdldFNlbGVjdGlvbigpO3JldHVybiB0P3QuYW5jaG9yT2Zmc2V0Om51bGx9fSx7a2V5OlwiaXNDb2xsYXBzZWRcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7cmV0dXJuIHQ/dC5pc0NvbGxhcHNlZDpudWxsfX0se2tleTpcImlzQXRFZGl0b3JcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgZT10LmdldCgpLG49ZS5hbmNob3JOb2RlfHxlLmZvY3VzTm9kZTtuJiZuLm5vZGVUeXBlPT09Tm9kZS5URVhUX05PREUmJihuPW4ucGFyZW50Tm9kZSk7dmFyIG89bnVsbDtyZXR1cm4gbiYmKG89bi5jbG9zZXN0KFwiLlwiLmNvbmNhdCh0LkNTUy5lZGl0b3Jab25lKSkpLG8mJm8ubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERX19LHtrZXk6XCJpc1NlbGVjdGlvbkV4aXN0c1wiLGdldDpmdW5jdGlvbigpe3JldHVybiEhdC5nZXQoKS5hbmNob3JOb2RlfX0se2tleTpcInJhbmdlXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9d2luZG93LmdldFNlbGVjdGlvbigpO3JldHVybiB0JiZ0LnJhbmdlQ291bnQ/dC5nZXRSYW5nZUF0KDApOm51bGx9fSx7a2V5OlwicmVjdFwiLGdldDpmdW5jdGlvbigpe3ZhciB0LGU9ZG9jdW1lbnQuc2VsZWN0aW9uLG49e3g6MCx5OjAsd2lkdGg6MCxoZWlnaHQ6MH07aWYoZSYmXCJDb250cm9sXCIhPT1lLnR5cGUpcmV0dXJuIHQ9KGU9ZSkuY3JlYXRlUmFuZ2UoKSxuLng9dC5ib3VuZGluZ0xlZnQsbi55PXQuYm91bmRpbmdUb3Asbi53aWR0aD10LmJvdW5kaW5nV2lkdGgsbi5oZWlnaHQ9dC5ib3VuZGluZ0hlaWdodCxuO2lmKCF3aW5kb3cuZ2V0U2VsZWN0aW9uKXJldHVybiBhLmxvZyhcIk1ldGhvZCB3aW5kb3cuZ2V0U2VsZWN0aW9uIGlzIG5vdCBzdXBwb3J0ZWRcIixcIndhcm5cIiksbjtpZihudWxsPT09KGU9d2luZG93LmdldFNlbGVjdGlvbigpKS5yYW5nZUNvdW50fHxpc05hTihlLnJhbmdlQ291bnQpKXJldHVybiBhLmxvZyhcIk1ldGhvZCBTZWxlY3Rpb25VdGlscy5yYW5nZUNvdW50IGlzIG5vdCBzdXBwb3J0ZWRcIixcIndhcm5cIiksbjtpZigwPT09ZS5yYW5nZUNvdW50KXJldHVybiBuO2lmKCh0PWUuZ2V0UmFuZ2VBdCgwKS5jbG9uZVJhbmdlKCkpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCYmKG49dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSksMD09PW4ueCYmMD09PW4ueSl7dmFyIG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7aWYoby5nZXRCb3VuZGluZ0NsaWVudFJlY3Qpe28uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCLigItcIikpLHQuaW5zZXJ0Tm9kZShvKSxuPW8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dmFyIHI9by5wYXJlbnROb2RlO3IucmVtb3ZlQ2hpbGQobyksci5ub3JtYWxpemUoKX19cmV0dXJuIG59fSx7a2V5OlwidGV4dFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB3aW5kb3cuZ2V0U2VsZWN0aW9uP3dpbmRvdy5nZXRTZWxlY3Rpb24oKS50b1N0cmluZygpOlwiXCJ9fV0pLHR9KCk7by5kZWZhdWx0PXUsdS5kaXNwbGF5TmFtZT1cIlNlbGVjdGlvblV0aWxzXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlKXt2YXIgbj17fS5oYXNPd25Qcm9wZXJ0eTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbi5jYWxsKHQsZSl9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxOSkscj1uKDQyKTt0LmV4cG9ydHM9bigxOCk/ZnVuY3Rpb24odCxlLG4pe3JldHVybiBvLmYodCxlLHIoMSxuKSl9OmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdFtlXT1uLHR9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89big2Mikscj1uKDM3KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIG8ocih0KSl9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigxMCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuISF0JiZvKChmdW5jdGlvbigpe2U/dC5jYWxsKG51bGwsKGZ1bmN0aW9uKCl7fSksMSk6dC5jYWxsKG51bGwpfSkpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMzEpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7aWYobyh0KSx2b2lkIDA9PT1lKXJldHVybiB0O3N3aXRjaChuKXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiB0LmNhbGwoZSxuKX07Y2FzZSAyOnJldHVybiBmdW5jdGlvbihuLG8pe3JldHVybiB0LmNhbGwoZSxuLG8pfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKG4sbyxyKXtyZXR1cm4gdC5jYWxsKGUsbixvLHIpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseShlLGFyZ3VtZW50cyl9fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBUeXBlRXJyb3IodCtcIiBpcyBub3QgYSBmdW5jdGlvbiFcIik7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUpe3ZhciBuPU1hdGguY2VpbCxvPU1hdGguZmxvb3I7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBpc05hTih0PSt0KT8wOih0PjA/bzpuKSh0KX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDYzKSxyPW4oNDIpLGk9bigyOCksYT1uKDQwKSxzPW4oMjYpLGM9bigxMDkpLGw9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtlLmY9bigxOCk/bDpmdW5jdGlvbih0LGUpe2lmKHQ9aSh0KSxlPWEoZSwhMCksYyl0cnl7cmV0dXJuIGwodCxlKX1jYXRjaCh0KXt9aWYocyh0LGUpKXJldHVybiByKCFvLmYuY2FsbCh0LGUpLHRbZV0pfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCkscj1uKDE3KSxpPW4oMTApO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciBuPShyLk9iamVjdHx8e30pW3RdfHxPYmplY3RbdF0sYT17fTthW3RdPWUobiksbyhvLlMrby5GKmkoKGZ1bmN0aW9uKCl7bigxKX0pKSxcIk9iamVjdFwiLGEpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMzApLHI9big2MiksaT1uKDIwKSxhPW4oMTYpLHM9bigxMjUpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciBuPTE9PXQsYz0yPT10LGw9Mz09dCx1PTQ9PXQsZj02PT10LGQ9NT09dHx8ZixwPWV8fHM7cmV0dXJuIGZ1bmN0aW9uKGUscyxoKXtmb3IodmFyIHYsZyx5PWkoZSksYj1yKHkpLG09byhzLGgsMyksaz1hKGIubGVuZ3RoKSx4PTAsUz1uP3AoZSxrKTpjP3AoZSwwKTp2b2lkIDA7az54O3grKylpZigoZHx8eCBpbiBiKSYmKGc9bSh2PWJbeF0seCx5KSx0KSlpZihuKVNbeF09ZztlbHNlIGlmKGcpc3dpdGNoKHQpe2Nhc2UgMzpyZXR1cm4hMDtjYXNlIDU6cmV0dXJuIHY7Y2FzZSA2OnJldHVybiB4O2Nhc2UgMjpTLnB1c2godil9ZWxzZSBpZih1KXJldHVybiExO3JldHVybiBmPy0xOmx8fHU/dTpTfX19LGZ1bmN0aW9uKHQsZSl7dmFyIG49e30udG9TdHJpbmc7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBuLmNhbGwodCkuc2xpY2UoOCwtMSl9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZihudWxsPT10KXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIit0KTtyZXR1cm4gdH19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtpZihuKDE4KSl7dmFyIG89big0NCkscj1uKDkpLGk9bigxMCksYT1uKDApLHM9big3OCksYz1uKDEwNiksbD1uKDMwKSx1PW4oNTYpLGY9big0MiksZD1uKDI3KSxwPW4oNTcpLGg9bigzMiksdj1uKDE2KSxnPW4oMTM2KSx5PW4oNDYpLGI9big0MCksbT1uKDI2KSxrPW4oNjQpLHg9bigxMiksUz1uKDIwKSx3PW4oOTgpLFQ9big0NyksRT1uKDQ5KSxDPW4oNDgpLmYsQj1uKDEwMCksXz1uKDQzKSxPPW4oMTQpLEk9bigzNSksTj1uKDY4KSxNPW4oNjUpLFI9bigxMDIpLEE9big1NCksTD1uKDcxKSxQPW4oNTUpLEQ9bigxMDEpLGo9bigxMjcpLEY9bigxOSksVT1uKDMzKSxIPUYuZix6PVUuZixXPXIuUmFuZ2VFcnJvcixHPXIuVHlwZUVycm9yLFY9ci5VaW50OEFycmF5LFg9QXJyYXkucHJvdG90eXBlLFk9Yy5BcnJheUJ1ZmZlcixLPWMuRGF0YVZpZXcsWj1JKDApLHE9SSgyKSxKPUkoMyksJD1JKDQpLFE9SSg1KSx0dD1JKDYpLGV0PU4oITApLG50PU4oITEpLG90PVIudmFsdWVzLHJ0PVIua2V5cyxpdD1SLmVudHJpZXMsYXQ9WC5sYXN0SW5kZXhPZixzdD1YLnJlZHVjZSxjdD1YLnJlZHVjZVJpZ2h0LGx0PVguam9pbix1dD1YLnNvcnQsZnQ9WC5zbGljZSxkdD1YLnRvU3RyaW5nLHB0PVgudG9Mb2NhbGVTdHJpbmcsaHQ9TyhcIml0ZXJhdG9yXCIpLHZ0PU8oXCJ0b1N0cmluZ1RhZ1wiKSxndD1fKFwidHlwZWRfY29uc3RydWN0b3JcIikseXQ9XyhcImRlZl9jb25zdHJ1Y3RvclwiKSxidD1zLkNPTlNUUixtdD1zLlRZUEVELGt0PXMuVklFVyx4dD1JKDEsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIEN0KE0odCx0W3l0XSksZSl9KSksU3Q9aSgoZnVuY3Rpb24oKXtyZXR1cm4gMT09PW5ldyBWKG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF19KSksd3Q9ISFWJiYhIVYucHJvdG90eXBlLnNldCYmaSgoZnVuY3Rpb24oKXtuZXcgVigxKS5zZXQoe30pfSkpLFR0PWZ1bmN0aW9uKHQsZSl7dmFyIG49aCh0KTtpZihuPDB8fG4lZSl0aHJvdyBXKFwiV3Jvbmcgb2Zmc2V0IVwiKTtyZXR1cm4gbn0sRXQ9ZnVuY3Rpb24odCl7aWYoeCh0KSYmbXQgaW4gdClyZXR1cm4gdDt0aHJvdyBHKHQrXCIgaXMgbm90IGEgdHlwZWQgYXJyYXkhXCIpfSxDdD1mdW5jdGlvbih0LGUpe2lmKCF4KHQpfHwhKGd0IGluIHQpKXRocm93IEcoXCJJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciFcIik7cmV0dXJuIG5ldyB0KGUpfSxCdD1mdW5jdGlvbih0LGUpe3JldHVybiBfdChNKHQsdFt5dF0pLGUpfSxfdD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wLG89ZS5sZW5ndGgscj1DdCh0LG8pO28+bjspcltuXT1lW24rK107cmV0dXJuIHJ9LE90PWZ1bmN0aW9uKHQsZSxuKXtIKHQsZSx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2Rbbl19fSl9LEl0PWZ1bmN0aW9uKHQpe3ZhciBlLG4sbyxyLGksYSxzPVModCksYz1hcmd1bWVudHMubGVuZ3RoLHU9Yz4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsZj12b2lkIDAhPT11LGQ9QihzKTtpZihudWxsIT1kJiYhdyhkKSl7Zm9yKGE9ZC5jYWxsKHMpLG89W10sZT0wOyEoaT1hLm5leHQoKSkuZG9uZTtlKyspby5wdXNoKGkudmFsdWUpO3M9b31mb3IoZiYmYz4yJiYodT1sKHUsYXJndW1lbnRzWzJdLDIpKSxlPTAsbj12KHMubGVuZ3RoKSxyPUN0KHRoaXMsbik7bj5lO2UrKylyW2VdPWY/dShzW2VdLGUpOnNbZV07cmV0dXJuIHJ9LE50PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PTAsZT1hcmd1bWVudHMubGVuZ3RoLG49Q3QodGhpcyxlKTtlPnQ7KW5bdF09YXJndW1lbnRzW3QrK107cmV0dXJuIG59LE10PSEhViYmaSgoZnVuY3Rpb24oKXtwdC5jYWxsKG5ldyBWKDEpKX0pKSxSdD1mdW5jdGlvbigpe3JldHVybiBwdC5hcHBseShNdD9mdC5jYWxsKEV0KHRoaXMpKTpFdCh0aGlzKSxhcmd1bWVudHMpfSxBdD17Y29weVdpdGhpbjpmdW5jdGlvbih0LGUpe3JldHVybiBqLmNhbGwoRXQodGhpcyksdCxlLGFyZ3VtZW50cy5sZW5ndGg+Mj9hcmd1bWVudHNbMl06dm9pZCAwKX0sZXZlcnk6ZnVuY3Rpb24odCl7cmV0dXJuICQoRXQodGhpcyksdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LGZpbGw6ZnVuY3Rpb24odCl7cmV0dXJuIEQuYXBwbHkoRXQodGhpcyksYXJndW1lbnRzKX0sZmlsdGVyOmZ1bmN0aW9uKHQpe3JldHVybiBCdCh0aGlzLHEoRXQodGhpcyksdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCkpfSxmaW5kOmZ1bmN0aW9uKHQpe3JldHVybiBRKEV0KHRoaXMpLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxmaW5kSW5kZXg6ZnVuY3Rpb24odCl7cmV0dXJuIHR0KEV0KHRoaXMpLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxmb3JFYWNoOmZ1bmN0aW9uKHQpe1ooRXQodGhpcyksdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LGluZGV4T2Y6ZnVuY3Rpb24odCl7cmV0dXJuIG50KEV0KHRoaXMpLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxpbmNsdWRlczpmdW5jdGlvbih0KXtyZXR1cm4gZXQoRXQodGhpcyksdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9LGpvaW46ZnVuY3Rpb24odCl7cmV0dXJuIGx0LmFwcGx5KEV0KHRoaXMpLGFyZ3VtZW50cyl9LGxhc3RJbmRleE9mOmZ1bmN0aW9uKHQpe3JldHVybiBhdC5hcHBseShFdCh0aGlzKSxhcmd1bWVudHMpfSxtYXA6ZnVuY3Rpb24odCl7cmV0dXJuIHh0KEV0KHRoaXMpLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfSxyZWR1Y2U6ZnVuY3Rpb24odCl7cmV0dXJuIHN0LmFwcGx5KEV0KHRoaXMpLGFyZ3VtZW50cyl9LHJlZHVjZVJpZ2h0OmZ1bmN0aW9uKHQpe3JldHVybiBjdC5hcHBseShFdCh0aGlzKSxhcmd1bWVudHMpfSxyZXZlcnNlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0LGU9RXQodGhpcykubGVuZ3RoLG49TWF0aC5mbG9vcihlLzIpLG89MDtvPG47KXQ9dGhpc1tvXSx0aGlzW28rK109dGhpc1stLWVdLHRoaXNbZV09dDtyZXR1cm4gdGhpc30sc29tZTpmdW5jdGlvbih0KXtyZXR1cm4gSihFdCh0aGlzKSx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX0sc29ydDpmdW5jdGlvbih0KXtyZXR1cm4gdXQuY2FsbChFdCh0aGlzKSx0KX0sc3ViYXJyYXk6ZnVuY3Rpb24odCxlKXt2YXIgbj1FdCh0aGlzKSxvPW4ubGVuZ3RoLHI9eSh0LG8pO3JldHVybiBuZXcoTShuLG5beXRdKSkobi5idWZmZXIsbi5ieXRlT2Zmc2V0K3Iqbi5CWVRFU19QRVJfRUxFTUVOVCx2KCh2b2lkIDA9PT1lP286eShlLG8pKS1yKSl9fSxMdD1mdW5jdGlvbih0LGUpe3JldHVybiBCdCh0aGlzLGZ0LmNhbGwoRXQodGhpcyksdCxlKSl9LFB0PWZ1bmN0aW9uKHQpe0V0KHRoaXMpO3ZhciBlPVR0KGFyZ3VtZW50c1sxXSwxKSxuPXRoaXMubGVuZ3RoLG89Uyh0KSxyPXYoby5sZW5ndGgpLGk9MDtpZihyK2U+bil0aHJvdyBXKFwiV3JvbmcgbGVuZ3RoIVwiKTtmb3IoO2k8cjspdGhpc1tlK2ldPW9baSsrXX0sRHQ9e2VudHJpZXM6ZnVuY3Rpb24oKXtyZXR1cm4gaXQuY2FsbChFdCh0aGlzKSl9LGtleXM6ZnVuY3Rpb24oKXtyZXR1cm4gcnQuY2FsbChFdCh0aGlzKSl9LHZhbHVlczpmdW5jdGlvbigpe3JldHVybiBvdC5jYWxsKEV0KHRoaXMpKX19LGp0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHgodCkmJnRbbXRdJiZcInN5bWJvbFwiIT10eXBlb2YgZSYmZSBpbiB0JiZTdHJpbmcoK2UpPT1TdHJpbmcoZSl9LEZ0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGp0KHQsZT1iKGUsITApKT9mKDIsdFtlXSk6eih0LGUpfSxVdD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIShqdCh0LGU9YihlLCEwKSkmJngobikmJm0obixcInZhbHVlXCIpKXx8bShuLFwiZ2V0XCIpfHxtKG4sXCJzZXRcIil8fG4uY29uZmlndXJhYmxlfHxtKG4sXCJ3cml0YWJsZVwiKSYmIW4ud3JpdGFibGV8fG0obixcImVudW1lcmFibGVcIikmJiFuLmVudW1lcmFibGU/SCh0LGUsbik6KHRbZV09bi52YWx1ZSx0KX07YnR8fChVLmY9RnQsRi5mPVV0KSxhKGEuUythLkYqIWJ0LFwiT2JqZWN0XCIse2dldE93blByb3BlcnR5RGVzY3JpcHRvcjpGdCxkZWZpbmVQcm9wZXJ0eTpVdH0pLGkoKGZ1bmN0aW9uKCl7ZHQuY2FsbCh7fSl9KSkmJihkdD1wdD1mdW5jdGlvbigpe3JldHVybiBsdC5jYWxsKHRoaXMpfSk7dmFyIEh0PXAoe30sQXQpO3AoSHQsRHQpLGQoSHQsaHQsRHQudmFsdWVzKSxwKEh0LHtzbGljZTpMdCxzZXQ6UHQsY29uc3RydWN0b3I6ZnVuY3Rpb24oKXt9LHRvU3RyaW5nOmR0LHRvTG9jYWxlU3RyaW5nOlJ0fSksT3QoSHQsXCJidWZmZXJcIixcImJcIiksT3QoSHQsXCJieXRlT2Zmc2V0XCIsXCJvXCIpLE90KEh0LFwiYnl0ZUxlbmd0aFwiLFwibFwiKSxPdChIdCxcImxlbmd0aFwiLFwiZVwiKSxIKEh0LHZ0LHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1ttdF19fSksdC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLGMpe3ZhciBsPXQrKChjPSEhYyk/XCJDbGFtcGVkXCI6XCJcIikrXCJBcnJheVwiLGY9XCJnZXRcIit0LHA9XCJzZXRcIit0LGg9cltsXSx5PWh8fHt9LGI9aCYmRShoKSxtPSFofHwhcy5BQlYsUz17fSx3PWgmJmgucHJvdG90eXBlLEI9ZnVuY3Rpb24odCxuKXtIKHQsbix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsbil7dmFyIG89dC5fZDtyZXR1cm4gby52W2ZdKG4qZStvLm8sU3QpfSh0aGlzLG4pfSxzZXQ6ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsbixvKXt2YXIgcj10Ll9kO2MmJihvPShvPU1hdGgucm91bmQobykpPDA/MDpvPjI1NT8yNTU6MjU1Jm8pLHIudltwXShuKmUrci5vLG8sU3QpfSh0aGlzLG4sdCl9LGVudW1lcmFibGU6ITB9KX07bT8oaD1uKChmdW5jdGlvbih0LG4sbyxyKXt1KHQsaCxsLFwiX2RcIik7dmFyIGksYSxzLGMsZj0wLHA9MDtpZih4KG4pKXtpZighKG4gaW5zdGFuY2VvZiBZfHxcIkFycmF5QnVmZmVyXCI9PShjPWsobikpfHxcIlNoYXJlZEFycmF5QnVmZmVyXCI9PWMpKXJldHVybiBtdCBpbiBuP190KGgsbik6SXQuY2FsbChoLG4pO2k9bixwPVR0KG8sZSk7dmFyIHk9bi5ieXRlTGVuZ3RoO2lmKHZvaWQgMD09PXIpe2lmKHklZSl0aHJvdyBXKFwiV3JvbmcgbGVuZ3RoIVwiKTtpZigoYT15LXApPDApdGhyb3cgVyhcIldyb25nIGxlbmd0aCFcIil9ZWxzZSBpZigoYT12KHIpKmUpK3A+eSl0aHJvdyBXKFwiV3JvbmcgbGVuZ3RoIVwiKTtzPWEvZX1lbHNlIHM9ZyhuKSxpPW5ldyBZKGE9cyplKTtmb3IoZCh0LFwiX2RcIix7YjppLG86cCxsOmEsZTpzLHY6bmV3IEsoaSl9KTtmPHM7KUIodCxmKyspfSkpLHc9aC5wcm90b3R5cGU9VChIdCksZCh3LFwiY29uc3RydWN0b3JcIixoKSk6aSgoZnVuY3Rpb24oKXtoKDEpfSkpJiZpKChmdW5jdGlvbigpe25ldyBoKC0xKX0pKSYmTCgoZnVuY3Rpb24odCl7bmV3IGgsbmV3IGgobnVsbCksbmV3IGgoMS41KSxuZXcgaCh0KX0pLCEwKXx8KGg9bigoZnVuY3Rpb24odCxuLG8scil7dmFyIGk7cmV0dXJuIHUodCxoLGwpLHgobik/biBpbnN0YW5jZW9mIFl8fFwiQXJyYXlCdWZmZXJcIj09KGk9ayhuKSl8fFwiU2hhcmVkQXJyYXlCdWZmZXJcIj09aT92b2lkIDAhPT1yP25ldyB5KG4sVHQobyxlKSxyKTp2b2lkIDAhPT1vP25ldyB5KG4sVHQobyxlKSk6bmV3IHkobik6bXQgaW4gbj9fdChoLG4pOkl0LmNhbGwoaCxuKTpuZXcgeShnKG4pKX0pKSxaKGIhPT1GdW5jdGlvbi5wcm90b3R5cGU/Qyh5KS5jb25jYXQoQyhiKSk6Qyh5KSwoZnVuY3Rpb24odCl7dCBpbiBofHxkKGgsdCx5W3RdKX0pKSxoLnByb3RvdHlwZT13LG98fCh3LmNvbnN0cnVjdG9yPWgpKTt2YXIgXz13W2h0XSxPPSEhXyYmKFwidmFsdWVzXCI9PV8ubmFtZXx8bnVsbD09Xy5uYW1lKSxJPUR0LnZhbHVlcztkKGgsZ3QsITApLGQodyxtdCxsKSxkKHcsa3QsITApLGQodyx5dCxoKSwoYz9uZXcgaCgxKVt2dF09PWw6dnQgaW4gdyl8fEgodyx2dCx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9fSksU1tsXT1oLGEoYS5HK2EuVythLkYqKGghPXkpLFMpLGEoYS5TLGwse0JZVEVTX1BFUl9FTEVNRU5UOmV9KSxhKGEuUythLkYqaSgoZnVuY3Rpb24oKXt5Lm9mLmNhbGwoaCwxKX0pKSxsLHtmcm9tOkl0LG9mOk50fSksXCJCWVRFU19QRVJfRUxFTUVOVFwiaW4gd3x8ZCh3LFwiQllURVNfUEVSX0VMRU1FTlRcIixlKSxhKGEuUCxsLEF0KSxQKGwpLGEoYS5QK2EuRip3dCxsLHtzZXQ6UHR9KSxhKGEuUCthLkYqIU8sbCxEdCksb3x8dy50b1N0cmluZz09ZHR8fCh3LnRvU3RyaW5nPWR0KSxhKGEuUCthLkYqaSgoZnVuY3Rpb24oKXtuZXcgaCgxKS5zbGljZSgpfSkpLGwse3NsaWNlOkx0fSksYShhLlArYS5GKihpKChmdW5jdGlvbigpe3JldHVyblsxLDJdLnRvTG9jYWxlU3RyaW5nKCkhPW5ldyBoKFsxLDJdKS50b0xvY2FsZVN0cmluZygpfSkpfHwhaSgoZnVuY3Rpb24oKXt3LnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsMl0pfSkpKSxsLHt0b0xvY2FsZVN0cmluZzpSdH0pLEFbbF09Tz9fOkksb3x8T3x8ZCh3LGh0LEkpfX1lbHNlIHQuZXhwb3J0cz1mdW5jdGlvbigpe319LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDM1NSkscj1uKDM1NiksaT1uKDE0MSksYT1uKDM1Nyk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG8odCl8fHIodCxlKXx8aSh0LGUpfHxhKCl9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxMik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoIW8odCkpcmV0dXJuIHQ7dmFyIG4scjtpZihlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihuPXQudG9TdHJpbmcpJiYhbyhyPW4uY2FsbCh0KSkpcmV0dXJuIHI7aWYoXCJmdW5jdGlvblwiPT10eXBlb2Yobj10LnZhbHVlT2YpJiYhbyhyPW4uY2FsbCh0KSkpcmV0dXJuIHI7aWYoIWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mKG49dC50b1N0cmluZykmJiFvKHI9bi5jYWxsKHQpKSlyZXR1cm4gcjt0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIil9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89big0MykoXCJtZXRhXCIpLHI9bigxMiksaT1uKDI2KSxhPW4oMTkpLmYscz0wLGM9T2JqZWN0LmlzRXh0ZW5zaWJsZXx8ZnVuY3Rpb24oKXtyZXR1cm4hMH0sbD0hbigxMCkoKGZ1bmN0aW9uKCl7cmV0dXJuIGMoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSl9KSksdT1mdW5jdGlvbih0KXthKHQsbyx7dmFsdWU6e2k6XCJPXCIrICsrcyx3Ont9fX0pfSxmPXQuZXhwb3J0cz17S0VZOm8sTkVFRDohMSxmYXN0S2V5OmZ1bmN0aW9uKHQsZSl7aWYoIXIodCkpcmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIHQ/dDooXCJzdHJpbmdcIj09dHlwZW9mIHQ/XCJTXCI6XCJQXCIpK3Q7aWYoIWkodCxvKSl7aWYoIWModCkpcmV0dXJuXCJGXCI7aWYoIWUpcmV0dXJuXCJFXCI7dSh0KX1yZXR1cm4gdFtvXS5pfSxnZXRXZWFrOmZ1bmN0aW9uKHQsZSl7aWYoIWkodCxvKSl7aWYoIWModCkpcmV0dXJuITA7aWYoIWUpcmV0dXJuITE7dSh0KX1yZXR1cm4gdFtvXS53fSxvbkZyZWV6ZTpmdW5jdGlvbih0KXtyZXR1cm4gbCYmZi5ORUVEJiZjKHQpJiYhaSh0LG8pJiZ1KHQpLHR9fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm57ZW51bWVyYWJsZTohKDEmdCksY29uZmlndXJhYmxlOiEoMiZ0KSx3cml0YWJsZTohKDQmdCksdmFsdWU6ZX19fSxmdW5jdGlvbih0LGUpe3ZhciBuPTAsbz1NYXRoLnJhbmRvbSgpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm5cIlN5bWJvbChcIi5jb25jYXQodm9pZCAwPT09dD9cIlwiOnQsXCIpX1wiLCgrK24rbykudG9TdHJpbmcoMzYpKX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPSExfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxMTEpLHI9big4NSk7dC5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbih0KXtyZXR1cm4gbyh0LHIpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMzIpLHI9TWF0aC5tYXgsaT1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4odD1vKHQpKTwwP3IodCtlLDApOmkodCxlKX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDExKSxyPW4oMTEyKSxpPW4oODUpLGE9big4NCkoXCJJRV9QUk9UT1wiKSxzPWZ1bmN0aW9uKCl7fSxjPWZ1bmN0aW9uKCl7dmFyIHQsZT1uKDgyKShcImlmcmFtZVwiKSxvPWkubGVuZ3RoO2ZvcihlLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsbig4NikuYXBwZW5kQ2hpbGQoZSksZS5zcmM9XCJqYXZhc2NyaXB0OlwiLCh0PWUuY29udGVudFdpbmRvdy5kb2N1bWVudCkub3BlbigpLHQud3JpdGUoXCI8c2NyaXB0PmRvY3VtZW50LkY9T2JqZWN0PFxcL3NjcmlwdD5cIiksdC5jbG9zZSgpLGM9dC5GO28tLTspZGVsZXRlIGMucHJvdG90eXBlW2lbb11dO3JldHVybiBjKCl9O3QuZXhwb3J0cz1PYmplY3QuY3JlYXRlfHxmdW5jdGlvbih0LGUpe3ZhciBuO3JldHVybiBudWxsIT09dD8ocy5wcm90b3R5cGU9byh0KSxuPW5ldyBzLHMucHJvdG90eXBlPW51bGwsblthXT10KTpuPWMoKSx2b2lkIDA9PT1lP246cihuLGUpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTExKSxyPW4oODUpLmNvbmNhdChcImxlbmd0aFwiLFwicHJvdG90eXBlXCIpO2UuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc3x8ZnVuY3Rpb24odCl7cmV0dXJuIG8odCxyKX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDI2KSxyPW4oMjApLGk9big4NCkoXCJJRV9QUk9UT1wiKSxhPU9iamVjdC5wcm90b3R5cGU7dC5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24odCl7cmV0dXJuIHQ9cih0KSxvKHQsaSk/dFtpXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNvbnN0cnVjdG9yJiZ0IGluc3RhbmNlb2YgdC5jb25zdHJ1Y3Rvcj90LmNvbnN0cnVjdG9yLnByb3RvdHlwZTp0IGluc3RhbmNlb2YgT2JqZWN0P2E6bnVsbH19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDE0KShcInVuc2NvcGFibGVzXCIpLHI9QXJyYXkucHJvdG90eXBlO251bGw9PXJbb10mJm4oMjcpKHIsbyx7fSksdC5leHBvcnRzPWZ1bmN0aW9uKHQpe3Jbb11bdF09ITB9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxMik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoIW8odCl8fHQuX3QhPT1lKXRocm93IFR5cGVFcnJvcihcIkluY29tcGF0aWJsZSByZWNlaXZlciwgXCIrZStcIiByZXF1aXJlZCFcIik7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxOSkuZixyPW4oMjYpLGk9bigxNCkoXCJ0b1N0cmluZ1RhZ1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe3QmJiFyKHQ9bj90OnQucHJvdG90eXBlLGkpJiZvKHQsaSx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOmV9KX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9bigzNyksaT1uKDEwKSxhPW4oODgpLHM9XCJbXCIrYStcIl1cIixjPVJlZ0V4cChcIl5cIitzK3MrXCIqXCIpLGw9UmVnRXhwKHMrcytcIiokXCIpLHU9ZnVuY3Rpb24odCxlLG4pe3ZhciByPXt9LHM9aSgoZnVuY3Rpb24oKXtyZXR1cm4hIWFbdF0oKXx8XCLigIvChVwiIT1cIuKAi8KFXCJbdF0oKX0pKSxjPXJbdF09cz9lKGYpOmFbdF07biYmKHJbbl09YyksbyhvLlArby5GKnMsXCJTdHJpbmdcIixyKX0sZj11LnRyaW09ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD1TdHJpbmcocih0KSksMSZlJiYodD10LnJlcGxhY2UoYyxcIlwiKSksMiZlJiYodD10LnJlcGxhY2UobCxcIlwiKSksdH07dC5leHBvcnRzPXV9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXt9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89big5KSxyPW4oMTkpLGk9bigxOCksYT1uKDE0KShcInNwZWNpZXNcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPW9bdF07aSYmZSYmIWVbYV0mJnIuZihlLGEse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc319KX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLG8pe2lmKCEodCBpbnN0YW5jZW9mIGUpfHx2b2lkIDAhPT1vJiZvIGluIHQpdGhyb3cgVHlwZUVycm9yKG4rXCI6IGluY29ycmVjdCBpbnZvY2F0aW9uIVwiKTtyZXR1cm4gdH19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDIzKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgciBpbiBlKW8odCxyLGVbcl0sbik7cmV0dXJuIHR9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigzNjIpLHI9bigzNjMpLGk9bigxNDEpLGE9bigzNjQpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gbyh0KXx8cih0KXx8aSh0KXx8YSgpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oMTQ0KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhKXtcInVzZSBzdHJpY3RcIjt2YXIgcz1uKDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1zKHIpLGk9cyhpKSxhPXMoYSk7dmFyIGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7KDAsci5kZWZhdWx0KSh0aGlzLHQpfXJldHVybigwLGkuZGVmYXVsdCkodCxudWxsLFt7a2V5OlwidWlcIix2YWx1ZTpmdW5jdGlvbihlLG4pe3JldHVybiB0Ll90KGUsbil9fSx7a2V5OlwidFwiLHZhbHVlOmZ1bmN0aW9uKGUsbil7cmV0dXJuIHQuX3QoZSxuKX19LHtrZXk6XCJzZXREaWN0aW9uYXJ5XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dC5jdXJyZW50RGljdGlvbmFyeT1lfX0se2tleTpcIl90XCIsdmFsdWU6ZnVuY3Rpb24oZSxuKXt2YXIgbz10LmdldE5hbWVzcGFjZShlKTtyZXR1cm4gbyYmb1tuXT9vW25dOm59fSx7a2V5OlwiZ2V0TmFtZXNwYWNlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3BsaXQoXCIuXCIpLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCYmT2JqZWN0LmtleXModCkubGVuZ3RoP3RbZV06e319KSx0LmN1cnJlbnREaWN0aW9uYXJ5KX19XSksdH0oKTtvLmRlZmF1bHQ9YyxjLmRpc3BsYXlOYW1lPVwiSTE4blwiLGMuY3VycmVudERpY3Rpb25hcnk9YS5kZWZhdWx0LHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDM3OSksbig4KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhLHMpe1widXNlIHN0cmljdFwiO3ZhciBjPW4oMTMpLGw9bigxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9bChyKSxpPWwoaSksYT1sKGEpLHM9YyhzKTt2YXIgdT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIG49dGhpczsoMCxyLmRlZmF1bHQpKHRoaXMsdCksdGhpcy5pdGVyYXRvcj1udWxsLHRoaXMuYWN0aXZhdGVkPSExLHRoaXMuYWxsb3dBcnJvd3M9ITAsdGhpcy5vbktleURvd249ZnVuY3Rpb24oZSl7aWYobi5pc0V2ZW50UmVhZHlGb3JIYW5kbGluZyhlKSlzd2l0Y2godC51c2VkS2V5cy5pbmNsdWRlcyhlLmtleUNvZGUpJiZlLnByZXZlbnREZWZhdWx0KCksZS5rZXlDb2RlKXtjYXNlIHMua2V5Q29kZXMuVEFCOm4uaGFuZGxlVGFiUHJlc3MoZSk7YnJlYWs7Y2FzZSBzLmtleUNvZGVzLkxFRlQ6Y2FzZSBzLmtleUNvZGVzLlVQOm4uZmxpcExlZnQoKTticmVhaztjYXNlIHMua2V5Q29kZXMuUklHSFQ6Y2FzZSBzLmtleUNvZGVzLkRPV046bi5mbGlwUmlnaHQoKTticmVhaztjYXNlIHMua2V5Q29kZXMuRU5URVI6bi5oYW5kbGVFbnRlclByZXNzKGUpfX0sdGhpcy5hbGxvd0Fycm93cz0hcy5pc0Jvb2xlYW4oZS5hbGxvd0Fycm93cyl8fGUuYWxsb3dBcnJvd3MsdGhpcy5pdGVyYXRvcj1uZXcgYS5kZWZhdWx0KGUuaXRlbXMsZS5mb2N1c2VkSXRlbUNsYXNzKSx0aGlzLmFjdGl2YXRlQ2FsbGJhY2s9ZS5hY3RpdmF0ZUNhbGxiYWNrfXJldHVybigwLGkuZGVmYXVsdCkodCxbe2tleTpcImFjdGl2YXRlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5hY3RpdmF0ZWQ9ITAsdCYmdGhpcy5pdGVyYXRvci5zZXRJdGVtcyh0KSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMub25LZXlEb3duKX19LHtrZXk6XCJkZWFjdGl2YXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmFjdGl2YXRlZD0hMSx0aGlzLmRyb3BDdXJzb3IoKSxkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMub25LZXlEb3duKX19LHtrZXk6XCJmb2N1c0ZpcnN0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmRyb3BDdXJzb3IoKSx0aGlzLmZsaXBSaWdodCgpfX0se2tleTpcImZsaXBMZWZ0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLml0ZXJhdG9yLnByZXZpb3VzKCl9fSx7a2V5OlwiZmxpcFJpZ2h0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLml0ZXJhdG9yLm5leHQoKX19LHtrZXk6XCJkcm9wQ3Vyc29yXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLml0ZXJhdG9yLmRyb3BDdXJzb3IoKX19LHtrZXk6XCJpc0V2ZW50UmVhZHlGb3JIYW5kbGluZ1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPVtzLmtleUNvZGVzLlRBQixzLmtleUNvZGVzLkVOVEVSXSxuPXRoaXMuaXRlcmF0b3IuY3VycmVudEl0ZW09PWRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7cmV0dXJuIHRoaXMuYWxsb3dBcnJvd3MmJiFuJiZlLnB1c2gocy5rZXlDb2Rlcy5MRUZULHMua2V5Q29kZXMuUklHSFQscy5rZXlDb2Rlcy5VUCxzLmtleUNvZGVzLkRPV04pLHRoaXMuYWN0aXZhdGVkJiYtMSE9PWUuaW5kZXhPZih0LmtleUNvZGUpfX0se2tleTpcImhhbmRsZVRhYlByZXNzXCIsdmFsdWU6ZnVuY3Rpb24odCl7c3dpdGNoKHQuc2hpZnRLZXk/YS5kZWZhdWx0LmRpcmVjdGlvbnMuTEVGVDphLmRlZmF1bHQuZGlyZWN0aW9ucy5SSUdIVCl7Y2FzZSBhLmRlZmF1bHQuZGlyZWN0aW9ucy5SSUdIVDp0aGlzLmZsaXBSaWdodCgpO2JyZWFrO2Nhc2UgYS5kZWZhdWx0LmRpcmVjdGlvbnMuTEVGVDp0aGlzLmZsaXBMZWZ0KCl9fX0se2tleTpcImhhbmRsZUVudGVyUHJlc3NcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmFjdGl2YXRlZCYmKHRoaXMuaXRlcmF0b3IuY3VycmVudEl0ZW0mJnRoaXMuaXRlcmF0b3IuY3VycmVudEl0ZW0uY2xpY2soKSxzLmlzRnVuY3Rpb24odGhpcy5hY3RpdmF0ZUNhbGxiYWNrKSYmdGhpcy5hY3RpdmF0ZUNhbGxiYWNrKHRoaXMuaXRlcmF0b3IuY3VycmVudEl0ZW0pLHQucHJldmVudERlZmF1bHQoKSx0LnN0b3BQcm9wYWdhdGlvbigpKX19LHtrZXk6XCJjdXJyZW50SXRlbVwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLml0ZXJhdG9yLmN1cnJlbnRJdGVtfX1dLFt7a2V5OlwidXNlZEtleXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5bcy5rZXlDb2Rlcy5UQUIscy5rZXlDb2Rlcy5MRUZULHMua2V5Q29kZXMuUklHSFQscy5rZXlDb2Rlcy5FTlRFUixzLmtleUNvZGVzLlVQLHMua2V5Q29kZXMuRE9XTl19fV0pLHR9KCk7by5kZWZhdWx0PXUsdS5kaXNwbGF5TmFtZT1cIkZsaXBwZXJcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIxKSxuKDIyKSxuKDIpLG4oMyksbigxNSksbig4KSxuKDE0Nyksbig2NiksbigzODApLG4oMzgxKSxuKDM4MiksbigyNSldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24odCxlLG8scixpLGEscyxjLGwsdSxmLGQscCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGgsdj1uKDEzKSxnPW4oMSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PXQuQmxvY2tUb29sQVBJPXZvaWQgMCxlPWcoZSksbz1nKG8pLHI9ZyhyKSxpPWcoaSksYT1nKGEpLHM9dihzKSxjPWcoYyksdT1nKHUpLGY9ZyhmKSxkPWcoZCkscD1nKHApLHQuQmxvY2tUb29sQVBJPWgsZnVuY3Rpb24odCl7dC5BUFBFTkRfQ0FMTEJBQ0s9XCJhcHBlbmRDYWxsYmFja1wiLHQuUkVOREVSRUQ9XCJyZW5kZXJlZFwiLHQuTU9WRUQ9XCJtb3ZlZFwiLHQuVVBEQVRFRD1cInVwZGF0ZWRcIix0LlJFTU9WRUQ9XCJyZW1vdmVkXCIsdC5PTl9QQVNURT1cIm9uUGFzdGVcIn0oaHx8KHQuQmxvY2tUb29sQVBJPWg9e30pKTt2YXIgeT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIG49dGhpcyxvPWUubmFtZSxpPWUuZGF0YSxhPWUuVG9vbCx1PWUuc2V0dGluZ3MsZj1lLmFwaSxkPWUucmVhZE9ubHk7KDAsci5kZWZhdWx0KSh0aGlzLHQpLHRoaXMuY2FjaGVkSW5wdXRzPVtdLHRoaXMuaW5wdXRJbmRleD0wLHRoaXMubW9kaWZpY2F0aW9uRGVib3VuY2VUaW1lcj00NTAsdGhpcy5kaWRNdXRhdGVkPXMuZGVib3VuY2UoKGZ1bmN0aW9uKCl7bi5jYWNoZWRJbnB1dHM9W10sbi51cGRhdGVDdXJyZW50SW5wdXQoKSxuLmNhbGwoaC5VUERBVEVEKX0pLHRoaXMubW9kaWZpY2F0aW9uRGVib3VuY2VUaW1lciksdGhpcy5oYW5kbGVGb2N1cz1mdW5jdGlvbigpe24uY2FjaGVkSW5wdXRzPVtdLG4udXBkYXRlQ3VycmVudElucHV0KCl9LHRoaXMubmFtZT1vLHRoaXMuY2xhc3M9YSx0aGlzLnNldHRpbmdzPXUsdGhpcy5jb25maWc9dS5jb25maWd8fHt9LHRoaXMuYXBpPWYsdGhpcy5ibG9ja0FQST1uZXcgYy5kZWZhdWx0KHRoaXMpLHRoaXMubXV0YXRpb25PYnNlcnZlcj1uZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmRpZE11dGF0ZWQpLHRoaXMudG9vbD1uZXcgYSh7ZGF0YTppLGNvbmZpZzp0aGlzLmNvbmZpZyxhcGk6dGhpcy5hcGkuZ2V0TWV0aG9kc0ZvclRvb2wobyxsLlRvb2xUeXBlLkJsb2NrKSxibG9jazp0aGlzLmJsb2NrQVBJLHJlYWRPbmx5OmR9KSx0aGlzLmhvbGRlcj10aGlzLmNvbXBvc2UoKSx0aGlzLnR1bmVzPXRoaXMubWFrZVR1bmVzKCl9dmFyIG4sdixnO3JldHVybigwLGkuZGVmYXVsdCkodCxbe2tleTpcImNhbGxcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2lmKHRoaXMudG9vbFt0XSYmdGhpcy50b29sW3RdaW5zdGFuY2VvZiBGdW5jdGlvbil7dD09PWguQVBQRU5EX0NBTExCQUNLJiZzLmxvZyhcImBhcHBlbmRDYWxsYmFja2AgaG9vayBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS4gVXNlIGByZW5kZXJlZGAgaG9vayBpbnN0ZWFkXCIsXCJ3YXJuXCIpO3RyeXt0aGlzLnRvb2xbdF0uY2FsbCh0aGlzLnRvb2wsZSl9Y2F0Y2goZSl7cy5sb2coXCJFcnJvciBkdXJpbmcgJ1wiLmNvbmNhdCh0LFwiJyBjYWxsOiBcIikuY29uY2F0KGUubWVzc2FnZSksXCJlcnJvclwiKX19fX0se2tleTpcIm1lcmdlV2l0aFwiLHZhbHVlOihnPSgwLG8uZGVmYXVsdCkoZS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQobil7cmV0dXJuIGUuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gdC5uZXh0PTIsdGhpcy50b29sLm1lcmdlKG4pO2Nhc2UgMjpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24odCl7cmV0dXJuIGcuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJzYXZlXCIsdmFsdWU6KHY9KDAsby5kZWZhdWx0KShlLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdCgpe3ZhciBuLG8scixpPXRoaXM7cmV0dXJuIGUuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gdC5uZXh0PTIsdGhpcy50b29sLnNhdmUodGhpcy5wbHVnaW5zQ29udGVudCk7Y2FzZSAyOnJldHVybiBuPXQuc2VudCxvPXdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSx0LmFicnVwdChcInJldHVyblwiLFByb21pc2UucmVzb2x2ZShuKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gcj13aW5kb3cucGVyZm9ybWFuY2Uubm93KCkse3Rvb2w6aS5uYW1lLGRhdGE6dCx0aW1lOnItb319KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe3MubG9nKFwiU2F2aW5nIHByb2NjZXNzIGZvciBcIi5jb25jYXQoaS5uYW1lLFwiIHRvb2wgZmFpbGVkIGR1ZSB0byB0aGUgXCIpLmNvbmNhdCh0KSxcImxvZ1wiLFwicmVkXCIpfSkpKTtjYXNlIDU6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKCl7cmV0dXJuIHYuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJ2YWxpZGF0ZVwiLHZhbHVlOihuPSgwLG8uZGVmYXVsdCkoZS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQobil7dmFyIG87cmV0dXJuIGUuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDppZihvPSEwLCEodGhpcy50b29sLnZhbGlkYXRlIGluc3RhbmNlb2YgRnVuY3Rpb24pKXt0Lm5leHQ9NTticmVha31yZXR1cm4gdC5uZXh0PTQsdGhpcy50b29sLnZhbGlkYXRlKG4pO2Nhc2UgNDpvPXQuc2VudDtjYXNlIDU6cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIsbyk7Y2FzZSA2OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcIm1ha2VUdW5lc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm5be25hbWU6XCJtb3ZlVXBcIixUdW5lOnUuZGVmYXVsdH0se25hbWU6XCJkZWxldGVcIixUdW5lOmYuZGVmYXVsdH0se25hbWU6XCJtb3ZlRG93blwiLFR1bmU6ZC5kZWZhdWx0fV0ubWFwKChmdW5jdGlvbihlKXt2YXIgbj1lLm5hbWU7cmV0dXJuIG5ldygwLGUuVHVuZSkoe2FwaTp0LmFwaS5nZXRNZXRob2RzRm9yVG9vbChuLGwuVG9vbFR5cGUuVHVuZSksc2V0dGluZ3M6dC5jb25maWd9KX0pKX19LHtrZXk6XCJyZW5kZXJUdW5lc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO3JldHVybiB0aGlzLnR1bmVzLmZvckVhY2goKGZ1bmN0aW9uKGUpe2EuZGVmYXVsdC5hcHBlbmQodCxlLnJlbmRlcigpKX0pKSx0fX0se2tleTpcInVwZGF0ZUN1cnJlbnRJbnB1dFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5jdXJyZW50SW5wdXQ9YS5kZWZhdWx0LmlzTmF0aXZlSW5wdXQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCl8fCFwLmRlZmF1bHQuYW5jaG9yTm9kZT9kb2N1bWVudC5hY3RpdmVFbGVtZW50OnAuZGVmYXVsdC5hbmNob3JOb2RlfX0se2tleTpcIndpbGxTZWxlY3RcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKHRoaXMuaG9sZGVyLmZpcnN0RWxlbWVudENoaWxkLHtjaGlsZExpc3Q6ITAsc3VidHJlZTohMCxjaGFyYWN0ZXJEYXRhOiEwLGF0dHJpYnV0ZXM6ITB9KSx0aGlzLmFkZElucHV0RXZlbnRzKCl9fSx7a2V5Olwid2lsbFVuc2VsZWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpLHRoaXMucmVtb3ZlSW5wdXRFdmVudHMoKX19LHtrZXk6XCJjb21wb3NlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hLmRlZmF1bHQubWFrZShcImRpdlwiLHQuQ1NTLndyYXBwZXIpLG49YS5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0LkNTUy5jb250ZW50KSxvPXRoaXMudG9vbC5yZW5kZXIoKTtyZXR1cm4gbi5hcHBlbmRDaGlsZChvKSxlLmFwcGVuZENoaWxkKG4pLGV9fSx7a2V5OlwiYWRkSW5wdXRFdmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5pbnB1dHMuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIix0LmhhbmRsZUZvY3VzKX0pKX19LHtrZXk6XCJyZW1vdmVJbnB1dEV2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmlucHV0cy5mb3JFYWNoKChmdW5jdGlvbihlKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLHQuaGFuZGxlRm9jdXMpfSkpfX0se2tleTpcImlucHV0c1wiLGdldDpmdW5jdGlvbigpe2lmKDAhPT10aGlzLmNhY2hlZElucHV0cy5sZW5ndGgpcmV0dXJuIHRoaXMuY2FjaGVkSW5wdXRzO3ZhciB0PWEuZGVmYXVsdC5maW5kQWxsSW5wdXRzKHRoaXMuaG9sZGVyKTtyZXR1cm4gdGhpcy5pbnB1dEluZGV4PnQubGVuZ3RoLTEmJih0aGlzLmlucHV0SW5kZXg9dC5sZW5ndGgtMSksdGhpcy5jYWNoZWRJbnB1dHM9dCx0fX0se2tleTpcImN1cnJlbnRJbnB1dFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlucHV0c1t0aGlzLmlucHV0SW5kZXhdfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5pbnB1dHMuZmluZEluZGV4KChmdW5jdGlvbihlKXtyZXR1cm4gZT09PXR8fGUuY29udGFpbnModCl9KSk7LTEhPT1lJiYodGhpcy5pbnB1dEluZGV4PWUpfX0se2tleTpcImZpcnN0SW5wdXRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbnB1dHNbMF19fSx7a2V5OlwibGFzdElucHV0XCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5pbnB1dHM7cmV0dXJuIHRbdC5sZW5ndGgtMV19fSx7a2V5OlwibmV4dElucHV0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5wdXRzW3RoaXMuaW5wdXRJbmRleCsxXX19LHtrZXk6XCJwcmV2aW91c0lucHV0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5wdXRzW3RoaXMuaW5wdXRJbmRleC0xXX19LHtrZXk6XCJkYXRhXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2F2ZSgpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiB0JiYhcy5pc0VtcHR5KHQuZGF0YSk/dC5kYXRhOnt9fSkpfX0se2tleTpcInNhbml0aXplXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9vbC5zYW5pdGl6ZX19LHtrZXk6XCJtZXJnZWFibGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5pc0Z1bmN0aW9uKHRoaXMudG9vbC5tZXJnZSl9fSx7a2V5OlwiaXNFbXB0eVwiLGdldDpmdW5jdGlvbigpe3ZhciB0PWEuZGVmYXVsdC5pc0VtcHR5KHRoaXMucGx1Z2luc0NvbnRlbnQpLGU9IXRoaXMuaGFzTWVkaWE7cmV0dXJuIHQmJmV9fSx7a2V5OlwiaGFzTWVkaWFcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuaG9sZGVyLnF1ZXJ5U2VsZWN0b3IoW1wiaW1nXCIsXCJpZnJhbWVcIixcInZpZGVvXCIsXCJhdWRpb1wiLFwic291cmNlXCIsXCJpbnB1dFwiLFwidGV4dGFyZWFcIixcInR3aXR0ZXJ3aWRnZXRcIl0uam9pbihcIixcIikpfX0se2tleTpcImZvY3VzZWRcIixzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5ob2xkZXIuY2xhc3NMaXN0LnRvZ2dsZSh0LkNTUy5mb2N1c2VkLGUpfSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ob2xkZXIuY2xhc3NMaXN0LmNvbnRhaW5zKHQuQ1NTLmZvY3VzZWQpfX0se2tleTpcInNlbGVjdGVkXCIsc2V0OmZ1bmN0aW9uKGUpe2U/dGhpcy5ob2xkZXIuY2xhc3NMaXN0LmFkZCh0LkNTUy5zZWxlY3RlZCk6dGhpcy5ob2xkZXIuY2xhc3NMaXN0LnJlbW92ZSh0LkNTUy5zZWxlY3RlZCl9LGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhvbGRlci5jbGFzc0xpc3QuY29udGFpbnModC5DU1Muc2VsZWN0ZWQpfX0se2tleTpcInN0cmV0Y2hlZFwiLHNldDpmdW5jdGlvbihlKXt0aGlzLmhvbGRlci5jbGFzc0xpc3QudG9nZ2xlKHQuQ1NTLndyYXBwZXJTdHJldGNoZWQsZSl9LGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhvbGRlci5jbGFzc0xpc3QuY29udGFpbnModC5DU1Mud3JhcHBlclN0cmV0Y2hlZCl9fSx7a2V5OlwiZHJvcFRhcmdldFwiLHNldDpmdW5jdGlvbihlKXt0aGlzLmhvbGRlci5jbGFzc0xpc3QudG9nZ2xlKHQuQ1NTLmRyb3BUYXJnZXQsZSl9fSx7a2V5OlwicGx1Z2luc0NvbnRlbnRcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmhvbGRlci5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdCh0LkNTUy5jb250ZW50KSk7aWYoZSYmZS5jaGlsZE5vZGVzLmxlbmd0aClmb3IodmFyIG49ZS5jaGlsZE5vZGVzLmxlbmd0aC0xO24+PTA7bi0tKXt2YXIgbz1lLmNoaWxkTm9kZXNbbl07aWYoIWEuZGVmYXVsdC5pc0V4dGVuc2lvbk5vZGUobykpcmV0dXJuIG99cmV0dXJuIG51bGx9fV0sW3trZXk6XCJDU1NcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57d3JhcHBlcjpcImNlLWJsb2NrXCIsd3JhcHBlclN0cmV0Y2hlZDpcImNlLWJsb2NrLS1zdHJldGNoZWRcIixjb250ZW50OlwiY2UtYmxvY2tfX2NvbnRlbnRcIixmb2N1c2VkOlwiY2UtYmxvY2stLWZvY3VzZWRcIixzZWxlY3RlZDpcImNlLWJsb2NrLS1zZWxlY3RlZFwiLGRyb3BUYXJnZXQ6XCJjZS1ibG9jay0tZHJvcC10YXJnZXRcIn19fV0pLHR9KCk7dC5kZWZhdWx0PXkseS5kaXNwbGF5TmFtZT1cIkJsb2NrXCJ9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDM2KTt0LmV4cG9ydHM9T2JqZWN0KFwielwiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKT9PYmplY3Q6ZnVuY3Rpb24odCl7cmV0dXJuXCJTdHJpbmdcIj09byh0KT90LnNwbGl0KFwiXCIpOk9iamVjdCh0KX19LGZ1bmN0aW9uKHQsZSl7ZS5mPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigzNikscj1uKDE0KShcInRvU3RyaW5nVGFnXCIpLGk9XCJBcmd1bWVudHNcIj09byhmdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHN9KCkpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZSxuLGE7cmV0dXJuIHZvaWQgMD09PXQ/XCJVbmRlZmluZWRcIjpudWxsPT09dD9cIk51bGxcIjpcInN0cmluZ1wiPT10eXBlb2Yobj1mdW5jdGlvbih0LGUpe3RyeXtyZXR1cm4gdFtlXX1jYXRjaCh0KXt9fShlPU9iamVjdCh0KSxyKSk/bjppP28oZSk6XCJPYmplY3RcIj09KGE9byhlKSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY2FsbGVlP1wiQXJndW1lbnRzXCI6YX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDExKSxyPW4oMzEpLGk9bigxNCkoXCJzcGVjaWVzXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciBuLGE9byh0KS5jb25zdHJ1Y3RvcjtyZXR1cm4gdm9pZCAwPT09YXx8bnVsbD09KG49byhhKVtpXSk/ZTpyKG4pfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigzOSksbigyMSksbigyMiksbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oMzc0KSxuKDcpLG4oOCksbigzNzUpLG4oMzc2KSxuKDM3NyksbigzNzgpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKHQsZSxvLHIsaSxhLHMsYyxsLHUsZixkLHAsaCx2LGcpe1widXNlIHN0cmljdFwiO3ZhciB5PW4oMTMpLGI9bigxKTtmdW5jdGlvbiBtKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuVG9vbFR5cGU9dC5kZWZhdWx0PXZvaWQgMCxlPWIoZSksbz1iKG8pLHI9YihyKSxpPWIoaSksYT1iKGEpLHM9YihzKSxjPWIoYyksbD1iKGwpLHU9Yih1KSxmPWIoZiksZD15KGQpLHA9YihwKSxoPWIoaCksdj1iKHYpLGc9YihnKTt2YXIgayx4PWZ1bmN0aW9uKHQpeygwLHMuZGVmYXVsdCkoeSx0KTt2YXIgbixmPShuPXksZnVuY3Rpb24oKXt2YXIgdCxlPSgwLGwuZGVmYXVsdCkobik7aWYobSgpKXt2YXIgbz0oMCxsLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbyl9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLGMuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIHkodCl7dmFyIGUsbj10LmNvbmZpZyxvPXQuZXZlbnRzRGlzcGF0Y2hlcjtyZXR1cm4oMCxpLmRlZmF1bHQpKHRoaXMseSksKGU9Zi5jYWxsKHRoaXMse2NvbmZpZzpuLGV2ZW50c0Rpc3BhdGNoZXI6b30pKS5zdHViVG9vbD1cInN0dWJcIixlLnRvb2xzQ2xhc3Nlcz17fSxlLnRvb2xzQXZhaWxhYmxlPXt9LGUudG9vbHNVbmF2YWlsYWJsZT17fSxlLnRvb2xzU2V0dGluZ3M9e30sZS5faW5saW5lVG9vbHM9e30sZS50b29sc0NsYXNzZXM9e30sZS50b29sc1NldHRpbmdzPXt9LGUudG9vbHNBdmFpbGFibGU9e30sZS50b29sc1VuYXZhaWxhYmxlPXt9LGUuX2lubGluZVRvb2xzPW51bGwsZX1yZXR1cm4oMCxhLmRlZmF1bHQpKHksW3trZXk6XCJwcmVwYXJlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHRoaXMudmFsaWRhdGVUb29scygpLHRoaXMuY29uZmlnLnRvb2xzPWQuZGVlcE1lcmdlKHt9LHRoaXMuaW50ZXJuYWxUb29scyx0aGlzLmNvbmZpZy50b29scyksIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmNvbmZpZyxcInRvb2xzXCIpfHwwPT09T2JqZWN0LmtleXModGhpcy5jb25maWcudG9vbHMpLmxlbmd0aCl0aHJvdyBFcnJvcihcIkNhbid0IHN0YXJ0IHdpdGhvdXQgdG9vbHNcIik7Zm9yKHZhciBlIGluIHRoaXMuY29uZmlnLnRvb2xzKWQuaXNPYmplY3QodGhpcy5jb25maWcudG9vbHNbZV0pPyh0aGlzLnRvb2xzQ2xhc3Nlc1tlXT10aGlzLmNvbmZpZy50b29sc1tlXS5jbGFzcyx0aGlzLnRvb2xzU2V0dGluZ3NbZV09dGhpcy5jb25maWcudG9vbHNbZV0sZGVsZXRlIHRoaXMudG9vbHNTZXR0aW5nc1tlXS5jbGFzcyk6KHRoaXMudG9vbHNDbGFzc2VzW2VdPXRoaXMuY29uZmlnLnRvb2xzW2VdLHRoaXMudG9vbHNTZXR0aW5nc1tlXT17Y2xhc3M6dGhpcy5jb25maWcudG9vbHNbZV19KTt2YXIgbj10aGlzLmdldExpc3RPZlByZXBhcmVGdW5jdGlvbnMoKTtyZXR1cm4gMD09PW4ubGVuZ3RoP1Byb21pc2UucmVzb2x2ZSgpOmQuc2VxdWVuY2UobiwoZnVuY3Rpb24oZSl7dC5zdWNjZXNzKGUpfSksKGZ1bmN0aW9uKGUpe3QuZmFsbGJhY2soZSl9KSl9fSx7a2V5Olwic3VjY2Vzc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMudG9vbHNBdmFpbGFibGVbdC50b29sTmFtZV09dGhpcy50b29sc0NsYXNzZXNbdC50b29sTmFtZV19fSx7a2V5OlwiZmFsbGJhY2tcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLnRvb2xzVW5hdmFpbGFibGVbdC50b29sTmFtZV09dGhpcy50b29sc0NsYXNzZXNbdC50b29sTmFtZV19fSx7a2V5OlwiY29uc3RydWN0SW5saW5lXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e30sbz17YXBpOnRoaXMuRWRpdG9yLkFQSS5nZXRNZXRob2RzRm9yVG9vbChlKSxjb25maWc6blt0aGlzLlVTRVJfU0VUVElOR1MuQ09ORklHXXx8e319O3JldHVybiBuZXcgdChvKX19LHtrZXk6XCJpc0RlZmF1bHRcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIHRoaXMuYXZhaWxhYmxlW3RoaXMuY29uZmlnLmRlZmF1bHRCbG9ja119fSx7a2V5OlwiZ2V0VG9vbFNldHRpbmdzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy50b29sc1NldHRpbmdzW3RdLG49ZVt0aGlzLlVTRVJfU0VUVElOR1MuQ09ORklHXXx8e307cmV0dXJuIHQhPT10aGlzLmNvbmZpZy5kZWZhdWx0QmxvY2t8fG4ucGxhY2Vob2xkZXJ8fChuLnBsYWNlaG9sZGVyPXRoaXMuY29uZmlnLnBsYWNlaG9sZGVyLGVbdGhpcy5VU0VSX1NFVFRJTkdTLkNPTkZJR109biksZX19LHtrZXk6XCJpc1JlYWRPbmx5U3VwcG9ydGVkXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuITA9PT10W3RoaXMuSU5URVJOQUxfU0VUVElOR1MuSVNfUkVBRF9PTkxZX1NVUFBPUlRFRF19fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7T2JqZWN0LnZhbHVlcyh0aGlzLmF2YWlsYWJsZSkuZm9yRWFjaChmdW5jdGlvbigpe3ZhciB0PSgwLHIuZGVmYXVsdCkoby5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoZSl7cmV0dXJuIG8uZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDppZighZC5pc0Z1bmN0aW9uKGUucmVzZXQpKXt0Lm5leHQ9MzticmVha31yZXR1cm4gdC5uZXh0PTMsZS5yZXNldCgpO2Nhc2UgMzpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCl9KSkpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpKX19LHtrZXk6XCJnZXRMaXN0T2ZQcmVwYXJlRnVuY3Rpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1bXTtmb3IodmFyIGUgaW4gdGhpcy50b29sc0NsYXNzZXMpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMudG9vbHNDbGFzc2VzLGUpKXt2YXIgbj10aGlzLnRvb2xzQ2xhc3Nlc1tlXSxvPXRoaXMudG9vbHNTZXR0aW5nc1tlXVt0aGlzLlVTRVJfU0VUVElOR1MuQ09ORklHXTt0LnB1c2goe2Z1bmN0aW9uOmQuaXNGdW5jdGlvbihuLnByZXBhcmUpP24ucHJlcGFyZTpmdW5jdGlvbigpe30sZGF0YTp7dG9vbE5hbWU6ZSxjb25maWc6b319KX1yZXR1cm4gdH19LHtrZXk6XCJ2YWxpZGF0ZVRvb2xzXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5jb25maWcudG9vbHMpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29uZmlnLnRvb2xzLHQpKXtpZih0IGluIHRoaXMuaW50ZXJuYWxUb29scylyZXR1cm47dmFyIGU9dGhpcy5jb25maWcudG9vbHNbdF07aWYoIWQuaXNGdW5jdGlvbihlKSYmIWQuaXNGdW5jdGlvbihlLmNsYXNzKSl0aHJvdyBFcnJvcihcIlRvb2wgwqtcIi5jb25jYXQodCxcIsK7IG11c3QgYmUgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBvciBhbiBvYmplY3Qgd2l0aCBmdW5jdGlvbiBpbiB0aGUgwqtjbGFzc8K7IHByb3BlcnR5XCIpKX19fSx7a2V5OlwiYXZhaWxhYmxlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9vbHNBdmFpbGFibGV9fSx7a2V5OlwidW5hdmFpbGFibGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50b29sc1VuYXZhaWxhYmxlfX0se2tleTpcImlubGluZVwiLGdldDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYodGhpcy5faW5saW5lVG9vbHMpcmV0dXJuIHRoaXMuX2lubGluZVRvb2xzO3ZhciBuPU9iamVjdC5lbnRyaWVzKHRoaXMuYXZhaWxhYmxlKS5maWx0ZXIoKGZ1bmN0aW9uKG4pe3ZhciBvPSgwLGUuZGVmYXVsdCkobiwyKSxyPW9bMF0saT1vWzFdO2lmKCFpW3QuSU5URVJOQUxfU0VUVElOR1MuSVNfSU5MSU5FXSlyZXR1cm4hMTt2YXIgYT1bXCJyZW5kZXJcIixcInN1cnJvdW5kXCIsXCJjaGVja1N0YXRlXCJdLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIXQuY29uc3RydWN0SW5saW5lKGkscilbZV19KSk7cmV0dXJuIWEubGVuZ3RofHwoZC5sb2coXCJJbmNvcnJlY3QgSW5saW5lIFRvb2w6IFwiLmNvbmNhdChpLm5hbWUsXCIuIFNvbWUgb2YgcmVxdWlyZWQgbWV0aG9kcyBpcyBub3QgaW1wbGVtZW50ZWQgJW9cIiksXCJ3YXJuXCIsYSksITEpfSkpLG89e307cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIG49KDAsZS5kZWZhdWx0KSh0LDIpLHI9blswXSxpPW5bMV07b1tyXT1pfSkpLHRoaXMuX2lubGluZVRvb2xzPW8sdGhpcy5faW5saW5lVG9vbHN9fSx7a2V5OlwiYmxvY2tUb29sc1wiLGdldDpmdW5jdGlvbigpe3ZhciB0PXRoaXMsbj1PYmplY3QuZW50cmllcyh0aGlzLmF2YWlsYWJsZSkuZmlsdGVyKChmdW5jdGlvbihuKXtyZXR1cm4hKDAsZS5kZWZhdWx0KShuLDIpWzFdW3QuSU5URVJOQUxfU0VUVElOR1MuSVNfSU5MSU5FXX0pKSxvPXt9O3JldHVybiBuLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPSgwLGUuZGVmYXVsdCkodCwyKSxyPW5bMF0saT1uWzFdO29bcl09aX0pKSxvfX0se2tleTpcIklOVEVSTkFMX1NFVFRJTkdTXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue0lTX0VOQUJMRURfTElORV9CUkVBS1M6XCJlbmFibGVMaW5lQnJlYWtzXCIsSVNfSU5MSU5FOlwiaXNJbmxpbmVcIixUSVRMRTpcInRpdGxlXCIsU0hPUlRDVVQ6XCJzaG9ydGN1dFwiLFRPT0xCT1g6XCJ0b29sYm94XCIsU0FOSVRJWkVfQ09ORklHOlwic2FuaXRpemVcIixDT05WRVJTSU9OX0NPTkZJRzpcImNvbnZlcnNpb25Db25maWdcIixJU19SRUFEX09OTFlfU1VQUE9SVEVEOlwiaXNSZWFkT25seVN1cHBvcnRlZFwifX19LHtrZXk6XCJVU0VSX1NFVFRJTkdTXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue1NIT1JUQ1VUOlwic2hvcnRjdXRcIixUT09MQk9YOlwidG9vbGJveFwiLEVOQUJMRURfSU5MSU5FX1RPT0xTOlwiaW5saW5lVG9vbGJhclwiLENPTkZJRzpcImNvbmZpZ1wifX19LHtrZXk6XCJpbnRlcm5hbFRvb2xzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue2JvbGQ6e2NsYXNzOnAuZGVmYXVsdH0saXRhbGljOntjbGFzczpoLmRlZmF1bHR9LGxpbms6e2NsYXNzOnYuZGVmYXVsdH0scGFyYWdyYXBoOntjbGFzczp1LmRlZmF1bHQsaW5saW5lVG9vbGJhcjohMH0sc3R1Yjp7Y2xhc3M6Zy5kZWZhdWx0fX19fV0pLHl9KGYuZGVmYXVsdCk7dC5kZWZhdWx0PXgseC5kaXNwbGF5TmFtZT1cIlRvb2xzXCIsdC5Ub29sVHlwZT1rLGZ1bmN0aW9uKHQpe3RbdC5CbG9jaz0wXT1cIkJsb2NrXCIsdFt0LklubGluZT0xXT1cIklubGluZVwiLHRbdC5UdW5lPTJdPVwiVHVuZVwifShrfHwodC5Ub29sVHlwZT1rPXt9KSl9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDE3KSxyPW4oOSksaT1yW1wiX19jb3JlLWpzX3NoYXJlZF9fXCJdfHwocltcIl9fY29yZS1qc19zaGFyZWRfX1wiXT17fSk7KHQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybiBpW3RdfHwoaVt0XT12b2lkIDAhPT1lP2U6e30pfSkoXCJ2ZXJzaW9uc1wiLFtdKS5wdXNoKHt2ZXJzaW9uOm8udmVyc2lvbixtb2RlOm4oNDQpP1wicHVyZVwiOlwiZ2xvYmFsXCIsY29weXJpZ2h0OlwiwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KVwifSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDI4KSxyPW4oMTYpLGk9big0Nik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLG4sYSl7dmFyIHMsYz1vKGUpLGw9cihjLmxlbmd0aCksdT1pKGEsbCk7aWYodCYmbiE9bil7Zm9yKDtsPnU7KWlmKChzPWNbdSsrXSkhPXMpcmV0dXJuITB9ZWxzZSBmb3IoO2w+dTt1KyspaWYoKHR8fHUgaW4gYykmJmNbdV09PT1uKXJldHVybiB0fHx1fHwwO3JldHVybiF0JiYtMX19fSxmdW5jdGlvbih0LGUpe2UuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigzNik7dC5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKHQpe3JldHVyblwiQXJyYXlcIj09byh0KX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDE0KShcIml0ZXJhdG9yXCIpLHI9ITE7dHJ5e3ZhciBpPVs3XVtvXSgpO2kucmV0dXJuPWZ1bmN0aW9uKCl7cj0hMH0sQXJyYXkuZnJvbShpLChmdW5jdGlvbigpe3Rocm93IDJ9KSl9Y2F0Y2godCl7fXQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKCFlJiYhcilyZXR1cm4hMTt2YXIgbj0hMTt0cnl7dmFyIGk9WzddLGE9aVtvXSgpO2EubmV4dD1mdW5jdGlvbigpe3JldHVybntkb25lOm49ITB9fSxpW29dPWZ1bmN0aW9uKCl7cmV0dXJuIGF9LHQoaSl9Y2F0Y2godCl7fXJldHVybiBufX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMTEpO3QuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciB0PW8odGhpcyksZT1cIlwiO3JldHVybiB0Lmdsb2JhbCYmKGUrPVwiZ1wiKSx0Lmlnbm9yZUNhc2UmJihlKz1cImlcIiksdC5tdWx0aWxpbmUmJihlKz1cIm1cIiksdC51bmljb2RlJiYoZSs9XCJ1XCIpLHQuc3RpY2t5JiYoZSs9XCJ5XCIpLGV9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89big2NCkscj1SZWdFeHAucHJvdG90eXBlLmV4ZWM7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5leGVjO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pe3ZhciBpPW4uY2FsbCh0LGUpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGxcIik7cmV0dXJuIGl9aWYoXCJSZWdFeHBcIiE9PW8odCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXJcIik7cmV0dXJuIHIuY2FsbCh0LGUpfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24oMTI5KTt2YXIgbz1uKDIzKSxyPW4oMjcpLGk9bigxMCksYT1uKDM3KSxzPW4oMTQpLGM9bigxMDMpLGw9cyhcInNwZWNpZXNcIiksdT0haSgoZnVuY3Rpb24oKXt2YXIgdD0vLi87cmV0dXJuIHQuZXhlYz1mdW5jdGlvbigpe3ZhciB0PVtdO3JldHVybiB0Lmdyb3Vwcz17YTpcIjdcIn0sdH0sXCI3XCIhPT1cIlwiLnJlcGxhY2UodCxcIiQ8YT5cIil9KSksZj1mdW5jdGlvbigpe3ZhciB0PS8oPzopLyxlPXQuZXhlYzt0LmV4ZWM9ZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3ZhciBuPVwiYWJcIi5zcGxpdCh0KTtyZXR1cm4gMj09PW4ubGVuZ3RoJiZcImFcIj09PW5bMF0mJlwiYlwiPT09blsxXX0oKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe3ZhciBkPXModCkscD0haSgoZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gZVtkXT1mdW5jdGlvbigpe3JldHVybiA3fSw3IT1cIlwiW3RdKGUpfSkpLGg9cD8haSgoZnVuY3Rpb24oKXt2YXIgZT0hMSxuPS9hLztyZXR1cm4gbi5leGVjPWZ1bmN0aW9uKCl7cmV0dXJuIGU9ITAsbnVsbH0sXCJzcGxpdFwiPT09dCYmKG4uY29uc3RydWN0b3I9e30sbi5jb25zdHJ1Y3RvcltsXT1mdW5jdGlvbigpe3JldHVybiBufSksbltkXShcIlwiKSwhZX0pKTp2b2lkIDA7aWYoIXB8fCFofHxcInJlcGxhY2VcIj09PXQmJiF1fHxcInNwbGl0XCI9PT10JiYhZil7dmFyIHY9Ly4vW2RdLGc9bihhLGQsXCJcIlt0XSwoZnVuY3Rpb24odCxlLG4sbyxyKXtyZXR1cm4gZS5leGVjPT09Yz9wJiYhcj97ZG9uZTohMCx2YWx1ZTp2LmNhbGwoZSxuLG8pfTp7ZG9uZTohMCx2YWx1ZTp0LmNhbGwobixlLG8pfTp7ZG9uZTohMX19KSkseT1nWzBdLGI9Z1sxXTtvKFN0cmluZy5wcm90b3R5cGUsdCx5KSxyKFJlZ0V4cC5wcm90b3R5cGUsZCwyPT1lP2Z1bmN0aW9uKHQsZSl7cmV0dXJuIGIuY2FsbCh0LHRoaXMsZSl9OmZ1bmN0aW9uKHQpe3JldHVybiBiLmNhbGwodCx0aGlzKX0pfX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDMwKSxyPW4oMTI0KSxpPW4oOTgpLGE9bigxMSkscz1uKDE2KSxjPW4oMTAwKSxsPXt9LHU9e307KGU9dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLGYsZCl7dmFyIHAsaCx2LGcseT1kP2Z1bmN0aW9uKCl7cmV0dXJuIHR9OmModCksYj1vKG4sZixlPzI6MSksbT0wO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHkpdGhyb3cgVHlwZUVycm9yKHQrXCIgaXMgbm90IGl0ZXJhYmxlIVwiKTtpZihpKHkpKXtmb3IocD1zKHQubGVuZ3RoKTtwPm07bSsrKWlmKChnPWU/YihhKGg9dFttXSlbMF0saFsxXSk6Yih0W21dKSk9PT1sfHxnPT09dSlyZXR1cm4gZ31lbHNlIGZvcih2PXkuY2FsbCh0KTshKGg9di5uZXh0KCkpLmRvbmU7KWlmKChnPXIodixiLGgudmFsdWUsZSkpPT09bHx8Zz09PXUpcmV0dXJuIGd9KS5CUkVBSz1sLGUuUkVUVVJOPXV9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDkpLm5hdmlnYXRvcjt0LmV4cG9ydHM9byYmby51c2VyQWdlbnR8fFwiXCJ9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDkpLHI9bigwKSxpPW4oMjMpLGE9big1Nykscz1uKDQxKSxjPW4oNzUpLGw9big1NiksdT1uKDEyKSxmPW4oMTApLGQ9big3MSkscD1uKDUyKSxoPW4oODkpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbix2LGcseSl7dmFyIGI9b1t0XSxtPWIsaz1nP1wic2V0XCI6XCJhZGRcIix4PW0mJm0ucHJvdG90eXBlLFM9e30sdz1mdW5jdGlvbih0KXt2YXIgZT14W3RdO2koeCx0LFwiZGVsZXRlXCI9PXR8fFwiaGFzXCI9PXQ/ZnVuY3Rpb24odCl7cmV0dXJuISh5JiYhdSh0KSkmJmUuY2FsbCh0aGlzLDA9PT10PzA6dCl9OlwiZ2V0XCI9PXQ/ZnVuY3Rpb24odCl7cmV0dXJuIHkmJiF1KHQpP3ZvaWQgMDplLmNhbGwodGhpcywwPT09dD8wOnQpfTpcImFkZFwiPT10P2Z1bmN0aW9uKHQpe3JldHVybiBlLmNhbGwodGhpcywwPT09dD8wOnQpLHRoaXN9OmZ1bmN0aW9uKHQsbil7cmV0dXJuIGUuY2FsbCh0aGlzLDA9PT10PzA6dCxuKSx0aGlzfSl9O2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG0mJih5fHx4LmZvckVhY2gmJiFmKChmdW5jdGlvbigpeyhuZXcgbSkuZW50cmllcygpLm5leHQoKX0pKSkpe3ZhciBUPW5ldyBtLEU9VFtrXSh5P3t9Oi0wLDEpIT1ULEM9ZigoZnVuY3Rpb24oKXtULmhhcygxKX0pKSxCPWQoKGZ1bmN0aW9uKHQpe25ldyBtKHQpfSkpLF89IXkmJmYoKGZ1bmN0aW9uKCl7Zm9yKHZhciB0PW5ldyBtLGU9NTtlLS07KXRba10oZSxlKTtyZXR1cm4hdC5oYXMoLTApfSkpO0J8fCgobT1lKChmdW5jdGlvbihlLG4pe2woZSxtLHQpO3ZhciBvPWgobmV3IGIsZSxtKTtyZXR1cm4gbnVsbCE9biYmYyhuLGcsb1trXSxvKSxvfSkpKS5wcm90b3R5cGU9eCx4LmNvbnN0cnVjdG9yPW0pLChDfHxfKSYmKHcoXCJkZWxldGVcIiksdyhcImhhc1wiKSxnJiZ3KFwiZ2V0XCIpKSwoX3x8RSkmJncoaykseSYmeC5jbGVhciYmZGVsZXRlIHguY2xlYXJ9ZWxzZSBtPXYuZ2V0Q29uc3RydWN0b3IoZSx0LGcsayksYShtLnByb3RvdHlwZSxuKSxzLk5FRUQ9ITA7cmV0dXJuIHAobSx0KSxTW3RdPW0scihyLkcrci5XK3IuRioobSE9YiksUykseXx8di5zZXRTdHJvbmcobSx0LGcpLG19fSxmdW5jdGlvbih0LGUsbil7Zm9yKHZhciBvLHI9big5KSxpPW4oMjcpLGE9big0Mykscz1hKFwidHlwZWRfYXJyYXlcIiksYz1hKFwidmlld1wiKSxsPSEoIXIuQXJyYXlCdWZmZXJ8fCFyLkRhdGFWaWV3KSx1PWwsZj0wLGQ9XCJJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheVwiLnNwbGl0KFwiLFwiKTtmPDk7KShvPXJbZFtmKytdXSk/KGkoby5wcm90b3R5cGUscywhMCksaShvLnByb3RvdHlwZSxjLCEwKSk6dT0hMTt0LmV4cG9ydHM9e0FCVjpsLENPTlNUUjp1LFRZUEVEOnMsVklFVzpjfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyksbig2NildLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1KXtcInVzZSBzdHJpY3RcIjt2YXIgZj1uKDEpO2Z1bmN0aW9uIGQoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPWYociksaT1mKGkpLGE9ZihhKSxzPWYocyksYz1mKGMpO3ZhciBwPWZ1bmN0aW9uKHQpeygwLGEuZGVmYXVsdCkobyx0KTt2YXIgZSxuPShlPW8sZnVuY3Rpb24oKXt2YXIgdCxuPSgwLGMuZGVmYXVsdCkoZSk7aWYoZCgpKXt2YXIgbz0oMCxjLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLHMuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIG8oKXtyZXR1cm4oMCxyLmRlZmF1bHQpKHRoaXMsbyksbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuKDAsaS5kZWZhdWx0KShvLFt7a2V5OlwiZ2V0TWV0aG9kc0ZvclRvb2xcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dS5Ub29sVHlwZS5CbG9jaztyZXR1cm4gT2JqZWN0LmFzc2lnbih0aGlzLm1ldGhvZHMse2kxOG46dGhpcy5FZGl0b3IuSTE4bkFQSS5nZXRNZXRob2RzRm9yVG9vbCh0LGUpfSl9fSx7a2V5OlwibWV0aG9kc1wiLGdldDpmdW5jdGlvbigpe3JldHVybntibG9ja3M6dGhpcy5FZGl0b3IuQmxvY2tzQVBJLm1ldGhvZHMsY2FyZXQ6dGhpcy5FZGl0b3IuQ2FyZXRBUEkubWV0aG9kcyxldmVudHM6dGhpcy5FZGl0b3IuRXZlbnRzQVBJLm1ldGhvZHMsbGlzdGVuZXJzOnRoaXMuRWRpdG9yLkxpc3RlbmVyc0FQSS5tZXRob2RzLG5vdGlmaWVyOnRoaXMuRWRpdG9yLk5vdGlmaWVyQVBJLm1ldGhvZHMsc2FuaXRpemVyOnRoaXMuRWRpdG9yLlNhbml0aXplckFQSS5tZXRob2RzLHNhdmVyOnRoaXMuRWRpdG9yLlNhdmVyQVBJLm1ldGhvZHMsc2VsZWN0aW9uOnRoaXMuRWRpdG9yLlNlbGVjdGlvbkFQSS5tZXRob2RzLHN0eWxlczp0aGlzLkVkaXRvci5TdHlsZXNBUEkuY2xhc3Nlcyx0b29sYmFyOnRoaXMuRWRpdG9yLlRvb2xiYXJBUEkubWV0aG9kcyxpbmxpbmVUb29sYmFyOnRoaXMuRWRpdG9yLklubGluZVRvb2xiYXJBUEkubWV0aG9kcyx0b29sdGlwOnRoaXMuRWRpdG9yLlRvb2x0aXBBUEkubWV0aG9kcyxpMThuOnRoaXMuRWRpdG9yLkkxOG5BUEkubWV0aG9kcyxyZWFkT25seTp0aGlzLkVkaXRvci5SZWFkT25seUFQSS5tZXRob2RzfX19XSksb30oKGw9ZihsKSkuZGVmYXVsdCk7by5kZWZhdWx0PXAscC5kaXNwbGF5TmFtZT1cIkFQSVwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpLG4oMTUpLG4oOCksbig1OSksbig4MSldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCxwKXtcInVzZSBzdHJpY3RcIjt2YXIgaD1uKDEzKSx2PW4oMSk7ZnVuY3Rpb24gZygpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9dihyKSxpPXYoaSksYT12KGEpLHM9dihzKSxjPXYoYyksbD12KGwpLHU9dih1KSxmPWgoZiksZD12KGQpO3ZhciB5PWZ1bmN0aW9uKHQpeygwLGEuZGVmYXVsdCkobyx0KTt2YXIgZSxuPShlPW8sZnVuY3Rpb24oKXt2YXIgdCxuPSgwLGMuZGVmYXVsdCkoZSk7aWYoZygpKXt2YXIgbz0oMCxjLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLHMuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIG8oKXtyZXR1cm4oMCxyLmRlZmF1bHQpKHRoaXMsbyksbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuKDAsaS5kZWZhdWx0KShvLFt7a2V5OlwidG9nZ2xlUmVhZE9ubHlcIix2YWx1ZTpmdW5jdGlvbih0KXt0Pyh0aGlzLmRlc3Ryb3koKSx0aGlzLkVkaXRvci5Ub29sYm94LmRlc3Ryb3koKSx0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmRlc3Ryb3koKSx0aGlzLmRpc2FibGVNb2R1bGVCaW5kaW5ncygpKToodGhpcy5kcmF3VUkoKSx0aGlzLmVuYWJsZU1vZHVsZUJpbmRpbmdzKCkpfX0se2tleTpcIm1vdmVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PSEoYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0pfHxhcmd1bWVudHNbMF07dCYmKHRoaXMuRWRpdG9yLlRvb2xib3guY2xvc2UoKSx0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmNsb3NlKCkpO3ZhciBlPXRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2suaG9sZGVyO2lmKGUpe3ZhciBuPXRoaXMuRWRpdG9yLlVJLmlzTW9iaWxlLG89ZS5vZmZzZXRIZWlnaHQscj1lLm9mZnNldFRvcDtpZihuKXIrPW87ZWxzZXt2YXIgaT1NYXRoLmZsb29yKG8vMik7dGhpcy5ub2Rlcy5wbHVzQnV0dG9uLnN0eWxlLnRyYW5zZm9ybT1cInRyYW5zbGF0ZTNkKDAsIGNhbGMoXCIuY29uY2F0KGksXCJweCAtIDUwJSksIDApXCIpLHRoaXMuRWRpdG9yLlRvb2xib3gubm9kZXMudG9vbGJveC5zdHlsZS50cmFuc2Zvcm09XCJ0cmFuc2xhdGUzZCgwLCBjYWxjKFwiLmNvbmNhdChpLFwicHggLSA1MCUpLCAwKVwiKX10aGlzLm5vZGVzLndyYXBwZXIuc3R5bGUudHJhbnNmb3JtPVwidHJhbnNsYXRlM0QoMCwgXCIuY29uY2F0KE1hdGguZmxvb3IociksXCJweCwgMClcIil9fX0se2tleTpcIm9wZW5cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT0hKGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdKXx8YXJndW1lbnRzWzBdLG49IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTtmLmRlbGF5KChmdW5jdGlvbigpe3QubW92ZShuKSx0Lm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCh0LkNTUy50b29sYmFyT3BlbmVkKSxlP3QuYmxvY2tBY3Rpb25zLnNob3coKTp0LmJsb2NrQWN0aW9ucy5oaWRlKCl9KSw1MCkoKX19LHtrZXk6XCJjbG9zZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5DU1MudG9vbGJhck9wZW5lZCksdGhpcy5ibG9ja0FjdGlvbnMuaGlkZSgpLHRoaXMuRWRpdG9yLlRvb2xib3guY2xvc2UoKSx0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmNsb3NlKCl9fSx7a2V5OlwibWFrZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLm5vZGVzLndyYXBwZXI9dS5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0aGlzLkNTUy50b29sYmFyKSxbXCJjb250ZW50XCIsXCJhY3Rpb25zXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe3Qubm9kZXNbZV09dS5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0LkNTU1tlXSl9KSksdS5kZWZhdWx0LmFwcGVuZCh0aGlzLm5vZGVzLndyYXBwZXIsdGhpcy5ub2Rlcy5jb250ZW50KSx1LmRlZmF1bHQuYXBwZW5kKHRoaXMubm9kZXMuY29udGVudCx0aGlzLm5vZGVzLmFjdGlvbnMpLHRoaXMubm9kZXMucGx1c0J1dHRvbj11LmRlZmF1bHQubWFrZShcImRpdlwiLHRoaXMuQ1NTLnBsdXNCdXR0b24pLHUuZGVmYXVsdC5hcHBlbmQodGhpcy5ub2Rlcy5wbHVzQnV0dG9uLHUuZGVmYXVsdC5zdmcoXCJwbHVzXCIsMTQsMTQpKSx1LmRlZmF1bHQuYXBwZW5kKHRoaXMubm9kZXMuY29udGVudCx0aGlzLm5vZGVzLnBsdXNCdXR0b24pLHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucGx1c0J1dHRvbixcImNsaWNrXCIsKGZ1bmN0aW9uKCl7dC5wbHVzQnV0dG9uQ2xpY2tlZCgpfSksITEpO3ZhciBlPXUuZGVmYXVsdC5tYWtlKFwiZGl2XCIpO2UuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZC5kZWZhdWx0LnVpKHAuSTE4bkludGVybmFsTlMudWkudG9vbGJhci50b29sYm94LFwiQWRkXCIpKSksZS5hcHBlbmRDaGlsZCh1LmRlZmF1bHQubWFrZShcImRpdlwiLHRoaXMuQ1NTLnBsdXNCdXR0b25TaG9ydGN1dCx7dGV4dENvbnRlbnQ6XCLih6UgVGFiXCJ9KSksdGhpcy5FZGl0b3IuVG9vbHRpcC5vbkhvdmVyKHRoaXMubm9kZXMucGx1c0J1dHRvbixlKSx0aGlzLm5vZGVzLmJsb2NrQWN0aW9uc0J1dHRvbnM9dS5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0aGlzLkNTUy5ibG9ja0FjdGlvbnNCdXR0b25zKSx0aGlzLm5vZGVzLnNldHRpbmdzVG9nZ2xlcj11LmRlZmF1bHQubWFrZShcInNwYW5cIix0aGlzLkNTUy5zZXR0aW5nc1RvZ2dsZXIpO3ZhciBuPXUuZGVmYXVsdC5zdmcoXCJkb3RzXCIsOCw4KTt1LmRlZmF1bHQuYXBwZW5kKHRoaXMubm9kZXMuc2V0dGluZ3NUb2dnbGVyLG4pLHUuZGVmYXVsdC5hcHBlbmQodGhpcy5ub2Rlcy5ibG9ja0FjdGlvbnNCdXR0b25zLHRoaXMubm9kZXMuc2V0dGluZ3NUb2dnbGVyKSx1LmRlZmF1bHQuYXBwZW5kKHRoaXMubm9kZXMuYWN0aW9ucyx0aGlzLm5vZGVzLmJsb2NrQWN0aW9uc0J1dHRvbnMpLHRoaXMuRWRpdG9yLlRvb2x0aXAub25Ib3Zlcih0aGlzLm5vZGVzLnNldHRpbmdzVG9nZ2xlcixkLmRlZmF1bHQudWkocC5JMThuSW50ZXJuYWxOUy51aS5ibG9ja1R1bmVzLnRvZ2dsZXIsXCJDbGljayB0byB0dW5lXCIpLHtwbGFjZW1lbnQ6XCJ0b3BcIn0pLHUuZGVmYXVsdC5hcHBlbmQodGhpcy5ub2Rlcy5jb250ZW50LHRoaXMuRWRpdG9yLlRvb2xib3gubm9kZXMudG9vbGJveCksdS5kZWZhdWx0LmFwcGVuZCh0aGlzLm5vZGVzLmFjdGlvbnMsdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5ub2Rlcy53cmFwcGVyKSx1LmRlZmF1bHQuYXBwZW5kKHRoaXMuRWRpdG9yLlVJLm5vZGVzLndyYXBwZXIsdGhpcy5ub2Rlcy53cmFwcGVyKX19LHtrZXk6XCJwbHVzQnV0dG9uQ2xpY2tlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5FZGl0b3IuVG9vbGJveC50b2dnbGUoKX19LHtrZXk6XCJlbmFibGVNb2R1bGVCaW5kaW5nc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbih0aGlzLm5vZGVzLnNldHRpbmdzVG9nZ2xlcixcImNsaWNrXCIsKGZ1bmN0aW9uKCl7dC5zZXR0aW5nc1RvZ2dsZXJDbGlja2VkKCl9KSl9fSx7a2V5OlwiZGlzYWJsZU1vZHVsZUJpbmRpbmdzXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5jbGVhckFsbCgpfX0se2tleTpcInNldHRpbmdzVG9nZ2xlckNsaWNrZWRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkP3RoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3MuY2xvc2UoKTp0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW4oKX19LHtrZXk6XCJkcmF3VUlcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3MubWFrZSgpLHRoaXMuRWRpdG9yLlRvb2xib3gubWFrZSgpLHRoaXMubWFrZSgpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucmVtb3ZlQWxsTm9kZXMoKX19LHtrZXk6XCJDU1NcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57dG9vbGJhcjpcImNlLXRvb2xiYXJcIixjb250ZW50OlwiY2UtdG9vbGJhcl9fY29udGVudFwiLGFjdGlvbnM6XCJjZS10b29sYmFyX19hY3Rpb25zXCIsYWN0aW9uc09wZW5lZDpcImNlLXRvb2xiYXJfX2FjdGlvbnMtLW9wZW5lZFwiLHRvb2xiYXJPcGVuZWQ6XCJjZS10b29sYmFyLS1vcGVuZWRcIixwbHVzQnV0dG9uOlwiY2UtdG9vbGJhcl9fcGx1c1wiLHBsdXNCdXR0b25TaG9ydGN1dDpcImNlLXRvb2xiYXJfX3BsdXMtc2hvcnRjdXRcIixwbHVzQnV0dG9uSGlkZGVuOlwiY2UtdG9vbGJhcl9fcGx1cy0taGlkZGVuXCIsYmxvY2tBY3Rpb25zQnV0dG9uczpcImNlLXRvb2xiYXJfX2FjdGlvbnMtYnV0dG9uc1wiLHNldHRpbmdzVG9nZ2xlcjpcImNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0blwifX19LHtrZXk6XCJvcGVuZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLkNTUy50b29sYmFyT3BlbmVkKX19LHtrZXk6XCJwbHVzQnV0dG9uXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm57aGlkZTpmdW5jdGlvbigpe3JldHVybiB0Lm5vZGVzLnBsdXNCdXR0b24uY2xhc3NMaXN0LmFkZCh0LkNTUy5wbHVzQnV0dG9uSGlkZGVuKX0sc2hvdzpmdW5jdGlvbigpe3QuRWRpdG9yLlRvb2xib3guaXNFbXB0eXx8dC5ub2Rlcy5wbHVzQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodC5DU1MucGx1c0J1dHRvbkhpZGRlbil9fX19LHtrZXk6XCJibG9ja0FjdGlvbnNcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybntoaWRlOmZ1bmN0aW9uKCl7dC5ub2Rlcy5hY3Rpb25zLmNsYXNzTGlzdC5yZW1vdmUodC5DU1MuYWN0aW9uc09wZW5lZCl9LHNob3c6ZnVuY3Rpb24oKXt0Lm5vZGVzLmFjdGlvbnMuY2xhc3NMaXN0LmFkZCh0LkNTUy5hY3Rpb25zT3BlbmVkKX19fX1dKSxvfShsLmRlZmF1bHQpO28uZGVmYXVsdD15LHkuZGlzcGxheU5hbWU9XCJUb29sYmFyXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigzOSksbigxNDQpLG4oOCldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24odCxlLG8scil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9bigxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkkxOG5JbnRlcm5hbE5TPXZvaWQgMCxlPWkoZSk7dmFyIGE9ZnVuY3Rpb24gdChuLG8pe3ZhciBpPXt9O3JldHVybiBPYmplY3QuZW50cmllcyhuKS5mb3JFYWNoKChmdW5jdGlvbihuKXt2YXIgYT0oMCxlLmRlZmF1bHQpKG4sMikscz1hWzBdLGM9YVsxXTtpZigoMCxyLmlzT2JqZWN0KShjKSl7dmFyIGw9bz9cIlwiLmNvbmNhdChvLFwiLlwiKS5jb25jYXQocyk6cyx1PU9iamVjdC52YWx1ZXMoYykuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybigwLHIuaXNTdHJpbmcpKHQpfSkpO2lbc109dT9sOnQoYyxsKX1lbHNlIGlbc109Y30pKSxpfSgobz1pKG8pKS5kZWZhdWx0KTt0LkkxOG5JbnRlcm5hbE5TPWF9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDEyKSxyPW4oOSkuZG9jdW1lbnQsaT1vKHIpJiZvKHIuY3JlYXRlRWxlbWVudCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBpP3IuY3JlYXRlRWxlbWVudCh0KTp7fX19LGZ1bmN0aW9uKHQsZSxuKXtlLmY9bigxNCl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDY3KShcImtleXNcIikscj1uKDQzKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIG9bdF18fChvW3RdPXIodCkpfX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9XCJjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2ZcIi5zcGxpdChcIixcIil9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDkpLmRvY3VtZW50O3QuZXhwb3J0cz1vJiZvLmRvY3VtZW50RWxlbWVudH0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTIpLHI9bigxMSksaT1mdW5jdGlvbih0LGUpe2lmKHIodCksIW8oZSkmJm51bGwhPT1lKXRocm93IFR5cGVFcnJvcihlK1wiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKX07dC5leHBvcnRzPXtzZXQ6T2JqZWN0LnNldFByb3RvdHlwZU9mfHwoXCJfX3Byb3RvX19cImlue30/ZnVuY3Rpb24odCxlLG8pe3RyeXsobz1uKDMwKShGdW5jdGlvbi5jYWxsLG4oMzMpLmYoT2JqZWN0LnByb3RvdHlwZSxcIl9fcHJvdG9fX1wiKS5zZXQsMikpKHQsW10pLGU9ISh0IGluc3RhbmNlb2YgQXJyYXkpfWNhdGNoKHQpe2U9ITB9cmV0dXJuIGZ1bmN0aW9uKHQsbil7cmV0dXJuIGkodCxuKSxlP3QuX19wcm90b19fPW46byh0LG4pLHR9fSh7fSwhMSk6dm9pZCAwKSxjaGVjazppfX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9XCJcXHRcXG5cXHZcXGZcXHIgwqDhmoDhoI7igIDigIHigILigIPigITigIXigIbigIfigIjigInigIrigK/igZ/jgIBcXHUyMDI4XFx1MjAyOVxcdWZlZmZcIn0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTIpLHI9big4Nykuc2V0O3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7dmFyIGksYT1lLmNvbnN0cnVjdG9yO3JldHVybiBhIT09biYmXCJmdW5jdGlvblwiPT10eXBlb2YgYSYmKGk9YS5wcm90b3R5cGUpIT09bi5wcm90b3R5cGUmJm8oaSkmJnImJnIodCxpKSx0fX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMzIpLHI9bigzNyk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPVN0cmluZyhyKHRoaXMpKSxuPVwiXCIsaT1vKHQpO2lmKGk8MHx8aT09MS8wKXRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtmb3IoO2k+MDsoaT4+Pj0xKSYmKGUrPWUpKTEmaSYmKG4rPWUpO3JldHVybiBufX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9TWF0aC5zaWdufHxmdW5jdGlvbih0KXtyZXR1cm4gMD09KHQ9K3QpfHx0IT10P3Q6dDwwPy0xOjF9fSxmdW5jdGlvbih0LGUpe3ZhciBuPU1hdGguZXhwbTE7dC5leHBvcnRzPSFufHxuKDEwKT4yMjAyNS40NjU3OTQ4MDY3MTh8fG4oMTApPDIyMDI1LjQ2NTc5NDgwNjcxOHx8LTJlLTE3IT1uKC0yZS0xNyk/ZnVuY3Rpb24odCl7cmV0dXJuIDA9PSh0PSt0KT90OnQ+LTFlLTYmJnQ8MWUtNj90K3QqdC8yOk1hdGguZXhwKHQpLTF9Om59LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDMyKSxyPW4oMzcpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSxuKXt2YXIgaSxhLHM9U3RyaW5nKHIoZSkpLGM9byhuKSxsPXMubGVuZ3RoO3JldHVybiBjPDB8fGM+PWw/dD9cIlwiOnZvaWQgMDooaT1zLmNoYXJDb2RlQXQoYykpPDU1Mjk2fHxpPjU2MzE5fHxjKzE9PT1sfHwoYT1zLmNoYXJDb2RlQXQoYysxKSk8NTYzMjB8fGE+NTczNDM/dD9zLmNoYXJBdChjKTppOnQ/cy5zbGljZShjLGMrMik6YS01NjMyMCsoaS01NTI5Njw8MTApKzY1NTM2fX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDQ0KSxyPW4oMCksaT1uKDIzKSxhPW4oMjcpLHM9big1NCksYz1uKDEyMyksbD1uKDUyKSx1PW4oNDkpLGY9bigxNCkoXCJpdGVyYXRvclwiKSxkPSEoW10ua2V5cyYmXCJuZXh0XCJpbltdLmtleXMoKSkscD1mdW5jdGlvbigpe3JldHVybiB0aGlzfTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4saCx2LGcseSl7YyhuLGUsaCk7dmFyIGIsbSxrLHg9ZnVuY3Rpb24odCl7aWYoIWQmJnQgaW4gRSlyZXR1cm4gRVt0XTtzd2l0Y2godCl7Y2FzZVwia2V5c1wiOmNhc2VcInZhbHVlc1wiOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgbih0aGlzLHQpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4odGhpcyx0KX19LFM9ZStcIiBJdGVyYXRvclwiLHc9XCJ2YWx1ZXNcIj09dixUPSExLEU9dC5wcm90b3R5cGUsQz1FW2ZdfHxFW1wiQEBpdGVyYXRvclwiXXx8diYmRVt2XSxCPUN8fHgodiksXz12P3c/eChcImVudHJpZXNcIik6Qjp2b2lkIDAsTz1cIkFycmF5XCI9PWUmJkUuZW50cmllc3x8QztpZihPJiYoaz11KE8uY2FsbChuZXcgdCkpKSE9PU9iamVjdC5wcm90b3R5cGUmJmsubmV4dCYmKGwoayxTLCEwKSxvfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBrW2ZdfHxhKGssZixwKSksdyYmQyYmXCJ2YWx1ZXNcIiE9PUMubmFtZSYmKFQ9ITAsQj1mdW5jdGlvbigpe3JldHVybiBDLmNhbGwodGhpcyl9KSxvJiYheXx8IWQmJiFUJiZFW2ZdfHxhKEUsZixCKSxzW2VdPUIsc1tTXT1wLHYpaWYoYj17dmFsdWVzOnc/Qjp4KFwidmFsdWVzXCIpLGtleXM6Zz9COngoXCJrZXlzXCIpLGVudHJpZXM6X30seSlmb3IobSBpbiBiKW0gaW4gRXx8aShFLG0sYlttXSk7ZWxzZSByKHIuUCtyLkYqKGR8fFQpLGUsYik7cmV0dXJuIGJ9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89big5Nikscj1uKDM3KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe2lmKG8oZSkpdGhyb3cgVHlwZUVycm9yKFwiU3RyaW5nI1wiK24rXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO3JldHVybiBTdHJpbmcocih0KSl9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxMikscj1uKDM2KSxpPW4oMTQpKFwibWF0Y2hcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBvKHQpJiYodm9pZCAwIT09KGU9dFtpXSk/ISFlOlwiUmVnRXhwXCI9PXIodCkpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTQpKFwibWF0Y2hcIik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPS8uLzt0cnl7XCIvLi9cIlt0XShlKX1jYXRjaChuKXt0cnl7cmV0dXJuIGVbb109ITEsIVwiLy4vXCJbdF0oZSl9Y2F0Y2godCl7fX1yZXR1cm4hMH19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDU0KSxyPW4oMTQpKFwiaXRlcmF0b3JcIiksaT1BcnJheS5wcm90b3R5cGU7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDAhPT10JiYoby5BcnJheT09PXR8fGlbcl09PT10KX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDE5KSxyPW4oNDIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7ZSBpbiB0P28uZih0LGUscigwLG4pKTp0W2VdPW59fSxmdW5jdGlvbih0LGUsbil7dmFyIG89big2NCkscj1uKDE0KShcIml0ZXJhdG9yXCIpLGk9big1NCk7dC5leHBvcnRzPW4oMTcpLmdldEl0ZXJhdG9yTWV0aG9kPWZ1bmN0aW9uKHQpe2lmKG51bGwhPXQpcmV0dXJuIHRbcl18fHRbXCJAQGl0ZXJhdG9yXCJdfHxpW28odCldfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMjApLHI9big0NiksaT1uKDE2KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW8odGhpcyksbj1pKGUubGVuZ3RoKSxhPWFyZ3VtZW50cy5sZW5ndGgscz1yKGE+MT9hcmd1bWVudHNbMV06dm9pZCAwLG4pLGM9YT4yP2FyZ3VtZW50c1syXTp2b2lkIDAsbD12b2lkIDA9PT1jP246cihjLG4pO2w+czspZVtzKytdPXQ7cmV0dXJuIGV9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89big1MCkscj1uKDEyOCksaT1uKDU0KSxhPW4oMjgpO3QuZXhwb3J0cz1uKDk0KShBcnJheSxcIkFycmF5XCIsKGZ1bmN0aW9uKHQsZSl7dGhpcy5fdD1hKHQpLHRoaXMuX2k9MCx0aGlzLl9rPWV9KSwoZnVuY3Rpb24oKXt2YXIgdD10aGlzLl90LGU9dGhpcy5fayxuPXRoaXMuX2krKztyZXR1cm4hdHx8bj49dC5sZW5ndGg/KHRoaXMuX3Q9dm9pZCAwLHIoMSkpOnIoMCxcImtleXNcIj09ZT9uOlwidmFsdWVzXCI9PWU/dFtuXTpbbix0W25dXSl9KSxcInZhbHVlc1wiKSxpLkFyZ3VtZW50cz1pLkFycmF5LG8oXCJrZXlzXCIpLG8oXCJ2YWx1ZXNcIiksbyhcImVudHJpZXNcIil9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyLGk9big3MiksYT1SZWdFeHAucHJvdG90eXBlLmV4ZWMscz1TdHJpbmcucHJvdG90eXBlLnJlcGxhY2UsYz1hLGw9KG89L2EvLHI9L2IqL2csYS5jYWxsKG8sXCJhXCIpLGEuY2FsbChyLFwiYVwiKSwwIT09by5sYXN0SW5kZXh8fDAhPT1yLmxhc3RJbmRleCksdT12b2lkIDAhPT0vKCk/Py8uZXhlYyhcIlwiKVsxXTsobHx8dSkmJihjPWZ1bmN0aW9uKHQpe3ZhciBlLG4sbyxyLGM9dGhpcztyZXR1cm4gdSYmKG49bmV3IFJlZ0V4cChcIl5cIitjLnNvdXJjZStcIiQoPyFcXFxccylcIixpLmNhbGwoYykpKSxsJiYoZT1jLmxhc3RJbmRleCksbz1hLmNhbGwoYyx0KSxsJiZvJiYoYy5sYXN0SW5kZXg9Yy5nbG9iYWw/by5pbmRleCtvWzBdLmxlbmd0aDplKSx1JiZvJiZvLmxlbmd0aD4xJiZzLmNhbGwob1swXSxuLChmdW5jdGlvbigpe2ZvcihyPTE7cjxhcmd1bWVudHMubGVuZ3RoLTI7cisrKXZvaWQgMD09PWFyZ3VtZW50c1tyXSYmKG9bcl09dm9pZCAwKX0pKSxvfSksdC5leHBvcnRzPWN9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDkzKSghMCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZSsobj9vKHQsZSkubGVuZ3RoOjEpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaSxhPW4oMzApLHM9bigxMTcpLGM9big4NiksbD1uKDgyKSx1PW4oOSksZj11LnByb2Nlc3MsZD11LnNldEltbWVkaWF0ZSxwPXUuY2xlYXJJbW1lZGlhdGUsaD11Lk1lc3NhZ2VDaGFubmVsLHY9dS5EaXNwYXRjaCxnPTAseT17fSxiPWZ1bmN0aW9uKCl7dmFyIHQ9K3RoaXM7aWYoeS5oYXNPd25Qcm9wZXJ0eSh0KSl7dmFyIGU9eVt0XTtkZWxldGUgeVt0XSxlKCl9fSxtPWZ1bmN0aW9uKHQpe2IuY2FsbCh0LmRhdGEpfTtkJiZwfHwoZD1mdW5jdGlvbih0KXtmb3IodmFyIGU9W10sbj0xO2FyZ3VtZW50cy5sZW5ndGg+bjspZS5wdXNoKGFyZ3VtZW50c1tuKytdKTtyZXR1cm4geVsrK2ddPWZ1bmN0aW9uKCl7cyhcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6RnVuY3Rpb24odCksZSl9LG8oZyksZ30scD1mdW5jdGlvbih0KXtkZWxldGUgeVt0XX0sXCJwcm9jZXNzXCI9PW4oMzYpKGYpP289ZnVuY3Rpb24odCl7Zi5uZXh0VGljayhhKGIsdCwxKSl9OnYmJnYubm93P289ZnVuY3Rpb24odCl7di5ub3coYShiLHQsMSkpfTpoPyhpPShyPW5ldyBoKS5wb3J0MixyLnBvcnQxLm9ubWVzc2FnZT1tLG89YShpLnBvc3RNZXNzYWdlLGksMSkpOnUuYWRkRXZlbnRMaXN0ZW5lciYmXCJmdW5jdGlvblwiPT10eXBlb2YgcG9zdE1lc3NhZ2UmJiF1LmltcG9ydFNjcmlwdHM/KG89ZnVuY3Rpb24odCl7dS5wb3N0TWVzc2FnZSh0K1wiXCIsXCIqXCIpfSx1LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsbSwhMSkpOm89XCJvbnJlYWR5c3RhdGVjaGFuZ2VcImluIGwoXCJzY3JpcHRcIik/ZnVuY3Rpb24odCl7Yy5hcHBlbmRDaGlsZChsKFwic2NyaXB0XCIpKS5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtjLnJlbW92ZUNoaWxkKHRoaXMpLGIuY2FsbCh0KX19OmZ1bmN0aW9uKHQpe3NldFRpbWVvdXQoYShiLHQsMSksMCl9KSx0LmV4cG9ydHM9e3NldDpkLGNsZWFyOnB9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89big5KSxyPW4oMTgpLGk9big0NCksYT1uKDc4KSxzPW4oMjcpLGM9big1NyksbD1uKDEwKSx1PW4oNTYpLGY9bigzMiksZD1uKDE2KSxwPW4oMTM2KSxoPW4oNDgpLmYsdj1uKDE5KS5mLGc9bigxMDEpLHk9big1MiksYj1vLkFycmF5QnVmZmVyLG09by5EYXRhVmlldyxrPW8uTWF0aCx4PW8uUmFuZ2VFcnJvcixTPW8uSW5maW5pdHksdz1iLFQ9ay5hYnMsRT1rLnBvdyxDPWsuZmxvb3IsQj1rLmxvZyxfPWsuTE4yLE89cj9cIl9iXCI6XCJidWZmZXJcIixJPXI/XCJfbFwiOlwiYnl0ZUxlbmd0aFwiLE49cj9cIl9vXCI6XCJieXRlT2Zmc2V0XCI7ZnVuY3Rpb24gTSh0LGUsbil7dmFyIG8scixpLGE9bmV3IEFycmF5KG4pLHM9OCpuLWUtMSxjPSgxPDxzKS0xLGw9Yz4+MSx1PTIzPT09ZT9FKDIsLTI0KS1FKDIsLTc3KTowLGY9MCxkPXQ8MHx8MD09PXQmJjEvdDwwPzE6MDtmb3IoKHQ9VCh0KSkhPXR8fHQ9PT1TPyhyPXQhPXQ/MTowLG89Yyk6KG89QyhCKHQpL18pLHQqKGk9RSgyLC1vKSk8MSYmKG8tLSxpKj0yKSwodCs9bytsPj0xP3UvaTp1KkUoMiwxLWwpKSppPj0yJiYobysrLGkvPTIpLG8rbD49Yz8ocj0wLG89Yyk6bytsPj0xPyhyPSh0KmktMSkqRSgyLGUpLG8rPWwpOihyPXQqRSgyLGwtMSkqRSgyLGUpLG89MCkpO2U+PTg7YVtmKytdPTI1NSZyLHIvPTI1NixlLT04KTtmb3Iobz1vPDxlfHIscys9ZTtzPjA7YVtmKytdPTI1NSZvLG8vPTI1NixzLT04KTtyZXR1cm4gYVstLWZdfD0xMjgqZCxhfWZ1bmN0aW9uIFIodCxlLG4pe3ZhciBvLHI9OCpuLWUtMSxpPSgxPDxyKS0xLGE9aT4+MSxzPXItNyxjPW4tMSxsPXRbYy0tXSx1PTEyNyZsO2ZvcihsPj49NztzPjA7dT0yNTYqdSt0W2NdLGMtLSxzLT04KTtmb3Iobz11JigxPDwtcyktMSx1Pj49LXMscys9ZTtzPjA7bz0yNTYqbyt0W2NdLGMtLSxzLT04KTtpZigwPT09dSl1PTEtYTtlbHNle2lmKHU9PT1pKXJldHVybiBvP05hTjpsPy1TOlM7bys9RSgyLGUpLHUtPWF9cmV0dXJuKGw/LTE6MSkqbypFKDIsdS1lKX1mdW5jdGlvbiBBKHQpe3JldHVybiB0WzNdPDwyNHx0WzJdPDwxNnx0WzFdPDw4fHRbMF19ZnVuY3Rpb24gTCh0KXtyZXR1cm5bMjU1JnRdfWZ1bmN0aW9uIFAodCl7cmV0dXJuWzI1NSZ0LHQ+PjgmMjU1XX1mdW5jdGlvbiBEKHQpe3JldHVyblsyNTUmdCx0Pj44JjI1NSx0Pj4xNiYyNTUsdD4+MjQmMjU1XX1mdW5jdGlvbiBqKHQpe3JldHVybiBNKHQsNTIsOCl9ZnVuY3Rpb24gRih0KXtyZXR1cm4gTSh0LDIzLDQpfWZ1bmN0aW9uIFUodCxlLG4pe3YodC5wcm90b3R5cGUsZSx7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbbl19fSl9ZnVuY3Rpb24gSCh0LGUsbixvKXt2YXIgcj1wKCtuKTtpZihyK2U+dFtJXSl0aHJvdyB4KFwiV3JvbmcgaW5kZXghXCIpO3ZhciBpPXRbT10uX2IsYT1yK3RbTl0scz1pLnNsaWNlKGEsYStlKTtyZXR1cm4gbz9zOnMucmV2ZXJzZSgpfWZ1bmN0aW9uIHoodCxlLG4sbyxyLGkpe3ZhciBhPXAoK24pO2lmKGErZT50W0ldKXRocm93IHgoXCJXcm9uZyBpbmRleCFcIik7Zm9yKHZhciBzPXRbT10uX2IsYz1hK3RbTl0sbD1vKCtyKSx1PTA7dTxlO3UrKylzW2MrdV09bFtpP3U6ZS11LTFdfWlmKGEuQUJWKXtpZighbCgoZnVuY3Rpb24oKXtiKDEpfSkpfHwhbCgoZnVuY3Rpb24oKXtuZXcgYigtMSl9KSl8fGwoKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBiLG5ldyBiKDEuNSksbmV3IGIoTmFOKSxcIkFycmF5QnVmZmVyXCIhPWIubmFtZX0pKSl7Zm9yKHZhciBXLEc9KGI9ZnVuY3Rpb24odCl7cmV0dXJuIHUodGhpcyxiKSxuZXcgdyhwKHQpKX0pLnByb3RvdHlwZT13LnByb3RvdHlwZSxWPWgodyksWD0wO1YubGVuZ3RoPlg7KShXPVZbWCsrXSlpbiBifHxzKGIsVyx3W1ddKTtpfHwoRy5jb25zdHJ1Y3Rvcj1iKX12YXIgWT1uZXcgbShuZXcgYigyKSksSz1tLnByb3RvdHlwZS5zZXRJbnQ4O1kuc2V0SW50OCgwLDIxNDc0ODM2NDgpLFkuc2V0SW50OCgxLDIxNDc0ODM2NDkpLCFZLmdldEludDgoMCkmJlkuZ2V0SW50OCgxKXx8YyhtLnByb3RvdHlwZSx7c2V0SW50ODpmdW5jdGlvbih0LGUpe0suY2FsbCh0aGlzLHQsZTw8MjQ+PjI0KX0sc2V0VWludDg6ZnVuY3Rpb24odCxlKXtLLmNhbGwodGhpcyx0LGU8PDI0Pj4yNCl9fSwhMCl9ZWxzZSBiPWZ1bmN0aW9uKHQpe3UodGhpcyxiLFwiQXJyYXlCdWZmZXJcIik7dmFyIGU9cCh0KTt0aGlzLl9iPWcuY2FsbChuZXcgQXJyYXkoZSksMCksdGhpc1tJXT1lfSxtPWZ1bmN0aW9uKHQsZSxuKXt1KHRoaXMsbSxcIkRhdGFWaWV3XCIpLHUodCxiLFwiRGF0YVZpZXdcIik7dmFyIG89dFtJXSxyPWYoZSk7aWYocjwwfHxyPm8pdGhyb3cgeChcIldyb25nIG9mZnNldCFcIik7aWYocisobj12b2lkIDA9PT1uP28tcjpkKG4pKT5vKXRocm93IHgoXCJXcm9uZyBsZW5ndGghXCIpO3RoaXNbT109dCx0aGlzW05dPXIsdGhpc1tJXT1ufSxyJiYoVShiLFwiYnl0ZUxlbmd0aFwiLFwiX2xcIiksVShtLFwiYnVmZmVyXCIsXCJfYlwiKSxVKG0sXCJieXRlTGVuZ3RoXCIsXCJfbFwiKSxVKG0sXCJieXRlT2Zmc2V0XCIsXCJfb1wiKSksYyhtLnByb3RvdHlwZSx7Z2V0SW50ODpmdW5jdGlvbih0KXtyZXR1cm4gSCh0aGlzLDEsdClbMF08PDI0Pj4yNH0sZ2V0VWludDg6ZnVuY3Rpb24odCl7cmV0dXJuIEgodGhpcywxLHQpWzBdfSxnZXRJbnQxNjpmdW5jdGlvbih0KXt2YXIgZT1IKHRoaXMsMix0LGFyZ3VtZW50c1sxXSk7cmV0dXJuKGVbMV08PDh8ZVswXSk8PDE2Pj4xNn0sZ2V0VWludDE2OmZ1bmN0aW9uKHQpe3ZhciBlPUgodGhpcywyLHQsYXJndW1lbnRzWzFdKTtyZXR1cm4gZVsxXTw8OHxlWzBdfSxnZXRJbnQzMjpmdW5jdGlvbih0KXtyZXR1cm4gQShIKHRoaXMsNCx0LGFyZ3VtZW50c1sxXSkpfSxnZXRVaW50MzI6ZnVuY3Rpb24odCl7cmV0dXJuIEEoSCh0aGlzLDQsdCxhcmd1bWVudHNbMV0pKT4+PjB9LGdldEZsb2F0MzI6ZnVuY3Rpb24odCl7cmV0dXJuIFIoSCh0aGlzLDQsdCxhcmd1bWVudHNbMV0pLDIzLDQpfSxnZXRGbG9hdDY0OmZ1bmN0aW9uKHQpe3JldHVybiBSKEgodGhpcyw4LHQsYXJndW1lbnRzWzFdKSw1Miw4KX0sc2V0SW50ODpmdW5jdGlvbih0LGUpe3oodGhpcywxLHQsTCxlKX0sc2V0VWludDg6ZnVuY3Rpb24odCxlKXt6KHRoaXMsMSx0LEwsZSl9LHNldEludDE2OmZ1bmN0aW9uKHQsZSl7eih0aGlzLDIsdCxQLGUsYXJndW1lbnRzWzJdKX0sc2V0VWludDE2OmZ1bmN0aW9uKHQsZSl7eih0aGlzLDIsdCxQLGUsYXJndW1lbnRzWzJdKX0sc2V0SW50MzI6ZnVuY3Rpb24odCxlKXt6KHRoaXMsNCx0LEQsZSxhcmd1bWVudHNbMl0pfSxzZXRVaW50MzI6ZnVuY3Rpb24odCxlKXt6KHRoaXMsNCx0LEQsZSxhcmd1bWVudHNbMl0pfSxzZXRGbG9hdDMyOmZ1bmN0aW9uKHQsZSl7eih0aGlzLDQsdCxGLGUsYXJndW1lbnRzWzJdKX0sc2V0RmxvYXQ2NDpmdW5jdGlvbih0LGUpe3oodGhpcyw4LHQsaixlLGFyZ3VtZW50c1syXSl9fSk7eShiLFwiQXJyYXlCdWZmZXJcIikseShtLFwiRGF0YVZpZXdcIikscyhtLnByb3RvdHlwZSxhLlZJRVcsITApLGUuQXJyYXlCdWZmZXI9YixlLkRhdGFWaWV3PW19LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbihlLG8pe3JldHVybiB0LmV4cG9ydHM9bj1PYmplY3Quc2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWUsdH0sbihlLG8pfXQuZXhwb3J0cz1ufSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDU4KSxuKDIpLG4oMyksbigzODQpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGM9bigxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9YyhyKSxpPWMoaSksYT1jKGEpLHM9YyhzKTt2YXIgbD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXsoMCxpLmRlZmF1bHQpKHRoaXMsdCksdGhpcy5yZWdpc3RlcmVkU2hvcnRjdXRzPW5ldyBNYXB9cmV0dXJuKDAsYS5kZWZhdWx0KSh0LFt7a2V5OlwiYWRkXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodGhpcy5maW5kU2hvcnRjdXQodC5vbix0Lm5hbWUpKXRocm93IEVycm9yKFwiU2hvcnRjdXQgXCIuY29uY2F0KHQubmFtZSxcIiBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgZm9yIFwiKS5jb25jYXQodC5vbixcIi4gUGxlYXNlIHJlbW92ZSBpdCBiZWZvcmUgYWRkIGEgbmV3IGhhbmRsZXIuXCIpKTt2YXIgZT1uZXcgcy5kZWZhdWx0KHtuYW1lOnQubmFtZSxvbjp0Lm9uLGNhbGxiYWNrOnQuaGFuZGxlcn0pLG49dGhpcy5yZWdpc3RlcmVkU2hvcnRjdXRzLmdldCh0Lm9uKXx8W107dGhpcy5yZWdpc3RlcmVkU2hvcnRjdXRzLnNldCh0Lm9uLFtdLmNvbmNhdCgoMCxyLmRlZmF1bHQpKG4pLFtlXSkpfX0se2tleTpcInJlbW92ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5maW5kU2hvcnRjdXQodCxlKTtpZihuKXtuLnJlbW92ZSgpO3ZhciBvPXRoaXMucmVnaXN0ZXJlZFNob3J0Y3V0cy5nZXQodCk7dGhpcy5yZWdpc3RlcmVkU2hvcnRjdXRzLnNldCh0LG8uZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gdCE9PW59KSkpfX19LHtrZXk6XCJmaW5kU2hvcnRjdXRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybih0aGlzLnJlZ2lzdGVyZWRTaG9ydGN1dHMuZ2V0KHQpfHxbXSkuZmluZCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZT09PWV9KSl9fV0pLHR9KCk7bC5kaXNwbGF5TmFtZT1cIlNob3J0Y3V0c1wiO3ZhciB1PW5ldyBsO28uZGVmYXVsdD11LHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9IW4oMTgpJiYhbigxMCkoKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuKDgyKShcImRpdlwiKSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oOSkscj1uKDE3KSxpPW4oNDQpLGE9big4Mykscz1uKDE5KS5mO3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1yLlN5bWJvbHx8KHIuU3ltYm9sPWk/e306by5TeW1ib2x8fHt9KTtcIl9cIj09dC5jaGFyQXQoMCl8fHQgaW4gZXx8cyhlLHQse3ZhbHVlOmEuZih0KX0pfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMjYpLHI9bigyOCksaT1uKDY4KSghMSksYT1uKDg0KShcIklFX1BST1RPXCIpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciBuLHM9cih0KSxjPTAsbD1bXTtmb3IobiBpbiBzKW4hPWEmJm8ocyxuKSYmbC5wdXNoKG4pO2Zvcig7ZS5sZW5ndGg+YzspbyhzLG49ZVtjKytdKSYmKH5pKGwsbil8fGwucHVzaChuKSk7cmV0dXJuIGx9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxOSkscj1uKDExKSxpPW4oNDUpO3QuZXhwb3J0cz1uKDE4KT9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbih0LGUpe3IodCk7Zm9yKHZhciBuLGE9aShlKSxzPWEubGVuZ3RoLGM9MDtzPmM7KW8uZih0LG49YVtjKytdLGVbbl0pO3JldHVybiB0fX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMjgpLHI9big0OCkuZixpPXt9LnRvU3RyaW5nLGE9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93JiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcz9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpOltdO3QuZXhwb3J0cy5mPWZ1bmN0aW9uKHQpe3JldHVybiBhJiZcIltvYmplY3QgV2luZG93XVwiPT1pLmNhbGwodCk/ZnVuY3Rpb24odCl7dHJ5e3JldHVybiByKHQpfWNhdGNoKHQpe3JldHVybiBhLnNsaWNlKCl9fSh0KTpyKG8odCkpfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMTgpLHI9big0NSksaT1uKDY5KSxhPW4oNjMpLHM9bigyMCksYz1uKDYyKSxsPU9iamVjdC5hc3NpZ247dC5leHBvcnRzPSFsfHxuKDEwKSgoZnVuY3Rpb24oKXt2YXIgdD17fSxlPXt9LG49U3ltYm9sKCksbz1cImFiY2RlZmdoaWprbG1ub3BxcnN0XCI7cmV0dXJuIHRbbl09NyxvLnNwbGl0KFwiXCIpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2VbdF09dH0pKSw3IT1sKHt9LHQpW25dfHxPYmplY3Qua2V5cyhsKHt9LGUpKS5qb2luKFwiXCIpIT1vfSkpP2Z1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXModCksbD1hcmd1bWVudHMubGVuZ3RoLHU9MSxmPWkuZixkPWEuZjtsPnU7KWZvcih2YXIgcCxoPWMoYXJndW1lbnRzW3UrK10pLHY9Zj9yKGgpLmNvbmNhdChmKGgpKTpyKGgpLGc9di5sZW5ndGgseT0wO2c+eTspcD12W3krK10sbyYmIWQuY2FsbChoLHApfHwobltwXT1oW3BdKTtyZXR1cm4gbn06bH0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9T2JqZWN0LmlzfHxmdW5jdGlvbih0LGUpe3JldHVybiB0PT09ZT8wIT09dHx8MS90PT0xL2U6dCE9dCYmZSE9ZX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDMxKSxyPW4oMTIpLGk9bigxMTcpLGE9W10uc2xpY2Uscz17fSxjPWZ1bmN0aW9uKHQsZSxuKXtpZighKGUgaW4gcykpe2Zvcih2YXIgbz1bXSxyPTA7cjxlO3IrKylvW3JdPVwiYVtcIityK1wiXVwiO3NbZV09RnVuY3Rpb24oXCJGLGFcIixcInJldHVybiBuZXcgRihcIitvLmpvaW4oXCIsXCIpK1wiKVwiKX1yZXR1cm4gc1tlXSh0LG4pfTt0LmV4cG9ydHM9RnVuY3Rpb24uYmluZHx8ZnVuY3Rpb24odCl7dmFyIGU9byh0aGlzKSxuPWEuY2FsbChhcmd1bWVudHMsMSkscz1mdW5jdGlvbigpe3ZhciBvPW4uY29uY2F0KGEuY2FsbChhcmd1bWVudHMpKTtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIHM/YyhlLG8ubGVuZ3RoLG8pOmkoZSxvLHQpfTtyZXR1cm4gcihlLnByb3RvdHlwZSkmJihzLnByb3RvdHlwZT1lLnByb3RvdHlwZSksc319LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXt2YXIgbz12b2lkIDA9PT1uO3N3aXRjaChlLmxlbmd0aCl7Y2FzZSAwOnJldHVybiBvP3QoKTp0LmNhbGwobik7Y2FzZSAxOnJldHVybiBvP3QoZVswXSk6dC5jYWxsKG4sZVswXSk7Y2FzZSAyOnJldHVybiBvP3QoZVswXSxlWzFdKTp0LmNhbGwobixlWzBdLGVbMV0pO2Nhc2UgMzpyZXR1cm4gbz90KGVbMF0sZVsxXSxlWzJdKTp0LmNhbGwobixlWzBdLGVbMV0sZVsyXSk7Y2FzZSA0OnJldHVybiBvP3QoZVswXSxlWzFdLGVbMl0sZVszXSk6dC5jYWxsKG4sZVswXSxlWzFdLGVbMl0sZVszXSl9cmV0dXJuIHQuYXBwbHkobixlKX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDkpLnBhcnNlSW50LHI9big1MykudHJpbSxpPW4oODgpLGE9L15bLStdPzBbeFhdLzt0LmV4cG9ydHM9OCE9PW8oaStcIjA4XCIpfHwyMiE9PW8oaStcIjB4MTZcIik/ZnVuY3Rpb24odCxlKXt2YXIgbj1yKFN0cmluZyh0KSwzKTtyZXR1cm4gbyhuLGU+Pj4wfHwoYS50ZXN0KG4pPzE2OjEwKSl9Om99LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDkpLnBhcnNlRmxvYXQscj1uKDUzKS50cmltO3QuZXhwb3J0cz0xL28obig4OCkrXCItMFwiKSE9LTEvMD9mdW5jdGlvbih0KXt2YXIgZT1yKFN0cmluZyh0KSwzKSxuPW8oZSk7cmV0dXJuIDA9PT1uJiZcIi1cIj09ZS5jaGFyQXQoMCk/LTA6bn06b30sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMzYpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0JiZcIk51bWJlclwiIT1vKHQpKXRocm93IFR5cGVFcnJvcihlKTtyZXR1cm4rdH19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDEyKSxyPU1hdGguZmxvb3I7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiFvKHQpJiZpc0Zpbml0ZSh0KSYmcih0KT09PXR9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1NYXRoLmxvZzFwfHxmdW5jdGlvbih0KXtyZXR1cm4odD0rdCk+LTFlLTgmJnQ8MWUtOD90LXQqdC8yOk1hdGgubG9nKDErdCl9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89big0Nykscj1uKDQyKSxpPW4oNTIpLGE9e307bigyNykoYSxuKDE0KShcIml0ZXJhdG9yXCIpLChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpLHQuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7dC5wcm90b3R5cGU9byhhLHtuZXh0OnIoMSxuKX0pLGkodCxlK1wiIEl0ZXJhdG9yXCIpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTEpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixyKXt0cnl7cmV0dXJuIHI/ZShvKG4pWzBdLG5bMV0pOmUobil9Y2F0Y2goZSl7dmFyIGk9dC5yZXR1cm47dGhyb3cgdm9pZCAwIT09aSYmbyhpLmNhbGwodCkpLGV9fX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMjc2KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3KG8odCkpKGUpfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMzEpLHI9bigyMCksaT1uKDYyKSxhPW4oMTYpO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixzLGMpe28oZSk7dmFyIGw9cih0KSx1PWkobCksZj1hKGwubGVuZ3RoKSxkPWM/Zi0xOjAscD1jPy0xOjE7aWYobjwyKWZvcig7Oyl7aWYoZCBpbiB1KXtzPXVbZF0sZCs9cDticmVha31pZihkKz1wLGM/ZDwwOmY8PWQpdGhyb3cgVHlwZUVycm9yKFwiUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZVwiKX1mb3IoO2M/ZD49MDpmPmQ7ZCs9cClkIGluIHUmJihzPWUocyx1W2RdLGQsbCkpO3JldHVybiBzfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMjApLHI9big0NiksaT1uKDE2KTt0LmV4cG9ydHM9W10uY29weVdpdGhpbnx8ZnVuY3Rpb24odCxlKXt2YXIgbj1vKHRoaXMpLGE9aShuLmxlbmd0aCkscz1yKHQsYSksYz1yKGUsYSksbD1hcmd1bWVudHMubGVuZ3RoPjI/YXJndW1lbnRzWzJdOnZvaWQgMCx1PU1hdGgubWluKCh2b2lkIDA9PT1sP2E6cihsLGEpKS1jLGEtcyksZj0xO2ZvcihjPHMmJnM8Yyt1JiYoZj0tMSxjKz11LTEscys9dS0xKTt1LS0gPjA7KWMgaW4gbj9uW3NdPW5bY106ZGVsZXRlIG5bc10scys9ZixjKz1mO3JldHVybiBufX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm57dmFsdWU6ZSxkb25lOiEhdH19fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigxMDMpO24oMCkoe3RhcmdldDpcIlJlZ0V4cFwiLHByb3RvOiEwLGZvcmNlZDpvIT09Ly4vLmV4ZWN9LHtleGVjOm99KX0sZnVuY3Rpb24odCxlLG4pe24oMTgpJiZcImdcIiE9Ly4vZy5mbGFncyYmbigxOSkuZihSZWdFeHAucHJvdG90eXBlLFwiZmxhZ3NcIix7Y29uZmlndXJhYmxlOiEwLGdldDpuKDcyKX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scixpLGEscz1uKDQ0KSxjPW4oOSksbD1uKDMwKSx1PW4oNjQpLGY9bigwKSxkPW4oMTIpLHA9bigzMSksaD1uKDU2KSx2PW4oNzUpLGc9big2NSkseT1uKDEwNSkuc2V0LGI9bigyOTYpKCksbT1uKDEzMiksaz1uKDI5NykseD1uKDc2KSxTPW4oMTMzKSx3PWMuVHlwZUVycm9yLFQ9Yy5wcm9jZXNzLEU9VCYmVC52ZXJzaW9ucyxDPUUmJkUudjh8fFwiXCIsQj1jLlByb21pc2UsXz1cInByb2Nlc3NcIj09dShUKSxPPWZ1bmN0aW9uKCl7fSxJPXI9bS5mLE49ISFmdW5jdGlvbigpe3RyeXt2YXIgdD1CLnJlc29sdmUoMSksZT0odC5jb25zdHJ1Y3Rvcj17fSlbbigxNCkoXCJzcGVjaWVzXCIpXT1mdW5jdGlvbih0KXt0KE8sTyl9O3JldHVybihffHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQpJiZ0LnRoZW4oTylpbnN0YW5jZW9mIGUmJjAhPT1DLmluZGV4T2YoXCI2LjZcIikmJi0xPT09eC5pbmRleE9mKFwiQ2hyb21lLzY2XCIpfWNhdGNoKHQpe319KCksTT1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4hKCFkKHQpfHxcImZ1bmN0aW9uXCIhPXR5cGVvZihlPXQudGhlbikpJiZlfSxSPWZ1bmN0aW9uKHQsZSl7aWYoIXQuX24pe3QuX249ITA7dmFyIG49dC5fYztiKChmdW5jdGlvbigpe2Zvcih2YXIgbz10Ll92LHI9MT09dC5fcyxpPTAsYT1mdW5jdGlvbihlKXt2YXIgbixpLGEscz1yP2Uub2s6ZS5mYWlsLGM9ZS5yZXNvbHZlLGw9ZS5yZWplY3QsdT1lLmRvbWFpbjt0cnl7cz8ocnx8KDI9PXQuX2gmJlAodCksdC5faD0xKSwhMD09PXM/bj1vOih1JiZ1LmVudGVyKCksbj1zKG8pLHUmJih1LmV4aXQoKSxhPSEwKSksbj09PWUucHJvbWlzZT9sKHcoXCJQcm9taXNlLWNoYWluIGN5Y2xlXCIpKTooaT1NKG4pKT9pLmNhbGwobixjLGwpOmMobikpOmwobyl9Y2F0Y2godCl7dSYmIWEmJnUuZXhpdCgpLGwodCl9fTtuLmxlbmd0aD5pOylhKG5baSsrXSk7dC5fYz1bXSx0Ll9uPSExLGUmJiF0Ll9oJiZBKHQpfSkpfX0sQT1mdW5jdGlvbih0KXt5LmNhbGwoYywoZnVuY3Rpb24oKXt2YXIgZSxuLG8scj10Ll92LGk9TCh0KTtpZihpJiYoZT1rKChmdW5jdGlvbigpe18/VC5lbWl0KFwidW5oYW5kbGVkUmVqZWN0aW9uXCIscix0KToobj1jLm9udW5oYW5kbGVkcmVqZWN0aW9uKT9uKHtwcm9taXNlOnQscmVhc29uOnJ9KToobz1jLmNvbnNvbGUpJiZvLmVycm9yJiZvLmVycm9yKFwiVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uXCIscil9KSksdC5faD1ffHxMKHQpPzI6MSksdC5fYT12b2lkIDAsaSYmZS5lKXRocm93IGUudn0pKX0sTD1mdW5jdGlvbih0KXtyZXR1cm4gMSE9PXQuX2gmJjA9PT0odC5fYXx8dC5fYykubGVuZ3RofSxQPWZ1bmN0aW9uKHQpe3kuY2FsbChjLChmdW5jdGlvbigpe3ZhciBlO18/VC5lbWl0KFwicmVqZWN0aW9uSGFuZGxlZFwiLHQpOihlPWMub25yZWplY3Rpb25oYW5kbGVkKSYmZSh7cHJvbWlzZTp0LHJlYXNvbjp0Ll92fSl9KSl9LEQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztlLl9kfHwoZS5fZD0hMCwoZT1lLl93fHxlKS5fdj10LGUuX3M9MixlLl9hfHwoZS5fYT1lLl9jLnNsaWNlKCkpLFIoZSwhMCkpfSxqPWZ1bmN0aW9uKHQpe3ZhciBlLG49dGhpcztpZighbi5fZCl7bi5fZD0hMCxuPW4uX3d8fG47dHJ5e2lmKG49PT10KXRocm93IHcoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTsoZT1NKHQpKT9iKChmdW5jdGlvbigpe3ZhciBvPXtfdzpuLF9kOiExfTt0cnl7ZS5jYWxsKHQsbChqLG8sMSksbChELG8sMSkpfWNhdGNoKHQpe0QuY2FsbChvLHQpfX0pKToobi5fdj10LG4uX3M9MSxSKG4sITEpKX1jYXRjaCh0KXtELmNhbGwoe193Om4sX2Q6ITF9LHQpfX19O058fChCPWZ1bmN0aW9uKHQpe2godGhpcyxCLFwiUHJvbWlzZVwiLFwiX2hcIikscCh0KSxvLmNhbGwodGhpcyk7dHJ5e3QobChqLHRoaXMsMSksbChELHRoaXMsMSkpfWNhdGNoKHQpe0QuY2FsbCh0aGlzLHQpfX0sKG89ZnVuY3Rpb24odCl7dGhpcy5fYz1bXSx0aGlzLl9hPXZvaWQgMCx0aGlzLl9zPTAsdGhpcy5fZD0hMSx0aGlzLl92PXZvaWQgMCx0aGlzLl9oPTAsdGhpcy5fbj0hMX0pLnByb3RvdHlwZT1uKDU3KShCLnByb3RvdHlwZSx7dGhlbjpmdW5jdGlvbih0LGUpe3ZhciBuPUkoZyh0aGlzLEIpKTtyZXR1cm4gbi5vaz1cImZ1bmN0aW9uXCIhPXR5cGVvZiB0fHx0LG4uZmFpbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLG4uZG9tYWluPV8/VC5kb21haW46dm9pZCAwLHRoaXMuX2MucHVzaChuKSx0aGlzLl9hJiZ0aGlzLl9hLnB1c2gobiksdGhpcy5fcyYmUih0aGlzLCExKSxuLnByb21pc2V9LGNhdGNoOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRoZW4odm9pZCAwLHQpfX0pLGk9ZnVuY3Rpb24oKXt2YXIgdD1uZXcgbzt0aGlzLnByb21pc2U9dCx0aGlzLnJlc29sdmU9bChqLHQsMSksdGhpcy5yZWplY3Q9bChELHQsMSl9LG0uZj1JPWZ1bmN0aW9uKHQpe3JldHVybiB0PT09Qnx8dD09PWE/bmV3IGkodCk6cih0KX0pLGYoZi5HK2YuVytmLkYqIU4se1Byb21pc2U6Qn0pLG4oNTIpKEIsXCJQcm9taXNlXCIpLG4oNTUpKFwiUHJvbWlzZVwiKSxhPW4oMTcpLlByb21pc2UsZihmLlMrZi5GKiFOLFwiUHJvbWlzZVwiLHtyZWplY3Q6ZnVuY3Rpb24odCl7dmFyIGU9SSh0aGlzKTtyZXR1cm4oMCxlLnJlamVjdCkodCksZS5wcm9taXNlfX0pLGYoZi5TK2YuRiooc3x8IU4pLFwiUHJvbWlzZVwiLHtyZXNvbHZlOmZ1bmN0aW9uKHQpe3JldHVybiBTKHMmJnRoaXM9PT1hP0I6dGhpcyx0KX19KSxmKGYuUytmLkYqIShOJiZuKDcxKSgoZnVuY3Rpb24odCl7Qi5hbGwodCkuY2F0Y2goTyl9KSkpLFwiUHJvbWlzZVwiLHthbGw6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPUkoZSksbz1uLnJlc29sdmUscj1uLnJlamVjdCxpPWsoKGZ1bmN0aW9uKCl7dmFyIG49W10saT0wLGE9MTt2KHQsITEsKGZ1bmN0aW9uKHQpe3ZhciBzPWkrKyxjPSExO24ucHVzaCh2b2lkIDApLGErKyxlLnJlc29sdmUodCkudGhlbigoZnVuY3Rpb24odCl7Y3x8KGM9ITAsbltzXT10LC0tYXx8byhuKSl9KSxyKX0pKSwtLWF8fG8obil9KSk7cmV0dXJuIGkuZSYmcihpLnYpLG4ucHJvbWlzZX0scmFjZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG49SShlKSxvPW4ucmVqZWN0LHI9aygoZnVuY3Rpb24oKXt2KHQsITEsKGZ1bmN0aW9uKHQpe2UucmVzb2x2ZSh0KS50aGVuKG4ucmVzb2x2ZSxvKX0pKX0pKTtyZXR1cm4gci5lJiZvKHIudiksbi5wcm9taXNlfX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigzMSk7ZnVuY3Rpb24gcih0KXt2YXIgZSxuO3RoaXMucHJvbWlzZT1uZXcgdCgoZnVuY3Rpb24odCxvKXtpZih2b2lkIDAhPT1lfHx2b2lkIDAhPT1uKXRocm93IFR5cGVFcnJvcihcIkJhZCBQcm9taXNlIGNvbnN0cnVjdG9yXCIpO2U9dCxuPW99KSksdGhpcy5yZXNvbHZlPW8oZSksdGhpcy5yZWplY3Q9byhuKX10LmV4cG9ydHMuZj1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IHIodCl9fSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxMSkscj1uKDEyKSxpPW4oMTMyKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZihvKHQpLHIoZSkmJmUuY29uc3RydWN0b3I9PT10KXJldHVybiBlO3ZhciBuPWkuZih0KTtyZXR1cm4oMCxuLnJlc29sdmUpKGUpLG4ucHJvbWlzZX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDE5KS5mLHI9big0NyksaT1uKDU3KSxhPW4oMzApLHM9big1NiksYz1uKDc1KSxsPW4oOTQpLHU9bigxMjgpLGY9big1NSksZD1uKDE4KSxwPW4oNDEpLmZhc3RLZXksaD1uKDUxKSx2PWQ/XCJfc1wiOlwic2l6ZVwiLGc9ZnVuY3Rpb24odCxlKXt2YXIgbixvPXAoZSk7aWYoXCJGXCIhPT1vKXJldHVybiB0Ll9pW29dO2ZvcihuPXQuX2Y7bjtuPW4ubilpZihuLms9PWUpcmV0dXJuIG59O3QuZXhwb3J0cz17Z2V0Q29uc3RydWN0b3I6ZnVuY3Rpb24odCxlLG4sbCl7dmFyIHU9dCgoZnVuY3Rpb24odCxvKXtzKHQsdSxlLFwiX2lcIiksdC5fdD1lLHQuX2k9cihudWxsKSx0Ll9mPXZvaWQgMCx0Ll9sPXZvaWQgMCx0W3ZdPTAsbnVsbCE9byYmYyhvLG4sdFtsXSx0KX0pKTtyZXR1cm4gaSh1LnByb3RvdHlwZSx7Y2xlYXI6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9aCh0aGlzLGUpLG49dC5faSxvPXQuX2Y7bztvPW8ubilvLnI9ITAsby5wJiYoby5wPW8ucC5uPXZvaWQgMCksZGVsZXRlIG5bby5pXTt0Ll9mPXQuX2w9dm9pZCAwLHRbdl09MH0sZGVsZXRlOmZ1bmN0aW9uKHQpe3ZhciBuPWgodGhpcyxlKSxvPWcobix0KTtpZihvKXt2YXIgcj1vLm4saT1vLnA7ZGVsZXRlIG4uX2lbby5pXSxvLnI9ITAsaSYmKGkubj1yKSxyJiYoci5wPWkpLG4uX2Y9PW8mJihuLl9mPXIpLG4uX2w9PW8mJihuLl9sPWkpLG5bdl0tLX1yZXR1cm4hIW99LGZvckVhY2g6ZnVuY3Rpb24odCl7aCh0aGlzLGUpO2Zvcih2YXIgbixvPWEodCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCwzKTtuPW4/bi5uOnRoaXMuX2Y7KWZvcihvKG4udixuLmssdGhpcyk7biYmbi5yOyluPW4ucH0saGFzOmZ1bmN0aW9uKHQpe3JldHVybiEhZyhoKHRoaXMsZSksdCl9fSksZCYmbyh1LnByb3RvdHlwZSxcInNpemVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGgodGhpcyxlKVt2XX19KSx1fSxkZWY6ZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaT1nKHQsZSk7cmV0dXJuIGk/aS52PW46KHQuX2w9aT17aTpyPXAoZSwhMCksazplLHY6bixwOm89dC5fbCxuOnZvaWQgMCxyOiExfSx0Ll9mfHwodC5fZj1pKSxvJiYoby5uPWkpLHRbdl0rKyxcIkZcIiE9PXImJih0Ll9pW3JdPWkpKSx0fSxnZXRFbnRyeTpnLHNldFN0cm9uZzpmdW5jdGlvbih0LGUsbil7bCh0LGUsKGZ1bmN0aW9uKHQsbil7dGhpcy5fdD1oKHQsZSksdGhpcy5faz1uLHRoaXMuX2w9dm9pZCAwfSksKGZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuX2ssZT10aGlzLl9sO2UmJmUucjspZT1lLnA7cmV0dXJuIHRoaXMuX3QmJih0aGlzLl9sPWU9ZT9lLm46dGhpcy5fdC5fZik/dSgwLFwia2V5c1wiPT10P2UuazpcInZhbHVlc1wiPT10P2UudjpbZS5rLGUudl0pOih0aGlzLl90PXZvaWQgMCx1KDEpKX0pLG4/XCJlbnRyaWVzXCI6XCJ2YWx1ZXNcIiwhbiwhMCksZihlKX19fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89big1Nykscj1uKDQxKS5nZXRXZWFrLGk9bigxMSksYT1uKDEyKSxzPW4oNTYpLGM9big3NSksbD1uKDM1KSx1PW4oMjYpLGY9big1MSksZD1sKDUpLHA9bCg2KSxoPTAsdj1mdW5jdGlvbih0KXtyZXR1cm4gdC5fbHx8KHQuX2w9bmV3IGcpfSxnPWZ1bmN0aW9uKCl7dGhpcy5hPVtdfSx5PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGQodC5hLChmdW5jdGlvbih0KXtyZXR1cm4gdFswXT09PWV9KSl9O2cucHJvdG90eXBlPXtnZXQ6ZnVuY3Rpb24odCl7dmFyIGU9eSh0aGlzLHQpO2lmKGUpcmV0dXJuIGVbMV19LGhhczpmdW5jdGlvbih0KXtyZXR1cm4hIXkodGhpcyx0KX0sc2V0OmZ1bmN0aW9uKHQsZSl7dmFyIG49eSh0aGlzLHQpO24/blsxXT1lOnRoaXMuYS5wdXNoKFt0LGVdKX0sZGVsZXRlOmZ1bmN0aW9uKHQpe3ZhciBlPXAodGhpcy5hLChmdW5jdGlvbihlKXtyZXR1cm4gZVswXT09PXR9KSk7cmV0dXJufmUmJnRoaXMuYS5zcGxpY2UoZSwxKSwhIX5lfX0sdC5leHBvcnRzPXtnZXRDb25zdHJ1Y3RvcjpmdW5jdGlvbih0LGUsbixpKXt2YXIgbD10KChmdW5jdGlvbih0LG8pe3ModCxsLGUsXCJfaVwiKSx0Ll90PWUsdC5faT1oKyssdC5fbD12b2lkIDAsbnVsbCE9byYmYyhvLG4sdFtpXSx0KX0pKTtyZXR1cm4gbyhsLnByb3RvdHlwZSx7ZGVsZXRlOmZ1bmN0aW9uKHQpe2lmKCFhKHQpKXJldHVybiExO3ZhciBuPXIodCk7cmV0dXJuITA9PT1uP3YoZih0aGlzLGUpKS5kZWxldGUodCk6biYmdShuLHRoaXMuX2kpJiZkZWxldGUgblt0aGlzLl9pXX0saGFzOmZ1bmN0aW9uKHQpe2lmKCFhKHQpKXJldHVybiExO3ZhciBuPXIodCk7cmV0dXJuITA9PT1uP3YoZih0aGlzLGUpKS5oYXModCk6biYmdShuLHRoaXMuX2kpfX0pLGx9LGRlZjpmdW5jdGlvbih0LGUsbil7dmFyIG89cihpKGUpLCEwKTtyZXR1cm4hMD09PW8/dih0KS5zZXQoZSxuKTpvW3QuX2ldPW4sdH0sdWZzdG9yZTp2fX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMzIpLHI9bigxNik7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PXQpcmV0dXJuIDA7dmFyIGU9byh0KSxuPXIoZSk7aWYoZSE9PW4pdGhyb3cgUmFuZ2VFcnJvcihcIldyb25nIGxlbmd0aCFcIik7cmV0dXJuIG59fSxmdW5jdGlvbih0LGUsbil7dmFyIG89big0OCkscj1uKDY5KSxpPW4oMTEpLGE9big5KS5SZWZsZWN0O3QuZXhwb3J0cz1hJiZhLm93bktleXN8fGZ1bmN0aW9uKHQpe3ZhciBlPW8uZihpKHQpKSxuPXIuZjtyZXR1cm4gbj9lLmNvbmNhdChuKHQpKTplfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTYpLHI9big5MCksaT1uKDM3KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4sYSl7dmFyIHM9U3RyaW5nKGkodCkpLGM9cy5sZW5ndGgsbD12b2lkIDA9PT1uP1wiIFwiOlN0cmluZyhuKSx1PW8oZSk7aWYodTw9Y3x8XCJcIj09bClyZXR1cm4gczt2YXIgZj11LWMsZD1yLmNhbGwobCxNYXRoLmNlaWwoZi9sLmxlbmd0aCkpO3JldHVybiBkLmxlbmd0aD5mJiYoZD1kLnNsaWNlKDAsZikpLGE/ZCtzOnMrZH19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDE4KSxyPW4oNDUpLGk9bigyOCksYT1uKDYzKS5mO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciBuLHM9aShlKSxjPXIocyksbD1jLmxlbmd0aCx1PTAsZj1bXTtsPnU7KW49Y1t1KytdLG8mJiFhLmNhbGwocyxuKXx8Zi5wdXNoKHQ/W24sc1tuXV06c1tuXSk7cmV0dXJuIGZ9fX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPWZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciBlPU9iamVjdC5wcm90b3R5cGUsbj1lLmhhc093blByb3BlcnR5LG89XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sP1N5bWJvbDp7fSxyPW8uaXRlcmF0b3J8fFwiQEBpdGVyYXRvclwiLGk9by5hc3luY0l0ZXJhdG9yfHxcIkBAYXN5bmNJdGVyYXRvclwiLGE9by50b1N0cmluZ1RhZ3x8XCJAQHRvU3RyaW5nVGFnXCI7ZnVuY3Rpb24gcyh0LGUsbixvKXt2YXIgcj1lJiZlLnByb3RvdHlwZSBpbnN0YW5jZW9mIHU/ZTp1LGk9T2JqZWN0LmNyZWF0ZShyLnByb3RvdHlwZSksYT1uZXcgUyhvfHxbXSk7cmV0dXJuIGkuX2ludm9rZT1mdW5jdGlvbih0LGUsbil7dmFyIG89XCJzdXNwZW5kZWRTdGFydFwiO3JldHVybiBmdW5jdGlvbihyLGkpe2lmKFwiZXhlY3V0aW5nXCI9PT1vKXRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7aWYoXCJjb21wbGV0ZWRcIj09PW8pe2lmKFwidGhyb3dcIj09PXIpdGhyb3cgaTtyZXR1cm4gVCgpfWZvcihuLm1ldGhvZD1yLG4uYXJnPWk7Oyl7dmFyIGE9bi5kZWxlZ2F0ZTtpZihhKXt2YXIgcz1tKGEsbik7aWYocyl7aWYocz09PWwpY29udGludWU7cmV0dXJuIHN9fWlmKFwibmV4dFwiPT09bi5tZXRob2Qpbi5zZW50PW4uX3NlbnQ9bi5hcmc7ZWxzZSBpZihcInRocm93XCI9PT1uLm1ldGhvZCl7aWYoXCJzdXNwZW5kZWRTdGFydFwiPT09byl0aHJvdyBvPVwiY29tcGxldGVkXCIsbi5hcmc7bi5kaXNwYXRjaEV4Y2VwdGlvbihuLmFyZyl9ZWxzZVwicmV0dXJuXCI9PT1uLm1ldGhvZCYmbi5hYnJ1cHQoXCJyZXR1cm5cIixuLmFyZyk7bz1cImV4ZWN1dGluZ1wiO3ZhciB1PWModCxlLG4pO2lmKFwibm9ybWFsXCI9PT11LnR5cGUpe2lmKG89bi5kb25lP1wiY29tcGxldGVkXCI6XCJzdXNwZW5kZWRZaWVsZFwiLHUuYXJnPT09bCljb250aW51ZTtyZXR1cm57dmFsdWU6dS5hcmcsZG9uZTpuLmRvbmV9fVwidGhyb3dcIj09PXUudHlwZSYmKG89XCJjb21wbGV0ZWRcIixuLm1ldGhvZD1cInRocm93XCIsbi5hcmc9dS5hcmcpfX19KHQsbixhKSxpfWZ1bmN0aW9uIGModCxlLG4pe3RyeXtyZXR1cm57dHlwZTpcIm5vcm1hbFwiLGFyZzp0LmNhbGwoZSxuKX19Y2F0Y2godCl7cmV0dXJue3R5cGU6XCJ0aHJvd1wiLGFyZzp0fX19dC53cmFwPXM7dmFyIGw9e307ZnVuY3Rpb24gdSgpe31mdW5jdGlvbiBmKCl7fWZ1bmN0aW9uIGQoKXt9dmFyIHA9e307cFtyXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTt2YXIgaD1PYmplY3QuZ2V0UHJvdG90eXBlT2Ysdj1oJiZoKGgodyhbXSkpKTt2JiZ2IT09ZSYmbi5jYWxsKHYscikmJihwPXYpO3ZhciBnPWQucHJvdG90eXBlPXUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUocCk7ZnVuY3Rpb24geSh0KXtbXCJuZXh0XCIsXCJ0aHJvd1wiLFwicmV0dXJuXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe3RbZV09ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2ludm9rZShlLHQpfX0pKX1mdW5jdGlvbiBiKHQsZSl7dmFyIG87dGhpcy5faW52b2tlPWZ1bmN0aW9uKHIsaSl7ZnVuY3Rpb24gYSgpe3JldHVybiBuZXcgZSgoZnVuY3Rpb24obyxhKXshZnVuY3Rpb24gbyhyLGksYSxzKXt2YXIgbD1jKHRbcl0sdCxpKTtpZihcInRocm93XCIhPT1sLnR5cGUpe3ZhciB1PWwuYXJnLGY9dS52YWx1ZTtyZXR1cm4gZiYmXCJvYmplY3RcIj09dHlwZW9mIGYmJm4uY2FsbChmLFwiX19hd2FpdFwiKT9lLnJlc29sdmUoZi5fX2F3YWl0KS50aGVuKChmdW5jdGlvbih0KXtvKFwibmV4dFwiLHQsYSxzKX0pLChmdW5jdGlvbih0KXtvKFwidGhyb3dcIix0LGEscyl9KSk6ZS5yZXNvbHZlKGYpLnRoZW4oKGZ1bmN0aW9uKHQpe3UudmFsdWU9dCxhKHUpfSksKGZ1bmN0aW9uKHQpe3JldHVybiBvKFwidGhyb3dcIix0LGEscyl9KSl9cyhsLmFyZyl9KHIsaSxvLGEpfSkpfXJldHVybiBvPW8/by50aGVuKGEsYSk6YSgpfX1mdW5jdGlvbiBtKHQsZSl7dmFyIG49dC5pdGVyYXRvcltlLm1ldGhvZF07aWYodm9pZCAwPT09bil7aWYoZS5kZWxlZ2F0ZT1udWxsLFwidGhyb3dcIj09PWUubWV0aG9kKXtpZih0Lml0ZXJhdG9yLnJldHVybiYmKGUubWV0aG9kPVwicmV0dXJuXCIsZS5hcmc9dm9pZCAwLG0odCxlKSxcInRocm93XCI9PT1lLm1ldGhvZCkpcmV0dXJuIGw7ZS5tZXRob2Q9XCJ0aHJvd1wiLGUuYXJnPW5ldyBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpfXJldHVybiBsfXZhciBvPWMobix0Lml0ZXJhdG9yLGUuYXJnKTtpZihcInRocm93XCI9PT1vLnR5cGUpcmV0dXJuIGUubWV0aG9kPVwidGhyb3dcIixlLmFyZz1vLmFyZyxlLmRlbGVnYXRlPW51bGwsbDt2YXIgcj1vLmFyZztyZXR1cm4gcj9yLmRvbmU/KGVbdC5yZXN1bHROYW1lXT1yLnZhbHVlLGUubmV4dD10Lm5leHRMb2MsXCJyZXR1cm5cIiE9PWUubWV0aG9kJiYoZS5tZXRob2Q9XCJuZXh0XCIsZS5hcmc9dm9pZCAwKSxlLmRlbGVnYXRlPW51bGwsbCk6cjooZS5tZXRob2Q9XCJ0aHJvd1wiLGUuYXJnPW5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKSxlLmRlbGVnYXRlPW51bGwsbCl9ZnVuY3Rpb24gayh0KXt2YXIgZT17dHJ5TG9jOnRbMF19OzEgaW4gdCYmKGUuY2F0Y2hMb2M9dFsxXSksMiBpbiB0JiYoZS5maW5hbGx5TG9jPXRbMl0sZS5hZnRlckxvYz10WzNdKSx0aGlzLnRyeUVudHJpZXMucHVzaChlKX1mdW5jdGlvbiB4KHQpe3ZhciBlPXQuY29tcGxldGlvbnx8e307ZS50eXBlPVwibm9ybWFsXCIsZGVsZXRlIGUuYXJnLHQuY29tcGxldGlvbj1lfWZ1bmN0aW9uIFModCl7dGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOlwicm9vdFwifV0sdC5mb3JFYWNoKGssdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gdyh0KXtpZih0KXt2YXIgZT10W3JdO2lmKGUpcmV0dXJuIGUuY2FsbCh0KTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm5leHQpcmV0dXJuIHQ7aWYoIWlzTmFOKHQubGVuZ3RoKSl7dmFyIG89LTEsaT1mdW5jdGlvbiBlKCl7Zm9yKDsrK288dC5sZW5ndGg7KWlmKG4uY2FsbCh0LG8pKXJldHVybiBlLnZhbHVlPXRbb10sZS5kb25lPSExLGU7cmV0dXJuIGUudmFsdWU9dm9pZCAwLGUuZG9uZT0hMCxlfTtyZXR1cm4gaS5uZXh0PWl9fXJldHVybntuZXh0OlR9fWZ1bmN0aW9uIFQoKXtyZXR1cm57dmFsdWU6dm9pZCAwLGRvbmU6ITB9fXJldHVybiBmLnByb3RvdHlwZT1nLmNvbnN0cnVjdG9yPWQsZC5jb25zdHJ1Y3Rvcj1mLGRbYV09Zi5kaXNwbGF5TmFtZT1cIkdlbmVyYXRvckZ1bmN0aW9uXCIsdC5pc0dlbmVyYXRvckZ1bmN0aW9uPWZ1bmN0aW9uKHQpe3ZhciBlPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQuY29uc3RydWN0b3I7cmV0dXJuISFlJiYoZT09PWZ8fFwiR2VuZXJhdG9yRnVuY3Rpb25cIj09PShlLmRpc3BsYXlOYW1lfHxlLm5hbWUpKX0sdC5tYXJrPWZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZCk6KHQuX19wcm90b19fPWQsYSBpbiB0fHwodFthXT1cIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSx0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcpLHR9LHQuYXdyYXA9ZnVuY3Rpb24odCl7cmV0dXJue19fYXdhaXQ6dH19LHkoYi5wcm90b3R5cGUpLGIucHJvdG90eXBlW2ldPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LHQuQXN5bmNJdGVyYXRvcj1iLHQuYXN5bmM9ZnVuY3Rpb24oZSxuLG8scixpKXt2b2lkIDA9PT1pJiYoaT1Qcm9taXNlKTt2YXIgYT1uZXcgYihzKGUsbixvLHIpLGkpO3JldHVybiB0LmlzR2VuZXJhdG9yRnVuY3Rpb24obik/YTphLm5leHQoKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdC5kb25lP3QudmFsdWU6YS5uZXh0KCl9KSl9LHkoZyksZ1thXT1cIkdlbmVyYXRvclwiLGdbcl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sZy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBHZW5lcmF0b3JdXCJ9LHQua2V5cz1mdW5jdGlvbih0KXt2YXIgZT1bXTtmb3IodmFyIG4gaW4gdCllLnB1c2gobik7cmV0dXJuIGUucmV2ZXJzZSgpLGZ1bmN0aW9uIG4oKXtmb3IoO2UubGVuZ3RoOyl7dmFyIG89ZS5wb3AoKTtpZihvIGluIHQpcmV0dXJuIG4udmFsdWU9byxuLmRvbmU9ITEsbn1yZXR1cm4gbi5kb25lPSEwLG59fSx0LnZhbHVlcz13LFMucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpTLHJlc2V0OmZ1bmN0aW9uKHQpe2lmKHRoaXMucHJldj0wLHRoaXMubmV4dD0wLHRoaXMuc2VudD10aGlzLl9zZW50PXZvaWQgMCx0aGlzLmRvbmU9ITEsdGhpcy5kZWxlZ2F0ZT1udWxsLHRoaXMubWV0aG9kPVwibmV4dFwiLHRoaXMuYXJnPXZvaWQgMCx0aGlzLnRyeUVudHJpZXMuZm9yRWFjaCh4KSwhdClmb3IodmFyIGUgaW4gdGhpcylcInRcIj09PWUuY2hhckF0KDApJiZuLmNhbGwodGhpcyxlKSYmIWlzTmFOKCtlLnNsaWNlKDEpKSYmKHRoaXNbZV09dm9pZCAwKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgdD10aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjtpZihcInRocm93XCI9PT10LnR5cGUpdGhyb3cgdC5hcmc7cmV0dXJuIHRoaXMucnZhbH0sZGlzcGF0Y2hFeGNlcHRpb246ZnVuY3Rpb24odCl7aWYodGhpcy5kb25lKXRocm93IHQ7dmFyIGU9dGhpcztmdW5jdGlvbiBvKG4sbyl7cmV0dXJuIGEudHlwZT1cInRocm93XCIsYS5hcmc9dCxlLm5leHQ9bixvJiYoZS5tZXRob2Q9XCJuZXh0XCIsZS5hcmc9dm9pZCAwKSwhIW99Zm9yKHZhciByPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtyPj0wOy0tcil7dmFyIGk9dGhpcy50cnlFbnRyaWVzW3JdLGE9aS5jb21wbGV0aW9uO2lmKFwicm9vdFwiPT09aS50cnlMb2MpcmV0dXJuIG8oXCJlbmRcIik7aWYoaS50cnlMb2M8PXRoaXMucHJldil7dmFyIHM9bi5jYWxsKGksXCJjYXRjaExvY1wiKSxjPW4uY2FsbChpLFwiZmluYWxseUxvY1wiKTtpZihzJiZjKXtpZih0aGlzLnByZXY8aS5jYXRjaExvYylyZXR1cm4gbyhpLmNhdGNoTG9jLCEwKTtpZih0aGlzLnByZXY8aS5maW5hbGx5TG9jKXJldHVybiBvKGkuZmluYWxseUxvYyl9ZWxzZSBpZihzKXtpZih0aGlzLnByZXY8aS5jYXRjaExvYylyZXR1cm4gbyhpLmNhdGNoTG9jLCEwKX1lbHNle2lmKCFjKXRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO2lmKHRoaXMucHJldjxpLmZpbmFsbHlMb2MpcmV0dXJuIG8oaS5maW5hbGx5TG9jKX19fX0sYWJydXB0OmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBvPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtvPj0wOy0tbyl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW29dO2lmKHIudHJ5TG9jPD10aGlzLnByZXYmJm4uY2FsbChyLFwiZmluYWxseUxvY1wiKSYmdGhpcy5wcmV2PHIuZmluYWxseUxvYyl7dmFyIGk9cjticmVha319aSYmKFwiYnJlYWtcIj09PXR8fFwiY29udGludWVcIj09PXQpJiZpLnRyeUxvYzw9ZSYmZTw9aS5maW5hbGx5TG9jJiYoaT1udWxsKTt2YXIgYT1pP2kuY29tcGxldGlvbjp7fTtyZXR1cm4gYS50eXBlPXQsYS5hcmc9ZSxpPyh0aGlzLm1ldGhvZD1cIm5leHRcIix0aGlzLm5leHQ9aS5maW5hbGx5TG9jLGwpOnRoaXMuY29tcGxldGUoYSl9LGNvbXBsZXRlOmZ1bmN0aW9uKHQsZSl7aWYoXCJ0aHJvd1wiPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVyblwiYnJlYWtcIj09PXQudHlwZXx8XCJjb250aW51ZVwiPT09dC50eXBlP3RoaXMubmV4dD10LmFyZzpcInJldHVyblwiPT09dC50eXBlPyh0aGlzLnJ2YWw9dGhpcy5hcmc9dC5hcmcsdGhpcy5tZXRob2Q9XCJyZXR1cm5cIix0aGlzLm5leHQ9XCJlbmRcIik6XCJub3JtYWxcIj09PXQudHlwZSYmZSYmKHRoaXMubmV4dD1lKSxsfSxmaW5pc2g6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtlPj0wOy0tZSl7dmFyIG49dGhpcy50cnlFbnRyaWVzW2VdO2lmKG4uZmluYWxseUxvYz09PXQpcmV0dXJuIHRoaXMuY29tcGxldGUobi5jb21wbGV0aW9uLG4uYWZ0ZXJMb2MpLHgobiksbH19LGNhdGNoOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7ZT49MDstLWUpe3ZhciBuPXRoaXMudHJ5RW50cmllc1tlXTtpZihuLnRyeUxvYz09PXQpe3ZhciBvPW4uY29tcGxldGlvbjtpZihcInRocm93XCI9PT1vLnR5cGUpe3ZhciByPW8uYXJnO3gobil9cmV0dXJuIHJ9fXRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKX0sZGVsZWdhdGVZaWVsZDpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMuZGVsZWdhdGU9e2l0ZXJhdG9yOncodCkscmVzdWx0TmFtZTplLG5leHRMb2M6bn0sXCJuZXh0XCI9PT10aGlzLm1ldGhvZCYmKHRoaXMuYXJnPXZvaWQgMCksbH19LHR9KHQuZXhwb3J0cyk7dHJ5e3JlZ2VuZXJhdG9yUnVudGltZT1vfWNhdGNoKHQpe0Z1bmN0aW9uKFwiclwiLFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShvKX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDE0Mik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYodCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpcmV0dXJuIG8odCxlKTt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkuc2xpY2UoOCwtMSk7cmV0dXJuXCJPYmplY3RcIj09PW4mJnQuY29uc3RydWN0b3ImJihuPXQuY29uc3RydWN0b3IubmFtZSksXCJNYXBcIj09PW58fFwiU2V0XCI9PT1uP0FycmF5LmZyb20obik6XCJBcmd1bWVudHNcIj09PW58fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pP28odCxlKTp2b2lkIDB9fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXsobnVsbD09ZXx8ZT50Lmxlbmd0aCkmJihlPXQubGVuZ3RoKTtmb3IodmFyIG49MCxvPW5ldyBBcnJheShlKTtuPGU7bisrKW9bbl09dFtuXTtyZXR1cm4gb319LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/dC5leHBvcnRzPW49ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTp0LmV4cG9ydHM9bj1mdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxuKGUpfXQuZXhwb3J0cz1ufSxmdW5jdGlvbih0KXt0LmV4cG9ydHM9SlNPTi5wYXJzZSgne1widWlcIjp7XCJibG9ja1R1bmVzXCI6e1widG9nZ2xlclwiOntcIkNsaWNrIHRvIHR1bmVcIjpcIlwiLFwib3IgZHJhZyB0byBtb3ZlXCI6XCJcIn19LFwiaW5saW5lVG9vbGJhclwiOntcImNvbnZlcnRlclwiOntcIkNvbnZlcnQgdG9cIjpcIlwifX0sXCJ0b29sYmFyXCI6e1widG9vbGJveFwiOntcIkFkZFwiOlwiXCJ9fX0sXCJ0b29sTmFtZXNcIjp7XCJUZXh0XCI6XCJcIixcIkxpbmtcIjpcIlwiLFwiQm9sZFwiOlwiXCIsXCJJdGFsaWNcIjpcIlwifSxcInRvb2xzXCI6e1wibGlua1wiOntcIkFkZCBhIGxpbmtcIjpcIlwifSxcInN0dWJcIjp7XCJUaGUgYmxvY2sgY2FuIG5vdCBiZSBkaXNwbGF5ZWQgY29ycmVjdGx5LlwiOlwiXCJ9fSxcImJsb2NrVHVuZXNcIjp7XCJkZWxldGVcIjp7XCJEZWxldGVcIjpcIlwifSxcIm1vdmVVcFwiOntcIk1vdmUgdXBcIjpcIlwifSxcIm1vdmVEb3duXCI6e1wiTW92ZSBkb3duXCI6XCJcIn19fScpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oNSksbig2KSxuKDQpLG4oMzY3KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbih0LGUsbyxyLGksYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHM9bigxKTtmdW5jdGlvbiBjKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQ3JpdGljYWxFcnJvcj12b2lkIDAsZT1zKGUpLG89cyhvKSxyPXMociksaT1zKGkpO3ZhciBsPWZ1bmN0aW9uKHQpeygwLG8uZGVmYXVsdCkocyx0KTt2YXIgbixhPShuPXMsZnVuY3Rpb24oKXt2YXIgdCxlPSgwLGkuZGVmYXVsdCkobik7aWYoYygpKXt2YXIgbz0oMCxpLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3QoZSxhcmd1bWVudHMsbyl9ZWxzZSB0PWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLHIuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIHMoKXtyZXR1cm4oMCxlLmRlZmF1bHQpKHRoaXMscyksYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIHN9KCgwLChhPXMoYSkpLmRlZmF1bHQpKEVycm9yKSk7dC5Dcml0aWNhbEVycm9yPWwsbC5kaXNwbGF5TmFtZT1cIkNyaXRpY2FsRXJyb3JcIn0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oOCksbigxNDcpLG4oNyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYpe1widXNlIHN0cmljdFwiO3ZhciBkPW4oMTMpLHA9bigxKTtmdW5jdGlvbiBoKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1wKHIpLGk9cChpKSxhPXAoYSkscz1wKHMpLGM9cChjKSxsPWQobCksdT1wKHUpO3ZhciB2PWZ1bmN0aW9uKHQpeygwLGEuZGVmYXVsdCkobyx0KTt2YXIgZSxuPShlPW8sZnVuY3Rpb24oKXt2YXIgdCxuPSgwLGMuZGVmYXVsdCkoZSk7aWYoaCgpKXt2YXIgbz0oMCxjLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLHMuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIG8oKXt2YXIgdDtyZXR1cm4oMCxyLmRlZmF1bHQpKHRoaXMsbyksKHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cykpLmluc2VydD1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp0LmNvbmZpZy5kZWZhdWx0QmxvY2ssbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30sbz0oYXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXSxhcmd1bWVudHMubGVuZ3RoPjM/YXJndW1lbnRzWzNdOnZvaWQgMCkscj1hcmd1bWVudHMubGVuZ3RoPjQ/YXJndW1lbnRzWzRdOnZvaWQgMDt0LkVkaXRvci5CbG9ja01hbmFnZXIuaW5zZXJ0KHt0b29sOmUsZGF0YTpuLGluZGV4Om8sbmVlZFRvRm9jdXM6cn0pfSx0fXJldHVybigwLGkuZGVmYXVsdCkobyxbe2tleTpcImdldEJsb2Nrc0NvdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmJsb2Nrcy5sZW5ndGh9fSx7a2V5OlwiZ2V0Q3VycmVudEJsb2NrSW5kZXhcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrSW5kZXh9fSx7a2V5OlwiZ2V0QmxvY2tCeUluZGV4XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlJbmRleCh0KTtpZih2b2lkIDAhPT1lKXJldHVybiBuZXcgdS5kZWZhdWx0KGUpO2wubG9nTGFiZWxlZChcIlRoZXJlIGlzIG5vIGJsb2NrIGF0IGluZGV4IGBcIit0K1wiYFwiLFwid2FyblwiKX19LHtrZXk6XCJzd2FwXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtsLmxvZyhcImBibG9ja3Muc3dhcCgpYCBtZXRob2QgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFVzZSBgYmxvY2subW92ZSgpYCBtZXRob2QgaW5zdGVhZFwiLFwiaW5mb1wiKSx0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuc3dhcCh0LGUpLHRoaXMuRWRpdG9yLlRvb2xiYXIubW92ZSghMSl9fSx7a2V5OlwibW92ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLm1vdmUodCxlKSx0aGlzLkVkaXRvci5Ub29sYmFyLm1vdmUoITEpfX0se2tleTpcImRlbGV0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RyeXt0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIucmVtb3ZlQmxvY2sodCl9Y2F0Y2godCl7cmV0dXJuIHZvaWQgbC5sb2dMYWJlbGVkKHQsXCJ3YXJuXCIpfTA9PT10aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuYmxvY2tzLmxlbmd0aCYmdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydCgpLHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2smJnRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jayx0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuRU5EKSx0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCl9fSx7a2V5OlwiY2xlYXJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jbGVhcighMCksdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY2xlYXIoKSx0aGlzLkVkaXRvci5SZW5kZXJlci5yZW5kZXIodC5ibG9ja3MpfX0se2tleTpcInJlbmRlckZyb21IVE1MXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jbGVhcigpLHRoaXMuRWRpdG9yLlBhc3RlLnByb2Nlc3NUZXh0KHQsITApfX0se2tleTpcInN0cmV0Y2hCbG9ja1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPSEoYXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0pfHxhcmd1bWVudHNbMV07bC5kZXByZWNhdGlvbkFzc2VydCghMCxcImJsb2Nrcy5zdHJldGNoQmxvY2soKVwiLFwiQmxvY2tBUElcIik7dmFyIG49dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlJbmRleCh0KTtuJiYobi5zdHJldGNoZWQ9ZSl9fSx7a2V5OlwiaW5zZXJ0TmV3QmxvY2tcIix2YWx1ZTpmdW5jdGlvbigpe2wubG9nKFwiTWV0aG9kIGJsb2Nrcy5pbnNlcnROZXdCbG9jaygpIGlzIGRlcHJlY2F0ZWQgYW5kIGl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBVc2UgYmxvY2tzLmluc2VydCgpIGluc3RlYWQuXCIsXCJ3YXJuXCIpLHRoaXMuaW5zZXJ0KCl9fSx7a2V5OlwibWV0aG9kc1wiLGdldDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJue2NsZWFyOmZ1bmN0aW9uKCl7cmV0dXJuIHQuY2xlYXIoKX0scmVuZGVyOmZ1bmN0aW9uKGUpe3JldHVybiB0LnJlbmRlcihlKX0scmVuZGVyRnJvbUhUTUw6ZnVuY3Rpb24oZSl7cmV0dXJuIHQucmVuZGVyRnJvbUhUTUwoZSl9LGRlbGV0ZTpmdW5jdGlvbihlKXtyZXR1cm4gdC5kZWxldGUoZSl9LHN3YXA6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdC5zd2FwKGUsbil9LG1vdmU6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdC5tb3ZlKGUsbil9LGdldEJsb2NrQnlJbmRleDpmdW5jdGlvbihlKXtyZXR1cm4gdC5nZXRCbG9ja0J5SW5kZXgoZSl9LGdldEN1cnJlbnRCbG9ja0luZGV4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZ2V0Q3VycmVudEJsb2NrSW5kZXgoKX0sZ2V0QmxvY2tzQ291bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdC5nZXRCbG9ja3NDb3VudCgpfSxzdHJldGNoQmxvY2s6ZnVuY3Rpb24oZSl7dmFyIG49IShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSl8fGFyZ3VtZW50c1sxXTtyZXR1cm4gdC5zdHJldGNoQmxvY2soZSxuKX0saW5zZXJ0TmV3QmxvY2s6ZnVuY3Rpb24oKXtyZXR1cm4gdC5pbnNlcnROZXdCbG9jaygpfSxpbnNlcnQ6dGhpcy5pbnNlcnR9fX1dKSxvfSgoZj1wKGYpKS5kZWZhdWx0KTtvLmRlZmF1bHQ9dix2LmRpc3BsYXlOYW1lPVwiQmxvY2tzQVBJXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2VdLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksbi5kZWZhdWx0PXZvaWQgMDt2YXIgbz1mdW5jdGlvbih0KXt2YXIgZT17Z2V0IG5hbWUoKXtyZXR1cm4gdC5uYW1lfSxnZXQgY29uZmlnKCl7cmV0dXJuIHQuY29uZmlnfSxnZXQgaG9sZGVyKCl7cmV0dXJuIHQuaG9sZGVyfSxnZXQgaXNFbXB0eSgpe3JldHVybiB0LmlzRW1wdHl9LGdldCBzZWxlY3RlZCgpe3JldHVybiB0LnNlbGVjdGVkfSxzZXQgc3RyZXRjaGVkKGUpe3Quc3RyZXRjaGVkPWV9LGdldCBzdHJldGNoZWQoKXtyZXR1cm4gdC5zdHJldGNoZWR9LGNhbGw6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdC5jYWxsKGUsbil9LHNhdmU6ZnVuY3Rpb24oKXtyZXR1cm4gdC5zYXZlKCl9LHZhbGlkYXRlOmZ1bmN0aW9uKGUpe3JldHVybiB0LnZhbGlkYXRlKGUpfX07T2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsZSl9O24uZGVmYXVsdD1vLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyxjLGwpe1widXNlIHN0cmljdFwiO3ZhciB1PW4oMSk7ZnVuY3Rpb24gZigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9dShyKSxpPXUoaSksYT11KGEpLHM9dShzKSxjPXUoYyk7dmFyIGQ9ZnVuY3Rpb24odCl7KDAsYS5kZWZhdWx0KShvLHQpO3ZhciBlLG49KGU9byxmdW5jdGlvbigpe3ZhciB0LG49KDAsYy5kZWZhdWx0KShlKTtpZihmKCkpe3ZhciBvPSgwLGMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAscy5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gbygpe3ZhciB0O3JldHVybigwLHIuZGVmYXVsdCkodGhpcyxvKSwodD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkuc2V0VG9GaXJzdEJsb2NrPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnQuRWRpdG9yLkNhcmV0LnBvc2l0aW9ucy5ERUZBVUxULG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjA7cmV0dXJuISF0LkVkaXRvci5CbG9ja01hbmFnZXIuZmlyc3RCbG9jayYmKHQuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sodC5FZGl0b3IuQmxvY2tNYW5hZ2VyLmZpcnN0QmxvY2ssZSxuKSwhMCl9LHQuc2V0VG9MYXN0QmxvY2s9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06dC5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkRFRkFVTFQsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MDtyZXR1cm4hIXQuRWRpdG9yLkJsb2NrTWFuYWdlci5sYXN0QmxvY2smJih0LkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHQuRWRpdG9yLkJsb2NrTWFuYWdlci5sYXN0QmxvY2ssZSxuKSwhMCl9LHQuc2V0VG9QcmV2aW91c0Jsb2NrPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnQuRWRpdG9yLkNhcmV0LnBvc2l0aW9ucy5ERUZBVUxULG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjA7cmV0dXJuISF0LkVkaXRvci5CbG9ja01hbmFnZXIucHJldmlvdXNCbG9jayYmKHQuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sodC5FZGl0b3IuQmxvY2tNYW5hZ2VyLnByZXZpb3VzQmxvY2ssZSxuKSwhMCl9LHQuc2V0VG9OZXh0QmxvY2s9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06dC5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkRFRkFVTFQsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06MDtyZXR1cm4hIXQuRWRpdG9yLkJsb2NrTWFuYWdlci5uZXh0QmxvY2smJih0LkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHQuRWRpdG9yLkJsb2NrTWFuYWdlci5uZXh0QmxvY2ssZSxuKSwhMCl9LHQuc2V0VG9CbG9jaz1mdW5jdGlvbihlKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dC5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkRFRkFVTFQsbz1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06MDtyZXR1cm4hIXQuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3NbZV0mJih0LkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHQuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3NbZV0sbixvKSwhMCl9LHQuZm9jdXM9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdO3JldHVybiBlP3Quc2V0VG9MYXN0QmxvY2sodC5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkVORCk6dC5zZXRUb0ZpcnN0QmxvY2sodC5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLlNUQVJUKX0sdH1yZXR1cm4oMCxpLmRlZmF1bHQpKG8sW3trZXk6XCJtZXRob2RzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue3NldFRvRmlyc3RCbG9jazp0aGlzLnNldFRvRmlyc3RCbG9jayxzZXRUb0xhc3RCbG9jazp0aGlzLnNldFRvTGFzdEJsb2NrLHNldFRvUHJldmlvdXNCbG9jazp0aGlzLnNldFRvUHJldmlvdXNCbG9jayxzZXRUb05leHRCbG9jazp0aGlzLnNldFRvTmV4dEJsb2NrLHNldFRvQmxvY2s6dGhpcy5zZXRUb0Jsb2NrLGZvY3VzOnRoaXMuZm9jdXN9fX1dKSxvfSgobD11KGwpKS5kZWZhdWx0KTtvLmRlZmF1bHQ9ZCxkLmRpc3BsYXlOYW1lPVwiQ2FyZXRBUElcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbig1KSxuKDYpLG4oNCksbig3KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhLHMsYyxsKXtcInVzZSBzdHJpY3RcIjt2YXIgdT1uKDEpO2Z1bmN0aW9uIGYoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPXUociksaT11KGkpLGE9dShhKSxzPXUocyksYz11KGMpO3ZhciBkPWZ1bmN0aW9uKHQpeygwLGEuZGVmYXVsdCkobyx0KTt2YXIgZSxuPShlPW8sZnVuY3Rpb24oKXt2YXIgdCxuPSgwLGMuZGVmYXVsdCkoZSk7aWYoZigpKXt2YXIgbz0oMCxjLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLHMuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIG8oKXtyZXR1cm4oMCxyLmRlZmF1bHQpKHRoaXMsbyksbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuKDAsaS5kZWZhdWx0KShvLFt7a2V5Olwib25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMuZXZlbnRzRGlzcGF0Y2hlci5vbih0LGUpfX0se2tleTpcImVtaXRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMuZXZlbnRzRGlzcGF0Y2hlci5lbWl0KHQsZSl9fSx7a2V5Olwib2ZmXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0aGlzLmV2ZW50c0Rpc3BhdGNoZXIub2ZmKHQsZSl9fSx7a2V5OlwibWV0aG9kc1wiLGdldDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJue2VtaXQ6ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdC5lbWl0KGUsbil9LG9mZjpmdW5jdGlvbihlLG4pe3JldHVybiB0Lm9mZihlLG4pfSxvbjpmdW5jdGlvbihlLG4pe3JldHVybiB0Lm9uKGUsbil9fX19XSksb30oKGw9dShsKSkuZGVmYXVsdCk7by5kZWZhdWx0PWQsZC5kaXNwbGF5TmFtZT1cIkV2ZW50c0FQSVwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDU5KSxuKDY2KSxuKDgpLG4oNyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHA9bigxKTtmdW5jdGlvbiBoKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1wKHIpLGk9cChpKSxhPXAoYSkscz1wKHMpLGM9cChjKSxsPXAobCk7dmFyIHY9ZnVuY3Rpb24odCl7KDAsYS5kZWZhdWx0KShvLHQpO3ZhciBlLG49KGU9byxmdW5jdGlvbigpe3ZhciB0LG49KDAsYy5kZWZhdWx0KShlKTtpZihoKCkpe3ZhciBvPSgwLGMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAscy5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gbygpe3JldHVybigwLHIuZGVmYXVsdCkodGhpcyxvKSxuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4oMCxpLmRlZmF1bHQpKG8sW3trZXk6XCJnZXRNZXRob2RzRm9yVG9vbFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5hc3NpZ24odGhpcy5tZXRob2RzLHt0OmZ1bmN0aW9uKG4pe3JldHVybiBsLmRlZmF1bHQudChvLmdldE5hbWVzcGFjZSh0LGUpLG4pfX0pfX0se2tleTpcIm1ldGhvZHNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57dDpmdW5jdGlvbigpeygwLGYubG9nTGFiZWxlZCkoXCJJMThuLnQoKSBtZXRob2QgY2FuIGJlIGFjY2Vzc2VkIG9ubHkgZnJvbSBUb29sc1wiLFwid2FyblwiKX19fX1dLFt7a2V5OlwiZ2V0TmFtZXNwYWNlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtzd2l0Y2goZSl7Y2FzZSB1LlRvb2xUeXBlLkJsb2NrOmNhc2UgdS5Ub29sVHlwZS5JbmxpbmU6cmV0dXJuXCJ0b29scy5cIi5jb25jYXQodCk7Y2FzZSB1LlRvb2xUeXBlLlR1bmU6cmV0dXJuXCJibG9ja1R1bmVzLlwiLmNvbmNhdCh0KX19fV0pLG99KChkPXAoZCkpLmRlZmF1bHQpO28uZGVmYXVsdD12LHYuZGlzcGxheU5hbWU9XCJJMThuQVBJXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9bigxKTtmdW5jdGlvbiBmKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj11KHIpLGk9dShpKSxhPXUoYSkscz11KHMpLGM9dShjKTt2YXIgZD1mdW5jdGlvbih0KXsoMCxhLmRlZmF1bHQpKG8sdCk7dmFyIGUsbj0oZT1vLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCxjLmRlZmF1bHQpKGUpO2lmKGYoKSl7dmFyIG89KDAsYy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBvKCl7cmV0dXJuKDAsci5kZWZhdWx0KSh0aGlzLG8pLG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybigwLGkuZGVmYXVsdCkobyxbe2tleTpcIm9wZW5cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuRWRpdG9yLklubGluZVRvb2xiYXIudHJ5VG9TaG93KCl9fSx7a2V5OlwiY2xvc2VcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKX19LHtrZXk6XCJtZXRob2RzXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm57Y2xvc2U6ZnVuY3Rpb24oKXtyZXR1cm4gdC5jbG9zZSgpfSxvcGVuOmZ1bmN0aW9uKCl7cmV0dXJuIHQub3BlbigpfX19fV0pLG99KChsPXUobCkpLmRlZmF1bHQpO28uZGVmYXVsdD1kLGQuZGlzcGxheU5hbWU9XCJJbmxpbmVUb29sYmFyQVBJXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9bigxKTtmdW5jdGlvbiBmKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj11KHIpLGk9dShpKSxhPXUoYSkscz11KHMpLGM9dShjKTt2YXIgZD1mdW5jdGlvbih0KXsoMCxhLmRlZmF1bHQpKG8sdCk7dmFyIGUsbj0oZT1vLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCxjLmRlZmF1bHQpKGUpO2lmKGYoKSl7dmFyIG89KDAsYy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBvKCl7cmV0dXJuKDAsci5kZWZhdWx0KSh0aGlzLG8pLG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybigwLGkuZGVmYXVsdCkobyxbe2tleTpcIm9uXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4sbyl7dGhpcy5saXN0ZW5lcnMub24odCxlLG4sbyl9fSx7a2V5Olwib2ZmXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4sbyl7dGhpcy5saXN0ZW5lcnMub2ZmKHQsZSxuLG8pfX0se2tleTpcIm1ldGhvZHNcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybntvbjpmdW5jdGlvbihlLG4sbyxyKXtyZXR1cm4gdC5vbihlLG4sbyxyKX0sb2ZmOmZ1bmN0aW9uKGUsbixvLHIpe3JldHVybiB0Lm9mZihlLG4sbyxyKX19fX1dKSxvfSgobD11KGwpKS5kZWZhdWx0KTtvLmRlZmF1bHQ9ZCxkLmRpc3BsYXlOYW1lPVwiTGlzdGVuZXJzQVBJXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9bigxKTtmdW5jdGlvbiBmKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj11KHIpLGk9dShpKSxhPXUoYSkscz11KHMpLGM9dShjKTt2YXIgZD1mdW5jdGlvbih0KXsoMCxhLmRlZmF1bHQpKG8sdCk7dmFyIGUsbj0oZT1vLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCxjLmRlZmF1bHQpKGUpO2lmKGYoKSl7dmFyIG89KDAsYy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBvKCl7cmV0dXJuKDAsci5kZWZhdWx0KSh0aGlzLG8pLG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybigwLGkuZGVmYXVsdCkobyxbe2tleTpcInNob3dcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5FZGl0b3IuTm90aWZpZXIuc2hvdyh0KX19LHtrZXk6XCJtZXRob2RzXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm57c2hvdzpmdW5jdGlvbihlKXtyZXR1cm4gdC5zaG93KGUpfX19fV0pLG99KChsPXUobCkpLmRlZmF1bHQpO28uZGVmYXVsdD1kLGQuZGlzcGxheU5hbWU9XCJOb3RpZmllckFQSVwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyxjLGwpe1widXNlIHN0cmljdFwiO3ZhciB1PW4oMSk7ZnVuY3Rpb24gZigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9dShyKSxpPXUoaSksYT11KGEpLHM9dShzKSxjPXUoYyk7dmFyIGQ9ZnVuY3Rpb24odCl7KDAsYS5kZWZhdWx0KShvLHQpO3ZhciBlLG49KGU9byxmdW5jdGlvbigpe3ZhciB0LG49KDAsYy5kZWZhdWx0KShlKTtpZihmKCkpe3ZhciBvPSgwLGMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAscy5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gbygpe3JldHVybigwLHIuZGVmYXVsdCkodGhpcyxvKSxuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4oMCxpLmRlZmF1bHQpKG8sW3trZXk6XCJ0b2dnbGVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5FZGl0b3IuUmVhZE9ubHkudG9nZ2xlKHQpfX0se2tleTpcIm1ldGhvZHNcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybnt0b2dnbGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHQudG9nZ2xlKGUpfX19fV0pLG99KChsPXUobCkpLmRlZmF1bHQpO28uZGVmYXVsdD1kLGQuZGlzcGxheU5hbWU9XCJSZWFkT25seUFQSVwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyxjLGwpe1widXNlIHN0cmljdFwiO3ZhciB1PW4oMSk7ZnVuY3Rpb24gZigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9dShyKSxpPXUoaSksYT11KGEpLHM9dShzKSxjPXUoYyk7dmFyIGQ9ZnVuY3Rpb24odCl7KDAsYS5kZWZhdWx0KShvLHQpO3ZhciBlLG49KGU9byxmdW5jdGlvbigpe3ZhciB0LG49KDAsYy5kZWZhdWx0KShlKTtpZihmKCkpe3ZhciBvPSgwLGMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAscy5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gbygpe3JldHVybigwLHIuZGVmYXVsdCkodGhpcyxvKSxuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4oMCxpLmRlZmF1bHQpKG8sW3trZXk6XCJjbGVhblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuRWRpdG9yLlNhbml0aXplci5jbGVhbih0LGUpfX0se2tleTpcIm1ldGhvZHNcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybntjbGVhbjpmdW5jdGlvbihlLG4pe3JldHVybiB0LmNsZWFuKGUsbil9fX19XSksb30oKGw9dShsKSkuZGVmYXVsdCk7by5kZWZhdWx0PWQsZC5kaXNwbGF5TmFtZT1cIlNhbml0aXplckFQSVwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDgpLG4oNyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1KXtcInVzZSBzdHJpY3RcIjt2YXIgZj1uKDEzKSxkPW4oMSk7ZnVuY3Rpb24gcCgpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9ZChyKSxpPWQoaSksYT1kKGEpLHM9ZChzKSxjPWQoYyksbD1mKGwpO3ZhciBoPWZ1bmN0aW9uKHQpeygwLGEuZGVmYXVsdCkobyx0KTt2YXIgZSxuPShlPW8sZnVuY3Rpb24oKXt2YXIgdCxuPSgwLGMuZGVmYXVsdCkoZSk7aWYocCgpKXt2YXIgbz0oMCxjLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLHMuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIG8oKXtyZXR1cm4oMCxyLmRlZmF1bHQpKHRoaXMsbyksbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuKDAsaS5kZWZhdWx0KShvLFt7a2V5Olwic2F2ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9XCJFZGl0b3IncyBjb250ZW50IGNhbiBub3QgYmUgc2F2ZWQgaW4gcmVhZC1vbmx5IG1vZGVcIjtyZXR1cm4gdGhpcy5FZGl0b3IuUmVhZE9ubHkuaXNFbmFibGVkPyhsLmxvZ0xhYmVsZWQodCxcIndhcm5cIiksUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKHQpKSk6dGhpcy5FZGl0b3IuU2F2ZXIuc2F2ZSgpfX0se2tleTpcIm1ldGhvZHNcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybntzYXZlOmZ1bmN0aW9uKCl7cmV0dXJuIHQuc2F2ZSgpfX19fV0pLG99KCh1PWQodSkpLmRlZmF1bHQpO28uZGVmYXVsdD1oLGguZGlzcGxheU5hbWU9XCJTYXZlckFQSVwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDI1KSxuKDcpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyxjLGwsdSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGY9bigxKTtmdW5jdGlvbiBkKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1mKHIpLGk9ZihpKSxhPWYoYSkscz1mKHMpLGM9ZihjKSxsPWYobCk7dmFyIHA9ZnVuY3Rpb24odCl7KDAsYS5kZWZhdWx0KShvLHQpO3ZhciBlLG49KGU9byxmdW5jdGlvbigpe3ZhciB0LG49KDAsYy5kZWZhdWx0KShlKTtpZihkKCkpe3ZhciBvPSgwLGMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAscy5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gbygpe3JldHVybigwLHIuZGVmYXVsdCkodGhpcyxvKSxuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4oMCxpLmRlZmF1bHQpKG8sW3trZXk6XCJmaW5kUGFyZW50VGFnXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4obmV3IGwuZGVmYXVsdCkuZmluZFBhcmVudFRhZyh0LGUpfX0se2tleTpcImV4cGFuZFRvVGFnXCIsdmFsdWU6ZnVuY3Rpb24odCl7KG5ldyBsLmRlZmF1bHQpLmV4cGFuZFRvVGFnKHQpfX0se2tleTpcIm1ldGhvZHNcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybntmaW5kUGFyZW50VGFnOmZ1bmN0aW9uKGUsbil7cmV0dXJuIHQuZmluZFBhcmVudFRhZyhlLG4pfSxleHBhbmRUb1RhZzpmdW5jdGlvbihlKXtyZXR1cm4gdC5leHBhbmRUb1RhZyhlKX19fX1dKSxvfSgodT1mKHUpKS5kZWZhdWx0KTtvLmRlZmF1bHQ9cCxwLmRpc3BsYXlOYW1lPVwiU2VsZWN0aW9uQVBJXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9bigxKTtmdW5jdGlvbiBmKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj11KHIpLGk9dShpKSxhPXUoYSkscz11KHMpLGM9dShjKTt2YXIgZD1mdW5jdGlvbih0KXsoMCxhLmRlZmF1bHQpKG8sdCk7dmFyIGUsbj0oZT1vLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCxjLmRlZmF1bHQpKGUpO2lmKGYoKSl7dmFyIG89KDAsYy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBvKCl7cmV0dXJuKDAsci5kZWZhdWx0KSh0aGlzLG8pLG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybigwLGkuZGVmYXVsdCkobyxbe2tleTpcImNsYXNzZXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57YmxvY2s6XCJjZHgtYmxvY2tcIixpbmxpbmVUb29sQnV0dG9uOlwiY2UtaW5saW5lLXRvb2xcIixpbmxpbmVUb29sQnV0dG9uQWN0aXZlOlwiY2UtaW5saW5lLXRvb2wtLWFjdGl2ZVwiLGlucHV0OlwiY2R4LWlucHV0XCIsbG9hZGVyOlwiY2R4LWxvYWRlclwiLGJ1dHRvbjpcImNkeC1idXR0b25cIixzZXR0aW5nc0J1dHRvbjpcImNkeC1zZXR0aW5ncy1idXR0b25cIixzZXR0aW5nc0J1dHRvbkFjdGl2ZTpcImNkeC1zZXR0aW5ncy1idXR0b24tLWFjdGl2ZVwifX19XSksb30oKGw9dShsKSkuZGVmYXVsdCk7by5kZWZhdWx0PWQsZC5kaXNwbGF5TmFtZT1cIlN0eWxlc0FQSVwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpLG4oOCldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1KXtcInVzZSBzdHJpY3RcIjt2YXIgZj1uKDEzKSxkPW4oMSk7ZnVuY3Rpb24gcCgpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9ZChyKSxpPWQoaSksYT1kKGEpLHM9ZChzKSxjPWQoYyksbD1kKGwpLHU9Zih1KTt2YXIgaD1mdW5jdGlvbih0KXsoMCxhLmRlZmF1bHQpKG8sdCk7dmFyIGUsbj0oZT1vLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCxjLmRlZmF1bHQpKGUpO2lmKHAoKSl7dmFyIG89KDAsYy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBvKCl7cmV0dXJuKDAsci5kZWZhdWx0KSh0aGlzLG8pLG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybigwLGkuZGVmYXVsdCkobyxbe2tleTpcIm9wZW5cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuRWRpdG9yLlRvb2xiYXIub3BlbigpfX0se2tleTpcImNsb3NlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCl9fSx7a2V5OlwidG9nZ2xlQmxvY2tTZXR0aW5nc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKC0xIT09dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4KXt2YXIgZT1udWxsIT10P3Q6IXRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkO3QhPT10aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCYmKGU/KHRoaXMuRWRpdG9yLlRvb2xiYXIub3BlbmVkfHwodGhpcy5FZGl0b3IuVG9vbGJhci5vcGVuKCEwLCExKSx0aGlzLkVkaXRvci5Ub29sYmFyLnBsdXNCdXR0b24uaGlkZSgpKSx0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW4oKSk6dGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5jbG9zZSgpKX1lbHNlIHUubG9nTGFiZWxlZChcIkNvdWxkJ3QgdG9nZ2xlIHRoZSBUb29sYmFyIGJlY2F1c2UgdGhlcmUgaXMgbm8gYmxvY2sgc2VsZWN0ZWQgXCIsXCJ3YXJuXCIpfX0se2tleTpcIm1ldGhvZHNcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybntjbG9zZTpmdW5jdGlvbigpe3JldHVybiB0LmNsb3NlKCl9LG9wZW46ZnVuY3Rpb24oKXtyZXR1cm4gdC5vcGVuKCl9LHRvZ2dsZUJsb2NrU2V0dGluZ3M6ZnVuY3Rpb24oZSl7cmV0dXJuIHQudG9nZ2xlQmxvY2tTZXR0aW5ncyhlKX19fX1dKSxvfShsLmRlZmF1bHQpO28uZGVmYXVsdD1oLGguZGlzcGxheU5hbWU9XCJUb29sYmFyQVBJXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHU9bigxKTtmdW5jdGlvbiBmKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj11KHIpLGk9dShpKSxhPXUoYSkscz11KHMpLGM9dShjKTt2YXIgZD1mdW5jdGlvbih0KXsoMCxhLmRlZmF1bHQpKG8sdCk7dmFyIGUsbj0oZT1vLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCxjLmRlZmF1bHQpKGUpO2lmKGYoKSl7dmFyIG89KDAsYy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBvKCl7cmV0dXJuKDAsci5kZWZhdWx0KSh0aGlzLG8pLG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybigwLGkuZGVmYXVsdCkobyxbe2tleTpcInNob3dcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7dGhpcy5FZGl0b3IuVG9vbHRpcC5zaG93KHQsZSxuKX19LHtrZXk6XCJoaWRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLkVkaXRvci5Ub29sdGlwLmhpZGUoKX19LHtrZXk6XCJvbkhvdmVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3RoaXMuRWRpdG9yLlRvb2x0aXAub25Ib3Zlcih0LGUsbil9fSx7a2V5OlwibWV0aG9kc1wiLGdldDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJue3Nob3c6ZnVuY3Rpb24oZSxuLG8pe3JldHVybiB0LnNob3coZSxuLG8pfSxoaWRlOmZ1bmN0aW9uKCl7cmV0dXJuIHQuaGlkZSgpfSxvbkhvdmVyOmZ1bmN0aW9uKGUsbixvKXtyZXR1cm4gdC5vbkhvdmVyKGUsbixvKX19fX1dKSxvfSgobD11KGwpKS5kZWZhdWx0KTtvLmRlZmF1bHQ9ZCxkLmRpc3BsYXlOYW1lPVwiVG9vbHRpcEFQSVwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMjEpLG4oMjIpLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpLG4oOCksbigyNSksbig2MCldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCxwLGgpe1widXNlIHN0cmljdFwiO3ZhciB2PW4oMTMpLGc9bigxKTtmdW5jdGlvbiB5KCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1nKHIpLGk9ZyhpKSxhPWcoYSkscz1nKHMpLGM9ZyhjKSxsPWcobCksdT1nKHUpLGY9ZyhmKSxkPXYoZCkscD1nKHApLGg9ZyhoKTt2YXIgYj1mdW5jdGlvbih0KXsoMCxjLmRlZmF1bHQpKGYsdCk7dmFyIGUsbixvPShlPWYsZnVuY3Rpb24oKXt2YXIgdCxuPSgwLHUuZGVmYXVsdCkoZSk7aWYoeSgpKXt2YXIgbz0oMCx1LmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLGwuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIGYoKXtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsZiksby5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuKDAscy5kZWZhdWx0KShmLFt7a2V5Olwia2V5ZG93blwiLHZhbHVlOmZ1bmN0aW9uKHQpe3N3aXRjaCh0aGlzLmJlZm9yZUtleWRvd25Qcm9jZXNzaW5nKHQpLHQua2V5Q29kZSl7Y2FzZSBkLmtleUNvZGVzLkJBQ0tTUEFDRTp0aGlzLmJhY2tzcGFjZSh0KTticmVhaztjYXNlIGQua2V5Q29kZXMuRU5URVI6dGhpcy5lbnRlcih0KTticmVhaztjYXNlIGQua2V5Q29kZXMuRE9XTjpjYXNlIGQua2V5Q29kZXMuUklHSFQ6dGhpcy5hcnJvd1JpZ2h0QW5kRG93bih0KTticmVhaztjYXNlIGQua2V5Q29kZXMuVVA6Y2FzZSBkLmtleUNvZGVzLkxFRlQ6dGhpcy5hcnJvd0xlZnRBbmRVcCh0KTticmVhaztjYXNlIGQua2V5Q29kZXMuVEFCOnRoaXMudGFiUHJlc3NlZCh0KX19fSx7a2V5OlwiYmVmb3JlS2V5ZG93blByb2Nlc3NpbmdcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLm5lZWRUb29sYmFyQ2xvc2luZyh0KSYmZC5pc1ByaW50YWJsZUtleSh0LmtleUNvZGUpJiYodGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpLHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmNsb3NlKCksdC5jdHJsS2V5fHx0Lm1ldGFLZXl8fHQuYWx0S2V5fHx0LnNoaWZ0S2V5fHwodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNsZWFyRm9jdXNlZCgpLHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKHQpKSl9fSx7a2V5Olwia2V5dXBcIix2YWx1ZTpmdW5jdGlvbih0KXt0LnNoaWZ0S2V5fHx0aGlzLkVkaXRvci5VSS5jaGVja0VtcHRpbmVzcygpfX0se2tleTpcInRhYlByZXNzZWRcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbih0KTt2YXIgZT10aGlzLkVkaXRvcixuPWUuQmxvY2tNYW5hZ2VyLG89ZS5Ub29scyxyPWUuSW5saW5lVG9vbGJhcixpPWUuQ29udmVyc2lvblRvb2xiYXIsYT1uLmN1cnJlbnRCbG9jaztpZihhKXt2YXIgcz1vLmlzRGVmYXVsdChhLnRvb2wpJiZhLmlzRW1wdHksYz0hYS5pc0VtcHR5JiZpLm9wZW5lZCxsPSFhLmlzRW1wdHkmJiFwLmRlZmF1bHQuaXNDb2xsYXBzZWQmJnIub3BlbmVkO3M/dGhpcy5hY3RpdmF0ZVRvb2xib3goKTpjfHxsfHx0aGlzLmFjdGl2YXRlQmxvY2tTZXR0aW5ncygpfX19LHtrZXk6XCJkcmFnT3ZlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5Q2hpbGROb2RlKHQudGFyZ2V0KS5kcm9wVGFyZ2V0PSEwfX0se2tleTpcImRyYWdMZWF2ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5Q2hpbGROb2RlKHQudGFyZ2V0KS5kcm9wVGFyZ2V0PSExfX0se2tleTpcImhhbmRsZUNvbW1hbmRDXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb247aWYoZS5hbnlCbG9ja1NlbGVjdGVkKXJldHVybiBlLmNvcHlTZWxlY3RlZEJsb2Nrcyh0KX19LHtrZXk6XCJoYW5kbGVDb21tYW5kWFwiLHZhbHVlOihuPSgwLGkuZGVmYXVsdCkoci5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoZSl7dmFyIG4sbyxpLGEscztyZXR1cm4gci5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmlmKG49dGhpcy5FZGl0b3Isbz1uLkJsb2NrU2VsZWN0aW9uLGk9bi5CbG9ja01hbmFnZXIsYT1uLkNhcmV0LG8uYW55QmxvY2tTZWxlY3RlZCl7dC5uZXh0PTM7YnJlYWt9cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIpO2Nhc2UgMzpyZXR1cm4gdC5uZXh0PTUsby5jb3B5U2VsZWN0ZWRCbG9ja3MoZSk7Y2FzZSA1OnM9aS5yZW1vdmVTZWxlY3RlZEJsb2NrcygpLGEuc2V0VG9CbG9jayhpLmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgocywhMCksYS5wb3NpdGlvbnMuU1RBUlQpLG8uY2xlYXJTZWxlY3Rpb24oZSk7Y2FzZSA4OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImVudGVyXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5FZGl0b3Isbj1lLkJsb2NrTWFuYWdlcixvPWUuVG9vbHMscj1lLlVJLGk9bi5jdXJyZW50QmxvY2ssYT1vLmF2YWlsYWJsZVtpLm5hbWVdO2lmKCEoYSYmYVtvLklOVEVSTkFMX1NFVFRJTkdTLklTX0VOQUJMRURfTElORV9CUkVBS1NdfHxyLnNvbWVUb29sYmFyT3BlbmVkJiZyLnNvbWVGbGlwcGVyQnV0dG9uRm9jdXNlZHx8dC5zaGlmdEtleSkpe3ZhciBzPXRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2s7dGhpcy5FZGl0b3IuQ2FyZXQuaXNBdFN0YXJ0JiYhdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay5oYXNNZWRpYT90aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuaW5zZXJ0RGVmYXVsdEJsb2NrQXRJbmRleCh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrSW5kZXgpOnM9dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnNwbGl0KCksdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayhzKSx0aGlzLkVkaXRvci5Ub29scy5pc0RlZmF1bHQocy50b29sKSYmcy5pc0VtcHR5JiYodGhpcy5FZGl0b3IuVG9vbGJhci5vcGVuKCExKSx0aGlzLkVkaXRvci5Ub29sYmFyLnBsdXNCdXR0b24uc2hvdygpKSx0LnByZXZlbnREZWZhdWx0KCl9fX0se2tleTpcImJhY2tzcGFjZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuRWRpdG9yLG49ZS5CbG9ja01hbmFnZXIsbz1lLkJsb2NrU2VsZWN0aW9uLHI9ZS5DYXJldCxpPW4uY3VycmVudEJsb2NrLGE9dGhpcy5FZGl0b3IuVG9vbHMuYXZhaWxhYmxlW2kubmFtZV07aWYoaS5zZWxlY3RlZHx8aS5pc0VtcHR5JiZpLmN1cnJlbnRJbnB1dD09PWkuZmlyc3RJbnB1dCl7dC5wcmV2ZW50RGVmYXVsdCgpO3ZhciBzPW4uY3VycmVudEJsb2NrSW5kZXg7cmV0dXJuIG4ucHJldmlvdXNCbG9jayYmMD09PW4ucHJldmlvdXNCbG9jay5pbnB1dHMubGVuZ3RoP24ucmVtb3ZlQmxvY2socy0xKTpuLnJlbW92ZUJsb2NrKCksci5zZXRUb0Jsb2NrKG4uY3VycmVudEJsb2NrLHM/ci5wb3NpdGlvbnMuRU5EOnIucG9zaXRpb25zLlNUQVJUKSx0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCksdm9pZCBvLmNsZWFyU2VsZWN0aW9uKHQpfWlmKCFhfHwhYVt0aGlzLkVkaXRvci5Ub29scy5JTlRFUk5BTF9TRVRUSU5HUy5JU19FTkFCTEVEX0xJTkVfQlJFQUtTXXx8ci5pc0F0U3RhcnQpe3ZhciBjPTA9PT1uLmN1cnJlbnRCbG9ja0luZGV4O3IuaXNBdFN0YXJ0JiZwLmRlZmF1bHQuaXNDb2xsYXBzZWQmJmkuY3VycmVudElucHV0PT09aS5maXJzdElucHV0JiYhYyYmKHQucHJldmVudERlZmF1bHQoKSx0aGlzLm1lcmdlQmxvY2tzKCkpfX19LHtrZXk6XCJtZXJnZUJsb2Nrc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5FZGl0b3IsZT10LkJsb2NrTWFuYWdlcixuPXQuQ2FyZXQsbz10LlRvb2xiYXIscj1lLnByZXZpb3VzQmxvY2ssaT1lLmN1cnJlbnRCbG9jaztpZihpLm5hbWUhPT1yLm5hbWV8fCFyLm1lcmdlYWJsZSlyZXR1cm4gMD09PXIuaW5wdXRzLmxlbmd0aHx8ci5pc0VtcHR5PyhlLnJlbW92ZUJsb2NrKGUuY3VycmVudEJsb2NrSW5kZXgtMSksbi5zZXRUb0Jsb2NrKGUuY3VycmVudEJsb2NrKSx2b2lkIG8uY2xvc2UoKSk6dm9pZChuLm5hdmlnYXRlUHJldmlvdXMoKSYmby5jbG9zZSgpKTtuLmNyZWF0ZVNoYWRvdyhyLnBsdWdpbnNDb250ZW50KSxlLm1lcmdlQmxvY2tzKHIsaSkudGhlbigoZnVuY3Rpb24oKXtuLnJlc3RvcmVDYXJldChyLnBsdWdpbnNDb250ZW50KSxyLnBsdWdpbnNDb250ZW50Lm5vcm1hbGl6ZSgpLG8uY2xvc2UoKX0pKX19LHtrZXk6XCJhcnJvd1JpZ2h0QW5kRG93blwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1oLmRlZmF1bHQudXNlZEtleXMuaW5jbHVkZXModC5rZXlDb2RlKSYmKCF0LnNoaWZ0S2V5fHx0LmtleUNvZGU9PT1kLmtleUNvZGVzLlRBQik7aWYoIXRoaXMuRWRpdG9yLlVJLnNvbWVUb29sYmFyT3BlbmVkfHwhbil7dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNsZWFyRm9jdXNlZCgpLHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKTt2YXIgbz10aGlzLkVkaXRvci5DYXJldC5pc0F0RW5kfHx0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5hbnlCbG9ja1NlbGVjdGVkO3Quc2hpZnRLZXkmJnQua2V5Q29kZT09PWQua2V5Q29kZXMuRE9XTiYmbz90aGlzLkVkaXRvci5Dcm9zc0Jsb2NrU2VsZWN0aW9uLnRvZ2dsZUJsb2NrU2VsZWN0ZWRTdGF0ZSgpOigodC5rZXlDb2RlPT09ZC5rZXlDb2Rlcy5ET1dOfHx0LmtleUNvZGU9PT1kLmtleUNvZGVzLlJJR0hUJiYhdGhpcy5pc1J0bD90aGlzLkVkaXRvci5DYXJldC5uYXZpZ2F0ZU5leHQoKTp0aGlzLkVkaXRvci5DYXJldC5uYXZpZ2F0ZVByZXZpb3VzKCkpP3QucHJldmVudERlZmF1bHQoKTpkLmRlbGF5KChmdW5jdGlvbigpe2UuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2smJmUuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sudXBkYXRlQ3VycmVudElucHV0KCl9KSwyMCkoKSx0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbih0KSl9fX0se2tleTpcImFycm93TGVmdEFuZFVwXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZih0aGlzLkVkaXRvci5VSS5zb21lVG9vbGJhck9wZW5lZCl7aWYoaC5kZWZhdWx0LnVzZWRLZXlzLmluY2x1ZGVzKHQua2V5Q29kZSkmJighdC5zaGlmdEtleXx8dC5rZXlDb2RlPT09ZC5rZXlDb2Rlcy5UQUIpKXJldHVybjt0aGlzLkVkaXRvci5VSS5jbG9zZUFsbFRvb2xiYXJzKCl9dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNsZWFyRm9jdXNlZCgpLHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKTt2YXIgbj10aGlzLkVkaXRvci5DYXJldC5pc0F0U3RhcnR8fHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmFueUJsb2NrU2VsZWN0ZWQ7dC5zaGlmdEtleSYmdC5rZXlDb2RlPT09ZC5rZXlDb2Rlcy5VUCYmbj90aGlzLkVkaXRvci5Dcm9zc0Jsb2NrU2VsZWN0aW9uLnRvZ2dsZUJsb2NrU2VsZWN0ZWRTdGF0ZSghMSk6KCh0LmtleUNvZGU9PT1kLmtleUNvZGVzLlVQfHx0LmtleUNvZGU9PT1kLmtleUNvZGVzLkxFRlQmJiF0aGlzLmlzUnRsP3RoaXMuRWRpdG9yLkNhcmV0Lm5hdmlnYXRlUHJldmlvdXMoKTp0aGlzLkVkaXRvci5DYXJldC5uYXZpZ2F0ZU5leHQoKSk/dC5wcmV2ZW50RGVmYXVsdCgpOmQuZGVsYXkoKGZ1bmN0aW9uKCl7ZS5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jayYmZS5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay51cGRhdGVDdXJyZW50SW5wdXQoKX0pLDIwKSgpLHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKHQpKX19LHtrZXk6XCJuZWVkVG9vbGJhckNsb3NpbmdcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10LmtleUNvZGU9PT1kLmtleUNvZGVzLkVOVEVSJiZ0aGlzLkVkaXRvci5Ub29sYm94Lm9wZW5lZCxuPXQua2V5Q29kZT09PWQua2V5Q29kZXMuRU5URVImJnRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkLG89dC5rZXlDb2RlPT09ZC5rZXlDb2Rlcy5FTlRFUiYmdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5vcGVuZWQscj10LmtleUNvZGU9PT1kLmtleUNvZGVzLkVOVEVSJiZ0aGlzLkVkaXRvci5Db252ZXJzaW9uVG9vbGJhci5vcGVuZWQsaT10LmtleUNvZGU9PT1kLmtleUNvZGVzLlRBQjtyZXR1cm4hKHQuc2hpZnRLZXl8fGl8fGV8fG58fG98fHIpfX0se2tleTpcImFjdGl2YXRlVG9vbGJveFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5FZGl0b3IuVG9vbGJhci5vcGVuZWR8fCh0aGlzLkVkaXRvci5Ub29sYmFyLm9wZW4oITEsITEpLHRoaXMuRWRpdG9yLlRvb2xiYXIucGx1c0J1dHRvbi5zaG93KCkpLHRoaXMuRWRpdG9yLlRvb2xib3gub3BlbigpfX0se2tleTpcImFjdGl2YXRlQmxvY2tTZXR0aW5nc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5FZGl0b3IuVG9vbGJhci5vcGVuZWR8fCh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLmZvY3VzZWQ9ITAsdGhpcy5FZGl0b3IuVG9vbGJhci5vcGVuKCEwLCExKSx0aGlzLkVkaXRvci5Ub29sYmFyLnBsdXNCdXR0b24uaGlkZSgpKSx0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZHx8dGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuKCl9fV0pLGZ9KGYuZGVmYXVsdCk7by5kZWZhdWx0PWIsYi5kaXNwbGF5TmFtZT1cIkJsb2NrRXZlbnRzXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyMSksbigyMiksbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNjEpLG4oNyksbigxNSksbig4KSxuKDM4MyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCxwLGgsdil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGc9bigxMykseT1uKDEpO2Z1bmN0aW9uIGIoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPXkociksaT15KGkpLGE9eShhKSxzPXkocyksYz15KGMpLGw9eShsKSx1PXkodSksZj1nKGYpLGQ9eShkKSxwPXkocCksaD1nKGgpLHY9eSh2KTt2YXIgbT1mdW5jdGlvbih0KXsoMCxjLmRlZmF1bHQpKGcsdCk7dmFyIGUsbixvLGQ9KGU9ZyxmdW5jdGlvbigpe3ZhciB0LG49KDAsdS5kZWZhdWx0KShlKTtpZihiKCkpe3ZhciBvPSgwLHUuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAsbC5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gZygpe3ZhciB0O3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxnKSwodD1kLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkuX2N1cnJlbnRCbG9ja0luZGV4PS0xLHQuX2Jsb2Nrcz1udWxsLHR9cmV0dXJuKDAscy5kZWZhdWx0KShnLFt7a2V5OlwicHJlcGFyZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPW5ldyB2LmRlZmF1bHQodGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3IpO3RoaXMuX2Jsb2Nrcz1uZXcgUHJveHkoZSx7c2V0OnYuZGVmYXVsdC5zZXQsZ2V0OnYuZGVmYXVsdC5nZXR9KSx0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudCxcImNvcHlcIiwoZnVuY3Rpb24oZSl7cmV0dXJuIHQuRWRpdG9yLkJsb2NrRXZlbnRzLmhhbmRsZUNvbW1hbmRDKGUpfSkpfX0se2tleTpcInRvZ2dsZVJlYWRPbmx5XCIsdmFsdWU6ZnVuY3Rpb24odCl7dD90aGlzLmRpc2FibGVNb2R1bGVCaW5kaW5ncygpOnRoaXMuZW5hYmxlTW9kdWxlQmluZGluZ3MoKX19LHtrZXk6XCJjb21wb3NlQmxvY2tcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10LnRvb2wsbj10LmRhdGEsbz12b2lkIDA9PT1uP3t9Om4scj10aGlzLkVkaXRvci5SZWFkT25seS5pc0VuYWJsZWQsaT10aGlzLkVkaXRvci5Ub29scy5nZXRUb29sU2V0dGluZ3MoZSksYT10aGlzLkVkaXRvci5Ub29scy5hdmFpbGFibGVbZV0scz1uZXcgZi5kZWZhdWx0KHtuYW1lOmUsZGF0YTpvLFRvb2w6YSxzZXR0aW5nczppLGFwaTp0aGlzLkVkaXRvci5BUEkscmVhZE9ubHk6cn0pO3JldHVybiByfHx0aGlzLmJpbmRCbG9ja0V2ZW50cyhzKSxzfX0se2tleTpcImluc2VydFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LGU9dC50b29sLG49dm9pZCAwPT09ZT90aGlzLmNvbmZpZy5kZWZhdWx0QmxvY2s6ZSxvPXQuZGF0YSxyPXZvaWQgMD09PW8/e306byxpPXQuaW5kZXgsYT10Lm5lZWRUb0ZvY3VzLHM9dm9pZCAwPT09YXx8YSxjPXQucmVwbGFjZSxsPXZvaWQgMCE9PWMmJmMsdT1pO3ZvaWQgMD09PXUmJih1PXRoaXMuY3VycmVudEJsb2NrSW5kZXgrKGw/MDoxKSk7dmFyIGY9dGhpcy5jb21wb3NlQmxvY2soe3Rvb2w6bixkYXRhOnJ9KTtyZXR1cm4gdGhpcy5fYmxvY2tzLmluc2VydCh1LGYsbCkscz90aGlzLmN1cnJlbnRCbG9ja0luZGV4PXU6dTw9dGhpcy5jdXJyZW50QmxvY2tJbmRleCYmdGhpcy5jdXJyZW50QmxvY2tJbmRleCsrLGZ9fSx7a2V5OlwicmVwbGFjZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXQudG9vbCxuPXZvaWQgMD09PWU/dGhpcy5jb25maWcuZGVmYXVsdEJsb2NrOmUsbz10LmRhdGEscj12b2lkIDA9PT1vP3t9Om87cmV0dXJuIHRoaXMuaW5zZXJ0KHt0b29sOm4sZGF0YTpyLGluZGV4OnRoaXMuY3VycmVudEJsb2NrSW5kZXgscmVwbGFjZTohMH0pfX0se2tleTpcInBhc3RlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLG89dGhpcy5pbnNlcnQoe3Rvb2w6dCxyZXBsYWNlOm59KTt0cnl7by5jYWxsKGYuQmxvY2tUb29sQVBJLk9OX1BBU1RFLGUpfWNhdGNoKGUpe2gubG9nKFwiXCIuY29uY2F0KHQsXCI6IG9uUGFzdGUgY2FsbGJhY2sgY2FsbCBpcyBmYWlsZWRcIiksXCJlcnJvclwiLGUpfXJldHVybiBvfX0se2tleTpcImluc2VydERlZmF1bHRCbG9ja0F0SW5kZXhcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLG49dGhpcy5jb21wb3NlQmxvY2soe3Rvb2w6dGhpcy5jb25maWcuZGVmYXVsdEJsb2NrfSk7cmV0dXJuIHRoaXMuX2Jsb2Nrc1t0XT1uLGU/dGhpcy5jdXJyZW50QmxvY2tJbmRleD10OnQ8PXRoaXMuY3VycmVudEJsb2NrSW5kZXgmJnRoaXMuY3VycmVudEJsb2NrSW5kZXgrKyxufX0se2tleTpcImluc2VydEF0RW5kXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleD10aGlzLmJsb2Nrcy5sZW5ndGgtMSx0aGlzLmluc2VydCgpfX0se2tleTpcIm1lcmdlQmxvY2tzXCIsdmFsdWU6KG89KDAsaS5kZWZhdWx0KShyLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdChlLG4pe3ZhciBvLGk7cmV0dXJuIHIuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDppZihvPXRoaXMuX2Jsb2Nrcy5pbmRleE9mKG4pLCFuLmlzRW1wdHkpe3QubmV4dD0zO2JyZWFrfXJldHVybiB0LmFicnVwdChcInJldHVyblwiKTtjYXNlIDM6cmV0dXJuIHQubmV4dD01LG4uZGF0YTtjYXNlIDU6aWYoaT10LnNlbnQsaC5pc0VtcHR5KGkpKXt0Lm5leHQ9OTticmVha31yZXR1cm4gdC5uZXh0PTksZS5tZXJnZVdpdGgoaSk7Y2FzZSA5OnRoaXMucmVtb3ZlQmxvY2sobyksdGhpcy5jdXJyZW50QmxvY2tJbmRleD10aGlzLl9ibG9ja3MuaW5kZXhPZihlKTtjYXNlIDExOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0LGUpe3JldHVybiBvLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwicmVtb3ZlQmxvY2tcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp0aGlzLmN1cnJlbnRCbG9ja0luZGV4O2lmKCF0aGlzLnZhbGlkYXRlSW5kZXgodCkpdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgZmluZCBhIEJsb2NrIHRvIHJlbW92ZVwiKTt0aGlzLl9ibG9ja3MucmVtb3ZlKHQpLHRoaXMuY3VycmVudEJsb2NrSW5kZXg+PXQmJnRoaXMuY3VycmVudEJsb2NrSW5kZXgtLSx0aGlzLmJsb2Nrcy5sZW5ndGg/MD09PXQmJih0aGlzLmN1cnJlbnRCbG9ja0luZGV4PTApOih0aGlzLmN1cnJlbnRCbG9ja0luZGV4PS0xLHRoaXMuaW5zZXJ0KCkpfX0se2tleTpcInJlbW92ZVNlbGVjdGVkQmxvY2tzXCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIHQsZT10aGlzLmJsb2Nrcy5sZW5ndGgtMTtlPj0wO2UtLSl0aGlzLmJsb2Nrc1tlXS5zZWxlY3RlZCYmKHRoaXMucmVtb3ZlQmxvY2soZSksdD1lKTtyZXR1cm4gdH19LHtrZXk6XCJyZW1vdmVBbGxCbG9ja3NcIix2YWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmJsb2Nrcy5sZW5ndGgtMTt0Pj0wO3QtLSl0aGlzLl9ibG9ja3MucmVtb3ZlKHQpO3RoaXMuY3VycmVudEJsb2NrSW5kZXg9LTEsdGhpcy5pbnNlcnQoKSx0aGlzLmN1cnJlbnRCbG9jay5maXJzdElucHV0LmZvY3VzKCl9fSx7a2V5Olwic3BsaXRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuRWRpdG9yLkNhcmV0LmV4dHJhY3RGcmFnbWVudEZyb21DYXJldFBvc2l0aW9uKCksZT1wLmRlZmF1bHQubWFrZShcImRpdlwiKTtlLmFwcGVuZENoaWxkKHQpO3ZhciBuPXt0ZXh0OnAuZGVmYXVsdC5pc0VtcHR5KGUpP1wiXCI6ZS5pbm5lckhUTUx9O3JldHVybiB0aGlzLmluc2VydCh7ZGF0YTpufSl9fSx7a2V5OlwiZ2V0QmxvY2tCeUluZGV4XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2Jsb2Nrc1t0XX19LHtrZXk6XCJnZXRCbG9ja1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3AuZGVmYXVsdC5pc0VsZW1lbnQodCl8fCh0PXQucGFyZW50Tm9kZSk7dmFyIGU9dGhpcy5fYmxvY2tzLm5vZGVzLG49dC5jbG9zZXN0KFwiLlwiLmNvbmNhdChmLmRlZmF1bHQuQ1NTLndyYXBwZXIpKSxvPWUuaW5kZXhPZihuKTtpZihvPj0wKXJldHVybiB0aGlzLl9ibG9ja3Nbb119fSx7a2V5OlwiaGlnaGxpZ2h0Q3VycmVudE5vZGVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuY2xlYXJGb2N1c2VkKCksdGhpcy5jdXJyZW50QmxvY2suZm9jdXNlZD0hMH19LHtrZXk6XCJjbGVhckZvY3VzZWRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuYmxvY2tzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QuZm9jdXNlZD0hMX0pKX19LHtrZXk6XCJzZXRDdXJyZW50QmxvY2tCeUNoaWxkTm9kZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3AuZGVmYXVsdC5pc0VsZW1lbnQodCl8fCh0PXQucGFyZW50Tm9kZSk7dmFyIGU9dC5jbG9zZXN0KFwiLlwiLmNvbmNhdChmLmRlZmF1bHQuQ1NTLndyYXBwZXIpKTtpZihlKXt2YXIgbj1lLmNsb3Nlc3QoXCIuXCIuY29uY2F0KHRoaXMuRWRpdG9yLlVJLkNTUy5lZGl0b3JXcmFwcGVyKSk7aWYobnVsbD09bj92b2lkIDA6bi5pc0VxdWFsTm9kZSh0aGlzLkVkaXRvci5VSS5ub2Rlcy53cmFwcGVyKSlyZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleD10aGlzLl9ibG9ja3Mubm9kZXMuaW5kZXhPZihlKSx0aGlzLmN1cnJlbnRCbG9jay51cGRhdGVDdXJyZW50SW5wdXQoKSx0aGlzLmN1cnJlbnRCbG9ja319fSx7a2V5OlwiZ2V0QmxvY2tCeUNoaWxkTm9kZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3AuZGVmYXVsdC5pc0VsZW1lbnQodCl8fCh0PXQucGFyZW50Tm9kZSk7dmFyIGU9dC5jbG9zZXN0KFwiLlwiLmNvbmNhdChmLmRlZmF1bHQuQ1NTLndyYXBwZXIpKTtyZXR1cm4gdGhpcy5ibG9ja3MuZmluZCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuaG9sZGVyPT09ZX0pKX19LHtrZXk6XCJzd2FwXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt0aGlzLl9ibG9ja3Muc3dhcCh0LGUpLHRoaXMuY3VycmVudEJsb2NrSW5kZXg9ZX19LHtrZXk6XCJtb3ZlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMuY3VycmVudEJsb2NrSW5kZXg7aXNOYU4odCl8fGlzTmFOKGUpP2gubG9nKFwiV2FybmluZyBkdXJpbmcgJ21vdmUnIGNhbGw6IGluY29ycmVjdCBpbmRpY2VzIHByb3ZpZGVkLlwiLFwid2FyblwiKTp0aGlzLnZhbGlkYXRlSW5kZXgodCkmJnRoaXMudmFsaWRhdGVJbmRleChlKT8odGhpcy5fYmxvY2tzLm1vdmUodCxlKSx0aGlzLmN1cnJlbnRCbG9ja0luZGV4PXQpOmgubG9nKFwiV2FybmluZyBkdXJpbmcgJ21vdmUnIGNhbGw6IGluZGljZXMgY2Fubm90IGJlIGxvd2VyIHRoYW4gMCBvciBncmVhdGVyIHRoYW4gdGhlIGFtb3VudCBvZiBibG9ja3MuXCIsXCJ3YXJuXCIpfX0se2tleTpcImRyb3BQb2ludGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmN1cnJlbnRCbG9ja0luZGV4PS0xLHRoaXMuY2xlYXJGb2N1c2VkKCl9fSx7a2V5OlwiY2xlYXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF07dGhpcy5fYmxvY2tzLnJlbW92ZUFsbCgpLHRoaXMuZHJvcFBvaW50ZXIoKSx0JiZ0aGlzLmluc2VydCgpLHRoaXMuRWRpdG9yLlVJLmNoZWNrRW1wdGluZXNzKCl9fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOihuPSgwLGkuZGVmYXVsdCkoci5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoKXtyZXR1cm4gci5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiB0Lm5leHQ9MixQcm9taXNlLmFsbCh0aGlzLmJsb2Nrcy5tYXAoKGZ1bmN0aW9uKHQpe2lmKGguaXNGdW5jdGlvbih0LnRvb2wuZGVzdHJveSkpcmV0dXJuIHQudG9vbC5kZXN0cm95KCl9KSkpO2Nhc2UgMjpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24oKXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImJpbmRCbG9ja0V2ZW50c1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuRWRpdG9yLkJsb2NrRXZlbnRzO3RoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHQuaG9sZGVyLFwia2V5ZG93blwiLChmdW5jdGlvbih0KXtlLmtleWRvd24odCl9KSksdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24odC5ob2xkZXIsXCJrZXl1cFwiLChmdW5jdGlvbih0KXtlLmtleXVwKHQpfSkpLHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHQuaG9sZGVyLFwiZHJhZ292ZXJcIiwoZnVuY3Rpb24odCl7ZS5kcmFnT3Zlcih0KX0pKSx0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbih0LmhvbGRlcixcImRyYWdsZWF2ZVwiLChmdW5jdGlvbih0KXtlLmRyYWdMZWF2ZSh0KX0pKX19LHtrZXk6XCJkaXNhYmxlTW9kdWxlQmluZGluZ3NcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLmNsZWFyQWxsKCl9fSx7a2V5OlwiZW5hYmxlTW9kdWxlQmluZGluZ3NcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZG9jdW1lbnQsXCJjdXRcIiwoZnVuY3Rpb24oZSl7cmV0dXJuIHQuRWRpdG9yLkJsb2NrRXZlbnRzLmhhbmRsZUNvbW1hbmRYKGUpfSkpLHRoaXMuYmxvY2tzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuYmluZEJsb2NrRXZlbnRzKGUpfSkpfX0se2tleTpcInZhbGlkYXRlSW5kZXhcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4hKHQ8MHx8dD49dGhpcy5fYmxvY2tzLmxlbmd0aCl9fSx7a2V5OlwiY3VycmVudEJsb2NrSW5kZXhcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY3VycmVudEJsb2NrSW5kZXh9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9ibG9ja3NbdGhpcy5fY3VycmVudEJsb2NrSW5kZXhdJiZ0aGlzLl9ibG9ja3NbdGhpcy5fY3VycmVudEJsb2NrSW5kZXhdLndpbGxVbnNlbGVjdCgpLHRoaXMuX2Jsb2Nrc1t0XSYmdGhpcy5fYmxvY2tzW3RdLndpbGxTZWxlY3QoKSx0aGlzLl9jdXJyZW50QmxvY2tJbmRleD10fX0se2tleTpcImZpcnN0QmxvY2tcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYmxvY2tzWzBdfX0se2tleTpcImxhc3RCbG9ja1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9ibG9ja3NbdGhpcy5fYmxvY2tzLmxlbmd0aC0xXX19LHtrZXk6XCJjdXJyZW50QmxvY2tcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYmxvY2tzW3RoaXMuY3VycmVudEJsb2NrSW5kZXhdfX0se2tleTpcIm5leHRCbG9ja1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmN1cnJlbnRCbG9ja0luZGV4PT09dGhpcy5fYmxvY2tzLmxlbmd0aC0xP251bGw6dGhpcy5fYmxvY2tzW3RoaXMuY3VycmVudEJsb2NrSW5kZXgrMV19fSx7a2V5OlwibmV4dENvbnRlbnRmdWxCbG9ja1wiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmJsb2Nrcy5zbGljZSh0aGlzLmN1cnJlbnRCbG9ja0luZGV4KzEpLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiEhdC5pbnB1dHMubGVuZ3RofSkpfX0se2tleTpcInByZXZpb3VzQ29udGVudGZ1bEJsb2NrXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYmxvY2tzLnNsaWNlKDAsdGhpcy5jdXJyZW50QmxvY2tJbmRleCkucmV2ZXJzZSgpLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiEhdC5pbnB1dHMubGVuZ3RofSkpfX0se2tleTpcInByZXZpb3VzQmxvY2tcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuY3VycmVudEJsb2NrSW5kZXg/bnVsbDp0aGlzLl9ibG9ja3NbdGhpcy5jdXJyZW50QmxvY2tJbmRleC0xXX19LHtrZXk6XCJibG9ja3NcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYmxvY2tzLmFycmF5fX0se2tleTpcImlzRWRpdG9yRW1wdHlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ibG9ja3MuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlzRW1wdHl9KSl9fV0pLGd9KGQuZGVmYXVsdCk7by5kZWZhdWx0PW0sbS5kaXNwbGF5TmFtZT1cIkJsb2NrTWFuYWdlclwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMjEpLG4oMjIpLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpLG4oOCksbigxNSksbigxMDgpLG4oMjUpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyxjLGwsdSxmLGQscCxoLHYpe1widXNlIHN0cmljdFwiO3ZhciBnPW4oMTMpLHk9bigxKTtmdW5jdGlvbiBiKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj15KHIpLGk9eShpKSxhPXkoYSkscz15KHMpLGM9eShjKSxsPXkobCksdT15KHUpLGY9eShmKSxkPWcoZCkscD15KHApLGg9eShoKSx2PXkodik7dmFyIG09ZnVuY3Rpb24odCl7KDAsYy5kZWZhdWx0KShmLHQpO3ZhciBlLG4sbz0oZT1mLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCx1LmRlZmF1bHQpKGUpO2lmKGIoKSl7dmFyIG89KDAsdS5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxsLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBmKCl7dmFyIHQ7cmV0dXJuKDAsYS5kZWZhdWx0KSh0aGlzLGYpLCh0PW8uYXBwbHkodGhpcyxhcmd1bWVudHMpKS5hbnlCbG9ja1NlbGVjdGVkQ2FjaGU9bnVsbCx0Lm5lZWRUb1NlbGVjdEFsbD0hMSx0Lm5hdGl2ZUlucHV0U2VsZWN0ZWQ9ITEsdC5yZWFkeVRvQmxvY2tTZWxlY3Rpb249ITEsdH1yZXR1cm4oMCxzLmRlZmF1bHQpKGYsW3trZXk6XCJwcmVwYXJlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuc2VsZWN0aW9uPW5ldyB2LmRlZmF1bHQsaC5kZWZhdWx0LmFkZCh7bmFtZTpcIkNNRCtBXCIsaGFuZGxlcjpmdW5jdGlvbihlKXt2YXIgbj10LkVkaXRvcixvPW4uQmxvY2tNYW5hZ2VyO2lmKG4uUmVhZE9ubHkuaXNFbmFibGVkKXJldHVybiBlLnByZXZlbnREZWZhdWx0KCksdm9pZCB0LnNlbGVjdEFsbEJsb2NrcygpO28uY3VycmVudEJsb2NrJiZ0LmhhbmRsZUNvbW1hbmRBKGUpfSxvbjp0aGlzLkVkaXRvci5VSS5ub2Rlcy5yZWRhY3Rvcn0pfX0se2tleTpcInRvZ2dsZVJlYWRPbmx5XCIsdmFsdWU6ZnVuY3Rpb24odCl7di5kZWZhdWx0LmdldCgpLnJlbW92ZUFsbFJhbmdlcygpLHRoaXMuYWxsQmxvY2tzU2VsZWN0ZWQ9ITF9fSx7a2V5OlwidW5TZWxlY3RCbG9ja0J5SW5kZXhcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLkVkaXRvci5CbG9ja01hbmFnZXI7KGlzTmFOKHQpP2UuY3VycmVudEJsb2NrOmUuZ2V0QmxvY2tCeUluZGV4KHQpKS5zZWxlY3RlZD0hMSx0aGlzLmNsZWFyQ2FjaGUoKX19LHtrZXk6XCJjbGVhclNlbGVjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj10aGlzLkVkaXRvcixvPW4uQmxvY2tNYW5hZ2VyLHI9bi5DYXJldCxpPW4uUmVjdGFuZ2xlU2VsZWN0aW9uO3RoaXMubmVlZFRvU2VsZWN0QWxsPSExLHRoaXMubmF0aXZlSW5wdXRTZWxlY3RlZD0hMSx0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbj0hMTt2YXIgYT10JiZ0IGluc3RhbmNlb2YgS2V5Ym9hcmRFdmVudCxzPWEmJmQuaXNQcmludGFibGVLZXkodC5rZXlDb2RlKTtpZih0aGlzLmFueUJsb2NrU2VsZWN0ZWQmJmEmJnMmJiF2LmRlZmF1bHQuaXNTZWxlY3Rpb25FeGlzdHMpe3ZhciBjPW8ucmVtb3ZlU2VsZWN0ZWRCbG9ja3MoKTtvLmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgoYywhMCksci5zZXRUb0Jsb2NrKG8uY3VycmVudEJsb2NrKSxkLmRlbGF5KChmdW5jdGlvbigpe3ZhciBlPXQua2V5O3IuaW5zZXJ0Q29udGVudEF0Q2FyZXRQb3NpdGlvbihlLmxlbmd0aD4xP1wiXCI6ZSl9KSwyMCkoKX10aGlzLkVkaXRvci5Dcm9zc0Jsb2NrU2VsZWN0aW9uLmNsZWFyKHQpLHRoaXMuYW55QmxvY2tTZWxlY3RlZCYmIWkuaXNSZWN0QWN0aXZhdGVkKCk/KGUmJnRoaXMuc2VsZWN0aW9uLnJlc3RvcmUoKSx0aGlzLmFsbEJsb2Nrc1NlbGVjdGVkPSExKTp0aGlzLkVkaXRvci5SZWN0YW5nbGVTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oKX19LHtrZXk6XCJjb3B5U2VsZWN0ZWRCbG9ja3NcIix2YWx1ZToobj0oMCxpLmRlZmF1bHQpKHIuZGVmYXVsdC5tYXJrKChmdW5jdGlvbiB0KGUpe3ZhciBuLG8saSxhLHM9dGhpcztyZXR1cm4gci5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiBlLnByZXZlbnREZWZhdWx0KCksbj1wLmRlZmF1bHQubWFrZShcImRpdlwiKSx0aGlzLnNlbGVjdGVkQmxvY2tzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlPXMuRWRpdG9yLlNhbml0aXplci5jbGVhbih0LmhvbGRlci5pbm5lckhUTUwscy5zYW5pdGl6ZXJDb25maWcpLG89cC5kZWZhdWx0Lm1ha2UoXCJwXCIpO28uaW5uZXJIVE1MPWUsbi5hcHBlbmRDaGlsZChvKX0pKSx0Lm5leHQ9NSxQcm9taXNlLmFsbCh0aGlzLnNlbGVjdGVkQmxvY2tzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2F2ZSgpfSkpKTtjYXNlIDU6bz10LnNlbnQsaT1BcnJheS5mcm9tKG4uY2hpbGROb2RlcykubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC50ZXh0Q29udGVudH0pKS5qb2luKFwiXFxuXFxuXCIpLGE9bi5pbm5lckhUTUwsZS5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsaSksZS5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0L2h0bWxcIixhKSxlLmNsaXBib2FyZERhdGEuc2V0RGF0YSh0aGlzLkVkaXRvci5QYXN0ZS5NSU1FX1RZUEUsSlNPTi5zdHJpbmdpZnkobykpO2Nhc2UgMTE6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKHQpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic2VsZWN0QmxvY2tCeUluZGV4XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGUsbj10aGlzLkVkaXRvci5CbG9ja01hbmFnZXI7bi5jbGVhckZvY3VzZWQoKSxlPWlzTmFOKHQpP24uY3VycmVudEJsb2NrOm4uZ2V0QmxvY2tCeUluZGV4KHQpLHRoaXMuc2VsZWN0aW9uLnNhdmUoKSx2LmRlZmF1bHQuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCksZS5zZWxlY3RlZD0hMCx0aGlzLmNsZWFyQ2FjaGUoKSx0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCl9fSx7a2V5OlwiY2xlYXJDYWNoZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5hbnlCbG9ja1NlbGVjdGVkQ2FjaGU9bnVsbH19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXtoLmRlZmF1bHQucmVtb3ZlKHRoaXMuRWRpdG9yLlVJLm5vZGVzLnJlZGFjdG9yLFwiQ01EK0FcIil9fSx7a2V5OlwiaGFuZGxlQ29tbWFuZEFcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih0aGlzLkVkaXRvci5SZWN0YW5nbGVTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oKSwhcC5kZWZhdWx0LmlzTmF0aXZlSW5wdXQodC50YXJnZXQpfHx0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbil7dmFyIGU9dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrKHQudGFyZ2V0KS5pbnB1dHM7ZS5sZW5ndGg+MSYmIXRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uP3RoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uPSEwOjEhPT1lLmxlbmd0aHx8dGhpcy5uZWVkVG9TZWxlY3RBbGw/dGhpcy5uZWVkVG9TZWxlY3RBbGw/KHQucHJldmVudERlZmF1bHQoKSx0aGlzLnNlbGVjdEFsbEJsb2NrcygpLHRoaXMubmVlZFRvU2VsZWN0QWxsPSExLHRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uPSExLHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmNsb3NlKCkpOnRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uJiYodC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuc2VsZWN0QmxvY2tCeUluZGV4KCksdGhpcy5uZWVkVG9TZWxlY3RBbGw9ITApOnRoaXMubmVlZFRvU2VsZWN0QWxsPSEwfWVsc2UgdGhpcy5yZWFkeVRvQmxvY2tTZWxlY3Rpb249ITB9fSx7a2V5Olwic2VsZWN0QWxsQmxvY2tzXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnNlbGVjdGlvbi5zYXZlKCksdi5kZWZhdWx0LmdldCgpLnJlbW92ZUFsbFJhbmdlcygpLHRoaXMuYWxsQmxvY2tzU2VsZWN0ZWQ9ITAsdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpfX0se2tleTpcInNhbml0aXplckNvbmZpZ1wiLGdldDpmdW5jdGlvbigpe3JldHVybntwOnt9LGgxOnt9LGgyOnt9LGgzOnt9LGg0Ont9LGg1Ont9LGg2Ont9LG9sOnt9LHVsOnt9LGxpOnt9LGJyOiEwLGltZzp7c3JjOiEwLHdpZHRoOiEwLGhlaWdodDohMH0sYTp7aHJlZjohMH0sYjp7fSxpOnt9LHU6e319fX0se2tleTpcImFsbEJsb2Nrc1NlbGVjdGVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3MuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiEwPT09dC5zZWxlY3RlZH0pKX0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3MuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5zZWxlY3RlZD10fSkpLHRoaXMuY2xlYXJDYWNoZSgpfX0se2tleTpcImFueUJsb2NrU2VsZWN0ZWRcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLkVkaXRvci5CbG9ja01hbmFnZXI7cmV0dXJuIG51bGw9PT10aGlzLmFueUJsb2NrU2VsZWN0ZWRDYWNoZSYmKHRoaXMuYW55QmxvY2tTZWxlY3RlZENhY2hlPXQuYmxvY2tzLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiEwPT09dC5zZWxlY3RlZH0pKSksdGhpcy5hbnlCbG9ja1NlbGVjdGVkQ2FjaGV9fSx7a2V5Olwic2VsZWN0ZWRCbG9ja3NcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmJsb2Nrcy5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNlbGVjdGVkfSkpfX1dKSxmfShmLmRlZmF1bHQpO28uZGVmYXVsdD1tLG0uZGlzcGxheU5hbWU9XCJCbG9ja1NlbGVjdGlvblwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDI1KSxuKDcpLG4oMTUpLG4oOCldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHA9bigxMyksaD1uKDEpO2Z1bmN0aW9uIHYoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPWgociksaT1oKGkpLGE9aChhKSxzPWgocyksYz1oKGMpLGw9aChsKSx1PWgodSksZj1oKGYpLGQ9cChkKTt2YXIgZz1mdW5jdGlvbih0KXsoMCxhLmRlZmF1bHQpKG8sdCk7dmFyIGUsbj0oZT1vLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCxjLmRlZmF1bHQpKGUpO2lmKHYoKSl7dmFyIG89KDAsYy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBvKCl7cmV0dXJuKDAsci5kZWZhdWx0KSh0aGlzLG8pLG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybigwLGkuZGVmYXVsdCkobyxbe2tleTpcInNldFRvQmxvY2tcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZSxuPXRoaXMsbz1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dGhpcy5wb3NpdGlvbnMuREVGQVVMVCxyPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTowLGk9dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyO3N3aXRjaChvKXtjYXNlIHRoaXMucG9zaXRpb25zLlNUQVJUOmU9dC5maXJzdElucHV0O2JyZWFrO2Nhc2UgdGhpcy5wb3NpdGlvbnMuRU5EOmU9dC5sYXN0SW5wdXQ7YnJlYWs7ZGVmYXVsdDplPXQuY3VycmVudElucHV0fWlmKGUpe3ZhciBhPWYuZGVmYXVsdC5nZXREZWVwZXN0Tm9kZShlLG89PT10aGlzLnBvc2l0aW9ucy5FTkQpLHM9Zi5kZWZhdWx0LmdldENvbnRlbnRMZW5ndGgoYSk7c3dpdGNoKCEwKXtjYXNlIG89PT10aGlzLnBvc2l0aW9ucy5TVEFSVDpyPTA7YnJlYWs7Y2FzZSBvPT09dGhpcy5wb3NpdGlvbnMuRU5EOmNhc2Ugcj5zOnI9c31kLmRlbGF5KChmdW5jdGlvbigpe24uc2V0KGEscil9KSwyMCkoKSxpLnNldEN1cnJlbnRCbG9ja0J5Q2hpbGROb2RlKHQuaG9sZGVyKSxpLmN1cnJlbnRCbG9jay5jdXJyZW50SW5wdXQ9ZX19fSx7a2V5Olwic2V0VG9JbnB1dFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp0aGlzLnBvc2l0aW9ucy5ERUZBVUxULG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOjAsbz10aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLHI9Zi5kZWZhdWx0LmdldERlZXBlc3ROb2RlKHQpO3N3aXRjaChlKXtjYXNlIHRoaXMucG9zaXRpb25zLlNUQVJUOnRoaXMuc2V0KHIsMCk7YnJlYWs7Y2FzZSB0aGlzLnBvc2l0aW9ucy5FTkQ6dGhpcy5zZXQocixmLmRlZmF1bHQuZ2V0Q29udGVudExlbmd0aChyKSk7YnJlYWs7ZGVmYXVsdDpuJiZ0aGlzLnNldChyLG4pfW8uY3VycmVudElucHV0PXR9fSx7a2V5Olwic2V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjAsbj1sLmRlZmF1bHQuc2V0Q3Vyc29yKHQsZSksbz1uLnRvcCxyPW4uYm90dG9tLGk9d2luZG93LGE9aS5pbm5lckhlaWdodDtvPDAmJndpbmRvdy5zY3JvbGxCeSgwLG8pLHI+YSYmd2luZG93LnNjcm9sbEJ5KDAsci1hKX19LHtrZXk6XCJzZXRUb1RoZUxhc3RCbG9ja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmxhc3RCbG9jaztpZih0KWlmKHRoaXMuRWRpdG9yLlRvb2xzLmlzRGVmYXVsdCh0LnRvb2wpJiZ0LmlzRW1wdHkpdGhpcy5zZXRUb0Jsb2NrKHQpO2Vsc2V7dmFyIGU9dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydEF0RW5kKCk7dGhpcy5zZXRUb0Jsb2NrKGUpfX19LHtrZXk6XCJleHRyYWN0RnJhZ21lbnRGcm9tQ2FyZXRQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9bC5kZWZhdWx0LmdldCgpO2lmKHQucmFuZ2VDb3VudCl7dmFyIGU9dC5nZXRSYW5nZUF0KDApLG49dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay5jdXJyZW50SW5wdXQ7aWYoZS5kZWxldGVDb250ZW50cygpLG4pe2lmKGYuZGVmYXVsdC5pc05hdGl2ZUlucHV0KG4pKXt2YXIgbz1uLHI9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGk9by52YWx1ZS5zdWJzdHJpbmcoMCxvLnNlbGVjdGlvblN0YXJ0KSxhPW8udmFsdWUuc3Vic3RyaW5nKG8uc2VsZWN0aW9uU3RhcnQpO3JldHVybiByLnRleHRDb250ZW50PWEsby52YWx1ZT1pLHJ9dmFyIHM9ZS5jbG9uZVJhbmdlKCk7cmV0dXJuIHMuc2VsZWN0Tm9kZUNvbnRlbnRzKG4pLHMuc2V0U3RhcnQoZS5lbmRDb250YWluZXIsZS5lbmRPZmZzZXQpLHMuZXh0cmFjdENvbnRlbnRzKCl9fX19LHtrZXk6XCJuYXZpZ2F0ZU5leHRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuRWRpdG9yLGU9dC5CbG9ja01hbmFnZXIsbj10LlRvb2xzLG89ZS5jdXJyZW50QmxvY2sscj1lLm5leHRDb250ZW50ZnVsQmxvY2ssaT1vLm5leHRJbnB1dCxhPXRoaXMuaXNBdEVuZCxzPXI7aWYoIXMmJiFpKXtpZihuLmlzRGVmYXVsdChvLnRvb2wpfHwhYSlyZXR1cm4hMTtzPWUuaW5zZXJ0QXRFbmQoKX1yZXR1cm4hIWEmJihpP3RoaXMuc2V0VG9JbnB1dChpLHRoaXMucG9zaXRpb25zLlNUQVJUKTp0aGlzLnNldFRvQmxvY2socyx0aGlzLnBvc2l0aW9ucy5TVEFSVCksITApfX0se2tleTpcIm5hdmlnYXRlUHJldmlvdXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlcixlPXQuY3VycmVudEJsb2NrLG49dC5wcmV2aW91c0NvbnRlbnRmdWxCbG9jaztpZighZSlyZXR1cm4hMTt2YXIgbz1lLnByZXZpb3VzSW5wdXQ7cmV0dXJuISghbiYmIW98fCF0aGlzLmlzQXRTdGFydHx8KG8/dGhpcy5zZXRUb0lucHV0KG8sdGhpcy5wb3NpdGlvbnMuRU5EKTp0aGlzLnNldFRvQmxvY2sobix0aGlzLnBvc2l0aW9ucy5FTkQpLDApKX19LHtrZXk6XCJjcmVhdGVTaGFkb3dcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtlLmNsYXNzTGlzdC5hZGQoby5DU1Muc2hhZG93Q2FyZXQpLHQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsZSl9fSx7a2V5OlwicmVzdG9yZUNhcmV0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChvLkNTUy5zaGFkb3dDYXJldCkpO2UmJigobmV3IGwuZGVmYXVsdCkuZXhwYW5kVG9UYWcoZSksc2V0VGltZW91dCgoZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO3Quc2VsZWN0Tm9kZShlKSx0LmV4dHJhY3RDb250ZW50cygpfSksNTApKX19LHtrZXk6XCJpbnNlcnRDb250ZW50QXRDYXJldFBvc2l0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxvPWwuZGVmYXVsdC5nZXQoKSxyPWwuZGVmYXVsdC5yYW5nZTtuLmlubmVySFRNTD10LEFycmF5LmZyb20obi5jaGlsZE5vZGVzKS5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gZS5hcHBlbmRDaGlsZCh0KX0pKSwwPT09ZS5jaGlsZE5vZGVzLmxlbmd0aCYmZS5hcHBlbmRDaGlsZChuZXcgVGV4dChcIlwiKSk7dmFyIGk9ZS5sYXN0Q2hpbGQ7ci5kZWxldGVDb250ZW50cygpLHIuaW5zZXJ0Tm9kZShlKTt2YXIgYT1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO2Euc2V0U3RhcnQoaSxpLnRleHRDb250ZW50Lmxlbmd0aCksby5yZW1vdmVBbGxSYW5nZXMoKSxvLmFkZFJhbmdlKGEpfX0se2tleTpcImdldEhpZ2hlckxldmVsU2libGluZ3NcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10LG89W107bi5wYXJlbnROb2RlJiZcInRydWVcIiE9PW4ucGFyZW50Tm9kZS5jb250ZW50RWRpdGFibGU7KW49bi5wYXJlbnROb2RlO2Zvcih2YXIgcj1cImxlZnRcIj09PWU/XCJwcmV2aW91c1NpYmxpbmdcIjpcIm5leHRTaWJsaW5nXCI7bltyXTspbj1uW3JdLG8ucHVzaChuKTtyZXR1cm4gb319LHtrZXk6XCJwb3NpdGlvbnNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57U1RBUlQ6XCJzdGFydFwiLEVORDpcImVuZFwiLERFRkFVTFQ6XCJkZWZhdWx0XCJ9fX0se2tleTpcImlzQXRTdGFydFwiLGdldDpmdW5jdGlvbigpe3ZhciB0PWwuZGVmYXVsdC5nZXQoKSxlPWYuZGVmYXVsdC5nZXREZWVwZXN0Tm9kZSh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLmN1cnJlbnRJbnB1dCksbj10LmZvY3VzTm9kZTtpZihmLmRlZmF1bHQuaXNOYXRpdmVJbnB1dChlKSlyZXR1cm4gMD09PWUuc2VsZWN0aW9uRW5kO2lmKCF0LmFuY2hvck5vZGUpcmV0dXJuITE7dmFyIG89bi50ZXh0Q29udGVudC5zZWFyY2goL1xcUy8pOy0xPT09byYmKG89MCk7dmFyIHI9dC5mb2N1c09mZnNldDtyZXR1cm4gbi5ub2RlVHlwZSE9PU5vZGUuVEVYVF9OT0RFJiZuLmNoaWxkTm9kZXMubGVuZ3RoJiYobi5jaGlsZE5vZGVzW3JdPyhuPW4uY2hpbGROb2Rlc1tyXSxyPTApOnI9KG49bi5jaGlsZE5vZGVzW3ItMV0pLnRleHRDb250ZW50Lmxlbmd0aCksISghZi5kZWZhdWx0LmlzTGluZUJyZWFrVGFnKGUpJiYhZi5kZWZhdWx0LmlzRW1wdHkoZSl8fCF0aGlzLmdldEhpZ2hlckxldmVsU2libGluZ3MobixcImxlZnRcIikuZXZlcnkoKGZ1bmN0aW9uKHQpe3ZhciBlPWYuZGVmYXVsdC5pc0xpbmVCcmVha1RhZyh0KSxuPTE9PT10LmNoaWxkcmVuLmxlbmd0aCYmZi5kZWZhdWx0LmlzTGluZUJyZWFrVGFnKHQuY2hpbGRyZW5bMF0pLG89ZXx8bjtyZXR1cm4gZi5kZWZhdWx0LmlzRW1wdHkodCkmJiFvfSkpfHxyIT09byl8fChudWxsPT09ZXx8bj09PWUmJnI8PW8pfX0se2tleTpcImlzQXRFbmRcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgdD1sLmRlZmF1bHQuZ2V0KCksZT10LmZvY3VzTm9kZSxuPWYuZGVmYXVsdC5nZXREZWVwZXN0Tm9kZSh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLmN1cnJlbnRJbnB1dCwhMCk7aWYoZi5kZWZhdWx0LmlzTmF0aXZlSW5wdXQobikpcmV0dXJuIG4uc2VsZWN0aW9uRW5kPT09bi52YWx1ZS5sZW5ndGg7aWYoIXQuZm9jdXNOb2RlKXJldHVybiExO3ZhciBvPXQuZm9jdXNPZmZzZXQ7aWYoZS5ub2RlVHlwZSE9PU5vZGUuVEVYVF9OT0RFJiZlLmNoaWxkTm9kZXMubGVuZ3RoJiYoZS5jaGlsZE5vZGVzW28tMV0/bz0oZT1lLmNoaWxkTm9kZXNbby0xXSkudGV4dENvbnRlbnQubGVuZ3RoOihlPWUuY2hpbGROb2Rlc1swXSxvPTApKSxmLmRlZmF1bHQuaXNMaW5lQnJlYWtUYWcobil8fGYuZGVmYXVsdC5pc0VtcHR5KG4pKXt2YXIgcj10aGlzLmdldEhpZ2hlckxldmVsU2libGluZ3MoZSxcInJpZ2h0XCIpO2lmKHIuZXZlcnkoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU9PT1yLmxlbmd0aC0xJiZmLmRlZmF1bHQuaXNMaW5lQnJlYWtUYWcodCl8fGYuZGVmYXVsdC5pc0VtcHR5KHQpJiYhZi5kZWZhdWx0LmlzTGluZUJyZWFrVGFnKHQpfSkpJiZvPT09ZS50ZXh0Q29udGVudC5sZW5ndGgpcmV0dXJuITB9dmFyIGk9bi50ZXh0Q29udGVudC5yZXBsYWNlKC9cXHMrJC8sXCJcIik7cmV0dXJuIGU9PT1uJiZvPj1pLmxlbmd0aH19XSxbe2tleTpcIkNTU1wiLGdldDpmdW5jdGlvbigpe3JldHVybntzaGFkb3dDYXJldDpcImNkeC1zaGFkb3ctY2FyZXRcIn19fV0pLG99KHUuZGVmYXVsdCk7by5kZWZhdWx0PWcsZy5kaXNwbGF5TmFtZT1cIkNhcmV0XCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyMSksbigyMiksbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyksbigyNSksbig4KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhLHMsYyxsLHUsZixkLHApe1widXNlIHN0cmljdFwiO3ZhciBoPW4oMTMpLHY9bigxKTtmdW5jdGlvbiBnKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj12KHIpLGk9dihpKSxhPXYoYSkscz12KHMpLGM9dihjKSxsPXYobCksdT12KHUpLGY9dihmKSxkPXYoZCkscD1oKHApO3ZhciB5PWZ1bmN0aW9uKHQpeygwLGMuZGVmYXVsdCkoZix0KTt2YXIgZSxuLG89KGU9ZixmdW5jdGlvbigpe3ZhciB0LG49KDAsdS5kZWZhdWx0KShlKTtpZihnKCkpe3ZhciBvPSgwLHUuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAsbC5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gZigpe3ZhciB0O3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxmKSwodD1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkub25Nb3VzZVVwPWZ1bmN0aW9uKCl7dC5saXN0ZW5lcnMub2ZmKGRvY3VtZW50LFwibW91c2VvdmVyXCIsdC5vbk1vdXNlT3ZlciksdC5saXN0ZW5lcnMub2ZmKGRvY3VtZW50LFwibW91c2V1cFwiLHQub25Nb3VzZVVwKX0sdC5vbk1vdXNlT3Zlcj1mdW5jdGlvbihlKXt2YXIgbj10LkVkaXRvcixvPW4uQmxvY2tNYW5hZ2VyLHI9bi5CbG9ja1NlbGVjdGlvbixpPW8uZ2V0QmxvY2tCeUNoaWxkTm9kZShlLnJlbGF0ZWRUYXJnZXQpfHx0Lmxhc3RTZWxlY3RlZEJsb2NrLGE9by5nZXRCbG9ja0J5Q2hpbGROb2RlKGUudGFyZ2V0KTtpZihpJiZhJiZhIT09aSl7aWYoaT09PXQuZmlyc3RTZWxlY3RlZEJsb2NrKXJldHVybiBkLmRlZmF1bHQuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCksaS5zZWxlY3RlZD0hMCxhLnNlbGVjdGVkPSEwLHZvaWQgci5jbGVhckNhY2hlKCk7aWYoYT09PXQuZmlyc3RTZWxlY3RlZEJsb2NrKXJldHVybiBpLnNlbGVjdGVkPSExLGEuc2VsZWN0ZWQ9ITEsdm9pZCByLmNsZWFyQ2FjaGUoKTt0LkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCksdC50b2dnbGVCbG9ja3NTZWxlY3RlZFN0YXRlKGksYSksdC5sYXN0U2VsZWN0ZWRCbG9jaz1hfX0sdH1yZXR1cm4oMCxzLmRlZmF1bHQpKGYsW3trZXk6XCJwcmVwYXJlXCIsdmFsdWU6KG49KDAsaS5kZWZhdWx0KShyLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXM7cmV0dXJuIHIuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDp0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudCxcIm1vdXNlZG93blwiLChmdW5jdGlvbih0KXtlLmVuYWJsZUNyb3NzQmxvY2tTZWxlY3Rpb24odCl9KSk7Y2FzZSAxOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbigpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwid2F0Y2hTZWxlY3Rpb25cIix2YWx1ZTpmdW5jdGlvbih0KXtpZih0LmJ1dHRvbj09PXAubW91c2VCdXR0b25zLkxFRlQpe3ZhciBlPXRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlcjt0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jaz1lLmdldEJsb2NrKHQudGFyZ2V0KSx0aGlzLmxhc3RTZWxlY3RlZEJsb2NrPXRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrLHRoaXMubGlzdGVuZXJzLm9uKGRvY3VtZW50LFwibW91c2VvdmVyXCIsdGhpcy5vbk1vdXNlT3ZlciksdGhpcy5saXN0ZW5lcnMub24oZG9jdW1lbnQsXCJtb3VzZXVwXCIsdGhpcy5vbk1vdXNlVXApfX19LHtrZXk6XCJ0b2dnbGVCbG9ja1NlbGVjdGVkU3RhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PSEoYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0pfHxhcmd1bWVudHNbMF0sZT10aGlzLkVkaXRvcixuPWUuQmxvY2tNYW5hZ2VyLG89ZS5CbG9ja1NlbGVjdGlvbjt0aGlzLmxhc3RTZWxlY3RlZEJsb2NrfHwodGhpcy5sYXN0U2VsZWN0ZWRCbG9jaz10aGlzLmZpcnN0U2VsZWN0ZWRCbG9jaz1uLmN1cnJlbnRCbG9jayksdGhpcy5maXJzdFNlbGVjdGVkQmxvY2s9PT10aGlzLmxhc3RTZWxlY3RlZEJsb2NrJiYodGhpcy5maXJzdFNlbGVjdGVkQmxvY2suc2VsZWN0ZWQ9ITAsby5jbGVhckNhY2hlKCksZC5kZWZhdWx0LmdldCgpLnJlbW92ZUFsbFJhbmdlcygpKTt2YXIgcj1uLmJsb2Nrcy5pbmRleE9mKHRoaXMubGFzdFNlbGVjdGVkQmxvY2spKyh0PzE6LTEpLGk9bi5ibG9ja3Nbcl07aSYmKHRoaXMubGFzdFNlbGVjdGVkQmxvY2suc2VsZWN0ZWQhPT1pLnNlbGVjdGVkPyhpLnNlbGVjdGVkPSEwLG8uY2xlYXJDYWNoZSgpKToodGhpcy5sYXN0U2VsZWN0ZWRCbG9jay5zZWxlY3RlZD0hMSxvLmNsZWFyQ2FjaGUoKSksdGhpcy5sYXN0U2VsZWN0ZWRCbG9jaz1pLHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKSxpLmhvbGRlci5zY3JvbGxJbnRvVmlldyh7YmxvY2s6XCJuZWFyZXN0XCJ9KSl9fSx7a2V5OlwiY2xlYXJcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLkVkaXRvcixuPWUuQmxvY2tNYW5hZ2VyLG89ZS5CbG9ja1NlbGVjdGlvbixyPWUuQ2FyZXQsaT1uLmJsb2Nrcy5pbmRleE9mKHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrKSxhPW4uYmxvY2tzLmluZGV4T2YodGhpcy5sYXN0U2VsZWN0ZWRCbG9jayk7aWYoby5hbnlCbG9ja1NlbGVjdGVkJiZpPi0xJiZhPi0xKWlmKHQmJnQgaW5zdGFuY2VvZiBLZXlib2FyZEV2ZW50KXN3aXRjaCh0LmtleUNvZGUpe2Nhc2UgcC5rZXlDb2Rlcy5ET1dOOmNhc2UgcC5rZXlDb2Rlcy5SSUdIVDpyLnNldFRvQmxvY2sobi5ibG9ja3NbTWF0aC5tYXgoaSxhKV0sci5wb3NpdGlvbnMuRU5EKTticmVhaztjYXNlIHAua2V5Q29kZXMuVVA6Y2FzZSBwLmtleUNvZGVzLkxFRlQ6ci5zZXRUb0Jsb2NrKG4uYmxvY2tzW01hdGgubWluKGksYSldLHIucG9zaXRpb25zLlNUQVJUKTticmVhaztkZWZhdWx0OnIuc2V0VG9CbG9jayhuLmJsb2Nrc1tNYXRoLm1heChpLGEpXSxyLnBvc2l0aW9ucy5FTkQpfWVsc2Ugci5zZXRUb0Jsb2NrKG4uYmxvY2tzW01hdGgubWF4KGksYSldLHIucG9zaXRpb25zLkVORCk7dGhpcy5maXJzdFNlbGVjdGVkQmxvY2s9dGhpcy5sYXN0U2VsZWN0ZWRCbG9jaz1udWxsfX0se2tleTpcImVuYWJsZUNyb3NzQmxvY2tTZWxlY3Rpb25cIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLkVkaXRvci5VSTtkLmRlZmF1bHQuaXNDb2xsYXBzZWR8fHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKHQpLGUubm9kZXMucmVkYWN0b3IuY29udGFpbnModC50YXJnZXQpP3RoaXMud2F0Y2hTZWxlY3Rpb24odCk6dGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24odCl9fSx7a2V5OlwidG9nZ2xlQmxvY2tzU2VsZWN0ZWRTdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXRoaXMuRWRpdG9yLG89bi5CbG9ja01hbmFnZXIscj1uLkJsb2NrU2VsZWN0aW9uLGk9by5ibG9ja3MuaW5kZXhPZih0KSxhPW8uYmxvY2tzLmluZGV4T2YoZSkscz10LnNlbGVjdGVkIT09ZS5zZWxlY3RlZCxjPU1hdGgubWluKGksYSk7Yzw9TWF0aC5tYXgoaSxhKTtjKyspe3ZhciBsPW8uYmxvY2tzW2NdO2whPT10aGlzLmZpcnN0U2VsZWN0ZWRCbG9jayYmbCE9PShzP3Q6ZSkmJihvLmJsb2Nrc1tjXS5zZWxlY3RlZD0hby5ibG9ja3NbY10uc2VsZWN0ZWQsci5jbGVhckNhY2hlKCkpfX19LHtrZXk6XCJpc0Nyb3NzQmxvY2tTZWxlY3Rpb25TdGFydGVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jayYmISF0aGlzLmxhc3RTZWxlY3RlZEJsb2NrfX1dKSxmfShmLmRlZmF1bHQpO28uZGVmYXVsdD15LHkuZGlzcGxheU5hbWU9XCJDcm9zc0Jsb2NrU2VsZWN0aW9uXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyMSksbigyMiksbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oMjUpLG4oNyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHA9bigxKTtmdW5jdGlvbiBoKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1wKHIpLGk9cChpKSxhPXAoYSkscz1wKHMpLGM9cChjKSxsPXAobCksdT1wKHUpLGY9cChmKTt2YXIgdj1mdW5jdGlvbih0KXsoMCxjLmRlZmF1bHQpKGQsdCk7dmFyIGUsbixvPShlPWQsZnVuY3Rpb24oKXt2YXIgdCxuPSgwLHUuZGVmYXVsdCkoZSk7aWYoaCgpKXt2YXIgbz0oMCx1LmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLGwuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIGQoKXt2YXIgdDtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsZCksKHQ9by5hcHBseSh0aGlzLGFyZ3VtZW50cykpLmlzU3RhcnRlZEF0RWRpdG9yPSExLHR9cmV0dXJuKDAscy5kZWZhdWx0KShkLFt7a2V5OlwidG9nZ2xlUmVhZE9ubHlcIix2YWx1ZTpmdW5jdGlvbih0KXt0P3RoaXMuZGlzYWJsZU1vZHVsZUJpbmRpbmdzKCk6dGhpcy5lbmFibGVNb2R1bGVCaW5kaW5ncygpfX0se2tleTpcImVuYWJsZU1vZHVsZUJpbmRpbmdzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5FZGl0b3IuVUk7dGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZS5ub2Rlcy5ob2xkZXIsXCJkcm9wXCIsZnVuY3Rpb24oKXt2YXIgZT0oMCxpLmRlZmF1bHQpKHIuZGVmYXVsdC5tYXJrKChmdW5jdGlvbiBlKG4pe3JldHVybiByLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6cmV0dXJuIGUubmV4dD0yLHQucHJvY2Vzc0Ryb3Aobik7Y2FzZSAyOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19KSxlKX0pKSk7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCksITApLHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGUubm9kZXMuaG9sZGVyLFwiZHJhZ3N0YXJ0XCIsKGZ1bmN0aW9uKCl7dC5wcm9jZXNzRHJhZ1N0YXJ0KCl9KSksdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZS5ub2Rlcy5ob2xkZXIsXCJkcmFnb3ZlclwiLChmdW5jdGlvbihlKXt0LnByb2Nlc3NEcmFnT3ZlcihlKX0pLCEwKX19LHtrZXk6XCJkaXNhYmxlTW9kdWxlQmluZGluZ3NcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLmNsZWFyQWxsKCl9fSx7a2V5OlwicHJvY2Vzc0Ryb3BcIix2YWx1ZToobj0oMCxpLmRlZmF1bHQpKHIuZGVmYXVsdC5tYXJrKChmdW5jdGlvbiB0KGUpe3ZhciBuLG8saSxhLHMsYztyZXR1cm4gci5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiBuPXRoaXMuRWRpdG9yLG89bi5CbG9ja01hbmFnZXIsaT1uLkNhcmV0LGE9bi5QYXN0ZSxlLnByZXZlbnREZWZhdWx0KCksby5ibG9ja3MuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5kcm9wVGFyZ2V0PSExfSkpLGYuZGVmYXVsdC5pc0F0RWRpdG9yJiYhZi5kZWZhdWx0LmlzQ29sbGFwc2VkJiZ0aGlzLmlzU3RhcnRlZEF0RWRpdG9yJiZkb2N1bWVudC5leGVjQ29tbWFuZChcImRlbGV0ZVwiKSx0aGlzLmlzU3RhcnRlZEF0RWRpdG9yPSExLChzPW8uc2V0Q3VycmVudEJsb2NrQnlDaGlsZE5vZGUoZS50YXJnZXQpKT90aGlzLkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHMsaS5wb3NpdGlvbnMuRU5EKTooYz1vLnNldEN1cnJlbnRCbG9ja0J5Q2hpbGROb2RlKG8ubGFzdEJsb2NrLmhvbGRlciksdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayhjLGkucG9zaXRpb25zLkVORCkpLHQubmV4dD05LGEucHJvY2Vzc0RhdGFUcmFuc2ZlcihlLmRhdGFUcmFuc2ZlciwhMCk7Y2FzZSA5OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInByb2Nlc3NEcmFnU3RhcnRcIix2YWx1ZTpmdW5jdGlvbigpe2YuZGVmYXVsdC5pc0F0RWRpdG9yJiYhZi5kZWZhdWx0LmlzQ29sbGFwc2VkJiYodGhpcy5pc1N0YXJ0ZWRBdEVkaXRvcj0hMCksdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpfX0se2tleTpcInByb2Nlc3NEcmFnT3ZlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKX19XSksZH0oKGQ9cChkKSkuZGVmYXVsdCk7by5kZWZhdWx0PXYsdi5kaXNwbGF5TmFtZT1cIkRyYWdORHJvcFwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpLG4oOCksbig2MSldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYpe1widXNlIHN0cmljdFwiO3ZhciBkPW4oMTMpLHA9bigxKTtmdW5jdGlvbiBoKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1wKHIpLGk9cChpKSxhPXAoYSkscz1wKHMpLGM9cChjKSxsPXAobCksdT1kKHUpLGY9cChmKTt2YXIgdj1mdW5jdGlvbih0KXsoMCxhLmRlZmF1bHQpKG8sdCk7dmFyIGUsbj0oZT1vLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCxjLmRlZmF1bHQpKGUpO2lmKGgoKSl7dmFyIG89KDAsYy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBvKCl7dmFyIHQ7cmV0dXJuKDAsci5kZWZhdWx0KSh0aGlzLG8pLCh0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpKS5kaXNhYmxlZD0hMSx0Lm11dGF0aW9uRGVib3VuY2VyPXUuZGVib3VuY2UoKGZ1bmN0aW9uKCl7dC51cGRhdGVOYXRpdmVJbnB1dHMoKSx1LmlzRnVuY3Rpb24odC5jb25maWcub25DaGFuZ2UpJiZ0LmNvbmZpZy5vbkNoYW5nZSh0LkVkaXRvci5BUEkubWV0aG9kcyl9KSxvLkRlYm91bmNlVGltZXIpLHQubmF0aXZlSW5wdXRzPVtdLHR9cmV0dXJuKDAsaS5kZWZhdWx0KShvLFt7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLm11dGF0aW9uRGVib3VuY2VyPW51bGwsdGhpcy5vYnNlcnZlciYmdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCksdGhpcy5vYnNlcnZlcj1udWxsLHRoaXMubmF0aXZlSW5wdXRzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiB0Lmxpc3RlbmVycy5vZmYoZSxcImlucHV0XCIsdC5tdXRhdGlvbkRlYm91bmNlcil9KSksdGhpcy5tdXRhdGlvbkRlYm91bmNlcj1udWxsfX0se2tleTpcInRvZ2dsZVJlYWRPbmx5XCIsdmFsdWU6ZnVuY3Rpb24odCl7dD90aGlzLmRpc2FibGVNb2R1bGUoKTp0aGlzLmVuYWJsZU1vZHVsZSgpfX0se2tleTpcImRpc2FibGVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuZGlzYWJsZWQ9ITB9fSx7a2V5OlwiZW5hYmxlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmRpc2FibGVkPSExfX0se2tleTpcInNldE9ic2VydmVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5FZGl0b3IuVUk7dGhpcy5vYnNlcnZlcj1uZXcgTXV0YXRpb25PYnNlcnZlcigoZnVuY3Rpb24oZSxuKXt0Lm11dGF0aW9uSGFuZGxlcihlLG4pfSkpLHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZShlLm5vZGVzLnJlZGFjdG9yLHtjaGlsZExpc3Q6ITAsYXR0cmlidXRlczohMCxzdWJ0cmVlOiEwLGNoYXJhY3RlckRhdGE6ITAsY2hhcmFjdGVyRGF0YU9sZFZhbHVlOiEwfSl9fSx7a2V5OlwibXV0YXRpb25IYW5kbGVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtpZighdGhpcy5kaXNhYmxlZCl7dmFyIG49ITE7dC5mb3JFYWNoKChmdW5jdGlvbih0KXtzd2l0Y2godC50eXBlKXtjYXNlXCJjaGlsZExpc3RcIjpjYXNlXCJjaGFyYWN0ZXJEYXRhXCI6bj0hMDticmVhaztjYXNlXCJhdHRyaWJ1dGVzXCI6dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKGYuZGVmYXVsdC5DU1Mud3JhcHBlcil8fChuPSEwKX19KSksbiYmdGhpcy5tdXRhdGlvbkRlYm91bmNlcigpfX19LHtrZXk6XCJ1cGRhdGVOYXRpdmVJbnB1dHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5uYXRpdmVJbnB1dHMmJnRoaXMubmF0aXZlSW5wdXRzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QubGlzdGVuZXJzLm9mZihlLFwiaW5wdXRcIil9KSksdGhpcy5uYXRpdmVJbnB1dHM9QXJyYXkuZnJvbSh0aGlzLkVkaXRvci5VSS5ub2Rlcy5yZWRhY3Rvci5xdWVyeVNlbGVjdG9yQWxsKFwidGV4dGFyZWEsIGlucHV0LCBzZWxlY3RcIikpLHRoaXMubmF0aXZlSW5wdXRzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiB0Lmxpc3RlbmVycy5vbihlLFwiaW5wdXRcIix0Lm11dGF0aW9uRGVib3VuY2VyKX0pKX19LHtrZXk6XCJlbmFibGVNb2R1bGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7d2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5zZXRPYnNlcnZlcigpLHQudXBkYXRlTmF0aXZlSW5wdXRzKCksdC5lbmFibGUoKX0pLDFlMyl9fSx7a2V5OlwiZGlzYWJsZU1vZHVsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5kaXNhYmxlKCl9fV0pLG99KGwuZGVmYXVsdCk7by5kZWZhdWx0PXYsdi5kaXNwbGF5TmFtZT1cIk1vZGlmaWNhdGlvbnNPYnNlcnZlclwiLHYuRGVib3VuY2VUaW1lcj00NTAsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyksbigzODUpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyxjLGwsdSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGY9bigxKTtmdW5jdGlvbiBkKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1mKHIpLGk9ZihpKSxhPWYoYSkscz1mKHMpLGM9ZihjKSxsPWYobCksdT1mKHUpO3ZhciBwPWZ1bmN0aW9uKHQpeygwLGEuZGVmYXVsdCkobyx0KTt2YXIgZSxuPShlPW8sZnVuY3Rpb24oKXt2YXIgdCxuPSgwLGMuZGVmYXVsdCkoZSk7aWYoZCgpKXt2YXIgbz0oMCxjLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLHMuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIG8oKXtyZXR1cm4oMCxyLmRlZmF1bHQpKHRoaXMsbyksbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuKDAsaS5kZWZhdWx0KShvLFt7a2V5Olwic2hvd1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3UuZGVmYXVsdC5zaG93KHQpfX1dKSxvfShsLmRlZmF1bHQpO28uZGVmYXVsdD1wLHAuZGlzcGxheU5hbWU9XCJOb3RpZmllclwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oNTgpLG4oMjEpLG4oMjIpLG4oMzkpLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpLG4oMTUpLG4oOCldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCxwLGgsdil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGc9bigxMykseT1uKDEpO2Z1bmN0aW9uIGIoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPXkociksaT15KGkpLGE9eShhKSxzPXkocyksYz15KGMpLGw9eShsKSx1PXkodSksZj15KGYpLGQ9eShkKSxwPXkocCksaD15KGgpLHY9Zyh2KTt2YXIgbT1mdW5jdGlvbih0KXsoMCx1LmRlZmF1bHQpKHcsdCk7dmFyIGUsbixvLHAsZyx5LG0sayx4LFM9KGU9dyxmdW5jdGlvbigpe3ZhciB0LG49KDAsZC5kZWZhdWx0KShlKTtpZihiKCkpe3ZhciBvPSgwLGQuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAsZi5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gdygpe3ZhciB0O3JldHVybigwLGMuZGVmYXVsdCkodGhpcyx3KSwodD1TLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkuTUlNRV9UWVBFPVwiYXBwbGljYXRpb24veC1lZGl0b3ItanNcIix0LnRvb2xzVGFncz17fSx0LnRhZ3NCeVRvb2w9e30sdC50b29sc1BhdHRlcm5zPVtdLHQudG9vbHNGaWxlcz17fSx0LmV4Y2VwdGlvbkxpc3Q9W10sdC5wcm9jZXNzVG9vbD1mdW5jdGlvbihlKXt2YXIgbj0oMCxzLmRlZmF1bHQpKGUsMiksbz1uWzBdLHI9blsxXTt0cnl7dmFyIGk9bmV3IHQuRWRpdG9yLlRvb2xzLmJsb2NrVG9vbHNbb10oe2FwaTp0LkVkaXRvci5BUEkuZ2V0TWV0aG9kc0ZvclRvb2wobyksY29uZmlnOnt9LGRhdGE6e30scmVhZE9ubHk6ITF9KTtpZighMT09PXIucGFzdGVDb25maWcpcmV0dXJuIHZvaWQgdC5leGNlcHRpb25MaXN0LnB1c2gobyk7aWYoIXYuaXNGdW5jdGlvbihpLm9uUGFzdGUpKXJldHVybjt2YXIgYT1yLnBhc3RlQ29uZmlnfHx7fTt0LmdldFRhZ3NDb25maWcobyxhKSx0LmdldEZpbGVzQ29uZmlnKG8sYSksdC5nZXRQYXR0ZXJuc0NvbmZpZyhvLGEpfWNhdGNoKHQpe3YubG9nKFwiUGFzdGUgaGFuZGxpbmcgZm9yIMKrXCIuY29uY2F0KG8sXCLCuyBUb29sIGhhc24ndCBiZWVuIHNldCB1cCBiZWNhdXNlIG9mIHRoZSBlcnJvclwiKSxcIndhcm5cIix0KX19LHQuaGFuZGxlUGFzdGVFdmVudD1mdW5jdGlvbigpe3ZhciBlPSgwLGEuZGVmYXVsdCkoaS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIGUobil7dmFyIG8scixhO3JldHVybiBpLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24oZSl7Zm9yKDs7KXN3aXRjaChlLnByZXY9ZS5uZXh0KXtjYXNlIDA6aWYobz10LkVkaXRvcixyPW8uQmxvY2tNYW5hZ2VyLGE9by5Ub29sYmFyLHIuY3VycmVudEJsb2NrJiYoIXQuaXNOYXRpdmVCZWhhdmlvdXIobi50YXJnZXQpfHxuLmNsaXBib2FyZERhdGEudHlwZXMuaW5jbHVkZXMoXCJGaWxlc1wiKSkpe2UubmV4dD0zO2JyZWFrfXJldHVybiBlLmFicnVwdChcInJldHVyblwiKTtjYXNlIDM6aWYoIXIuY3VycmVudEJsb2NrfHwhdC5leGNlcHRpb25MaXN0LmluY2x1ZGVzKHIuY3VycmVudEJsb2NrLm5hbWUpKXtlLm5leHQ9NTticmVha31yZXR1cm4gZS5hYnJ1cHQoXCJyZXR1cm5cIik7Y2FzZSA1Om4ucHJldmVudERlZmF1bHQoKSx0LnByb2Nlc3NEYXRhVHJhbnNmZXIobi5jbGlwYm9hcmREYXRhKSxyLmNsZWFyRm9jdXNlZCgpLGEuY2xvc2UoKTtjYXNlIDk6Y2FzZVwiZW5kXCI6cmV0dXJuIGUuc3RvcCgpfX0pLGUpfSkpKTtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKSx0fXJldHVybigwLGwuZGVmYXVsdCkodyxbe2tleTpcInByZXBhcmVcIix2YWx1ZTooeD0oMCxhLmRlZmF1bHQpKGkuZGVmYXVsdC5tYXJrKChmdW5jdGlvbiB0KCl7cmV0dXJuIGkuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDp0aGlzLnByb2Nlc3NUb29scygpO2Nhc2UgMTpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24oKXtyZXR1cm4geC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInRvZ2dsZVJlYWRPbmx5XCIsdmFsdWU6ZnVuY3Rpb24odCl7dD90aGlzLnVuc2V0Q2FsbGJhY2soKTp0aGlzLnNldENhbGxiYWNrKCl9fSx7a2V5OlwicHJvY2Vzc0RhdGFUcmFuc2ZlclwiLHZhbHVlOihrPSgwLGEuZGVmYXVsdCkoaS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoZSl7dmFyIG4sbyxyLGEscyxjLGwsdSxmLGQ9YXJndW1lbnRzO3JldHVybiBpLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6aWYobj1kLmxlbmd0aD4xJiZ2b2lkIDAhPT1kWzFdJiZkWzFdLG89dGhpcy5FZGl0b3IuU2FuaXRpemVyLCEoKHI9ZS50eXBlcykuaW5jbHVkZXM/ci5pbmNsdWRlcyhcIkZpbGVzXCIpOnIuY29udGFpbnMoXCJGaWxlc1wiKSkpe3QubmV4dD04O2JyZWFrfXJldHVybiB0Lm5leHQ9Nyx0aGlzLnByb2Nlc3NGaWxlcyhlLmZpbGVzKTtjYXNlIDc6cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIpO2Nhc2UgODppZihhPWUuZ2V0RGF0YSh0aGlzLk1JTUVfVFlQRSkscz1lLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpLGM9ZS5nZXREYXRhKFwidGV4dC9odG1sXCIpLCFhKXt0Lm5leHQ9MTk7YnJlYWt9cmV0dXJuIHQucHJldj0xMix0aGlzLmluc2VydEVkaXRvckpTRGF0YShKU09OLnBhcnNlKGEpKSx0LmFicnVwdChcInJldHVyblwiKTtjYXNlIDE3OnQucHJldj0xNyx0LnQwPXQuY2F0Y2goMTIpO2Nhc2UgMTk6aWYobiYmcy50cmltKCkmJmMudHJpbSgpJiYoYz1cIjxwPlwiKyhjLnRyaW0oKT9jOnMpK1wiPC9wPlwiKSxsPU9iamVjdC5rZXlzKHRoaXMudG9vbHNUYWdzKS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRbZS50b0xvd2VyQ2FzZSgpXT0hMCx0fSkse30pLHU9T2JqZWN0LmFzc2lnbih7fSxsLG8uZ2V0QWxsSW5saW5lVG9vbHNDb25maWcoKSx7YnI6e319KSwoZj1vLmNsZWFuKGMsdSkpLnRyaW0oKSYmZi50cmltKCkhPT1zJiZoLmRlZmF1bHQuaXNIVE1MU3RyaW5nKGYpKXt0Lm5leHQ9Mjg7YnJlYWt9cmV0dXJuIHQubmV4dD0yNix0aGlzLnByb2Nlc3NUZXh0KHMpO2Nhc2UgMjY6dC5uZXh0PTMwO2JyZWFrO2Nhc2UgMjg6cmV0dXJuIHQubmV4dD0zMCx0aGlzLnByb2Nlc3NUZXh0KGYsITApO2Nhc2UgMzA6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyxbWzEyLDE3XV0pfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gay5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInByb2Nlc3NUZXh0XCIsdmFsdWU6KG09KDAsYS5kZWZhdWx0KShpLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgbixvLHIscyxjLGwsdSxmLGQ9dGhpcyxwPWFyZ3VtZW50cztyZXR1cm4gaS5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmlmKG49cC5sZW5ndGg+MSYmdm9pZCAwIT09cFsxXSYmcFsxXSxvPXRoaXMuRWRpdG9yLHI9by5DYXJldCxzPW8uQmxvY2tNYW5hZ2VyLGM9by5Ub29scywobD1uP3RoaXMucHJvY2Vzc0hUTUwoZSk6dGhpcy5wcm9jZXNzUGxhaW4oZSkpLmxlbmd0aCl7dC5uZXh0PTU7YnJlYWt9cmV0dXJuIHQuYWJydXB0KFwicmV0dXJuXCIpO2Nhc2UgNTppZigxIT09bC5sZW5ndGgpe3QubmV4dD04O2JyZWFrfXJldHVybiBsWzBdLmlzQmxvY2s/dGhpcy5wcm9jZXNzU2luZ2xlQmxvY2sobC5wb3AoKSk6dGhpcy5wcm9jZXNzSW5saW5lUGFzdGUobC5wb3AoKSksdC5hYnJ1cHQoXCJyZXR1cm5cIik7Y2FzZSA4OnU9cy5jdXJyZW50QmxvY2smJmMuaXNEZWZhdWx0KHMuY3VycmVudEJsb2NrLnRvb2wpLGY9dSYmcy5jdXJyZW50QmxvY2suaXNFbXB0eSxsLm1hcChmdW5jdGlvbigpe3ZhciB0PSgwLGEuZGVmYXVsdCkoaS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoZSxuKXtyZXR1cm4gaS5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiB0LmFicnVwdChcInJldHVyblwiLGQuaW5zZXJ0QmxvY2soZSwwPT09biYmZikpO2Nhc2UgMTpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCl9KSkpO3JldHVybiBmdW5jdGlvbihlLG4pe3JldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCkpLHMuY3VycmVudEJsb2NrJiZyLnNldFRvQmxvY2socy5jdXJyZW50QmxvY2ssci5wb3NpdGlvbnMuRU5EKTtjYXNlIDEyOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gbS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInNldENhbGxiYWNrXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmxpc3RlbmVycy5vbih0aGlzLkVkaXRvci5VSS5ub2Rlcy5ob2xkZXIsXCJwYXN0ZVwiLHRoaXMuaGFuZGxlUGFzdGVFdmVudCl9fSx7a2V5OlwidW5zZXRDYWxsYmFja1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5saXN0ZW5lcnMub2ZmKHRoaXMuRWRpdG9yLlVJLm5vZGVzLmhvbGRlcixcInBhc3RlXCIsdGhpcy5oYW5kbGVQYXN0ZUV2ZW50KX19LHtrZXk6XCJwcm9jZXNzVG9vbHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuRWRpdG9yLlRvb2xzLmJsb2NrVG9vbHM7T2JqZWN0LmVudHJpZXModCkuZm9yRWFjaCh0aGlzLnByb2Nlc3NUb29sKX19LHtrZXk6XCJnZXRUYWdzQ29uZmlnXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLG89ZS50YWdzfHxbXTtvLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLnRvb2xzVGFncyxlKT92LmxvZyhcIlBhc3RlIGhhbmRsZXIgZm9yIMKrXCIuY29uY2F0KHQsXCLCuyBUb29sIG9uIMKrXCIpLmNvbmNhdChlLFwiwrsgdGFnIGlzIHNraXBwZWQgXCIpK1wiYmVjYXVzZSBpdCBpcyBhbHJlYWR5IHVzZWQgYnkgwqtcIi5jb25jYXQobi50b29sc1RhZ3NbZV0udG9vbCxcIsK7IFRvb2wuXCIpLFwid2FyblwiKTpuLnRvb2xzVGFnc1tlLnRvVXBwZXJDYXNlKCldPXt0b29sOnR9fSkpLHRoaXMudGFnc0J5VG9vbFt0XT1vLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX0pKX19LHtrZXk6XCJnZXRGaWxlc0NvbmZpZ1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5maWxlcyxvPXZvaWQgMD09PW4/e306bixyPW8uZXh0ZW5zaW9ucyxpPW8ubWltZVR5cGVzOyhyfHxpKSYmKHImJiFBcnJheS5pc0FycmF5KHIpJiYodi5sb2coXCLCq2V4dGVuc2lvbnPCuyBwcm9wZXJ0eSBvZiB0aGUgb25Ecm9wIGNvbmZpZyBmb3IgwqtcIi5jb25jYXQodCxcIsK7IFRvb2wgc2hvdWxkIGJlIGFuIGFycmF5XCIpKSxyPVtdKSxpJiYhQXJyYXkuaXNBcnJheShpKSYmKHYubG9nKFwiwqttaW1lVHlwZXPCuyBwcm9wZXJ0eSBvZiB0aGUgb25Ecm9wIGNvbmZpZyBmb3IgwqtcIi5jb25jYXQodCxcIsK7IFRvb2wgc2hvdWxkIGJlIGFuIGFycmF5XCIpKSxpPVtdKSxpJiYoaT1pLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuISF2LmlzVmFsaWRNaW1lVHlwZShlKXx8KHYubG9nKFwiTUlNRSB0eXBlIHZhbHVlIMKrXCIuY29uY2F0KGUsXCLCuyBmb3IgdGhlIMKrXCIpLmNvbmNhdCh0LFwiwrsgVG9vbCBpcyBub3QgYSB2YWxpZCBNSU1FIHR5cGVcIiksXCJ3YXJuXCIpLCExKX0pKSksdGhpcy50b29sc0ZpbGVzW3RdPXtleHRlbnNpb25zOnJ8fFtdLG1pbWVUeXBlczppfHxbXX0pfX0se2tleTpcImdldFBhdHRlcm5zQ29uZmlnXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO2UucGF0dGVybnMmJiF2LmlzRW1wdHkoZS5wYXR0ZXJucykmJk9iamVjdC5lbnRyaWVzKGUucGF0dGVybnMpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBvPSgwLHMuZGVmYXVsdCkoZSwyKSxyPW9bMF0saT1vWzFdO2kgaW5zdGFuY2VvZiBSZWdFeHB8fHYubG9nKFwiUGF0dGVybiBcIi5jb25jYXQoaSxcIiBmb3IgwqtcIikuY29uY2F0KHQsXCLCuyBUb29sIGlzIHNraXBwZWQgYmVjYXVzZSBpdCBzaG91bGQgYmUgYSBSZWdleHAgaW5zdGFuY2UuXCIpLFwid2FyblwiKSxuLnRvb2xzUGF0dGVybnMucHVzaCh7a2V5OnIscGF0dGVybjppLHRvb2w6dH0pfSkpfX0se2tleTpcImlzTmF0aXZlQmVoYXZpb3VyXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIGguZGVmYXVsdC5pc05hdGl2ZUlucHV0KHQpfX0se2tleTpcInByb2Nlc3NGaWxlc1wiLHZhbHVlOih5PSgwLGEuZGVmYXVsdCkoaS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoZSl7dmFyIG4sbyxyLGEscyxjLGw9dGhpcztyZXR1cm4gaS5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiBuPXRoaXMuRWRpdG9yLG89bi5CbG9ja01hbmFnZXIscj1uLlRvb2xzLHQubmV4dD0zLFByb21pc2UuYWxsKEFycmF5LmZyb20oZSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gbC5wcm9jZXNzRmlsZSh0KX0pKSk7Y2FzZSAzOmE9KGE9dC5zZW50KS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiEhdH0pKSxzPXIuaXNEZWZhdWx0KG8uY3VycmVudEJsb2NrLnRvb2wpLGM9cyYmby5jdXJyZW50QmxvY2suaXNFbXB0eSxhLmZvckVhY2goKGZ1bmN0aW9uKHQsZSl7by5wYXN0ZSh0LnR5cGUsdC5ldmVudCwwPT09ZSYmYyl9KSk7Y2FzZSA4OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4geS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInByb2Nlc3NGaWxlXCIsdmFsdWU6KGc9KDAsYS5kZWZhdWx0KShpLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgbixvLHIsYSxjO3JldHVybiBpLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6aWYobj12LmdldEZpbGVFeHRlbnNpb24oZSksbz1PYmplY3QuZW50cmllcyh0aGlzLnRvb2xzRmlsZXMpLmZpbmQoKGZ1bmN0aW9uKHQpe3ZhciBvPSgwLHMuZGVmYXVsdCkodCwyKSxyPShvWzBdLG9bMV0pLGk9ci5taW1lVHlwZXMsYT1yLmV4dGVuc2lvbnMsYz1lLnR5cGUuc3BsaXQoXCIvXCIpLGw9KDAscy5kZWZhdWx0KShjLDIpLHU9bFswXSxmPWxbMV0sZD1hLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRvTG93ZXJDYXNlKCk9PT1uLnRvTG93ZXJDYXNlKCl9KSkscD1pLmZpbmQoKGZ1bmN0aW9uKHQpe3ZhciBlPXQuc3BsaXQoXCIvXCIpLG49KDAscy5kZWZhdWx0KShlLDIpLG89blswXSxyPW5bMV07cmV0dXJuIG89PT11JiYocj09PWZ8fFwiKlwiPT09cil9KSk7cmV0dXJuISFkfHwhIXB9KSkpe3QubmV4dD00O2JyZWFrfXJldHVybiB0LmFicnVwdChcInJldHVyblwiKTtjYXNlIDQ6cmV0dXJuIHI9KDAscy5kZWZhdWx0KShvLDEpLGE9clswXSxjPXRoaXMuY29tcG9zZVBhc3RlRXZlbnQoXCJmaWxlXCIse2ZpbGU6ZX0pLHQuYWJydXB0KFwicmV0dXJuXCIse2V2ZW50OmMsdHlwZTphfSk7Y2FzZSA3OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gZy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInByb2Nlc3NIVE1MXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMuRWRpdG9yLG89bi5Ub29scyxyPW4uU2FuaXRpemVyLGk9dGhpcy5jb25maWcuZGVmYXVsdEJsb2NrLGE9aC5kZWZhdWx0Lm1ha2UoXCJESVZcIik7cmV0dXJuIGEuaW5uZXJIVE1MPXQsdGhpcy5nZXROb2RlcyhhKS5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBuLGE9aSxzPSExO3N3aXRjaCh0Lm5vZGVUeXBlKXtjYXNlIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERToobj1oLmRlZmF1bHQubWFrZShcImRpdlwiKSkuYXBwZW5kQ2hpbGQodCk7YnJlYWs7Y2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpuPXQscz0hMCxlLnRvb2xzVGFnc1tuLnRhZ05hbWVdJiYoYT1lLnRvb2xzVGFnc1tuLnRhZ05hbWVdLnRvb2wpfXZhciBjPW8uYmxvY2tUb29sc1thXS5wYXN0ZUNvbmZpZy50YWdzLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFtlLnRvTG93ZXJDYXNlKCldPXt9LHR9KSx7fSksbD1PYmplY3QuYXNzaWduKHt9LGMsci5nZXRJbmxpbmVUb29sc0NvbmZpZyhhKSk7cmV0dXJuIG4uaW5uZXJIVE1MPXIuY2xlYW4obi5pbm5lckhUTUwsbCkse2NvbnRlbnQ6bixpc0Jsb2NrOnMsdG9vbDphLGV2ZW50OmUuY29tcG9zZVBhc3RlRXZlbnQoXCJ0YWdcIix7ZGF0YTpufSl9fSkpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIWguZGVmYXVsdC5pc05vZGVFbXB0eSh0LmNvbnRlbnQpfHxoLmRlZmF1bHQuaXNTaW5nbGVUYWcodC5jb250ZW50KX0pKX19LHtrZXk6XCJwcm9jZXNzUGxhaW5cIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLG49dGhpcy5jb25maWcuZGVmYXVsdEJsb2NrO2lmKCF0KXJldHVybltdO3ZhciBvPW47cmV0dXJuIHQuc3BsaXQoL1xccj9cXG4vKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRyaW0oKX0pKS5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBuPWguZGVmYXVsdC5tYWtlKFwiZGl2XCIpO24udGV4dENvbnRlbnQ9dDt2YXIgcj1lLmNvbXBvc2VQYXN0ZUV2ZW50KFwidGFnXCIse2RhdGE6bn0pO3JldHVybntjb250ZW50Om4sdG9vbDpvLGlzQmxvY2s6ITEsZXZlbnQ6cn19KSl9fSx7a2V5OlwicHJvY2Vzc1NpbmdsZUJsb2NrXCIsdmFsdWU6KHA9KDAsYS5kZWZhdWx0KShpLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgbixvLHIsYSxzO3JldHVybiBpLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6aWYobj10aGlzLkVkaXRvcixvPW4uQ2FyZXQscj1uLkJsb2NrTWFuYWdlcixhPW4uVG9vbHMsKHM9ci5jdXJyZW50QmxvY2spJiZlLnRvb2w9PT1zLm5hbWUmJmguZGVmYXVsdC5jb250YWluc09ubHlJbmxpbmVFbGVtZW50cyhlLmNvbnRlbnQuaW5uZXJIVE1MKSl7dC5uZXh0PTU7YnJlYWt9cmV0dXJuIHRoaXMuaW5zZXJ0QmxvY2soZSxzJiZhLmlzRGVmYXVsdChzLnRvb2wpJiZzLmlzRW1wdHkpLHQuYWJydXB0KFwicmV0dXJuXCIpO2Nhc2UgNTpvLmluc2VydENvbnRlbnRBdENhcmV0UG9zaXRpb24oZS5jb250ZW50LmlubmVySFRNTCk7Y2FzZSA2OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gcC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInByb2Nlc3NJbmxpbmVQYXN0ZVwiLHZhbHVlOihvPSgwLGEuZGVmYXVsdCkoaS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoZSl7dmFyIG4sbyxyLGEscyxjLGwsdSxmLGQ7cmV0dXJuIGkuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDppZihuPXRoaXMuRWRpdG9yLG89bi5CbG9ja01hbmFnZXIscj1uLkNhcmV0LGE9bi5TYW5pdGl6ZXIscz1uLlRvb2xzLGM9ZS5jb250ZW50LCEoby5jdXJyZW50QmxvY2smJnMuaXNEZWZhdWx0KG8uY3VycmVudEJsb2NrLnRvb2wpJiZjLnRleHRDb250ZW50Lmxlbmd0aDx3LlBBVFRFUk5fUFJPQ0VTU0lOR19NQVhfTEVOR1RIKSl7dC5uZXh0PTEyO2JyZWFrfXJldHVybiB0Lm5leHQ9Nix0aGlzLnByb2Nlc3NQYXR0ZXJuKGMudGV4dENvbnRlbnQpO2Nhc2UgNjppZighKGw9dC5zZW50KSl7dC5uZXh0PTEyO2JyZWFrfXJldHVybiB1PW8uY3VycmVudEJsb2NrJiZzLmlzRGVmYXVsdChvLmN1cnJlbnRCbG9jay50b29sKSYmby5jdXJyZW50QmxvY2suaXNFbXB0eSxmPW8ucGFzdGUobC50b29sLGwuZXZlbnQsdSksci5zZXRUb0Jsb2NrKGYsci5wb3NpdGlvbnMuRU5EKSx0LmFicnVwdChcInJldHVyblwiKTtjYXNlIDEyOm8uY3VycmVudEJsb2NrJiZvLmN1cnJlbnRCbG9jay5jdXJyZW50SW5wdXQ/KGQ9YS5nZXRJbmxpbmVUb29sc0NvbmZpZyhvLmN1cnJlbnRCbG9jay5uYW1lKSxkb2N1bWVudC5leGVjQ29tbWFuZChcImluc2VydEhUTUxcIiwhMSxhLmNsZWFuKGMuaW5uZXJIVE1MLGQpKSk6dGhpcy5pbnNlcnRCbG9jayhlKTtjYXNlIDEzOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gby5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInByb2Nlc3NQYXR0ZXJuXCIsdmFsdWU6KG49KDAsYS5kZWZhdWx0KShpLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgbixvO3JldHVybiBpLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6aWYobj10aGlzLnRvb2xzUGF0dGVybnMuZmluZCgoZnVuY3Rpb24odCl7dmFyIG49dC5wYXR0ZXJuLmV4ZWMoZSk7cmV0dXJuISFuJiZlPT09bi5zaGlmdCgpfSkpKXt0Lm5leHQ9MzticmVha31yZXR1cm4gdC5hYnJ1cHQoXCJyZXR1cm5cIik7Y2FzZSAzOnJldHVybiBvPXRoaXMuY29tcG9zZVBhc3RlRXZlbnQoXCJwYXR0ZXJuXCIse2tleTpuLmtleSxkYXRhOmV9KSx0LmFicnVwdChcInJldHVyblwiLHtldmVudDpvLHRvb2w6bi50b29sfSk7Y2FzZSA1OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0KXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImluc2VydEJsb2NrXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGUsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLG89dGhpcy5FZGl0b3Iscj1vLkJsb2NrTWFuYWdlcixpPW8uQ2FyZXQsYT1yLmN1cnJlbnRCbG9jaztpZihuJiZhJiZhLmlzRW1wdHkpcmV0dXJuIGU9ci5wYXN0ZSh0LnRvb2wsdC5ldmVudCwhMCksdm9pZCBpLnNldFRvQmxvY2soZSxpLnBvc2l0aW9ucy5FTkQpO2U9ci5wYXN0ZSh0LnRvb2wsdC5ldmVudCksaS5zZXRUb0Jsb2NrKGUsaS5wb3NpdGlvbnMuRU5EKX19LHtrZXk6XCJpbnNlcnRFZGl0b3JKU0RhdGFcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLkVkaXRvcixuPWUuQmxvY2tNYW5hZ2VyLG89ZS5DYXJldCxyPWUuU2FuaXRpemVyLGk9ZS5Ub29scztyLnNhbml0aXplQmxvY2tzKHQpLmZvckVhY2goKGZ1bmN0aW9uKHQsZSl7dmFyIHI9dC50b29sLGE9dC5kYXRhLHM9ITE7MD09PWUmJihzPW4uY3VycmVudEJsb2NrJiZpLmlzRGVmYXVsdChuLmN1cnJlbnRCbG9jay50b29sKSYmbi5jdXJyZW50QmxvY2suaXNFbXB0eSk7dmFyIGM9bi5pbnNlcnQoe3Rvb2w6cixkYXRhOmEscmVwbGFjZTpzfSk7by5zZXRUb0Jsb2NrKGMsby5wb3NpdGlvbnMuRU5EKX0pKX19LHtrZXk6XCJwcm9jZXNzRWxlbWVudE5vZGVcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7dmFyIG89T2JqZWN0LmtleXModGhpcy50b29sc1RhZ3MpLGk9dCxhPSh0aGlzLnRvb2xzVGFnc1tpLnRhZ05hbWVdfHx7fSkudG9vbCxzPXZvaWQgMD09PWE/XCJcIjphLGM9dGhpcy50YWdzQnlUb29sW3NdfHxbXSxsPW8uaW5jbHVkZXMoaS50YWdOYW1lKSx1PWguZGVmYXVsdC5ibG9ja0VsZW1lbnRzLmluY2x1ZGVzKGkudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSxmPUFycmF5LmZyb20oaS5jaGlsZHJlbikuc29tZSgoZnVuY3Rpb24odCl7dmFyIGU9dC50YWdOYW1lO3JldHVybiBvLmluY2x1ZGVzKGUpJiYhYy5pbmNsdWRlcyhlKX0pKSxkPUFycmF5LmZyb20oaS5jaGlsZHJlbikuc29tZSgoZnVuY3Rpb24odCl7dmFyIGU9dC50YWdOYW1lO3JldHVybiBoLmRlZmF1bHQuYmxvY2tFbGVtZW50cy5pbmNsdWRlcyhlLnRvTG93ZXJDYXNlKCkpfSkpO3JldHVybiB1fHxsfHxmP2wmJiFmfHx1JiYhZCYmIWY/W10uY29uY2F0KCgwLHIuZGVmYXVsdCkoZSksW24saV0pOnZvaWQgMDoobi5hcHBlbmRDaGlsZChpKSxbXS5jb25jYXQoKDAsci5kZWZhdWx0KShlKSxbbl0pKX19LHtrZXk6XCJnZXROb2Rlc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLG49dGhpcztyZXR1cm4gQXJyYXkuZnJvbSh0LmNoaWxkTm9kZXMpLnJlZHVjZSgoZnVuY3Rpb24gdChvLGkpe2lmKGguZGVmYXVsdC5pc0VtcHR5KGkpJiYhaC5kZWZhdWx0LmlzU2luZ2xlVGFnKGkpKXJldHVybiBvO3ZhciBhPW9bby5sZW5ndGgtMV0scz1uZXcgRG9jdW1lbnRGcmFnbWVudDtzd2l0Y2goYSYmaC5kZWZhdWx0LmlzRnJhZ21lbnQoYSkmJihzPW8ucG9wKCkpLGkubm9kZVR5cGUpe2Nhc2UgTm9kZS5FTEVNRU5UX05PREU6aWYoZT1uLnByb2Nlc3NFbGVtZW50Tm9kZShpLG8scykpcmV0dXJuIGU7YnJlYWs7Y2FzZSBOb2RlLlRFWFRfTk9ERTpyZXR1cm4gcy5hcHBlbmRDaGlsZChpKSxbXS5jb25jYXQoKDAsci5kZWZhdWx0KShvKSxbc10pO2RlZmF1bHQ6cmV0dXJuW10uY29uY2F0KCgwLHIuZGVmYXVsdCkobyksW3NdKX1yZXR1cm5bXS5jb25jYXQoKDAsci5kZWZhdWx0KShvKSwoMCxyLmRlZmF1bHQpKEFycmF5LmZyb20oaS5jaGlsZE5vZGVzKS5yZWR1Y2UodCxbXSkpKX0pLFtdKX19LHtrZXk6XCJjb21wb3NlUGFzdGVFdmVudFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBDdXN0b21FdmVudCh0LHtkZXRhaWw6ZX0pfX1dKSx3fShwLmRlZmF1bHQpO28uZGVmYXVsdD1tLG0uZGlzcGxheU5hbWU9XCJQYXN0ZVwiLG0uUEFUVEVSTl9QUk9DRVNTSU5HX01BWF9MRU5HVEg9NDUwLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMjEpLG4oMzkpLG4oMjIpLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpLG4oMTQ1KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhLHMsYyxsLHUsZixkLHApe1widXNlIHN0cmljdFwiO3ZhciBoPW4oMSk7ZnVuY3Rpb24gdigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9aChyKSxpPWgoaSksYT1oKGEpLHM9aChzKSxjPWgoYyksbD1oKGwpLHU9aCh1KSxmPWgoZik7dmFyIGc9ZnVuY3Rpb24odCl7KDAsbC5kZWZhdWx0KShoLHQpO3ZhciBlLG4sbyxkPShlPWgsZnVuY3Rpb24oKXt2YXIgdCxuPSgwLGYuZGVmYXVsdCkoZSk7aWYodigpKXt2YXIgbz0oMCxmLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLHUuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIGgoKXt2YXIgdDtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsaCksKHQ9ZC5hcHBseSh0aGlzLGFyZ3VtZW50cykpLnRvb2xzRG9udFN1cHBvcnRSZWFkT25seT1bXSx0LnJlYWRPbmx5RW5hYmxlZD0hMSx0fXJldHVybigwLGMuZGVmYXVsdCkoaCxbe2tleTpcInByZXBhcmVcIix2YWx1ZToobz0oMCxhLmRlZmF1bHQpKHIuZGVmYXVsdC5tYXJrKChmdW5jdGlvbiB0KCl7dmFyIGUsbixvO3JldHVybiByLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6ZT10aGlzLkVkaXRvci5Ub29scyxuPWUuYmxvY2tUb29scyxvPVtdLE9iamVjdC5lbnRyaWVzKG4pLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPSgwLGkuZGVmYXVsdCkodCwyKSxyPW5bMF0sYT1uWzFdO2UuaXNSZWFkT25seVN1cHBvcnRlZChhKXx8by5wdXNoKHIpfSkpLHRoaXMudG9vbHNEb250U3VwcG9ydFJlYWRPbmx5PW8sdGhpcy5jb25maWcucmVhZE9ubHkmJm8ubGVuZ3RoPjAmJnRoaXMudGhyb3dDcml0aWNhbEVycm9yKCksdGhpcy50b2dnbGUodGhpcy5jb25maWcucmVhZE9ubHkpO2Nhc2UgNzpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24oKXtyZXR1cm4gby5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInRvZ2dsZVwiLHZhbHVlOihuPSgwLGEuZGVmYXVsdCkoci5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoKXt2YXIgZSxuLG8saSxhPWFyZ3VtZW50cztyZXR1cm4gci5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOihlPWEubGVuZ3RoPjAmJnZvaWQgMCE9PWFbMF0/YVswXTohdGhpcy5yZWFkT25seUVuYWJsZWQpJiZ0aGlzLnRvb2xzRG9udFN1cHBvcnRSZWFkT25seS5sZW5ndGg+MCYmdGhpcy50aHJvd0NyaXRpY2FsRXJyb3IoKSxuPXRoaXMucmVhZE9ubHlFbmFibGVkLHRoaXMucmVhZE9ubHlFbmFibGVkPWUsdC50MD1yLmRlZmF1bHQua2V5cyh0aGlzLkVkaXRvcik7Y2FzZSA1OmlmKCh0LnQxPXQudDAoKSkuZG9uZSl7dC5uZXh0PTEyO2JyZWFrfWlmKG89dC50MS52YWx1ZSx0aGlzLkVkaXRvcltvXS50b2dnbGVSZWFkT25seSl7dC5uZXh0PTk7YnJlYWt9cmV0dXJuIHQuYWJydXB0KFwiY29udGludWVcIiw1KTtjYXNlIDk6dGhpcy5FZGl0b3Jbb10udG9nZ2xlUmVhZE9ubHkoZSksdC5uZXh0PTU7YnJlYWs7Y2FzZSAxMjppZihuIT09ZSl7dC5uZXh0PTE0O2JyZWFrfXJldHVybiB0LmFicnVwdChcInJldHVyblwiLHRoaXMucmVhZE9ubHlFbmFibGVkKTtjYXNlIDE0OnJldHVybiB0Lm5leHQ9MTYsdGhpcy5FZGl0b3IuU2F2ZXIuc2F2ZSgpO2Nhc2UgMTY6cmV0dXJuIGk9dC5zZW50LHQubmV4dD0xOSx0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY2xlYXIoKTtjYXNlIDE5OnJldHVybiB0Lm5leHQ9MjEsdGhpcy5FZGl0b3IuUmVuZGVyZXIucmVuZGVyKGkuYmxvY2tzKTtjYXNlIDIxOnJldHVybiB0LmFicnVwdChcInJldHVyblwiLHRoaXMucmVhZE9ubHlFbmFibGVkKTtjYXNlIDIyOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbigpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwidGhyb3dDcml0aWNhbEVycm9yXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aHJvdyBuZXcgcC5Dcml0aWNhbEVycm9yKFwiVG8gZW5hYmxlIHJlYWQtb25seSBtb2RlIGFsbCBjb25uZWN0ZWQgdG9vbHMgc2hvdWxkIHN1cHBvcnQgaXQuIFRvb2xzIFwiLmNvbmNhdCh0aGlzLnRvb2xzRG9udFN1cHBvcnRSZWFkT25seS5qb2luKFwiLCBcIiksXCIgZG9uJ3Qgc3VwcG9ydCByZWFkLW9ubHkgbW9kZS5cIikpfX0se2tleTpcImlzRW5hYmxlZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRPbmx5RW5hYmxlZH19XSksaH0oKGQ9aChkKSkuZGVmYXVsdCk7by5kZWZhdWx0PWcsZy5kaXNwbGF5TmFtZT1cIlJlYWRPbmx5XCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyksbigxNSksbigyNSksbig2MSldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHA9bigxKTtmdW5jdGlvbiBoKHQpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBTeW1ib2x8fG51bGw9PXRbU3ltYm9sLml0ZXJhdG9yXSl7aWYoQXJyYXkuaXNBcnJheSh0KXx8KHQ9ZnVuY3Rpb24odCxlKXtpZih0KXtpZihcInN0cmluZ1wiPT10eXBlb2YgdClyZXR1cm4gdih0LGUpO3ZhciBuPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KS5zbGljZSg4LC0xKTtyZXR1cm5cIk9iamVjdFwiPT09biYmdC5jb25zdHJ1Y3RvciYmKG49dC5jb25zdHJ1Y3Rvci5uYW1lKSxcIk1hcFwiPT09bnx8XCJTZXRcIj09PW4/QXJyYXkuZnJvbShuKTpcIkFyZ3VtZW50c1wiPT09bnx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3Qobik/dih0LGUpOnZvaWQgMH19KHQpKSl7dmFyIGU9MCxuPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpuLG46ZnVuY3Rpb24oKXtyZXR1cm4gZT49dC5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOnRbZSsrXX19LGU6ZnVuY3Rpb24odCl7dGhyb3cgdH0sZjpufX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIG8scixpPSEwLGE9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXtvPXRbU3ltYm9sLml0ZXJhdG9yXSgpfSxuOmZ1bmN0aW9uKCl7dmFyIHQ9by5uZXh0KCk7cmV0dXJuIGk9dC5kb25lLHR9LGU6ZnVuY3Rpb24odCl7YT0hMCxyPXR9LGY6ZnVuY3Rpb24oKXt0cnl7aXx8bnVsbD09by5yZXR1cm58fG8ucmV0dXJuKCl9ZmluYWxseXtpZihhKXRocm93IHJ9fX19ZnVuY3Rpb24gdih0LGUpeyhudWxsPT1lfHxlPnQubGVuZ3RoKSYmKGU9dC5sZW5ndGgpO2Zvcih2YXIgbj0wLG89bmV3IEFycmF5KGUpO248ZTtuKyspb1tuXT10W25dO3JldHVybiBvfWZ1bmN0aW9uIGcoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPXAociksaT1wKGkpLGE9cChhKSxzPXAocyksYz1wKGMpLGw9cChsKSx1PXAodSksZj1wKGYpLGQ9cChkKTt2YXIgeT1mdW5jdGlvbih0KXsoMCxhLmRlZmF1bHQpKG8sdCk7dmFyIGUsbj0oZT1vLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCxjLmRlZmF1bHQpKGUpO2lmKGcoKSl7dmFyIG89KDAsYy5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxzLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBvKCl7dmFyIHQ7cmV0dXJuKDAsci5kZWZhdWx0KSh0aGlzLG8pLCh0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpKS5pc1JlY3RTZWxlY3Rpb25BY3RpdmF0ZWQ9ITEsdC5TQ1JPTExfU1BFRUQ9Myx0LkhFSUdIVF9PRl9TQ1JPTExfWk9ORT00MCx0LkJPVFRPTV9TQ1JPTExfWk9ORT0xLHQuVE9QX1NDUk9MTF9aT05FPTIsdC5NQUlOX01PVVNFX0JVVFRPTj0wLHQubW91c2Vkb3duPSExLHQuaXNTY3JvbGxpbmc9ITEsdC5pblNjcm9sbFpvbmU9bnVsbCx0LnN0YXJ0WD0wLHQuc3RhcnRZPTAsdC5tb3VzZVg9MCx0Lm1vdXNlWT0wLHQuc3RhY2tPZlNlbGVjdGVkPVtdLHQubGlzdGVuZXJJZHM9W10sdH1yZXR1cm4oMCxpLmRlZmF1bHQpKG8sW3trZXk6XCJwcmVwYXJlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmVuYWJsZU1vZHVsZUJpbmRpbmdzKCl9fSx7a2V5Olwic3RhcnRTZWxlY3Rpb25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPWRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodC13aW5kb3cucGFnZVhPZmZzZXQsZS13aW5kb3cucGFnZVlPZmZzZXQpO24uY2xvc2VzdChcIi5cIi5jb25jYXQodGhpcy5FZGl0b3IuVG9vbGJhci5DU1MudG9vbGJhcikpfHwodGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uYWxsQmxvY2tzU2VsZWN0ZWQ9ITEsdGhpcy5jbGVhclNlbGVjdGlvbigpLHRoaXMuc3RhY2tPZlNlbGVjdGVkPVtdKTt2YXIgbz1bXCIuXCIuY29uY2F0KGQuZGVmYXVsdC5DU1MuY29udGVudCksXCIuXCIuY29uY2F0KHRoaXMuRWRpdG9yLlRvb2xiYXIuQ1NTLnRvb2xiYXIpLFwiLlwiLmNvbmNhdCh0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLkNTUy5pbmxpbmVUb29sYmFyKV0scj1uLmNsb3Nlc3QoXCIuXCIrdGhpcy5FZGl0b3IuVUkuQ1NTLmVkaXRvcldyYXBwZXIpLGk9by5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4hIW4uY2xvc2VzdCh0KX0pKTtyJiYhaSYmKHRoaXMubW91c2Vkb3duPSEwLHRoaXMuc3RhcnRYPXQsdGhpcy5zdGFydFk9ZSl9fSx7a2V5OlwiZW5kU2VsZWN0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLm1vdXNlZG93bj0hMSx0aGlzLnN0YXJ0WD0wLHRoaXMuc3RhcnRZPTAsdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmRpc3BsYXk9XCJub25lXCJ9fSx7a2V5OlwiaXNSZWN0QWN0aXZhdGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc1JlY3RTZWxlY3Rpb25BY3RpdmF0ZWR9fSx7a2V5OlwiY2xlYXJTZWxlY3Rpb25cIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuaXNSZWN0U2VsZWN0aW9uQWN0aXZhdGVkPSExfX0se2tleTpcImVuYWJsZU1vZHVsZUJpbmRpbmdzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5nZW5IVE1MKCkuY29udGFpbmVyO3RoaXMubGlzdGVuZXJzLm9uKGUsXCJtb3VzZWRvd25cIiwoZnVuY3Rpb24oZSl7dC5wcm9jZXNzTW91c2VEb3duKGUpfSksITEpLHRoaXMubGlzdGVuZXJzLm9uKGRvY3VtZW50LmJvZHksXCJtb3VzZW1vdmVcIiwoZnVuY3Rpb24oZSl7dC5wcm9jZXNzTW91c2VNb3ZlKGUpfSksITEpLHRoaXMubGlzdGVuZXJzLm9uKGRvY3VtZW50LmJvZHksXCJtb3VzZWxlYXZlXCIsKGZ1bmN0aW9uKCl7dC5wcm9jZXNzTW91c2VMZWF2ZSgpfSkpLHRoaXMubGlzdGVuZXJzLm9uKHdpbmRvdyxcInNjcm9sbFwiLChmdW5jdGlvbihlKXt0LnByb2Nlc3NTY3JvbGwoZSl9KSwhMSksdGhpcy5saXN0ZW5lcnMub24oZG9jdW1lbnQuYm9keSxcIm1vdXNldXBcIiwoZnVuY3Rpb24oKXt0LnByb2Nlc3NNb3VzZVVwKCl9KSwhMSl9fSx7a2V5OlwicHJvY2Vzc01vdXNlRG93blwiLHZhbHVlOmZ1bmN0aW9uKHQpe3QuYnV0dG9uPT09dGhpcy5NQUlOX01PVVNFX0JVVFRPTiYmdGhpcy5zdGFydFNlbGVjdGlvbih0LnBhZ2VYLHQucGFnZVkpfX0se2tleTpcInByb2Nlc3NNb3VzZU1vdmVcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmNoYW5naW5nUmVjdGFuZ2xlKHQpLHRoaXMuc2Nyb2xsQnlab25lcyh0LmNsaWVudFkpfX0se2tleTpcInByb2Nlc3NNb3VzZUxlYXZlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmNsZWFyU2VsZWN0aW9uKCksdGhpcy5lbmRTZWxlY3Rpb24oKX19LHtrZXk6XCJwcm9jZXNzU2Nyb2xsXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5jaGFuZ2luZ1JlY3RhbmdsZSh0KX19LHtrZXk6XCJwcm9jZXNzTW91c2VVcFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5lbmRTZWxlY3Rpb24oKX19LHtrZXk6XCJzY3JvbGxCeVpvbmVzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5pblNjcm9sbFpvbmU9bnVsbCx0PD10aGlzLkhFSUdIVF9PRl9TQ1JPTExfWk9ORSYmKHRoaXMuaW5TY3JvbGxab25lPXRoaXMuVE9QX1NDUk9MTF9aT05FKSxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LXQ8PXRoaXMuSEVJR0hUX09GX1NDUk9MTF9aT05FJiYodGhpcy5pblNjcm9sbFpvbmU9dGhpcy5CT1RUT01fU0NST0xMX1pPTkUpLHRoaXMuaW5TY3JvbGxab25lP3RoaXMuaXNTY3JvbGxpbmd8fCh0aGlzLnNjcm9sbFZlcnRpY2FsKHRoaXMuaW5TY3JvbGxab25lPT09dGhpcy5UT1BfU0NST0xMX1pPTkU/LXRoaXMuU0NST0xMX1NQRUVEOnRoaXMuU0NST0xMX1NQRUVEKSx0aGlzLmlzU2Nyb2xsaW5nPSEwKTp0aGlzLmlzU2Nyb2xsaW5nPSExfX0se2tleTpcImdlbkhUTUxcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuRWRpdG9yLlVJLGU9dC5ub2Rlcy5ob2xkZXIucXVlcnlTZWxlY3RvcihcIi5cIit0LkNTUy5lZGl0b3JXcmFwcGVyKSxuPXUuZGVmYXVsdC5tYWtlKFwiZGl2XCIsby5DU1Mub3ZlcmxheSx7fSkscj11LmRlZmF1bHQubWFrZShcImRpdlwiLG8uQ1NTLm92ZXJsYXlDb250YWluZXIse30pLGk9dS5kZWZhdWx0Lm1ha2UoXCJkaXZcIixvLkNTUy5yZWN0LHt9KTtyZXR1cm4gci5hcHBlbmRDaGlsZChpKSxuLmFwcGVuZENoaWxkKHIpLGUuYXBwZW5kQ2hpbGQobiksdGhpcy5vdmVybGF5UmVjdGFuZ2xlPWkse2NvbnRhaW5lcjplLG92ZXJsYXk6bn19fSx7a2V5Olwic2Nyb2xsVmVydGljYWxcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKHRoaXMuaW5TY3JvbGxab25lJiZ0aGlzLm1vdXNlZG93bil7dmFyIG49d2luZG93LnBhZ2VZT2Zmc2V0O3dpbmRvdy5zY3JvbGxCeSgwLHQpLHRoaXMubW91c2VZKz13aW5kb3cucGFnZVlPZmZzZXQtbixzZXRUaW1lb3V0KChmdW5jdGlvbigpe2Uuc2Nyb2xsVmVydGljYWwodCl9KSwwKX19fSx7a2V5OlwiY2hhbmdpbmdSZWN0YW5nbGVcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih0aGlzLm1vdXNlZG93bil7dm9pZCAwIT09dC5wYWdlWSYmKHRoaXMubW91c2VYPXQucGFnZVgsdGhpcy5tb3VzZVk9dC5wYWdlWSk7dmFyIGU9dGhpcy5nZW5JbmZvRm9yTW91c2VTZWxlY3Rpb24oKSxuPWUucmlnaHRQb3Msbz1lLmxlZnRQb3Mscj1lLmluZGV4LGk9dGhpcy5zdGFydFg+biYmdGhpcy5tb3VzZVg+bixhPXRoaXMuc3RhcnRYPG8mJnRoaXMubW91c2VYPG87dGhpcy5yZWN0Q3Jvc3Nlc0Jsb2Nrcz0hKGl8fGEpLHRoaXMuaXNSZWN0U2VsZWN0aW9uQWN0aXZhdGVkfHwodGhpcy5yZWN0Q3Jvc3Nlc0Jsb2Nrcz0hMSx0aGlzLmlzUmVjdFNlbGVjdGlvbkFjdGl2YXRlZD0hMCx0aGlzLnNocmlua1JlY3RhbmdsZVRvUG9pbnQoKSx0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUuZGlzcGxheT1cImJsb2NrXCIpLHRoaXMudXBkYXRlUmVjdGFuZ2xlU2l6ZSgpLHZvaWQgMCE9PXImJih0aGlzLnRyeVNlbGVjdE5leHRCbG9jayhyKSx0aGlzLmludmVyc2VTZWxlY3Rpb24oKSxmLmRlZmF1bHQuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCksdC5wcmV2ZW50RGVmYXVsdCgpKX19fSx7a2V5Olwic2hyaW5rUmVjdGFuZ2xlVG9Qb2ludFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmxlZnQ9XCJcIi5jb25jYXQodGhpcy5zdGFydFgtd2luZG93LnBhZ2VYT2Zmc2V0LFwicHhcIiksdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLnRvcD1cIlwiLmNvbmNhdCh0aGlzLnN0YXJ0WS13aW5kb3cucGFnZVlPZmZzZXQsXCJweFwiKSx0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUuYm90dG9tPVwiY2FsYygxMDAlIC0gXCIuY29uY2F0KHRoaXMuc3RhcnRZLXdpbmRvdy5wYWdlWU9mZnNldCxcInB4XCIpLHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5yaWdodD1cImNhbGMoMTAwJSAtIFwiLmNvbmNhdCh0aGlzLnN0YXJ0WC13aW5kb3cucGFnZVhPZmZzZXQsXCJweFwiKX19LHtrZXk6XCJpbnZlcnNlU2VsZWN0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUluZGV4KHRoaXMuc3RhY2tPZlNlbGVjdGVkWzBdKS5zZWxlY3RlZDtpZih0aGlzLnJlY3RDcm9zc2VzQmxvY2tzJiYhdCl7dmFyIGUsbj1oKHRoaXMuc3RhY2tPZlNlbGVjdGVkKTt0cnl7Zm9yKG4ucygpOyEoZT1uLm4oKSkuZG9uZTspe3ZhciBvPWUudmFsdWU7dGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uc2VsZWN0QmxvY2tCeUluZGV4KG8pfX1jYXRjaCh0KXtuLmUodCl9ZmluYWxseXtuLmYoKX19aWYoIXRoaXMucmVjdENyb3NzZXNCbG9ja3MmJnQpe3ZhciByLGk9aCh0aGlzLnN0YWNrT2ZTZWxlY3RlZCk7dHJ5e2ZvcihpLnMoKTshKHI9aS5uKCkpLmRvbmU7KXt2YXIgYT1yLnZhbHVlO3RoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLnVuU2VsZWN0QmxvY2tCeUluZGV4KGEpfX1jYXRjaCh0KXtpLmUodCl9ZmluYWxseXtpLmYoKX19fX0se2tleTpcInVwZGF0ZVJlY3RhbmdsZVNpemVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubW91c2VZPj10aGlzLnN0YXJ0WT8odGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLnRvcD1cIlwiLmNvbmNhdCh0aGlzLnN0YXJ0WS13aW5kb3cucGFnZVlPZmZzZXQsXCJweFwiKSx0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUuYm90dG9tPVwiY2FsYygxMDAlIC0gXCIuY29uY2F0KHRoaXMubW91c2VZLXdpbmRvdy5wYWdlWU9mZnNldCxcInB4XCIpKToodGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmJvdHRvbT1cImNhbGMoMTAwJSAtIFwiLmNvbmNhdCh0aGlzLnN0YXJ0WS13aW5kb3cucGFnZVlPZmZzZXQsXCJweFwiKSx0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUudG9wPVwiXCIuY29uY2F0KHRoaXMubW91c2VZLXdpbmRvdy5wYWdlWU9mZnNldCxcInB4XCIpKSx0aGlzLm1vdXNlWD49dGhpcy5zdGFydFg/KHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5sZWZ0PVwiXCIuY29uY2F0KHRoaXMuc3RhcnRYLXdpbmRvdy5wYWdlWE9mZnNldCxcInB4XCIpLHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5yaWdodD1cImNhbGMoMTAwJSAtIFwiLmNvbmNhdCh0aGlzLm1vdXNlWC13aW5kb3cucGFnZVhPZmZzZXQsXCJweFwiKSk6KHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5yaWdodD1cImNhbGMoMTAwJSAtIFwiLmNvbmNhdCh0aGlzLnN0YXJ0WC13aW5kb3cucGFnZVhPZmZzZXQsXCJweFwiKSx0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUubGVmdD1cIlwiLmNvbmNhdCh0aGlzLm1vdXNlWC13aW5kb3cucGFnZVhPZmZzZXQsXCJweFwiKSl9fSx7a2V5OlwiZ2VuSW5mb0Zvck1vdXNlU2VsZWN0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdCxlPWRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGgvMixuPXRoaXMubW91c2VZLXdpbmRvdy5wYWdlWU9mZnNldCxvPWRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoZSxuKSxyPXRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5Q2hpbGROb2RlKG8pO3ZvaWQgMCE9PXImJih0PXRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3MuZmluZEluZGV4KChmdW5jdGlvbih0KXtyZXR1cm4gdC5ob2xkZXI9PT1yLmhvbGRlcn0pKSk7dmFyIGk9dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmxhc3RCbG9jay5ob2xkZXIucXVlcnlTZWxlY3RvcihcIi5cIitkLmRlZmF1bHQuQ1NTLmNvbnRlbnQpLGE9TnVtYmVyLnBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGkpLndpZHRoLDEwKS8yO3JldHVybntpbmRleDp0LGxlZnRQb3M6ZS1hLHJpZ2h0UG9zOmUrYX19fSx7a2V5OlwiYWRkQmxvY2tJblNlbGVjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMucmVjdENyb3NzZXNCbG9ja3MmJnRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLnNlbGVjdEJsb2NrQnlJbmRleCh0KSx0aGlzLnN0YWNrT2ZTZWxlY3RlZC5wdXNoKHQpfX0se2tleTpcInRyeVNlbGVjdE5leHRCbG9ja1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10aGlzLnN0YWNrT2ZTZWxlY3RlZFt0aGlzLnN0YWNrT2ZTZWxlY3RlZC5sZW5ndGgtMV09PT10LG89dGhpcy5zdGFja09mU2VsZWN0ZWQubGVuZ3RoO2lmKCFuKXt2YXIgcj10aGlzLnN0YWNrT2ZTZWxlY3RlZFtvLTFdLXRoaXMuc3RhY2tPZlNlbGVjdGVkW28tMl0+MCxpPTA7bz4xJiYoaT1yPzE6LTEpO3ZhciBhPXQ+dGhpcy5zdGFja09mU2VsZWN0ZWRbby0xXSYmMT09PWkscz10PHRoaXMuc3RhY2tPZlNlbGVjdGVkW28tMV0mJi0xPT09aSxjPSEoYXx8c3x8MD09PWkpO2lmKGN8fCEodD50aGlzLnN0YWNrT2ZTZWxlY3RlZFtvLTFdfHx2b2lkIDA9PT10aGlzLnN0YWNrT2ZTZWxlY3RlZFtvLTFdKSl7aWYoIWMmJnQ8dGhpcy5zdGFja09mU2VsZWN0ZWRbby0xXSlmb3IodmFyIGw9dGhpcy5zdGFja09mU2VsZWN0ZWRbby0xXS0xO2w+PXQ7bC0tKXRoaXMuYWRkQmxvY2tJblNlbGVjdGlvbihsKTtlbHNlIGlmKGMpe3ZhciB1LGY9by0xO2Zvcih1PXQ+dGhpcy5zdGFja09mU2VsZWN0ZWRbby0xXT9mdW5jdGlvbigpe3JldHVybiB0PmUuc3RhY2tPZlNlbGVjdGVkW2ZdfTpmdW5jdGlvbigpe3JldHVybiB0PGUuc3RhY2tPZlNlbGVjdGVkW2ZdfTt1KCk7KXRoaXMucmVjdENyb3NzZXNCbG9ja3MmJnRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLnVuU2VsZWN0QmxvY2tCeUluZGV4KHRoaXMuc3RhY2tPZlNlbGVjdGVkW2ZdKSx0aGlzLnN0YWNrT2ZTZWxlY3RlZC5wb3AoKSxmLS19fWVsc2UgZm9yKHZhciBkPXRoaXMuc3RhY2tPZlNlbGVjdGVkW28tMV0rMXx8dDtkPD10O2QrKyl0aGlzLmFkZEJsb2NrSW5TZWxlY3Rpb24oZCl9fX1dLFt7a2V5OlwiQ1NTXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue292ZXJsYXk6XCJjb2RleC1lZGl0b3Itb3ZlcmxheVwiLG92ZXJsYXlDb250YWluZXI6XCJjb2RleC1lZGl0b3Itb3ZlcmxheV9fY29udGFpbmVyXCIscmVjdDpcImNvZGV4LWVkaXRvci1vdmVybGF5X19yZWN0YW5nbGVcIix0b3BTY3JvbGxab25lOlwiY29kZXgtZWRpdG9yLW92ZXJsYXlfX3Njcm9sbC16b25lLS10b3BcIixib3R0b21TY3JvbGxab25lOlwiY29kZXgtZWRpdG9yLW92ZXJsYXlfX3Njcm9sbC16b25lLS1ib3R0b21cIn19fV0pLG99KGwuZGVmYXVsdCk7by5kZWZhdWx0PXkseS5kaXNwbGF5TmFtZT1cIlJlY3RhbmdsZVNlbGVjdGlvblwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMjEpLG4oMjIpLG4oMiksbigzKSxuKDUpLG4oNiksbig0KSxuKDcpLG4oOCldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHA9bigxMyksaD1uKDEpO2Z1bmN0aW9uIHYoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPWgociksaT1oKGkpLGE9aChhKSxzPWgocyksYz1oKGMpLGw9aChsKSx1PWgodSksZj1oKGYpLGQ9cChkKTt2YXIgZz1mdW5jdGlvbih0KXsoMCxjLmRlZmF1bHQpKHAsdCk7dmFyIGUsbixvLGY9KGU9cCxmdW5jdGlvbigpe3ZhciB0LG49KDAsdS5kZWZhdWx0KShlKTtpZih2KCkpe3ZhciBvPSgwLHUuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAsbC5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gcCgpe3JldHVybigwLGEuZGVmYXVsdCkodGhpcyxwKSxmLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4oMCxzLmRlZmF1bHQpKHAsW3trZXk6XCJyZW5kZXJcIix2YWx1ZToobz0oMCxpLmRlZmF1bHQpKHIuZGVmYXVsdC5tYXJrKChmdW5jdGlvbiB0KGUpe3ZhciBuLG8saT10aGlzO3JldHVybiByLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIG49ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntmdW5jdGlvbjpmdW5jdGlvbigpe3JldHVybiBpLmluc2VydEJsb2NrKHQpfX19KSksdC5uZXh0PTMsZC5zZXF1ZW5jZShuKTtjYXNlIDM6cmV0dXJuIG89dC5zZW50LHRoaXMuRWRpdG9yLlVJLmNoZWNrRW1wdGluZXNzKCksdC5hYnJ1cHQoXCJyZXR1cm5cIixvKTtjYXNlIDY6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKHQpe3JldHVybiBvLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiaW5zZXJ0QmxvY2tcIix2YWx1ZToobj0oMCxpLmRlZmF1bHQpKHIuZGVmYXVsdC5tYXJrKChmdW5jdGlvbiB0KGUpe3ZhciBuLG8saSxhLHMsYyxsLHU7cmV0dXJuIHIuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDppZihuPXRoaXMuRWRpdG9yLG89bi5Ub29scyxpPW4uQmxvY2tNYW5hZ2VyLGE9ZS50eXBlLHM9ZS5kYXRhLCEoYSBpbiBvLmF2YWlsYWJsZSkpe3QubmV4dD0xNDticmVha310LnByZXY9NCxpLmluc2VydCh7dG9vbDphLGRhdGE6c30pLHQubmV4dD0xMjticmVhaztjYXNlIDg6dGhyb3cgdC5wcmV2PTgsdC50MD10LmNhdGNoKDQpLGQubG9nKFwiQmxvY2sgwqtcIi5jb25jYXQoYSxcIsK7IHNraXBwZWQgYmVjYXVzZSBvZiBwbHVnaW5zIGVycm9yXCIpLFwid2FyblwiLHMpLEVycm9yKHQudDApO2Nhc2UgMTI6dC5uZXh0PTE5O2JyZWFrO2Nhc2UgMTQ6Yz17c2F2ZWREYXRhOnt0eXBlOmEsZGF0YTpzfSx0aXRsZTphfSxhIGluIG8udW5hdmFpbGFibGUmJihsPW8udW5hdmFpbGFibGVbYV0udG9vbGJveCx1PW8uZ2V0VG9vbFNldHRpbmdzKGEpLnRvb2xib3gsYy50aXRsZT1sLnRpdGxlfHx1JiZ1LnRpdGxlfHxjLnRpdGxlKSxpLmluc2VydCh7dG9vbDpvLnN0dWJUb29sLGRhdGE6Y30pLnN0cmV0Y2hlZD0hMCxkLmxvZyhcIlRvb2wgwqtcIi5jb25jYXQoYSxcIsK7IGlzIG5vdCBmb3VuZC4gQ2hlY2sgJ3Rvb2xzJyBwcm9wZXJ0eSBhdCB5b3VyIGluaXRpYWwgRWRpdG9yLmpzIGNvbmZpZy5cIiksXCJ3YXJuXCIpO2Nhc2UgMTk6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyxbWzQsOF1dKX0pKSksZnVuY3Rpb24odCl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9XSkscH0oZi5kZWZhdWx0KTtvLmRlZmF1bHQ9ZyxnLmRpc3BsYXlOYW1lPVwiUmVuZGVyZXJcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDM5KSxuKDIpLG4oMyksbig1KSxuKDYpLG4oNCksbig3KSxuKDgpLG4oMzg2KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhLHMsYyxsLHUsZixkKXtcInVzZSBzdHJpY3RcIjt2YXIgcD1uKDEzKSxoPW4oMSk7ZnVuY3Rpb24gdigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9aChyKSxpPWgoaSksYT1oKGEpLHM9aChzKSxjPWgoYyksbD1oKGwpLHU9aCh1KSxmPXAoZiksZD1oKGQpO3ZhciBnPWZ1bmN0aW9uKHQpeygwLHMuZGVmYXVsdCkobyx0KTt2YXIgZSxuPShlPW8sZnVuY3Rpb24oKXt2YXIgdCxuPSgwLGwuZGVmYXVsdCkoZSk7aWYodigpKXt2YXIgbz0oMCxsLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLGMuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIG8oKXt2YXIgdDtyZXR1cm4oMCxpLmRlZmF1bHQpKHRoaXMsbyksKHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cykpLmNvbmZpZ0NhY2hlPXt9LHQuaW5saW5lVG9vbHNDb25maWdDYWNoZT1udWxsLHR9cmV0dXJuKDAsYS5kZWZhdWx0KShvLFt7a2V5Olwic2FuaXRpemVCbG9ja3NcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiB0Lm1hcCgoZnVuY3Rpb24odCl7dmFyIG49ZS5jb21wb3NlVG9vbENvbmZpZyh0LnRvb2wpO3JldHVybiBmLmlzRW1wdHkobil8fCh0LmRhdGE9ZS5kZWVwU2FuaXRpemUodC5kYXRhLG4pKSx0fSkpfX0se2tleTpcImRlZXBTYW5pdGl6ZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/dGhpcy5jbGVhbkFycmF5KHQsZSk6Zi5pc09iamVjdCh0KT90aGlzLmNsZWFuT2JqZWN0KHQsZSk6Zi5pc1N0cmluZyh0KT90aGlzLmNsZWFuT25lSXRlbSh0LGUpOnR9fSx7a2V5OlwiY2xlYW5cIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30sbj17dGFnczplfSxvPXRoaXMuY3JlYXRlSFRNTEphbml0b3JJbnN0YW5jZShuKTtyZXR1cm4gby5jbGVhbih0KX19LHtrZXk6XCJjb21wb3NlVG9vbENvbmZpZ1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHRoaXMuY29uZmlnQ2FjaGVbdF0pcmV0dXJuIHRoaXMuY29uZmlnQ2FjaGVbdF07dmFyIGU9dGhpcy5FZGl0b3IuVG9vbHMuSU5URVJOQUxfU0VUVElOR1MuU0FOSVRJWkVfQ09ORklHLG49dGhpcy5FZGl0b3IuVG9vbHMuYXZhaWxhYmxlW3RdLG89dGhpcy5nZXRJbmxpbmVUb29sc0NvbmZpZyh0KTtpZighbi5zYW5pdGl6ZXx8bltlXSYmZi5pc0VtcHR5KG5bZV0pKXJldHVybiBvO3ZhciByPW4uc2FuaXRpemUsaT17fTtmb3IodmFyIGEgaW4gcilpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocixhKSl7dmFyIHM9clthXTtmLmlzT2JqZWN0KHMpP2lbYV09T2JqZWN0LmFzc2lnbih7fSxvLHMpOmlbYV09c31yZXR1cm4gdGhpcy5jb25maWdDYWNoZVt0XT1pLGl9fSx7a2V5OlwiZ2V0SW5saW5lVG9vbHNDb25maWdcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLkVkaXRvci5Ub29scyxuPWUuZ2V0VG9vbFNldHRpbmdzKHQpLmlubGluZVRvb2xiYXJ8fFtdLG89e307cmV0dXJuIGYuaXNCb29sZWFuKG4pJiZuP289dGhpcy5nZXRBbGxJbmxpbmVUb29sc0NvbmZpZygpOm4ubWFwKChmdW5jdGlvbih0KXtvPU9iamVjdC5hc3NpZ24obyxlLmlubGluZVt0XVtlLklOVEVSTkFMX1NFVFRJTkdTLlNBTklUSVpFX0NPTkZJR10pfSkpLG8uYnI9ITAsby53YnI9ITAsb319LHtrZXk6XCJnZXRBbGxJbmxpbmVUb29sc0NvbmZpZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5FZGl0b3IuVG9vbHM7aWYodGhpcy5pbmxpbmVUb29sc0NvbmZpZ0NhY2hlKXJldHVybiB0aGlzLmlubGluZVRvb2xzQ29uZmlnQ2FjaGU7dmFyIGU9e307cmV0dXJuIE9iamVjdC5lbnRyaWVzKHQuaW5saW5lKS5mb3JFYWNoKChmdW5jdGlvbihuKXt2YXIgbz0oMCxyLmRlZmF1bHQpKG4sMilbMV07T2JqZWN0LmFzc2lnbihlLG9bdC5JTlRFUk5BTF9TRVRUSU5HUy5TQU5JVElaRV9DT05GSUddKX0pKSx0aGlzLmlubGluZVRvb2xzQ29uZmlnQ2FjaGU9ZSx0aGlzLmlubGluZVRvb2xzQ29uZmlnQ2FjaGV9fSx7a2V5OlwiY2xlYW5BcnJheVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztyZXR1cm4gdC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBuLmRlZXBTYW5pdGl6ZSh0LGUpfSkpfX0se2tleTpcImNsZWFuT2JqZWN0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj17fTtmb3IodmFyIG8gaW4gdClpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxvKSl7dmFyIHI9dFtvXSxpPXRoaXMuaXNSdWxlKGVbb10pP2Vbb106ZTtuW29dPXRoaXMuZGVlcFNhbml0aXplKHIsaSl9cmV0dXJuIG59fSx7a2V5OlwiY2xlYW5PbmVJdGVtXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gZi5pc09iamVjdChlKT90aGlzLmNsZWFuKHQsZSk6ITE9PT1lP3RoaXMuY2xlYW4odCx7fSk6dH19LHtrZXk6XCJpc1J1bGVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gZi5pc09iamVjdCh0KXx8Zi5pc0Jvb2xlYW4odCl8fGYuaXNGdW5jdGlvbih0KX19LHtrZXk6XCJjcmVhdGVIVE1MSmFuaXRvckluc3RhbmNlXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHQ/bmV3IGQuZGVmYXVsdCh0KTpudWxsfX1dKSxvfSh1LmRlZmF1bHQpO28uZGVmYXVsdD1nLGcuZGlzcGxheU5hbWU9XCJTYW5pdGl6ZXJcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIxKSxuKDIyKSxuKDIpLG4oMyksbig1KSxuKDYpLG4oNCksbig3KSxuKDgpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyxjLGwsdSxmLGQpe1widXNlIHN0cmljdFwiO3ZhciBwPW4oMTMpLGg9bigxKTtmdW5jdGlvbiB2KCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2godCl7cmV0dXJuITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1oKHIpLGk9aChpKSxhPWgoYSkscz1oKHMpLGM9aChjKSxsPWgobCksdT1oKHUpLGY9aChmKSxkPXAoZCk7dmFyIGc9ZnVuY3Rpb24odCl7KDAsYy5kZWZhdWx0KShwLHQpO3ZhciBlLG4sbyxmPShlPXAsZnVuY3Rpb24oKXt2YXIgdCxuPSgwLHUuZGVmYXVsdCkoZSk7aWYodigpKXt2YXIgbz0oMCx1LmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLGwuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIHAoKXtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMscCksZi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuKDAscy5kZWZhdWx0KShwLFt7a2V5Olwic2F2ZVwiLHZhbHVlOihvPSgwLGkuZGVmYXVsdCkoci5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoKXt2YXIgZSxuLG8saSxhLHMsYyxsLHU9dGhpcztyZXR1cm4gci5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiBlPXRoaXMuRWRpdG9yLG49ZS5CbG9ja01hbmFnZXIsbz1lLlNhbml0aXplcixpPWUuTW9kaWZpY2F0aW9uc09ic2VydmVyLGE9bi5ibG9ja3Mscz1bXSxpLmRpc2FibGUoKSx0LnByZXY9MyxhLmZvckVhY2goKGZ1bmN0aW9uKHQpe3MucHVzaCh1LmdldFNhdmVkRGF0YSh0KSl9KSksdC5uZXh0PTcsUHJvbWlzZS5hbGwocyk7Y2FzZSA3OnJldHVybiBjPXQuc2VudCx0Lm5leHQ9MTAsby5zYW5pdGl6ZUJsb2NrcyhjKTtjYXNlIDEwOnJldHVybiBsPXQuc2VudCx0LmFicnVwdChcInJldHVyblwiLHRoaXMubWFrZU91dHB1dChsKSk7Y2FzZSAxMjpyZXR1cm4gdC5wcmV2PTEyLGkuZW5hYmxlKCksdC5maW5pc2goMTIpO2Nhc2UgMTU6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyxbWzMsLDEyLDE1XV0pfSkpKSxmdW5jdGlvbigpe3JldHVybiBvLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiZ2V0U2F2ZWREYXRhXCIsdmFsdWU6KG49KDAsaS5kZWZhdWx0KShyLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdChlKXt2YXIgbixvO3JldHVybiByLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHQubmV4dD0yLGUuc2F2ZSgpO2Nhc2UgMjppZihuPXQuc2VudCx0LnQwPW4sIXQudDApe3QubmV4dD04O2JyZWFrfXJldHVybiB0Lm5leHQ9NyxlLnZhbGlkYXRlKG4uZGF0YSk7Y2FzZSA3OnQudDA9dC5zZW50O2Nhc2UgODpyZXR1cm4gbz10LnQwLHQuYWJydXB0KFwicmV0dXJuXCIsT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LG4pLHtpc1ZhbGlkOm99KSk7Y2FzZSAxMDpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCl9KSkpLGZ1bmN0aW9uKHQpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwibWFrZU91dHB1dFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj0wLG89W107cmV0dXJuIGQubG9nKFwiW0VkaXRvci5qcyBzYXZpbmddOlwiLFwiZ3JvdXBDb2xsYXBzZWRcIiksdC5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgcj10LnRvb2wsaT10LmRhdGEsYT10LnRpbWUscz10LmlzVmFsaWQ7aWYobis9YSxkLmxvZyhcIlwiLmNvbmNhdChyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Iuc2xpY2UoMSkpLFwiZ3JvdXBcIiksIXMpcmV0dXJuIGQubG9nKFwiQmxvY2sgwqtcIi5jb25jYXQocixcIsK7IHNraXBwZWQgYmVjYXVzZSBzYXZlZCBkYXRhIGlzIGludmFsaWRcIikpLHZvaWQgZC5sb2codm9pZCAwLFwiZ3JvdXBFbmRcIik7ZC5sb2coaSksZC5sb2codm9pZCAwLFwiZ3JvdXBFbmRcIiksciE9PWUuRWRpdG9yLlRvb2xzLnN0dWJUb29sP28ucHVzaCh7dHlwZTpyLGRhdGE6aX0pOm8ucHVzaChpKX0pKSxkLmxvZyhcIlRvdGFsXCIsXCJsb2dcIixuKSxkLmxvZyh2b2lkIDAsXCJncm91cEVuZFwiKSx7dGltZTorbmV3IERhdGUsYmxvY2tzOm8sdmVyc2lvbjpcIjIuMTkuM1wifX19XSkscH0oZi5kZWZhdWx0KTtvLmRlZmF1bHQ9ZyxnLmRpc3BsYXlOYW1lPVwiU2F2ZXJcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbig1KSxuKDYpLG4oNCksbig3KSxuKDE1KSxuKDYwKSxuKDgpLG4oMjUpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyxjLGwsdSxmLGQscCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGg9bigxMyksdj1uKDEpO2Z1bmN0aW9uIGcoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPXYociksaT12KGkpLGE9dihhKSxzPXYocyksYz12KGMpLGw9dihsKSx1PXYodSksZj12KGYpLGQ9aChkKSxwPXYocCk7dmFyIHk9ZnVuY3Rpb24odCl7KDAsYS5kZWZhdWx0KShvLHQpO3ZhciBlLG49KGU9byxmdW5jdGlvbigpe3ZhciB0LG49KDAsYy5kZWZhdWx0KShlKTtpZihnKCkpe3ZhciBvPSgwLGMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAscy5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gbygpe3ZhciB0O3JldHVybigwLHIuZGVmYXVsdCkodGhpcyxvKSwodD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkuYnV0dG9ucz1bXSx0LmZsaXBwZXI9bnVsbCx0LnNlbGVjdGlvbj1uZXcgcC5kZWZhdWx0LHR9cmV0dXJuKDAsaS5kZWZhdWx0KShvLFt7a2V5OlwibWFrZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ub2Rlcy53cmFwcGVyPXUuZGVmYXVsdC5tYWtlKFwiZGl2XCIsdGhpcy5DU1Mud3JhcHBlciksdGhpcy5ub2Rlcy50b29sU2V0dGluZ3M9dS5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0aGlzLkNTUy50b29sU2V0dGluZ3MpLHRoaXMubm9kZXMuZGVmYXVsdFNldHRpbmdzPXUuZGVmYXVsdC5tYWtlKFwiZGl2XCIsdGhpcy5DU1MuZGVmYXVsdFNldHRpbmdzKSx1LmRlZmF1bHQuYXBwZW5kKHRoaXMubm9kZXMud3JhcHBlcixbdGhpcy5ub2Rlcy50b29sU2V0dGluZ3MsdGhpcy5ub2Rlcy5kZWZhdWx0U2V0dGluZ3NdKSx0aGlzLmVuYWJsZUZsaXBwZXIoKX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmZsaXBwZXImJih0aGlzLmZsaXBwZXIuZGVhY3RpdmF0ZSgpLHRoaXMuZmxpcHBlcj1udWxsKSx0aGlzLnJlbW92ZUFsbE5vZGVzKCl9fSx7a2V5Olwib3BlblwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5hZGQodGhpcy5DU1Mud3JhcHBlck9wZW5lZCksdGhpcy5zZWxlY3Rpb24uc2F2ZSgpLHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2suc2VsZWN0ZWQ9ITAsdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJDYWNoZSgpLHRoaXMuYWRkVG9vbFNldHRpbmdzKCksdGhpcy5hZGREZWZhdWx0U2V0dGluZ3MoKSx0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdCh0aGlzLmV2ZW50cy5vcGVuZWQpLHRoaXMuZmxpcHBlci5hY3RpdmF0ZSh0aGlzLmJsb2NrVHVuZXNCdXR0b25zKX19LHtrZXk6XCJjbG9zZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5DU1Mud3JhcHBlck9wZW5lZCkscC5kZWZhdWx0LmlzQXRFZGl0b3J8fHRoaXMuc2VsZWN0aW9uLnJlc3RvcmUoKSx0aGlzLnNlbGVjdGlvbi5jbGVhclNhdmVkKCksIXRoaXMuRWRpdG9yLkNyb3NzQmxvY2tTZWxlY3Rpb24uaXNDcm9zc0Jsb2NrU2VsZWN0aW9uU3RhcnRlZCYmdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jayYmKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2suc2VsZWN0ZWQ9ITEpLHRoaXMubm9kZXMudG9vbFNldHRpbmdzLmlubmVySFRNTD1cIlwiLHRoaXMubm9kZXMuZGVmYXVsdFNldHRpbmdzLmlubmVySFRNTD1cIlwiLHRoaXMuZXZlbnRzRGlzcGF0Y2hlci5lbWl0KHRoaXMuZXZlbnRzLmNsb3NlZCksdGhpcy5idXR0b25zPVtdLHRoaXMuZmxpcHBlci5kZWFjdGl2YXRlKCl9fSx7a2V5OlwiYWRkVG9vbFNldHRpbmdzXCIsdmFsdWU6ZnVuY3Rpb24oKXtkLmlzRnVuY3Rpb24odGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay50b29sLnJlbmRlclNldHRpbmdzKSYmdS5kZWZhdWx0LmFwcGVuZCh0aGlzLm5vZGVzLnRvb2xTZXR0aW5ncyx0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLnRvb2wucmVuZGVyU2V0dGluZ3MoKSl9fSx7a2V5OlwiYWRkRGVmYXVsdFNldHRpbmdzXCIsdmFsdWU6ZnVuY3Rpb24oKXt1LmRlZmF1bHQuYXBwZW5kKHRoaXMubm9kZXMuZGVmYXVsdFNldHRpbmdzLHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sucmVuZGVyVHVuZXMoKSl9fSx7a2V5OlwiZW5hYmxlRmxpcHBlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmZsaXBwZXI9bmV3IGYuZGVmYXVsdCh7Zm9jdXNlZEl0ZW1DbGFzczp0aGlzLkNTUy5mb2N1c2VkQnV0dG9uLGFjdGl2YXRlQ2FsbGJhY2s6ZnVuY3Rpb24oZSl7ZSYmdS5kZWZhdWx0LmNhblNldENhcmV0KGUpP3QuY2xvc2UoKTpkLmRlbGF5KChmdW5jdGlvbigpe3QuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sodC5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jayl9KSw1MCkoKX19KX19LHtrZXk6XCJldmVudHNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57b3BlbmVkOlwiYmxvY2stc2V0dGluZ3Mtb3BlbmVkXCIsY2xvc2VkOlwiYmxvY2stc2V0dGluZ3MtY2xvc2VkXCJ9fX0se2tleTpcIkNTU1wiLGdldDpmdW5jdGlvbigpe3JldHVybnt3cmFwcGVyOlwiY2Utc2V0dGluZ3NcIix3cmFwcGVyT3BlbmVkOlwiY2Utc2V0dGluZ3MtLW9wZW5lZFwiLHRvb2xTZXR0aW5nczpcImNlLXNldHRpbmdzX19wbHVnaW4tem9uZVwiLGRlZmF1bHRTZXR0aW5nczpcImNlLXNldHRpbmdzX19kZWZhdWx0LXpvbmVcIixidXR0b246XCJjZS1zZXR0aW5nc19fYnV0dG9uXCIsZm9jdXNlZEJ1dHRvbjpcImNlLXNldHRpbmdzX19idXR0b24tLWZvY3VzZWRcIixmb2N1c2VkQnV0dG9uQW5pbWF0ZWQ6XCJjZS1zZXR0aW5nc19fYnV0dG9uLS1mb2N1c2VkLWFuaW1hdGVkXCJ9fX0se2tleTpcIm9wZW5lZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuQ1NTLndyYXBwZXJPcGVuZWQpfX0se2tleTpcImJsb2NrVHVuZXNCdXR0b25zXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuRWRpdG9yLlN0eWxlc0FQSTtpZigwIT09dGhpcy5idXR0b25zLmxlbmd0aClyZXR1cm4gdGhpcy5idXR0b25zO3ZhciBuPXRoaXMubm9kZXMudG9vbFNldHRpbmdzLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIuY29uY2F0KGUuY2xhc3Nlcy5zZXR0aW5nc0J1dHRvbixcIiwgXCIpLmNvbmNhdCh1LmRlZmF1bHQuYWxsSW5wdXRzU2VsZWN0b3IpKSxvPXRoaXMubm9kZXMuZGVmYXVsdFNldHRpbmdzLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIuY29uY2F0KHRoaXMuQ1NTLmJ1dHRvbikpO3JldHVybiBuLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuYnV0dG9ucy5wdXNoKGUpfSkpLG8uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dC5idXR0b25zLnB1c2goZSl9KSksdGhpcy5idXR0b25zfX1dKSxvfShsLmRlZmF1bHQpO28uZGVmYXVsdD15LHkuZGlzcGxheU5hbWU9XCJCbG9ja1NldHRpbmdzXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigzOSksbigyMSksbigyMiksbig1OCksbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyksbigxNSksbig4KSxuKDYwKSxuKDU5KSxuKDgxKV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhLHMsYyxsLHUsZixkLHAsaCx2LGcseSxiKXtcInVzZSBzdHJpY3RcIjt2YXIgbT1uKDEzKSxrPW4oMSk7ZnVuY3Rpb24geCgpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9ayhyKSxpPWsoaSksYT1rKGEpLHM9ayhzKSxjPWsoYyksbD1rKGwpLHU9ayh1KSxmPWsoZiksZD1rKGQpLHA9ayhwKSxoPWsoaCksdj1tKHYpLGc9ayhnKSx5PWsoeSk7dmFyIFM9ZnVuY3Rpb24odCl7KDAsdS5kZWZhdWx0KShwLHQpO3ZhciBlLG4sbz0oZT1wLGZ1bmN0aW9uKCl7dmFyIHQsbj0oMCxkLmRlZmF1bHQpKGUpO2lmKHgoKSl7dmFyIG89KDAsZC5kZWZhdWx0KSh0aGlzKS5jb25zdHJ1Y3Rvcjt0PVJlZmxlY3QuY29uc3RydWN0KG4sYXJndW1lbnRzLG8pfWVsc2UgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4oMCxmLmRlZmF1bHQpKHRoaXMsdCl9KTtmdW5jdGlvbiBwKCl7dmFyIHQ7cmV0dXJuKDAsYy5kZWZhdWx0KSh0aGlzLHApLCh0PW8uYXBwbHkodGhpcyxhcmd1bWVudHMpKS5vcGVuZWQ9ITEsdC50b29scz17fSx0LmZsaXBwZXI9bnVsbCx0LnRvZ2dsaW5nQ2FsbGJhY2s9bnVsbCx0fXJldHVybigwLGwuZGVmYXVsdCkocCxbe2tleTpcIm1ha2VcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubm9kZXMud3JhcHBlcj1oLmRlZmF1bHQubWFrZShcImRpdlwiLFtwLkNTUy5jb252ZXJzaW9uVG9vbGJhcldyYXBwZXJdLmNvbmNhdCgoMCxzLmRlZmF1bHQpKHRoaXMuaXNSdGw/W3RoaXMuRWRpdG9yLlVJLkNTUy5lZGl0b3JSdGxGaXhdOltdKSkpLHRoaXMubm9kZXMudG9vbHM9aC5kZWZhdWx0Lm1ha2UoXCJkaXZcIixwLkNTUy5jb252ZXJzaW9uVG9vbGJhclRvb2xzKTt2YXIgdD1oLmRlZmF1bHQubWFrZShcImRpdlwiLHAuQ1NTLmNvbnZlcnNpb25Ub29sYmFyTGFiZWwse3RleHRDb250ZW50OnkuZGVmYXVsdC51aShiLkkxOG5JbnRlcm5hbE5TLnVpLmlubGluZVRvb2xiYXIuY29udmVydGVyLFwiQ29udmVydCB0b1wiKX0pO3JldHVybiB0aGlzLmFkZFRvb2xzKCksdGhpcy5lbmFibGVGbGlwcGVyKCksaC5kZWZhdWx0LmFwcGVuZCh0aGlzLm5vZGVzLndyYXBwZXIsdCksaC5kZWZhdWx0LmFwcGVuZCh0aGlzLm5vZGVzLndyYXBwZXIsdGhpcy5ub2Rlcy50b29scyksdGhpcy5ub2Rlcy53cmFwcGVyfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuZmxpcHBlciYmKHRoaXMuZmxpcHBlci5kZWFjdGl2YXRlKCksdGhpcy5mbGlwcGVyPW51bGwpLHRoaXMucmVtb3ZlQWxsTm9kZXMoKX19LHtrZXk6XCJ0b2dnbGVcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLm9wZW5lZD90aGlzLmNsb3NlKCk6dGhpcy5vcGVuKCksdi5pc0Z1bmN0aW9uKHQpJiYodGhpcy50b2dnbGluZ0NhbGxiYWNrPXQpfX0se2tleTpcIm9wZW5cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5maWx0ZXJUb29scygpLHRoaXMub3BlbmVkPSEwLHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHAuQ1NTLmNvbnZlcnNpb25Ub29sYmFyU2hvd2VkKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe3QuZmxpcHBlci5hY3RpdmF0ZShPYmplY3QudmFsdWVzKHQudG9vbHMpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIXQuY2xhc3NMaXN0LmNvbnRhaW5zKHAuQ1NTLmNvbnZlcnNpb25Ub29sSGlkZGVuKX0pKSksdC5mbGlwcGVyLmZvY3VzRmlyc3QoKSx2LmlzRnVuY3Rpb24odC50b2dnbGluZ0NhbGxiYWNrKSYmdC50b2dnbGluZ0NhbGxiYWNrKCEwKX0pLDUwKX19LHtrZXk6XCJjbG9zZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5vcGVuZWQ9ITEsdGhpcy5mbGlwcGVyLmRlYWN0aXZhdGUoKSx0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZShwLkNTUy5jb252ZXJzaW9uVG9vbGJhclNob3dlZCksdi5pc0Z1bmN0aW9uKHRoaXMudG9nZ2xpbmdDYWxsYmFjaykmJnRoaXMudG9nZ2xpbmdDYWxsYmFjayghMSl9fSx7a2V5OlwiaGFzVG9vbHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PU9iamVjdC5rZXlzKHRoaXMudG9vbHMpO3JldHVybiEoMT09PXQubGVuZ3RoJiZ0LnNoaWZ0KCk9PT10aGlzLmNvbmZpZy5kZWZhdWx0QmxvY2spfX0se2tleTpcInJlcGxhY2VXaXRoQmxvY2tcIix2YWx1ZToobj0oMCxhLmRlZmF1bHQpKGkuZGVmYXVsdC5tYXJrKChmdW5jdGlvbiB0KGUpe3ZhciBuLG8scixhLHMsYyxsLHUsZixkLHAsaD10aGlzO3JldHVybiBpLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIG49dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay5jbGFzcyxvPXRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2submFtZSx0Lm5leHQ9NCx0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLnNhdmUoKTtjYXNlIDQ6aWYocj10LnNlbnQsYT10aGlzLkVkaXRvci5Ub29scy5JTlRFUk5BTF9TRVRUSU5HUyxzPXIuZGF0YSxvPT09ZSYmKGU9dGhpcy5jb25maWcuZGVmYXVsdEJsb2NrKSxjPXRoaXMuRWRpdG9yLlRvb2xzLnRvb2xzQ2xhc3Nlc1tlXSxsPVwiXCIsdT1uW2EuQ09OVkVSU0lPTl9DT05GSUddLmV4cG9ydCwhdi5pc0Z1bmN0aW9uKHUpKXt0Lm5leHQ9MTU7YnJlYWt9bD11KHMpLHQubmV4dD0yMTticmVhaztjYXNlIDE1OmlmKCF2LmlzU3RyaW5nKHUpKXt0Lm5leHQ9MTk7YnJlYWt9bD1zW3VdLHQubmV4dD0yMTticmVhaztjYXNlIDE5OnJldHVybiB2LmxvZyhcIkNvbnZlcnNpb24gwqtleHBvcnTCuyBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLiBTdHJpbmcgbWVhbnMga2V5IG9mIHNhdmVkIGRhdGEgb2JqZWN0IHRvIGV4cG9ydC4gRnVuY3Rpb24gc2hvdWxkIGV4cG9ydCBwcm9jZXNzZWQgc3RyaW5nIHRvIGV4cG9ydC5cIiksdC5hYnJ1cHQoXCJyZXR1cm5cIik7Y2FzZSAyMTppZihmPXRoaXMuRWRpdG9yLlNhbml0aXplci5jbGVhbihsLGMuc2FuaXRpemUpLGQ9e30scD1jW2EuQ09OVkVSU0lPTl9DT05GSUddLmltcG9ydCwhdi5pc0Z1bmN0aW9uKHApKXt0Lm5leHQ9Mjg7YnJlYWt9ZD1wKGYpLHQubmV4dD0zNDticmVhaztjYXNlIDI4OmlmKCF2LmlzU3RyaW5nKHApKXt0Lm5leHQ9MzI7YnJlYWt9ZFtwXT1mLHQubmV4dD0zNDticmVhaztjYXNlIDMyOnJldHVybiB2LmxvZyhcIkNvbnZlcnNpb24gwqtpbXBvcnTCuyBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nIG9yIGZ1bmN0aW9uLiBTdHJpbmcgbWVhbnMga2V5IG9mIHRvb2wgZGF0YSB0byBpbXBvcnQuIEZ1bmN0aW9uIGFjY2VwdHMgYSBpbXBvcnRlZCBzdHJpbmcgYW5kIHJldHVybiBjb21wb3NlZCB0b29sIGRhdGEuXCIpLHQuYWJydXB0KFwicmV0dXJuXCIpO2Nhc2UgMzQ6dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnJlcGxhY2Uoe3Rvb2w6ZSxkYXRhOmR9KSx0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbigpLHRoaXMuY2xvc2UoKSx0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCksdi5kZWxheSgoZnVuY3Rpb24oKXtoLkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKGguRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2spfSksMTApKCk7Y2FzZSAzOTpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24odCl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJhZGRUb29sc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5FZGl0b3IuVG9vbHMuYmxvY2tUb29scztmb3IodmFyIGUgaW4gdClpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKSl7dmFyIG49dGhpcy5FZGl0b3IuVG9vbHMuSU5URVJOQUxfU0VUVElOR1Msbz10W2VdLHI9b1tuLlRPT0xCT1hdLGk9b1tuLkNPTlZFUlNJT05fQ09ORklHXSxhPXRoaXMuRWRpdG9yLlRvb2xzLlVTRVJfU0VUVElOR1Mscz10aGlzLkVkaXRvci5Ub29scy5nZXRUb29sU2V0dGluZ3MoZSlbYS5UT09MQk9YXSxjPW51bGwhPXM/czpyOyF2LmlzRW1wdHkoYykmJmMuaWNvbiYmaSYmaS5pbXBvcnQmJnRoaXMuYWRkVG9vbChlLGMuaWNvbixjLnRpdGxlKX19fSx7a2V5OlwiYWRkVG9vbFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz10aGlzLHI9aC5kZWZhdWx0Lm1ha2UoXCJkaXZcIixbcC5DU1MuY29udmVyc2lvblRvb2xdKSxzPWguZGVmYXVsdC5tYWtlKFwiZGl2XCIsW3AuQ1NTLmNvbnZlcnNpb25Ub29sSWNvbl0pO3IuZGF0YXNldC50b29sPXQscy5pbm5lckhUTUw9ZSxoLmRlZmF1bHQuYXBwZW5kKHIscyksaC5kZWZhdWx0LmFwcGVuZChyLGguZGVmYXVsdC50ZXh0KHkuZGVmYXVsdC50KGIuSTE4bkludGVybmFsTlMudG9vbE5hbWVzLG58fHYuY2FwaXRhbGl6ZSh0KSkpKSxoLmRlZmF1bHQuYXBwZW5kKHRoaXMubm9kZXMudG9vbHMsciksdGhpcy50b29sc1t0XT1yLHRoaXMubGlzdGVuZXJzLm9uKHIsXCJjbGlja1wiLCgwLGEuZGVmYXVsdCkoaS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIGUoKXtyZXR1cm4gaS5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKGUpe2Zvcig7Oylzd2l0Y2goZS5wcmV2PWUubmV4dCl7Y2FzZSAwOnJldHVybiBlLm5leHQ9MixvLnJlcGxhY2VXaXRoQmxvY2sodCk7Y2FzZSAyOmNhc2VcImVuZFwiOnJldHVybiBlLnN0b3AoKX19KSxlKX0pKSkpfX0se2tleTpcImZpbHRlclRvb2xzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrO09iamVjdC5lbnRyaWVzKHRoaXMudG9vbHMpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBuPSgwLHIuZGVmYXVsdCkoZSwyKSxvPW5bMF0saT1uWzFdO2kuaGlkZGVuPSExLGkuY2xhc3NMaXN0LnRvZ2dsZShwLkNTUy5jb252ZXJzaW9uVG9vbEhpZGRlbixvPT09dC5uYW1lKX0pKX19LHtrZXk6XCJlbmFibGVGbGlwcGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmZsaXBwZXI9bmV3IGcuZGVmYXVsdCh7Zm9jdXNlZEl0ZW1DbGFzczpwLkNTUy5jb252ZXJzaW9uVG9vbEZvY3VzZWR9KX19XSxbe2tleTpcIkNTU1wiLGdldDpmdW5jdGlvbigpe3JldHVybntjb252ZXJzaW9uVG9vbGJhcldyYXBwZXI6XCJjZS1jb252ZXJzaW9uLXRvb2xiYXJcIixjb252ZXJzaW9uVG9vbGJhclNob3dlZDpcImNlLWNvbnZlcnNpb24tdG9vbGJhci0tc2hvd2VkXCIsY29udmVyc2lvblRvb2xiYXJUb29sczpcImNlLWNvbnZlcnNpb24tdG9vbGJhcl9fdG9vbHNcIixjb252ZXJzaW9uVG9vbGJhckxhYmVsOlwiY2UtY29udmVyc2lvbi10b29sYmFyX19sYWJlbFwiLGNvbnZlcnNpb25Ub29sOlwiY2UtY29udmVyc2lvbi10b29sXCIsY29udmVyc2lvblRvb2xIaWRkZW46XCJjZS1jb252ZXJzaW9uLXRvb2wtLWhpZGRlblwiLGNvbnZlcnNpb25Ub29sSWNvbjpcImNlLWNvbnZlcnNpb24tdG9vbF9faWNvblwiLGNvbnZlcnNpb25Ub29sRm9jdXNlZDpcImNlLWNvbnZlcnNpb24tdG9vbC0tZm9jdXNlZFwiLGNvbnZlcnNpb25Ub29sQWN0aXZlOlwiY2UtY29udmVyc2lvbi10b29sLS1hY3RpdmVcIn19fV0pLHB9KHAuZGVmYXVsdCk7by5kZWZhdWx0PVMsUy5kaXNwbGF5TmFtZT1cIkNvbnZlcnNpb25Ub29sYmFyXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2Usbig1OCksbigzOSksbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyksbigxNSksbigyNSksbig4KSxuKDYwKSxuKDU5KSxuKDgxKSxuKDEwOCldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCxwLGgsdixnLHksYil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG09bigxMyksaz1uKDEpO2Z1bmN0aW9uIHgoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPWsociksaT1rKGkpLGE9ayhhKSxzPWsocyksYz1rKGMpLGw9ayhsKSx1PWsodSksZj1rKGYpLGQ9ayhkKSxwPWsocCksaD1tKGgpLHY9ayh2KSxnPWsoZyksYj1rKGIpO3ZhciBTPWZ1bmN0aW9uKHQpeygwLGMuZGVmYXVsdCkobyx0KTt2YXIgZSxuPShlPW8sZnVuY3Rpb24oKXt2YXIgdCxuPSgwLHUuZGVmYXVsdCkoZSk7aWYoeCgpKXt2YXIgbz0oMCx1LmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLGwuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIG8oKXt2YXIgdDtyZXR1cm4oMCxhLmRlZmF1bHQpKHRoaXMsbyksKHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cykpLkNTUz17aW5saW5lVG9vbGJhcjpcImNlLWlubGluZS10b29sYmFyXCIsaW5saW5lVG9vbGJhclNob3dlZDpcImNlLWlubGluZS10b29sYmFyLS1zaG93ZWRcIixpbmxpbmVUb29sYmFyTGVmdE9yaWVudGVkOlwiY2UtaW5saW5lLXRvb2xiYXItLWxlZnQtb3JpZW50ZWRcIixpbmxpbmVUb29sYmFyUmlnaHRPcmllbnRlZDpcImNlLWlubGluZS10b29sYmFyLS1yaWdodC1vcmllbnRlZFwiLGlubGluZVRvb2xiYXJTaG9ydGN1dDpcImNlLWlubGluZS10b29sYmFyX19zaG9ydGN1dFwiLGJ1dHRvbnNXcmFwcGVyOlwiY2UtaW5saW5lLXRvb2xiYXJfX2J1dHRvbnNcIixhY3Rpb25zV3JhcHBlcjpcImNlLWlubGluZS10b29sYmFyX19hY3Rpb25zXCIsaW5saW5lVG9vbEJ1dHRvbjpcImNlLWlubGluZS10b29sXCIsaW5wdXRGaWVsZDpcImNkeC1pbnB1dFwiLGZvY3VzZWRCdXR0b246XCJjZS1pbmxpbmUtdG9vbC0tZm9jdXNlZFwiLGNvbnZlcnNpb25Ub2dnbGVyOlwiY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duXCIsY29udmVyc2lvblRvZ2dsZXJIaWRkZW46XCJjZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tLWhpZGRlblwiLGNvbnZlcnNpb25Ub2dnbGVyQ29udGVudDpcImNlLWlubGluZS10b29sYmFyX19kcm9wZG93bi1jb250ZW50XCIsdG9nZ2xlckFuZEJ1dHRvbnNXcmFwcGVyOlwiY2UtaW5saW5lLXRvb2xiYXJfX3RvZ2dsZXItYW5kLWJ1dHRvbi13cmFwcGVyXCJ9LHQub3BlbmVkPSExLHQudG9vbGJhclZlcnRpY2FsTWFyZ2luPTUsdC5idXR0b25zTGlzdD1udWxsLHQud2lkdGg9MCx0LmZsaXBwZXI9bnVsbCx0LmludGVybmFsVG9vbHM9e30sdH1yZXR1cm4oMCxzLmRlZmF1bHQpKG8sW3trZXk6XCJ0b2dnbGVSZWFkT25seVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3Q/KHRoaXMuZGVzdHJveSgpLHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmRlc3Ryb3koKSk6dGhpcy5tYWtlKCl9fSx7a2V5OlwidHJ5VG9TaG93XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdO3RoaXMuYWxsb3dlZFRvU2hvdygpPyh0aGlzLm1vdmUoKSx0aGlzLm9wZW4oKSx0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCkpOnQmJnRoaXMuY2xvc2UoKX19LHtrZXk6XCJtb3ZlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1wLmRlZmF1bHQucmVjdCxlPXRoaXMuRWRpdG9yLlVJLm5vZGVzLndyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbj17eDp0LngtZS5sZWZ0LHk6dC55K3QuaGVpZ2h0LWUudG9wK3RoaXMudG9vbGJhclZlcnRpY2FsTWFyZ2lufTt0LndpZHRoJiYobi54Kz1NYXRoLmZsb29yKHQud2lkdGgvMikpO3ZhciBvPW4ueC10aGlzLndpZHRoLzIscj1uLngrdGhpcy53aWR0aC8yO3RoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuQ1NTLmlubGluZVRvb2xiYXJMZWZ0T3JpZW50ZWQsbzx0aGlzLkVkaXRvci5VSS5jb250ZW50UmVjdC5sZWZ0KSx0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLkNTUy5pbmxpbmVUb29sYmFyUmlnaHRPcmllbnRlZCxyPnRoaXMuRWRpdG9yLlVJLmNvbnRlbnRSZWN0LnJpZ2h0KSx0aGlzLm5vZGVzLndyYXBwZXIuc3R5bGUubGVmdD1NYXRoLmZsb29yKG4ueCkrXCJweFwiLHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS50b3A9TWF0aC5mbG9vcihuLnkpK1wicHhcIn19LHtrZXk6XCJjbG9zZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLm9wZW5lZCYmKHRoaXMuRWRpdG9yLlJlYWRPbmx5LmlzRW5hYmxlZHx8KHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLmlubGluZVRvb2xiYXJTaG93ZWQpLEFycmF5LmZyb20odGhpcy50b29sc0luc3RhbmNlcy5lbnRyaWVzKCkpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBuPSgwLGkuZGVmYXVsdCkoZSwyKSxvPW5bMF0scj1uWzFdLGE9dC5nZXRUb29sU2hvcnRjdXQobyk7YSYmYi5kZWZhdWx0LnJlbW92ZSh0LkVkaXRvci5VSS5ub2Rlcy5yZWRhY3RvcixhKSxoLmlzRnVuY3Rpb24oci5jbGVhcikmJnIuY2xlYXIoKX0pKSx0aGlzLm9wZW5lZD0hMSx0aGlzLmZsaXBwZXIuZGVhY3RpdmF0ZSgpLHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmNsb3NlKCkpKX19LHtrZXk6XCJvcGVuXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZighdGhpcy5vcGVuZWQpe3RoaXMuYWRkVG9vbHNGaWx0ZXJlZCgpLHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmlubGluZVRvb2xiYXJTaG93ZWQpLHRoaXMuYnV0dG9uc0xpc3Q9dGhpcy5ub2Rlcy5idXR0b25zLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIuY29uY2F0KHRoaXMuQ1NTLmlubGluZVRvb2xCdXR0b24pKSx0aGlzLm9wZW5lZD0hMCx0aGlzLkVkaXRvci5Db252ZXJzaW9uVG9vbGJhci5oYXNUb29scygpP3RoaXMuc2V0Q29udmVyc2lvblRvZ2dsZXJDb250ZW50KCk6dGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlci5oaWRkZW49ITA7dmFyIHQ9QXJyYXkuZnJvbSh0aGlzLmJ1dHRvbnNMaXN0KTt0LnVuc2hpZnQodGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlciksdD10LmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIXQuaGlkZGVufSkpLHRoaXMuZmxpcHBlci5hY3RpdmF0ZSh0KX19fSx7a2V5OlwiY29udGFpbnNOb2RlXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubm9kZXMud3JhcHBlci5jb250YWlucyh0KX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmZsaXBwZXImJih0aGlzLmZsaXBwZXIuZGVhY3RpdmF0ZSgpLHRoaXMuZmxpcHBlcj1udWxsKSx0aGlzLnJlbW92ZUFsbE5vZGVzKCl9fSx7a2V5OlwiZ2V0SW5saW5lVG9vbGJhclNldHRpbmdzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMuRWRpdG9yLlRvb2xzLmdldFRvb2xTZXR0aW5ncyh0KVt0aGlzLkVkaXRvci5Ub29scy5VU0VSX1NFVFRJTkdTLkVOQUJMRURfSU5MSU5FX1RPT0xTXTtpZighMCE9PW4mJiFBcnJheS5pc0FycmF5KG4pKXJldHVybiExO2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIG47dmFyIG89dGhpcy5jb25maWcuaW5saW5lVG9vbGJhcjtyZXR1cm4gQXJyYXkuaXNBcnJheShvKT9vOiEwPT09byYmT2JqZWN0LmVudHJpZXModGhpcy5FZGl0b3IuVG9vbHMuYXZhaWxhYmxlKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3ZhciBuPSgwLGkuZGVmYXVsdCkodCwyKTtyZXR1cm4gblswXSxuWzFdW2UuRWRpdG9yLlRvb2xzLklOVEVSTkFMX1NFVFRJTkdTLklTX0lOTElORV19KSkubWFwKChmdW5jdGlvbih0KXt2YXIgZT0oMCxpLmRlZmF1bHQpKHQsMiksbj1lWzBdO3JldHVybiBlWzFdLG59KSl9fSx7a2V5OlwibWFrZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLm5vZGVzLndyYXBwZXI9ZC5kZWZhdWx0Lm1ha2UoXCJkaXZcIixbdGhpcy5DU1MuaW5saW5lVG9vbGJhcl0uY29uY2F0KCgwLHIuZGVmYXVsdCkodGhpcy5pc1J0bD9bdGhpcy5FZGl0b3IuVUkuQ1NTLmVkaXRvclJ0bEZpeF06W10pKSksdGhpcy5ub2Rlcy50b2dnbGVyQW5kQnV0dG9uc1dyYXBwZXI9ZC5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0aGlzLkNTUy50b2dnbGVyQW5kQnV0dG9uc1dyYXBwZXIpLHRoaXMubm9kZXMuYnV0dG9ucz1kLmRlZmF1bHQubWFrZShcImRpdlwiLHRoaXMuQ1NTLmJ1dHRvbnNXcmFwcGVyKSx0aGlzLm5vZGVzLmFjdGlvbnM9ZC5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0aGlzLkNTUy5hY3Rpb25zV3JhcHBlciksdGhpcy5saXN0ZW5lcnMub24odGhpcy5ub2Rlcy53cmFwcGVyLFwibW91c2Vkb3duXCIsKGZ1bmN0aW9uKGUpe2UudGFyZ2V0LmNsb3Nlc3QoXCIuXCIuY29uY2F0KHQuQ1NTLmFjdGlvbnNXcmFwcGVyKSl8fGUucHJldmVudERlZmF1bHQoKX0pKSxkLmRlZmF1bHQuYXBwZW5kKHRoaXMubm9kZXMud3JhcHBlcixbdGhpcy5ub2Rlcy50b2dnbGVyQW5kQnV0dG9uc1dyYXBwZXIsdGhpcy5ub2Rlcy5hY3Rpb25zXSksZC5kZWZhdWx0LmFwcGVuZCh0aGlzLkVkaXRvci5VSS5ub2Rlcy53cmFwcGVyLHRoaXMubm9kZXMud3JhcHBlciksdGhpcy5hZGRDb252ZXJzaW9uVG9nZ2xlcigpLGQuZGVmYXVsdC5hcHBlbmQodGhpcy5ub2Rlcy50b2dnbGVyQW5kQnV0dG9uc1dyYXBwZXIsdGhpcy5ub2Rlcy5idXR0b25zKSx0aGlzLnByZXBhcmVDb252ZXJzaW9uVG9vbGJhcigpLHRoaXMucmVjYWxjdWxhdGVXaWR0aCgpLHRoaXMuZW5hYmxlRmxpcHBlcigpfX0se2tleTpcImFsbG93ZWRUb1Nob3dcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXAuZGVmYXVsdC5nZXQoKSxlPXAuZGVmYXVsdC50ZXh0O2lmKCF0fHwhdC5hbmNob3JOb2RlKXJldHVybiExO2lmKHQuaXNDb2xsYXBzZWR8fGUubGVuZ3RoPDEpcmV0dXJuITE7dmFyIG49ZC5kZWZhdWx0LmlzRWxlbWVudCh0LmFuY2hvck5vZGUpP3QuYW5jaG9yTm9kZTp0LmFuY2hvck5vZGUucGFyZW50RWxlbWVudDtpZih0JiZbXCJJTUdcIixcIklOUFVUXCJdLmluY2x1ZGVzKG4udGFnTmFtZSkpcmV0dXJuITE7aWYobnVsbD09PW4uY2xvc2VzdCgnW2NvbnRlbnRlZGl0YWJsZT1cInRydWVcIl0nKSlyZXR1cm4hMTt2YXIgbz10aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2sodC5hbmNob3JOb2RlKTtyZXR1cm4hIW8mJiExIT09dGhpcy5nZXRJbmxpbmVUb29sYmFyU2V0dGluZ3Moby5uYW1lKX19LHtrZXk6XCJyZWNhbGN1bGF0ZVdpZHRoXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLndpZHRoPXRoaXMubm9kZXMud3JhcHBlci5vZmZzZXRXaWR0aH19LHtrZXk6XCJhZGRDb252ZXJzaW9uVG9nZ2xlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLm5vZGVzLmNvbnZlcnNpb25Ub2dnbGVyPWQuZGVmYXVsdC5tYWtlKFwiZGl2XCIsdGhpcy5DU1MuY29udmVyc2lvblRvZ2dsZXIpLHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXJDb250ZW50PWQuZGVmYXVsdC5tYWtlKFwiZGl2XCIsdGhpcy5DU1MuY29udmVyc2lvblRvZ2dsZXJDb250ZW50KTt2YXIgZT1kLmRlZmF1bHQuc3ZnKFwidG9nZ2xlci1kb3duXCIsMTMsMTMpO3RoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlckNvbnRlbnQpLHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuYXBwZW5kQ2hpbGQoZSksdGhpcy5ub2Rlcy50b2dnbGVyQW5kQnV0dG9uc1dyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlciksdGhpcy5saXN0ZW5lcnMub24odGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlcixcImNsaWNrXCIsKGZ1bmN0aW9uKCl7dC5FZGl0b3IuQ29udmVyc2lvblRvb2xiYXIudG9nZ2xlKChmdW5jdGlvbihlKXshZSYmdC5vcGVuZWQ/dC5mbGlwcGVyLmFjdGl2YXRlKCk6dC5vcGVuZWQmJnQuZmxpcHBlci5kZWFjdGl2YXRlKCl9KSl9KSksdGhpcy5FZGl0b3IuVG9vbHRpcC5vbkhvdmVyKHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIsZy5kZWZhdWx0LnVpKHkuSTE4bkludGVybmFsTlMudWkuaW5saW5lVG9vbGJhci5jb252ZXJ0ZXIsXCJDb252ZXJ0IHRvXCIpLHtwbGFjZW1lbnQ6XCJ0b3BcIixoaWRpbmdEZWxheToxMDB9KX19LHtrZXk6XCJzZXRDb252ZXJzaW9uVG9nZ2xlckNvbnRlbnRcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuRWRpdG9yLGU9dC5CbG9ja01hbmFnZXIsbj10LlRvb2xzLG89ZS5jdXJyZW50QmxvY2submFtZSxyPW4uYXZhaWxhYmxlW29dW24uSU5URVJOQUxfU0VUVElOR1MuQ09OVkVSU0lPTl9DT05GSUddfHx7fSxpPXImJnIuZXhwb3J0O3RoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuaGlkZGVuPSFpLHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLkNTUy5jb252ZXJzaW9uVG9nZ2xlckhpZGRlbiwhaSk7dmFyIGE9bi5nZXRUb29sU2V0dGluZ3Mobykscz1uLmF2YWlsYWJsZVtvXVtuLklOVEVSTkFMX1NFVFRJTkdTLlRPT0xCT1hdfHx7fSxjPWEudG9vbGJveHx8e307dGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlckNvbnRlbnQuaW5uZXJIVE1MPWMuaWNvbnx8cy5pY29ufHxjLnRpdGxlfHxzLnRpdGxlfHxoLmNhcGl0YWxpemUobyl9fSx7a2V5OlwicHJlcGFyZUNvbnZlcnNpb25Ub29sYmFyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLkVkaXRvci5Db252ZXJzaW9uVG9vbGJhci5tYWtlKCk7ZC5kZWZhdWx0LmFwcGVuZCh0aGlzLm5vZGVzLndyYXBwZXIsdCl9fSx7a2V5OlwiYWRkVG9vbHNGaWx0ZXJlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXAuZGVmYXVsdC5nZXQoKSxuPXRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9jayhlLmFuY2hvck5vZGUpO3RoaXMubm9kZXMuYnV0dG9ucy5pbm5lckhUTUw9XCJcIix0aGlzLm5vZGVzLmFjdGlvbnMuaW5uZXJIVE1MPVwiXCIsdGhpcy50b29sc0luc3RhbmNlcz1uZXcgTWFwLHRoaXMuZ2V0SW5saW5lVG9vbGJhclNldHRpbmdzKG4ubmFtZSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49dC5FZGl0b3IuVG9vbHMuZ2V0VG9vbFNldHRpbmdzKGUpLG89dC5FZGl0b3IuVG9vbHMuY29uc3RydWN0SW5saW5lKHQuRWRpdG9yLlRvb2xzLmlubGluZVtlXSxlLG4pO3QuYWRkVG9vbChlLG8pLG8uY2hlY2tTdGF0ZShwLmRlZmF1bHQuZ2V0KCkpfSkpLHRoaXMucmVjYWxjdWxhdGVXaWR0aCgpfX0se2tleTpcImFkZFRvb2xcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMsbz10aGlzLkVkaXRvcixyPW8uVG9vbHMsaT1vLlRvb2x0aXAsYT1lLnJlbmRlcigpO2lmKGEpe2lmKGEuZGF0YXNldC50b29sPXQsdGhpcy5ub2Rlcy5idXR0b25zLmFwcGVuZENoaWxkKGEpLHRoaXMudG9vbHNJbnN0YW5jZXMuc2V0KHQsZSksaC5pc0Z1bmN0aW9uKGUucmVuZGVyQWN0aW9ucykpe3ZhciBzPWUucmVuZGVyQWN0aW9ucygpO3RoaXMubm9kZXMuYWN0aW9ucy5hcHBlbmRDaGlsZChzKX10aGlzLmxpc3RlbmVycy5vbihhLFwiY2xpY2tcIiwoZnVuY3Rpb24odCl7bi50b29sQ2xpY2tlZChlKSx0LnByZXZlbnREZWZhdWx0KCl9KSk7dmFyIGM9dGhpcy5nZXRUb29sU2hvcnRjdXQodCk7aWYoYyl0cnl7dGhpcy5lbmFibGVTaG9ydGN1dHMoZSxjKX1jYXRjaCh0KXt9dmFyIGw9ZC5kZWZhdWx0Lm1ha2UoXCJkaXZcIiksdT1nLmRlZmF1bHQudCh5LkkxOG5JbnRlcm5hbE5TLnRvb2xOYW1lcyxyLnRvb2xzQ2xhc3Nlc1t0XVtyLklOVEVSTkFMX1NFVFRJTkdTLlRJVExFXXx8aC5jYXBpdGFsaXplKHQpKTtsLmFwcGVuZENoaWxkKGQuZGVmYXVsdC50ZXh0KHUpKSxjJiZsLmFwcGVuZENoaWxkKGQuZGVmYXVsdC5tYWtlKFwiZGl2XCIsdGhpcy5DU1MuaW5saW5lVG9vbGJhclNob3J0Y3V0LHt0ZXh0Q29udGVudDpoLmJlYXV0aWZ5U2hvcnRjdXQoYyl9KSksaS5vbkhvdmVyKGEsbCx7cGxhY2VtZW50OlwidG9wXCIsaGlkaW5nRGVsYXk6MTAwfSl9ZWxzZSBoLmxvZyhcIlJlbmRlciBtZXRob2QgbXVzdCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgTm9kZVwiLFwid2FyblwiLHQpfX0se2tleTpcImdldFRvb2xTaG9ydGN1dFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuRWRpdG9yLlRvb2xzLG49ZS5nZXRUb29sU2V0dGluZ3ModCksbz10aGlzLnRvb2xzSW5zdGFuY2VzLmdldCh0KTtyZXR1cm4gT2JqZWN0LmtleXModGhpcy5pbnRlcm5hbFRvb2xzKS5pbmNsdWRlcyh0KT90aGlzLmlubGluZVRvb2xzW3RdW2UuSU5URVJOQUxfU0VUVElOR1MuU0hPUlRDVVRdOm4mJm5bZS5VU0VSX1NFVFRJTkdTLlNIT1JUQ1VUXT9uW2UuVVNFUl9TRVRUSU5HUy5TSE9SVENVVF06by5zaG9ydGN1dD9vLnNob3J0Y3V0OnZvaWQgMH19LHtrZXk6XCJlbmFibGVTaG9ydGN1dHNcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7Yi5kZWZhdWx0LmFkZCh7bmFtZTplLGhhbmRsZXI6ZnVuY3Rpb24oZSl7dmFyIG89bi5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jaztpZihvKXt2YXIgcj1uLkVkaXRvci5Ub29scy5nZXRUb29sU2V0dGluZ3Moby5uYW1lKTtyJiZyW24uRWRpdG9yLlRvb2xzLlVTRVJfU0VUVElOR1MuRU5BQkxFRF9JTkxJTkVfVE9PTFNdJiYoZS5wcmV2ZW50RGVmYXVsdCgpLG4udG9vbENsaWNrZWQodCkpfX0sb246dGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3J9KX19LHtrZXk6XCJ0b29sQ2xpY2tlZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXAuZGVmYXVsdC5yYW5nZTt0LnN1cnJvdW5kKGUpLHRoaXMuY2hlY2tUb29sc1N0YXRlKCl9fSx7a2V5OlwiY2hlY2tUb29sc1N0YXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnRvb2xzSW5zdGFuY2VzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QuY2hlY2tTdGF0ZShwLmRlZmF1bHQuZ2V0KCkpfSkpfX0se2tleTpcImVuYWJsZUZsaXBwZXJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuZmxpcHBlcj1uZXcgdi5kZWZhdWx0KHtmb2N1c2VkSXRlbUNsYXNzOnRoaXMuQ1NTLmZvY3VzZWRCdXR0b24sYWxsb3dBcnJvd3M6ITF9KX19LHtrZXk6XCJzdGF0ZVwiLHNldDpmdW5jdGlvbih0KXt2YXIgZT10aGlzO3RoaXMuRWRpdG9yPXQ7dmFyIG49dC5Ub29scztPYmplY3QuZW50cmllcyhuLmludGVybmFsVG9vbHMpLmZpbHRlcigoZnVuY3Rpb24odCl7dmFyIGU9KDAsaS5kZWZhdWx0KSh0LDIpWzFdO3JldHVybiBoLmlzRnVuY3Rpb24oZSk/ZVtuLklOVEVSTkFMX1NFVFRJTkdTLklTX0lOTElORV06ZS5jbGFzc1tuLklOVEVSTkFMX1NFVFRJTkdTLklTX0lOTElORV19KSkubWFwKChmdW5jdGlvbih0KXt2YXIgbj0oMCxpLmRlZmF1bHQpKHQsMiksbz1uWzBdLHI9blsxXTtlLmludGVybmFsVG9vbHNbb109aC5pc0Z1bmN0aW9uKHIpP3I6ci5jbGFzc30pKX19LHtrZXk6XCJpbmxpbmVUb29sc1wiLGdldDpmdW5jdGlvbigpe3ZhciB0PXt9O2Zvcih2YXIgZSBpbiB0aGlzLkVkaXRvci5Ub29scy5pbmxpbmUpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuRWRpdG9yLlRvb2xzLmlubGluZSxlKSl7dmFyIG49dGhpcy5FZGl0b3IuVG9vbHMuZ2V0VG9vbFNldHRpbmdzKGUpO3RbZV09dGhpcy5FZGl0b3IuVG9vbHMuY29uc3RydWN0SW5saW5lKHRoaXMuRWRpdG9yLlRvb2xzLmlubGluZVtlXSxlLG4pfXJldHVybiB0fX1dKSxvfShmLmRlZmF1bHQpO28uZGVmYXVsdD1TLFMuZGlzcGxheU5hbWU9XCJJbmxpbmVUb29sYmFyXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oNyksbigxNSksbig4KSxuKDYwKSxuKDYxKSxuKDU5KSxuKDgxKSxuKDEwOCldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCxwLGgsdixnKXtcInVzZSBzdHJpY3RcIjt2YXIgeT1uKDEzKSxiPW4oMSk7ZnVuY3Rpb24gbSgpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9YihyKSxpPWIoaSksYT1iKGEpLHM9YihzKSxjPWIoYyksbD1iKGwpLHU9Yih1KSxmPXkoZiksZD1iKGQpLGg9YihoKSxnPWIoZyk7dmFyIGs9ZnVuY3Rpb24odCl7KDAsYS5kZWZhdWx0KShvLHQpO3ZhciBlLG49KGU9byxmdW5jdGlvbigpe3ZhciB0LG49KDAsYy5kZWZhdWx0KShlKTtpZihtKCkpe3ZhciBvPSgwLGMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAscy5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gbygpe3ZhciB0O3JldHVybigwLHIuZGVmYXVsdCkodGhpcyxvKSwodD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkubm9kZXM9e3Rvb2xib3g6bnVsbCxidXR0b25zOltdfSx0Lm9wZW5lZD0hMSx0LmRpc3BsYXllZFRvb2xzQ291bnQ9MCx0LmZsaXBwZXI9bnVsbCx0fXJldHVybigwLGkuZGVmYXVsdCkobyxbe2tleTpcIm1ha2VcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubm9kZXMudG9vbGJveD11LmRlZmF1bHQubWFrZShcImRpdlwiLHRoaXMuQ1NTLnRvb2xib3gpLHRoaXMuYWRkVG9vbHMoKSx0aGlzLmVuYWJsZUZsaXBwZXIoKX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmZsaXBwZXImJih0aGlzLmZsaXBwZXIuZGVhY3RpdmF0ZSgpLHRoaXMuZmxpcHBlcj1udWxsKSx0aGlzLnJlbW92ZUFsbE5vZGVzKCksdGhpcy5yZW1vdmVBbGxTaG9ydGN1dHMoKX19LHtrZXk6XCJ0b29sQnV0dG9uQWN0aXZhdGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuRWRpdG9yLlRvb2xzLnRvb2xzQ2xhc3Nlc1tlXTt0aGlzLmluc2VydE5ld0Jsb2NrKG4sZSl9fSx7a2V5Olwib3BlblwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5pc0VtcHR5fHwodGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLm9wZW5lZFRvb2xiYXJIb2xkZXJNb2RpZmllciksdGhpcy5ub2Rlcy50b29sYm94LmNsYXNzTGlzdC5hZGQodGhpcy5DU1MudG9vbGJveE9wZW5lZCksdGhpcy5vcGVuZWQ9ITAsdGhpcy5mbGlwcGVyLmFjdGl2YXRlKCkpfX0se2tleTpcImNsb3NlXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLm5vZGVzLnRvb2xib3guY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy50b29sYm94T3BlbmVkKSx0aGlzLkVkaXRvci5VSS5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5DU1Mub3BlbmVkVG9vbGJhckhvbGRlck1vZGlmaWVyKSx0aGlzLm9wZW5lZD0hMSx0aGlzLmZsaXBwZXIuZGVhY3RpdmF0ZSgpfX0se2tleTpcInRvZ2dsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5vcGVuZWQ/dGhpcy5jbG9zZSgpOnRoaXMub3BlbigpfX0se2tleTpcImFkZFRvb2xzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLkVkaXRvci5Ub29scy5hdmFpbGFibGU7Zm9yKHZhciBlIGluIHQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkmJnRoaXMuYWRkVG9vbChlLHRbZV0pfX0se2tleTpcImFkZFRvb2xcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMsbz10aGlzLkVkaXRvci5Ub29scy5JTlRFUk5BTF9TRVRUSU5HUyxyPXRoaXMuRWRpdG9yLlRvb2xzLlVTRVJfU0VUVElOR1MsaT1lW28uVE9PTEJPWF07aWYoIWYuaXNFbXB0eShpKSlpZighaXx8aS5pY29uKXt2YXIgYT10aGlzLkVkaXRvci5Ub29scy5nZXRUb29sU2V0dGluZ3ModClbci5UT09MQk9YXTtpZighMSE9PShudWxsIT1hP2E6aSkpe3ZhciBzPXUuZGVmYXVsdC5tYWtlKFwibGlcIixbdGhpcy5DU1MudG9vbGJveEJ1dHRvbl0pO3MuZGF0YXNldC50b29sPXQscy5pbm5lckhUTUw9YSYmYS5pY29ufHxpLmljb24sdS5kZWZhdWx0LmFwcGVuZCh0aGlzLm5vZGVzLnRvb2xib3gscyksdGhpcy5ub2Rlcy50b29sYm94LmFwcGVuZENoaWxkKHMpLHRoaXMubm9kZXMuYnV0dG9ucy5wdXNoKHMpLHRoaXMubGlzdGVuZXJzLm9uKHMsXCJjbGlja1wiLChmdW5jdGlvbihlKXtuLnRvb2xCdXR0b25BY3RpdmF0ZShlLHQpfSkpO3ZhciBjPXRoaXMuZHJhd1Rvb2x0aXAodCk7dGhpcy5FZGl0b3IuVG9vbHRpcC5vbkhvdmVyKHMsYyx7cGxhY2VtZW50OlwiYm90dG9tXCIsaGlkaW5nRGVsYXk6MjAwfSk7dmFyIGw9dGhpcy5nZXRUb29sU2hvcnRjdXQodCxlKTtsJiZ0aGlzLmVuYWJsZVNob3J0Y3V0KGUsdCxsKSx0aGlzLmRpc3BsYXllZFRvb2xzQ291bnQrK319ZWxzZSBmLmxvZyhcIlRvb2xiYXIgaWNvbiBpcyBtaXNzZWQuIFRvb2wgJW8gc2tpcHBlZFwiLFwid2FyblwiLHQpfX0se2tleTpcImdldFRvb2xTaG9ydGN1dFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5FZGl0b3IuVG9vbHMuZ2V0VG9vbFNldHRpbmdzKHQpLG89ZVt0aGlzLkVkaXRvci5Ub29scy5JTlRFUk5BTF9TRVRUSU5HUy5TSE9SVENVVF07cmV0dXJuKG4/blt0aGlzLkVkaXRvci5Ub29scy5VU0VSX1NFVFRJTkdTLlNIT1JUQ1VUXTpudWxsKXx8b319LHtrZXk6XCJkcmF3VG9vbHRpcFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuRWRpdG9yLlRvb2xzLmF2YWlsYWJsZVt0XSxuPXRoaXMuRWRpdG9yLlRvb2xzLmdldFRvb2xTZXR0aW5ncyh0KSxvPXRoaXMuRWRpdG9yLlRvb2xzLmF2YWlsYWJsZVt0XVt0aGlzLkVkaXRvci5Ub29scy5JTlRFUk5BTF9TRVRUSU5HUy5UT09MQk9YXXx8e30scj1uLnRvb2xib3h8fHt9LGk9aC5kZWZhdWx0LnQodi5JMThuSW50ZXJuYWxOUy50b29sTmFtZXMsci50aXRsZXx8by50aXRsZXx8dCksYT10aGlzLmdldFRvb2xTaG9ydGN1dCh0LGUpLHM9dS5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0aGlzLkNTUy5idXR0b25Ub29sdGlwKSxjPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGYuY2FwaXRhbGl6ZShpKSk7cmV0dXJuIHMuYXBwZW5kQ2hpbGQoYyksYSYmKGE9Zi5iZWF1dGlmeVNob3J0Y3V0KGEpLHMuYXBwZW5kQ2hpbGQodS5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0aGlzLkNTUy5idXR0b25TaG9ydGN1dCx7dGV4dENvbnRlbnQ6YX0pKSksc319LHtrZXk6XCJlbmFibGVTaG9ydGN1dFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz10aGlzO2cuZGVmYXVsdC5hZGQoe25hbWU6bixoYW5kbGVyOmZ1bmN0aW9uKG4pe24ucHJldmVudERlZmF1bHQoKSxvLmluc2VydE5ld0Jsb2NrKHQsZSl9LG9uOnRoaXMuRWRpdG9yLlVJLm5vZGVzLnJlZGFjdG9yfSl9fSx7a2V5OlwicmVtb3ZlQWxsU2hvcnRjdXRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLkVkaXRvci5Ub29scy5hdmFpbGFibGU7Zm9yKHZhciBlIGluIHQpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSkpe3ZhciBuPXRoaXMuZ2V0VG9vbFNob3J0Y3V0KGUsdFtlXSk7biYmZy5kZWZhdWx0LnJlbW92ZSh0aGlzLkVkaXRvci5VSS5ub2Rlcy5yZWRhY3RvcixuKX19fSx7a2V5OlwiZW5hYmxlRmxpcHBlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9QXJyYXkuZnJvbSh0aGlzLm5vZGVzLnRvb2xib3guY2hpbGROb2Rlcyk7dGhpcy5mbGlwcGVyPW5ldyBkLmRlZmF1bHQoe2l0ZW1zOnQsZm9jdXNlZEl0ZW1DbGFzczp0aGlzLkNTUy50b29sYm94QnV0dG9uQWN0aXZlfSl9fSx7a2V5OlwiaW5zZXJ0TmV3QmxvY2tcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuRWRpdG9yLG89bi5CbG9ja01hbmFnZXIscj1uLkNhcmV0LGk9by5jdXJyZW50QmxvY2ssYT1vLmluc2VydCh7dG9vbDplLHJlcGxhY2U6aS5pc0VtcHR5fSk7YS5jYWxsKHAuQmxvY2tUb29sQVBJLkFQUEVORF9DQUxMQkFDSyksdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayhhKSwwPT09YS5pbnB1dHMubGVuZ3RoJiYoYT09PW8ubGFzdEJsb2NrPyhvLmluc2VydEF0RW5kKCksci5zZXRUb0Jsb2NrKG8ubGFzdEJsb2NrKSk6ci5zZXRUb0Jsb2NrKG8ubmV4dEJsb2NrKSksdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpfX0se2tleTpcIkNTU1wiLGdldDpmdW5jdGlvbigpe3JldHVybnt0b29sYm94OlwiY2UtdG9vbGJveFwiLHRvb2xib3hCdXR0b246XCJjZS10b29sYm94X19idXR0b25cIix0b29sYm94QnV0dG9uQWN0aXZlOlwiY2UtdG9vbGJveF9fYnV0dG9uLS1hY3RpdmVcIix0b29sYm94T3BlbmVkOlwiY2UtdG9vbGJveC0tb3BlbmVkXCIsb3BlbmVkVG9vbGJhckhvbGRlck1vZGlmaWVyOlwiY29kZXgtZWRpdG9yLS10b29sYm94LW9wZW5lZFwiLGJ1dHRvblRvb2x0aXA6XCJjZS10b29sYm94LWJ1dHRvbi10b29sdGlwXCIsYnV0dG9uU2hvcnRjdXQ6XCJjZS10b29sYm94LWJ1dHRvbi10b29sdGlwX19zaG9ydGN1dFwifX19LHtrZXk6XCJpc0VtcHR5XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10aGlzLmRpc3BsYXllZFRvb2xzQ291bnR9fV0pLG99KGwuZGVmYXVsdCk7by5kZWZhdWx0PWssay5kaXNwbGF5TmFtZT1cIlRvb2xib3hcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbig1KSxuKDYpLG4oNCksbig3KSxuKDM4NyldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1KXtcInVzZSBzdHJpY3RcIjt2YXIgZj1uKDEpO2Z1bmN0aW9uIGQoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaCh0KXtyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPWYociksaT1mKGkpLGE9ZihhKSxzPWYocyksYz1mKGMpLGw9ZihsKSx1PWYodSk7dmFyIHA9ZnVuY3Rpb24odCl7KDAsYS5kZWZhdWx0KShvLHQpO3ZhciBlLG49KGU9byxmdW5jdGlvbigpe3ZhciB0LG49KDAsYy5kZWZhdWx0KShlKTtpZihkKCkpe3ZhciBvPSgwLGMuZGVmYXVsdCkodGhpcykuY29uc3RydWN0b3I7dD1SZWZsZWN0LmNvbnN0cnVjdChuLGFyZ3VtZW50cyxvKX1lbHNlIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuKDAscy5kZWZhdWx0KSh0aGlzLHQpfSk7ZnVuY3Rpb24gbygpe3ZhciB0O3JldHVybigwLHIuZGVmYXVsdCkodGhpcyxvKSwodD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkubGliPW5ldyB1LmRlZmF1bHQsdH1yZXR1cm4oMCxpLmRlZmF1bHQpKG8sW3trZXk6XCJzaG93XCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3RoaXMubGliLnNob3codCxlLG4pfX0se2tleTpcImhpZGVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubGliLmhpZGUoKX19LHtrZXk6XCJvbkhvdmVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe3RoaXMubGliLm9uSG92ZXIodCxlLG4pfX1dKSxvfShsLmRlZmF1bHQpO28uZGVmYXVsdD1wLHAuZGlzcGxheU5hbWU9XCJUb29sdGlwXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigzOSksbig1OCksbigyMSksbigyMiksbigyKSxuKDMpLG4oNSksbig2KSxuKDQpLG4oMzg4KSxuKDcpLG4oMTUpLG4oOCksbigyNSksbig2MSksbig2MCldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1LGYsZCxwLGgsdixnLHksYixtKXtcInVzZSBzdHJpY3RcIjt2YXIgaz1uKDEzKSx4PW4oMSk7ZnVuY3Rpb24gUygpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9eChyKSxpPXgoaSksYT14KGEpLHM9eChzKSxjPXgoYyksbD14KGwpLHU9eCh1KSxmPXgoZiksZD14KGQpLHA9eChwKSxoPXgoaCksdj14KHYpLGc9ayhnKSx5PXgoeSksYj14KGIpLG09eChtKTt2YXIgdz1mdW5jdGlvbih0KXsoMCx1LmRlZmF1bHQpKGssdCk7dmFyIGUsbyxoPShlPWssZnVuY3Rpb24oKXt2YXIgdCxuPSgwLGQuZGVmYXVsdCkoZSk7aWYoUygpKXt2YXIgbz0oMCxkLmRlZmF1bHQpKHRoaXMpLmNvbnN0cnVjdG9yO3Q9UmVmbGVjdC5jb25zdHJ1Y3Qobixhcmd1bWVudHMsbyl9ZWxzZSB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybigwLGYuZGVmYXVsdCkodGhpcyx0KX0pO2Z1bmN0aW9uIGsoKXt2YXIgdDtyZXR1cm4oMCxjLmRlZmF1bHQpKHRoaXMsayksKHQ9aC5hcHBseSh0aGlzLGFyZ3VtZW50cykpLmlzTW9iaWxlPSExLHQuY29udGVudFJlY3RDYWNoZT12b2lkIDAsdC5yZXNpemVEZWJvdW5jZXI9Zy5kZWJvdW5jZSgoZnVuY3Rpb24oKXt0LndpbmRvd1Jlc2l6ZSgpfSksMjAwKSx0fXJldHVybigwLGwuZGVmYXVsdCkoayxbe2tleTpcImFkZExvYWRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ub2Rlcy5sb2FkZXI9di5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0aGlzLkNTUy5lZGl0b3JMb2FkZXIpLHRoaXMubm9kZXMud3JhcHBlci5wcmVwZW5kKHRoaXMubm9kZXMubG9hZGVyKSx0aGlzLm5vZGVzLnJlZGFjdG9yLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuZWRpdG9yWm9uZUhpZGRlbil9fSx7a2V5OlwicmVtb3ZlTG9hZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLm5vZGVzLmxvYWRlci5yZW1vdmUoKSx0aGlzLm5vZGVzLnJlZGFjdG9yLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5DU1MuZWRpdG9yWm9uZUhpZGRlbil9fSx7a2V5OlwicHJlcGFyZVwiLHZhbHVlOihvPSgwLHMuZGVmYXVsdCkoYS5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoKXtyZXR1cm4gYS5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnRoaXMuY2hlY2tJc01vYmlsZSgpLHRoaXMubWFrZSgpLHRoaXMuYWRkTG9hZGVyKCksdGhpcy5hcHBlbmRTVkdTcHJpdGUoKSx0aGlzLmxvYWRTdHlsZXMoKTtjYXNlIDU6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQsdGhpcyl9KSkpLGZ1bmN0aW9uKCl7cmV0dXJuIG8uYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJ0b2dnbGVSZWFkT25seVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3Q/dGhpcy5kaXNhYmxlTW9kdWxlQmluZGluZ3MoKTp0aGlzLmVuYWJsZU1vZHVsZUJpbmRpbmdzKCl9fSx7a2V5OlwiY2hlY2tFbXB0aW5lc3NcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlcjt0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLkNTUy5lZGl0b3JFbXB0eSx0LmlzRWRpdG9yRW1wdHkpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMubm9kZXMuaG9sZGVyLmlubmVySFRNTD1cIlwifX0se2tleTpcImNsb3NlQWxsVG9vbGJhcnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuRWRpdG9yLGU9dC5Ub29sYm94LG49dC5CbG9ja1NldHRpbmdzLG89dC5JbmxpbmVUb29sYmFyLHI9dC5Db252ZXJzaW9uVG9vbGJhcjtuLmNsb3NlKCksby5jbG9zZSgpLHIuY2xvc2UoKSxlLmNsb3NlKCl9fSx7a2V5OlwiY2hlY2tJc01vYmlsZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5pc01vYmlsZT13aW5kb3cuaW5uZXJXaWR0aDw2NTB9fSx7a2V5OlwibWFrZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5ub2Rlcy5ob2xkZXI9di5kZWZhdWx0LmdldEhvbGRlcih0aGlzLmNvbmZpZy5ob2xkZXIpLHRoaXMubm9kZXMud3JhcHBlcj12LmRlZmF1bHQubWFrZShcImRpdlwiLFt0aGlzLkNTUy5lZGl0b3JXcmFwcGVyXS5jb25jYXQoKDAsaS5kZWZhdWx0KSh0aGlzLmlzUnRsP1t0aGlzLkNTUy5lZGl0b3JSdGxGaXhdOltdKSkpLHRoaXMubm9kZXMucmVkYWN0b3I9di5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0aGlzLkNTUy5lZGl0b3Jab25lKSx0aGlzLm5vZGVzLmhvbGRlci5vZmZzZXRXaWR0aDx0aGlzLmNvbnRlbnRSZWN0LndpZHRoJiZ0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5lZGl0b3JXcmFwcGVyTmFycm93KSx0aGlzLm5vZGVzLnJlZGFjdG9yLnN0eWxlLnBhZGRpbmdCb3R0b209dGhpcy5jb25maWcubWluSGVpZ2h0K1wicHhcIix0aGlzLm5vZGVzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5yZWRhY3RvciksdGhpcy5ub2Rlcy5ob2xkZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy53cmFwcGVyKX19LHtrZXk6XCJsb2FkU3R5bGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1uKDM4OSk7aWYoIXYuZGVmYXVsdC5nZXQoXCJlZGl0b3ItanMtc3R5bGVzXCIpKXt2YXIgZT12LmRlZmF1bHQubWFrZShcInN0eWxlXCIsbnVsbCx7aWQ6XCJlZGl0b3ItanMtc3R5bGVzXCIsdGV4dENvbnRlbnQ6dC50b1N0cmluZygpfSk7di5kZWZhdWx0LnByZXBlbmQoZG9jdW1lbnQuaGVhZCxlKX19fSx7a2V5OlwiZW5hYmxlTW9kdWxlQmluZGluZ3NcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24odGhpcy5ub2Rlcy5yZWRhY3RvcixcImNsaWNrXCIsKGZ1bmN0aW9uKGUpe3QucmVkYWN0b3JDbGlja2VkKGUpfSksITEpLHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucmVkYWN0b3IsXCJtb3VzZWRvd25cIiwoZnVuY3Rpb24oZSl7dC5kb2N1bWVudFRvdWNoZWQoZSl9KSwhMCksdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24odGhpcy5ub2Rlcy5yZWRhY3RvcixcInRvdWNoc3RhcnRcIiwoZnVuY3Rpb24oZSl7dC5kb2N1bWVudFRvdWNoZWQoZSl9KSwhMCksdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZG9jdW1lbnQsXCJrZXlkb3duXCIsKGZ1bmN0aW9uKGUpe3QuZG9jdW1lbnRLZXlkb3duKGUpfSksITApLHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGRvY3VtZW50LFwiY2xpY2tcIiwoZnVuY3Rpb24oZSl7dC5kb2N1bWVudENsaWNrZWQoZSl9KSwhMCksdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZG9jdW1lbnQsXCJzZWxlY3Rpb25jaGFuZ2VcIiwoZnVuY3Rpb24oZSl7dC5zZWxlY3Rpb25DaGFuZ2VkKGUpfSksITApLHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHdpbmRvdyxcInJlc2l6ZVwiLChmdW5jdGlvbigpe3QucmVzaXplRGVib3VuY2VyKCl9KSx7cGFzc2l2ZTohMH0pfX0se2tleTpcImRpc2FibGVNb2R1bGVCaW5kaW5nc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMuY2xlYXJBbGwoKX19LHtrZXk6XCJ3aW5kb3dSZXNpemVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuY29udGVudFJlY3RDYWNoZT1udWxsLHRoaXMuY2hlY2tJc01vYmlsZSgpfX0se2tleTpcImRvY3VtZW50S2V5ZG93blwiLHZhbHVlOmZ1bmN0aW9uKHQpe3N3aXRjaCh0LmtleUNvZGUpe2Nhc2UgZy5rZXlDb2Rlcy5FTlRFUjp0aGlzLmVudGVyUHJlc3NlZCh0KTticmVhaztjYXNlIGcua2V5Q29kZXMuQkFDS1NQQUNFOnRoaXMuYmFja3NwYWNlUHJlc3NlZCh0KTticmVhaztjYXNlIGcua2V5Q29kZXMuRVNDOnRoaXMuZXNjYXBlUHJlc3NlZCh0KTticmVhaztkZWZhdWx0OnRoaXMuZGVmYXVsdEJlaGF2aW91cih0KX19fSx7a2V5OlwiZGVmYXVsdEJlaGF2aW91clwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2ssbj10LnRhcmdldC5jbG9zZXN0KFwiLlwiLmNvbmNhdCh0aGlzLkNTUy5lZGl0b3JXcmFwcGVyKSksbz10LmFsdEtleXx8dC5jdHJsS2V5fHx0Lm1ldGFLZXl8fHQuc2hpZnRLZXk7dm9pZCAwPT09ZXx8bnVsbCE9PW4/bnx8ZSYmb3x8KHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5kcm9wUG9pbnRlcigpLHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKSk6dGhpcy5FZGl0b3IuQmxvY2tFdmVudHMua2V5ZG93bih0KX19LHtrZXk6XCJiYWNrc3BhY2VQcmVzc2VkXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5FZGl0b3Isbj1lLkJsb2NrTWFuYWdlcixvPWUuQmxvY2tTZWxlY3Rpb24scj1lLkNhcmV0O2lmKG8uYW55QmxvY2tTZWxlY3RlZCYmIXkuZGVmYXVsdC5pc1NlbGVjdGlvbkV4aXN0cyl7dmFyIGk9bi5yZW1vdmVTZWxlY3RlZEJsb2NrcygpO3Iuc2V0VG9CbG9jayhuLmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgoaSwhMCksci5wb3NpdGlvbnMuU1RBUlQpLG8uY2xlYXJTZWxlY3Rpb24odCksdC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksdC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKX19fSx7a2V5OlwiZXNjYXBlUHJlc3NlZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKHQpLHRoaXMuRWRpdG9yLlRvb2xib3gub3BlbmVkP3RoaXMuRWRpdG9yLlRvb2xib3guY2xvc2UoKTp0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZD90aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmNsb3NlKCk6dGhpcy5FZGl0b3IuQ29udmVyc2lvblRvb2xiYXIub3BlbmVkP3RoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmNsb3NlKCk6dGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5vcGVuZWQ/dGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpOnRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKX19LHtrZXk6XCJlbnRlclByZXNzZWRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLkVkaXRvcixuPWUuQmxvY2tNYW5hZ2VyLG89ZS5CbG9ja1NlbGVjdGlvbixyPW4uY3VycmVudEJsb2NrSW5kZXg+PTA7aWYoby5hbnlCbG9ja1NlbGVjdGVkJiYheS5kZWZhdWx0LmlzU2VsZWN0aW9uRXhpc3RzKXJldHVybiBvLmNsZWFyU2VsZWN0aW9uKHQpLHQucHJldmVudERlZmF1bHQoKSx0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHZvaWQgdC5zdG9wUHJvcGFnYXRpb24oKTtpZighdGhpcy5zb21lVG9vbGJhck9wZW5lZCYmciYmXCJCT0RZXCI9PT10LnRhcmdldC50YWdOYW1lKXt2YXIgaT10aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuaW5zZXJ0KCk7dGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayhpKSx0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuaGlnaGxpZ2h0Q3VycmVudE5vZGUoKSx0aGlzLkVkaXRvci5Ub29sYmFyLm1vdmUoKSx0aGlzLkVkaXRvci5Ub29sYmFyLnBsdXNCdXR0b24uc2hvdygpfXRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKHQpfX0se2tleTpcImRvY3VtZW50Q2xpY2tlZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHQuaXNUcnVzdGVkKXt2YXIgZT10LnRhcmdldDt0aGlzLm5vZGVzLmhvbGRlci5jb250YWlucyhlKXx8eS5kZWZhdWx0LmlzQXRFZGl0b3J8fCh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZHJvcFBvaW50ZXIoKSx0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCksdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpLHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmNsb3NlKCkpLHRoaXMuRWRpdG9yLkNyb3NzQmxvY2tTZWxlY3Rpb24uaXNDcm9zc0Jsb2NrU2VsZWN0aW9uU3RhcnRlZHx8dGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24odCl9fX0se2tleTpcImRvY3VtZW50VG91Y2hlZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXQudGFyZ2V0O2lmKGU9PT10aGlzLm5vZGVzLnJlZGFjdG9yKXt2YXIgbj10IGluc3RhbmNlb2YgTW91c2VFdmVudD90LmNsaWVudFg6dC50b3VjaGVzWzBdLmNsaWVudFgsbz10IGluc3RhbmNlb2YgTW91c2VFdmVudD90LmNsaWVudFk6dC50b3VjaGVzWzBdLmNsaWVudFk7ZT1kb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KG4sbyl9dHJ5e3RoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5zZXRDdXJyZW50QmxvY2tCeUNoaWxkTm9kZShlKSx0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuaGlnaGxpZ2h0Q3VycmVudE5vZGUoKX1jYXRjaCh0KXt0aGlzLkVkaXRvci5SZWN0YW5nbGVTZWxlY3Rpb24uaXNSZWN0QWN0aXZhdGVkKCl8fHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvVGhlTGFzdEJsb2NrKCl9dGhpcy5FZGl0b3IuVG9vbGJhci5vcGVuKCksdGhpcy5FZGl0b3IuVG9vbGJhci5wbHVzQnV0dG9uLmhpZGUoKX19LHtrZXk6XCJyZWRhY3RvckNsaWNrZWRcIix2YWx1ZTpmdW5jdGlvbih0KXtpZih5LmRlZmF1bHQuaXNDb2xsYXBzZWQpe3ZhciBlPWZ1bmN0aW9uKCl7dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSx0LnN0b3BQcm9wYWdhdGlvbigpfSxuPXQudGFyZ2V0LG89dC5tZXRhS2V5fHx0LmN0cmxLZXk7aWYodi5kZWZhdWx0LmlzQW5jaG9yKG4pJiZvKXtlKCk7dmFyIHI9bi5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpLGk9Zy5nZXRWYWxpZFVybChyKTtnLm9wZW5UYWIoaSl9ZWxzZSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrfHwoZSgpLHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5pbnNlcnQoKSksdGhpcy5FZGl0b3IuVG9vbHMuaXNEZWZhdWx0KHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sudG9vbCkmJihlKCksdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay5pc0VtcHR5JiZ0aGlzLkVkaXRvci5Ub29sYmFyLnBsdXNCdXR0b24uc2hvdygpKX19fSx7a2V5Olwic2VsZWN0aW9uQ2hhbmdlZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuRWRpdG9yLG49ZS5Dcm9zc0Jsb2NrU2VsZWN0aW9uLG89ZS5CbG9ja1NlbGVjdGlvbixyPXkuZGVmYXVsdC5hbmNob3JFbGVtZW50O24uaXNDcm9zc0Jsb2NrU2VsZWN0aW9uU3RhcnRlZCYmby5hbnlCbG9ja1NlbGVjdGVkJiZ5LmRlZmF1bHQuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCksciYmci5jbG9zZXN0KFwiLlwiLmNvbmNhdChiLmRlZmF1bHQuQ1NTLmNvbnRlbnQpKT8odGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja3x8dGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnNldEN1cnJlbnRCbG9ja0J5Q2hpbGROb2RlKHIpLHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIudHJ5VG9TaG93KCEwKSk6dGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jb250YWluc05vZGUocil8fHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKX19LHtrZXk6XCJhcHBlbmRTVkdTcHJpdGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXYuZGVmYXVsdC5tYWtlKFwiZGl2XCIpO3QuaGlkZGVuPSEwLHQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIix0LmlubmVySFRNTD1wLmRlZmF1bHQsdi5kZWZhdWx0LmFwcGVuZCh0aGlzLm5vZGVzLndyYXBwZXIsdCl9fSx7a2V5OlwiQ1NTXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue2VkaXRvcldyYXBwZXI6XCJjb2RleC1lZGl0b3JcIixlZGl0b3JXcmFwcGVyTmFycm93OlwiY29kZXgtZWRpdG9yLS1uYXJyb3dcIixlZGl0b3Jab25lOlwiY29kZXgtZWRpdG9yX19yZWRhY3RvclwiLGVkaXRvclpvbmVIaWRkZW46XCJjb2RleC1lZGl0b3JfX3JlZGFjdG9yLS1oaWRkZW5cIixlZGl0b3JMb2FkZXI6XCJjb2RleC1lZGl0b3JfX2xvYWRlclwiLGVkaXRvckVtcHR5OlwiY29kZXgtZWRpdG9yLS1lbXB0eVwiLGVkaXRvclJ0bEZpeDpcImNvZGV4LWVkaXRvci0tcnRsXCJ9fX0se2tleTpcImNvbnRlbnRSZWN0XCIsZ2V0OmZ1bmN0aW9uKCl7aWYodGhpcy5jb250ZW50UmVjdENhY2hlKXJldHVybiB0aGlzLmNvbnRlbnRSZWN0Q2FjaGU7dmFyIHQ9dGhpcy5ub2Rlcy53cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KGIuZGVmYXVsdC5DU1MuY29udGVudCkpO3JldHVybiB0Pyh0aGlzLmNvbnRlbnRSZWN0Q2FjaGU9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSx0aGlzLmNvbnRlbnRSZWN0Q2FjaGUpOnt3aWR0aDo2NTAsbGVmdDowLHJpZ2h0OjB9fX0se2tleTpcInNvbWVUb29sYmFyT3BlbmVkXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5FZGl0b3IsZT10LlRvb2xib3gsbj10LkJsb2NrU2V0dGluZ3Msbz10LklubGluZVRvb2xiYXIscj10LkNvbnZlcnNpb25Ub29sYmFyO3JldHVybiBuLm9wZW5lZHx8by5vcGVuZWR8fHIub3BlbmVkfHxlLm9wZW5lZH19LHtrZXk6XCJzb21lRmxpcHBlckJ1dHRvbkZvY3VzZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy5FZGl0b3IpLmZpbHRlcigoZnVuY3Rpb24odCl7dmFyIGU9KDAsci5kZWZhdWx0KSh0LDIpO3JldHVybiBlWzBdLGVbMV0uZmxpcHBlciBpbnN0YW5jZW9mIG0uZGVmYXVsdH0pKS5zb21lKChmdW5jdGlvbih0KXt2YXIgZT0oMCxyLmRlZmF1bHQpKHQsMik7cmV0dXJuIGVbMF0sZVsxXS5mbGlwcGVyLmN1cnJlbnRJdGVtfSkpfX1dKSxrfShoLmRlZmF1bHQpO28uZGVmYXVsdD13LHcuZGlzcGxheU5hbWU9XCJVSVwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXtuKDE4MiksdC5leHBvcnRzPW4oMzU0KX0sZnVuY3Rpb24odCxlLG4pe24oMTgzKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24oMTg0KSxuKDMyNyksbigzMjkpLG4oMzMyKSxuKDMzNCksbigzMzYpLG4oMzM4KSxuKDM0MCksbigzNDIpLG4oMzQ0KSxuKDM0NiksbigzNDgpLG4oMzUwKSxuKDE0MCl9LGZ1bmN0aW9uKHQsZSxuKXtuKDE4NSksbigxODgpLG4oMTg5KSxuKDE5MCksbigxOTEpLG4oMTkyKSxuKDE5MyksbigxOTQpLG4oMTk1KSxuKDE5NiksbigxOTcpLG4oMTk4KSxuKDE5OSksbigyMDApLG4oMjAxKSxuKDIwMiksbigyMDMpLG4oMjA0KSxuKDIwNSksbigyMDYpLG4oMjA3KSxuKDIwOCksbigyMDkpLG4oMjEwKSxuKDIxMSksbigyMTIpLG4oMjEzKSxuKDIxNCksbigyMTUpLG4oMjE2KSxuKDIxNyksbigyMTgpLG4oMjE5KSxuKDIyMCksbigyMjEpLG4oMjIyKSxuKDIyMyksbigyMjQpLG4oMjI1KSxuKDIyNiksbigyMjcpLG4oMjI4KSxuKDIyOSksbigyMzEpLG4oMjMyKSxuKDIzMyksbigyMzQpLG4oMjM1KSxuKDIzNiksbigyMzcpLG4oMjM4KSxuKDIzOSksbigyNDApLG4oMjQxKSxuKDI0MiksbigyNDMpLG4oMjQ0KSxuKDI0NSksbigyNDYpLG4oMjQ3KSxuKDI0OCksbigyNDkpLG4oMjUwKSxuKDI1MSksbigyNTIpLG4oMjUzKSxuKDI1NCksbigyNTUpLG4oMjU2KSxuKDI1NyksbigyNTgpLG4oMjU5KSxuKDI2MCksbigyNjEpLG4oMjYyKSxuKDI2MyksbigyNjQpLG4oMjY2KSxuKDI2NyksbigyNjkpLG4oMjcwKSxuKDI3MSksbigyNzIpLG4oMjczKSxuKDI3NCksbigyNzUpLG4oMjc3KSxuKDI3OCksbigyNzkpLG4oMjgwKSxuKDI4MSksbigyODIpLG4oMjgzKSxuKDI4NCksbigyODUpLG4oMjg2KSxuKDI4NyksbigyODgpLG4oMjg5KSxuKDEwMiksbigyOTApLG4oMTI5KSxuKDI5MSksbigxMzApLG4oMjkyKSxuKDI5MyksbigyOTQpLG4oMjk1KSxuKDEzMSksbigyOTgpLG4oMjk5KSxuKDMwMCksbigzMDEpLG4oMzAyKSxuKDMwMyksbigzMDQpLG4oMzA1KSxuKDMwNiksbigzMDcpLG4oMzA4KSxuKDMwOSksbigzMTApLG4oMzExKSxuKDMxMiksbigzMTMpLG4oMzE0KSxuKDMxNSksbigzMTYpLG4oMzE3KSxuKDMxOCksbigzMTkpLG4oMzIwKSxuKDMyMSksbigzMjIpLG4oMzIzKSxuKDMyNCksbigzMjUpLG4oMzI2KSx0LmV4cG9ydHM9bigxNyl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDkpLHI9bigyNiksaT1uKDE4KSxhPW4oMCkscz1uKDIzKSxjPW4oNDEpLktFWSxsPW4oMTApLHU9big2NyksZj1uKDUyKSxkPW4oNDMpLHA9bigxNCksaD1uKDgzKSx2PW4oMTEwKSxnPW4oMTg3KSx5PW4oNzApLGI9bigxMSksbT1uKDEyKSxrPW4oMjApLHg9bigyOCksUz1uKDQwKSx3PW4oNDIpLFQ9big0NyksRT1uKDExMyksQz1uKDMzKSxCPW4oNjkpLF89bigxOSksTz1uKDQ1KSxJPUMuZixOPV8uZixNPUUuZixSPW8uU3ltYm9sLEE9by5KU09OLEw9QSYmQS5zdHJpbmdpZnksUD1wKFwiX2hpZGRlblwiKSxEPXAoXCJ0b1ByaW1pdGl2ZVwiKSxqPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLEY9dShcInN5bWJvbC1yZWdpc3RyeVwiKSxVPXUoXCJzeW1ib2xzXCIpLEg9dShcIm9wLXN5bWJvbHNcIiksej1PYmplY3QucHJvdG90eXBlLFc9XCJmdW5jdGlvblwiPT10eXBlb2YgUiYmISFCLmYsRz1vLlFPYmplY3QsVj0hR3x8IUcucHJvdG90eXBlfHwhRy5wcm90b3R5cGUuZmluZENoaWxkLFg9aSYmbCgoZnVuY3Rpb24oKXtyZXR1cm4gNyE9VChOKHt9LFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTih0aGlzLFwiYVwiLHt2YWx1ZTo3fSkuYX19KSkuYX0pKT9mdW5jdGlvbih0LGUsbil7dmFyIG89SSh6LGUpO28mJmRlbGV0ZSB6W2VdLE4odCxlLG4pLG8mJnQhPT16JiZOKHosZSxvKX06TixZPWZ1bmN0aW9uKHQpe3ZhciBlPVVbdF09VChSLnByb3RvdHlwZSk7cmV0dXJuIGUuX2s9dCxlfSxLPVcmJlwic3ltYm9sXCI9PXR5cGVvZiBSLml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIFJ9LFo9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0PT09eiYmWihILGUsbiksYih0KSxlPVMoZSwhMCksYihuKSxyKFUsZSk/KG4uZW51bWVyYWJsZT8ocih0LFApJiZ0W1BdW2VdJiYodFtQXVtlXT0hMSksbj1UKG4se2VudW1lcmFibGU6dygwLCExKX0pKToocih0LFApfHxOKHQsUCx3KDEse30pKSx0W1BdW2VdPSEwKSxYKHQsZSxuKSk6Tih0LGUsbil9LHE9ZnVuY3Rpb24odCxlKXtiKHQpO2Zvcih2YXIgbixvPWcoZT14KGUpKSxyPTAsaT1vLmxlbmd0aDtpPnI7KVoodCxuPW9bcisrXSxlW25dKTtyZXR1cm4gdH0sSj1mdW5jdGlvbih0KXt2YXIgZT1qLmNhbGwodGhpcyx0PVModCwhMCkpO3JldHVybiEodGhpcz09PXomJnIoVSx0KSYmIXIoSCx0KSkmJighKGV8fCFyKHRoaXMsdCl8fCFyKFUsdCl8fHIodGhpcyxQKSYmdGhpc1tQXVt0XSl8fGUpfSwkPWZ1bmN0aW9uKHQsZSl7aWYodD14KHQpLGU9UyhlLCEwKSx0IT09enx8IXIoVSxlKXx8cihILGUpKXt2YXIgbj1JKHQsZSk7cmV0dXJuIW58fCFyKFUsZSl8fHIodCxQKSYmdFtQXVtlXXx8KG4uZW51bWVyYWJsZT0hMCksbn19LFE9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG49TSh4KHQpKSxvPVtdLGk9MDtuLmxlbmd0aD5pOylyKFUsZT1uW2krK10pfHxlPT1QfHxlPT1jfHxvLnB1c2goZSk7cmV0dXJuIG99LHR0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuPXQ9PT16LG89TShuP0g6eCh0KSksaT1bXSxhPTA7by5sZW5ndGg+YTspIXIoVSxlPW9bYSsrXSl8fG4mJiFyKHosZSl8fGkucHVzaChVW2VdKTtyZXR1cm4gaX07V3x8KHMoKFI9ZnVuY3Rpb24oKXtpZih0aGlzIGluc3RhbmNlb2YgUil0aHJvdyBUeXBlRXJyb3IoXCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhXCIpO3ZhciB0PWQoYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApLGU9ZnVuY3Rpb24obil7dGhpcz09PXomJmUuY2FsbChILG4pLHIodGhpcyxQKSYmcih0aGlzW1BdLHQpJiYodGhpc1tQXVt0XT0hMSksWCh0aGlzLHQsdygxLG4pKX07cmV0dXJuIGkmJlYmJlgoeix0LHtjb25maWd1cmFibGU6ITAsc2V0OmV9KSxZKHQpfSkucHJvdG90eXBlLFwidG9TdHJpbmdcIiwoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fa30pKSxDLmY9JCxfLmY9WixuKDQ4KS5mPUUuZj1RLG4oNjMpLmY9SixCLmY9dHQsaSYmIW4oNDQpJiZzKHosXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLEosITApLGguZj1mdW5jdGlvbih0KXtyZXR1cm4gWShwKHQpKX0pLGEoYS5HK2EuVythLkYqIVcse1N5bWJvbDpSfSk7Zm9yKHZhciBldD1cImhhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzXCIuc3BsaXQoXCIsXCIpLG50PTA7ZXQubGVuZ3RoPm50OylwKGV0W250KytdKTtmb3IodmFyIG90PU8ocC5zdG9yZSkscnQ9MDtvdC5sZW5ndGg+cnQ7KXYob3RbcnQrK10pO2EoYS5TK2EuRiohVyxcIlN5bWJvbFwiLHtmb3I6ZnVuY3Rpb24odCl7cmV0dXJuIHIoRix0Kz1cIlwiKT9GW3RdOkZbdF09Uih0KX0sa2V5Rm9yOmZ1bmN0aW9uKHQpe2lmKCFLKHQpKXRocm93IFR5cGVFcnJvcih0K1wiIGlzIG5vdCBhIHN5bWJvbCFcIik7Zm9yKHZhciBlIGluIEYpaWYoRltlXT09PXQpcmV0dXJuIGV9LHVzZVNldHRlcjpmdW5jdGlvbigpe1Y9ITB9LHVzZVNpbXBsZTpmdW5jdGlvbigpe1Y9ITF9fSksYShhLlMrYS5GKiFXLFwiT2JqZWN0XCIse2NyZWF0ZTpmdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lP1QodCk6cShUKHQpLGUpfSxkZWZpbmVQcm9wZXJ0eTpaLGRlZmluZVByb3BlcnRpZXM6cSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6JCxnZXRPd25Qcm9wZXJ0eU5hbWVzOlEsZ2V0T3duUHJvcGVydHlTeW1ib2xzOnR0fSk7dmFyIGl0PWwoKGZ1bmN0aW9uKCl7Qi5mKDEpfSkpO2EoYS5TK2EuRippdCxcIk9iamVjdFwiLHtnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ZnVuY3Rpb24odCl7cmV0dXJuIEIuZihrKHQpKX19KSxBJiZhKGEuUythLkYqKCFXfHxsKChmdW5jdGlvbigpe3ZhciB0PVIoKTtyZXR1cm5cIltudWxsXVwiIT1MKFt0XSl8fFwie31cIiE9TCh7YTp0fSl8fFwie31cIiE9TChPYmplY3QodCkpfSkpKSxcIkpTT05cIix7c3RyaW5naWZ5OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuLG89W3RdLHI9MTthcmd1bWVudHMubGVuZ3RoPnI7KW8ucHVzaChhcmd1bWVudHNbcisrXSk7aWYobj1lPW9bMV0sKG0oZSl8fHZvaWQgMCE9PXQpJiYhSyh0KSlyZXR1cm4geShlKXx8KGU9ZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYoZT1uLmNhbGwodGhpcyx0LGUpKSwhSyhlKSlyZXR1cm4gZX0pLG9bMV09ZSxMLmFwcGx5KEEsbyl9fSksUi5wcm90b3R5cGVbRF18fG4oMjcpKFIucHJvdG90eXBlLEQsUi5wcm90b3R5cGUudmFsdWVPZiksZihSLFwiU3ltYm9sXCIpLGYoTWF0aCxcIk1hdGhcIiwhMCksZihvLkpTT04sXCJKU09OXCIsITApfSxmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPW4oNjcpKFwibmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZ1wiLEZ1bmN0aW9uLnRvU3RyaW5nKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oNDUpLHI9big2OSksaT1uKDYzKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9byh0KSxuPXIuZjtpZihuKWZvcih2YXIgYSxzPW4odCksYz1pLmYsbD0wO3MubGVuZ3RoPmw7KWMuY2FsbCh0LGE9c1tsKytdKSYmZS5wdXNoKGEpO3JldHVybiBlfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCk7byhvLlMsXCJPYmplY3RcIix7Y3JlYXRlOm4oNDcpfSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApO28oby5TK28uRiohbigxOCksXCJPYmplY3RcIix7ZGVmaW5lUHJvcGVydHk6bigxOSkuZn0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKTtvKG8uUytvLkYqIW4oMTgpLFwiT2JqZWN0XCIse2RlZmluZVByb3BlcnRpZXM6bigxMTIpfSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDI4KSxyPW4oMzMpLmY7bigzNCkoXCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlKXtyZXR1cm4gcihvKHQpLGUpfX0pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMjApLHI9big0OSk7bigzNCkoXCJnZXRQcm90b3R5cGVPZlwiLChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gcihvKHQpKX19KSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDIwKSxyPW4oNDUpO24oMzQpKFwia2V5c1wiLChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gcihvKHQpKX19KSl9LGZ1bmN0aW9uKHQsZSxuKXtuKDM0KShcImdldE93blByb3BlcnR5TmFtZXNcIiwoZnVuY3Rpb24oKXtyZXR1cm4gbigxMTMpLmZ9KSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDEyKSxyPW4oNDEpLm9uRnJlZXplO24oMzQpKFwiZnJlZXplXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gdCYmbyhlKT90KHIoZSkpOmV9fSkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxMikscj1uKDQxKS5vbkZyZWV6ZTtuKDM0KShcInNlYWxcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0JiZvKGUpP3QocihlKSk6ZX19KSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDEyKSxyPW4oNDEpLm9uRnJlZXplO24oMzQpKFwicHJldmVudEV4dGVuc2lvbnNcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0JiZvKGUpP3QocihlKSk6ZX19KSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDEyKTtuKDM0KShcImlzRnJvemVuXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4hbyhlKXx8ISF0JiZ0KGUpfX0pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTIpO24oMzQpKFwiaXNTZWFsZWRcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiFvKGUpfHwhIXQmJnQoZSl9fSkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxMik7bigzNCkoXCJpc0V4dGVuc2libGVcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiEhbyhlKSYmKCF0fHx0KGUpKX19KSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApO28oby5TK28uRixcIk9iamVjdFwiLHthc3NpZ246bigxMTQpfSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApO28oby5TLFwiT2JqZWN0XCIse2lzOm4oMTE1KX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKTtvKG8uUyxcIk9iamVjdFwiLHtzZXRQcm90b3R5cGVPZjpuKDg3KS5zZXR9KX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oNjQpLHI9e307cltuKDE0KShcInRvU3RyaW5nVGFnXCIpXT1cInpcIixyK1wiXCIhPVwiW29iamVjdCB6XVwiJiZuKDIzKShPYmplY3QucHJvdG90eXBlLFwidG9TdHJpbmdcIiwoZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgXCIrbyh0aGlzKStcIl1cIn0pLCEwKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCk7byhvLlAsXCJGdW5jdGlvblwiLHtiaW5kOm4oMTE2KX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxOSkuZixyPUZ1bmN0aW9uLnByb3RvdHlwZSxpPS9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcIm5hbWVcImluIHJ8fG4oMTgpJiZvKHIsXCJuYW1lXCIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXt0cnl7cmV0dXJuKFwiXCIrdGhpcykubWF0Y2goaSlbMV19Y2F0Y2godCl7cmV0dXJuXCJcIn19fSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDEyKSxyPW4oNDkpLGk9bigxNCkoXCJoYXNJbnN0YW5jZVwiKSxhPUZ1bmN0aW9uLnByb3RvdHlwZTtpIGluIGF8fG4oMTkpLmYoYSxpLHt2YWx1ZTpmdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzfHwhbyh0KSlyZXR1cm4hMTtpZighbyh0aGlzLnByb3RvdHlwZSkpcmV0dXJuIHQgaW5zdGFuY2VvZiB0aGlzO2Zvcig7dD1yKHQpOylpZih0aGlzLnByb3RvdHlwZT09PXQpcmV0dXJuITA7cmV0dXJuITF9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9bigxMTgpO28oby5HK28uRioocGFyc2VJbnQhPXIpLHtwYXJzZUludDpyfSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9bigxMTkpO28oby5HK28uRioocGFyc2VGbG9hdCE9cikse3BhcnNlRmxvYXQ6cn0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89big5KSxyPW4oMjYpLGk9bigzNiksYT1uKDg5KSxzPW4oNDApLGM9bigxMCksbD1uKDQ4KS5mLHU9bigzMykuZixmPW4oMTkpLmYsZD1uKDUzKS50cmltLHA9by5OdW1iZXIsaD1wLHY9cC5wcm90b3R5cGUsZz1cIk51bWJlclwiPT1pKG4oNDcpKHYpKSx5PVwidHJpbVwiaW4gU3RyaW5nLnByb3RvdHlwZSxiPWZ1bmN0aW9uKHQpe3ZhciBlPXModCwhMSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUmJmUubGVuZ3RoPjIpe3ZhciBuLG8scixpPShlPXk/ZS50cmltKCk6ZChlLDMpKS5jaGFyQ29kZUF0KDApO2lmKDQzPT09aXx8NDU9PT1pKXtpZig4OD09PShuPWUuY2hhckNvZGVBdCgyKSl8fDEyMD09PW4pcmV0dXJuIE5hTn1lbHNlIGlmKDQ4PT09aSl7c3dpdGNoKGUuY2hhckNvZGVBdCgxKSl7Y2FzZSA2NjpjYXNlIDk4Om89MixyPTQ5O2JyZWFrO2Nhc2UgNzk6Y2FzZSAxMTE6bz04LHI9NTU7YnJlYWs7ZGVmYXVsdDpyZXR1cm4rZX1mb3IodmFyIGEsYz1lLnNsaWNlKDIpLGw9MCx1PWMubGVuZ3RoO2w8dTtsKyspaWYoKGE9Yy5jaGFyQ29kZUF0KGwpKTw0OHx8YT5yKXJldHVybiBOYU47cmV0dXJuIHBhcnNlSW50KGMsbyl9fXJldHVybitlfTtpZighcChcIiAwbzFcIil8fCFwKFwiMGIxXCIpfHxwKFwiKzB4MVwiKSl7cD1mdW5jdGlvbih0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPDE/MDp0LG49dGhpcztyZXR1cm4gbiBpbnN0YW5jZW9mIHAmJihnP2MoKGZ1bmN0aW9uKCl7di52YWx1ZU9mLmNhbGwobil9KSk6XCJOdW1iZXJcIiE9aShuKSk/YShuZXcgaChiKGUpKSxuLHApOmIoZSl9O2Zvcih2YXIgbSxrPW4oMTgpP2woaCk6XCJNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSxFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlclwiLnNwbGl0KFwiLFwiKSx4PTA7ay5sZW5ndGg+eDt4KyspcihoLG09a1t4XSkmJiFyKHAsbSkmJmYocCxtLHUoaCxtKSk7cC5wcm90b3R5cGU9dix2LmNvbnN0cnVjdG9yPXAsbigyMykobyxcIk51bWJlclwiLHApfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDMyKSxpPW4oMTIwKSxhPW4oOTApLHM9MS4udG9GaXhlZCxjPU1hdGguZmxvb3IsbD1bMCwwLDAsMCwwLDBdLHU9XCJOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hXCIsZj1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0tMSxvPWU7KytuPDY7KW8rPXQqbFtuXSxsW25dPW8lMWU3LG89YyhvLzFlNyl9LGQ9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTYsbj0wOy0tZT49MDspbis9bFtlXSxsW2VdPWMobi90KSxuPW4ldCoxZTd9LHA9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9NixlPVwiXCI7LS10Pj0wOylpZihcIlwiIT09ZXx8MD09PXR8fDAhPT1sW3RdKXt2YXIgbj1TdHJpbmcobFt0XSk7ZT1cIlwiPT09ZT9uOmUrYS5jYWxsKFwiMFwiLDctbi5sZW5ndGgpK259cmV0dXJuIGV9LGg9ZnVuY3Rpb24odCxlLG4pe3JldHVybiAwPT09ZT9uOmUlMj09MT9oKHQsZS0xLG4qdCk6aCh0KnQsZS8yLG4pfTtvKG8uUCtvLkYqKCEhcyYmKFwiMC4wMDBcIiE9PThlLTUudG9GaXhlZCgzKXx8XCIxXCIhPT0uOS50b0ZpeGVkKDApfHxcIjEuMjVcIiE9PTEuMjU1LnRvRml4ZWQoMil8fFwiMTAwMDAwMDAwMDAwMDAwMDEyOFwiIT09KDB4ZGUwYjZiM2E3NjQwMDgwKS50b0ZpeGVkKDApKXx8IW4oMTApKChmdW5jdGlvbigpe3MuY2FsbCh7fSl9KSkpLFwiTnVtYmVyXCIse3RvRml4ZWQ6ZnVuY3Rpb24odCl7dmFyIGUsbixvLHMsYz1pKHRoaXMsdSksbD1yKHQpLHY9XCJcIixnPVwiMFwiO2lmKGw8MHx8bD4yMCl0aHJvdyBSYW5nZUVycm9yKHUpO2lmKGMhPWMpcmV0dXJuXCJOYU5cIjtpZihjPD0tMWUyMXx8Yz49MWUyMSlyZXR1cm4gU3RyaW5nKGMpO2lmKGM8MCYmKHY9XCItXCIsYz0tYyksYz4xZS0yMSlpZihuPShlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dDtuPj00MDk2OyllKz0xMixuLz00MDk2O2Zvcig7bj49MjspZSs9MSxuLz0yO3JldHVybiBlfShjKmgoMiw2OSwxKSktNjkpPDA/YypoKDIsLWUsMSk6Yy9oKDIsZSwxKSxuKj00NTAzNTk5NjI3MzcwNDk2LChlPTUyLWUpPjApe2ZvcihmKDAsbiksbz1sO28+PTc7KWYoMWU3LDApLG8tPTc7Zm9yKGYoaCgxMCxvLDEpLDApLG89ZS0xO28+PTIzOylkKDE8PDIzKSxvLT0yMztkKDE8PG8pLGYoMSwxKSxkKDIpLGc9cCgpfWVsc2UgZigwLG4pLGYoMTw8LWUsMCksZz1wKCkrYS5jYWxsKFwiMFwiLGwpO3JldHVybiBnPWw+MD92Kygocz1nLmxlbmd0aCk8PWw/XCIwLlwiK2EuY2FsbChcIjBcIixsLXMpK2c6Zy5zbGljZSgwLHMtbCkrXCIuXCIrZy5zbGljZShzLWwpKTp2K2d9fSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDApLHI9bigxMCksaT1uKDEyMCksYT0xLi50b1ByZWNpc2lvbjtvKG8uUCtvLkYqKHIoKGZ1bmN0aW9uKCl7cmV0dXJuXCIxXCIhPT1hLmNhbGwoMSx2b2lkIDApfSkpfHwhcigoZnVuY3Rpb24oKXthLmNhbGwoe30pfSkpKSxcIk51bWJlclwiLHt0b1ByZWNpc2lvbjpmdW5jdGlvbih0KXt2YXIgZT1pKHRoaXMsXCJOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIVwiKTtyZXR1cm4gdm9pZCAwPT09dD9hLmNhbGwoZSk6YS5jYWxsKGUsdCl9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApO28oby5TLFwiTnVtYmVyXCIse0VQU0lMT046TWF0aC5wb3coMiwtNTIpfSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9big5KS5pc0Zpbml0ZTtvKG8uUyxcIk51bWJlclwiLHtpc0Zpbml0ZTpmdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdCYmcih0KX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCk7byhvLlMsXCJOdW1iZXJcIix7aXNJbnRlZ2VyOm4oMTIxKX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKTtvKG8uUyxcIk51bWJlclwiLHtpc05hTjpmdW5jdGlvbih0KXtyZXR1cm4gdCE9dH19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCkscj1uKDEyMSksaT1NYXRoLmFicztvKG8uUyxcIk51bWJlclwiLHtpc1NhZmVJbnRlZ2VyOmZ1bmN0aW9uKHQpe3JldHVybiByKHQpJiZpKHQpPD05MDA3MTk5MjU0NzQwOTkxfX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKTtvKG8uUyxcIk51bWJlclwiLHtNQVhfU0FGRV9JTlRFR0VSOjkwMDcxOTkyNTQ3NDA5OTF9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCk7byhvLlMsXCJOdW1iZXJcIix7TUlOX1NBRkVfSU5URUdFUjotOTAwNzE5OTI1NDc0MDk5MX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKSxyPW4oMTE5KTtvKG8uUytvLkYqKE51bWJlci5wYXJzZUZsb2F0IT1yKSxcIk51bWJlclwiLHtwYXJzZUZsb2F0OnJ9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCkscj1uKDExOCk7byhvLlMrby5GKihOdW1iZXIucGFyc2VJbnQhPXIpLFwiTnVtYmVyXCIse3BhcnNlSW50OnJ9KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCkscj1uKDEyMiksaT1NYXRoLnNxcnQsYT1NYXRoLmFjb3NoO28oby5TK28uRiohKGEmJjcxMD09TWF0aC5mbG9vcihhKE51bWJlci5NQVhfVkFMVUUpKSYmYSgxLzApPT0xLzApLFwiTWF0aFwiLHthY29zaDpmdW5jdGlvbih0KXtyZXR1cm4odD0rdCk8MT9OYU46dD45NDkwNjI2NS42MjQyNTE1Nj9NYXRoLmxvZyh0KStNYXRoLkxOMjpyKHQtMStpKHQtMSkqaSh0KzEpKX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCkscj1NYXRoLmFzaW5oO28oby5TK28uRiohKHImJjEvcigwKT4wKSxcIk1hdGhcIix7YXNpbmg6ZnVuY3Rpb24gdChlKXtyZXR1cm4gaXNGaW5pdGUoZT0rZSkmJjAhPWU/ZTwwPy10KC1lKTpNYXRoLmxvZyhlK01hdGguc3FydChlKmUrMSkpOmV9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9TWF0aC5hdGFuaDtvKG8uUytvLkYqIShyJiYxL3IoLTApPDApLFwiTWF0aFwiLHthdGFuaDpmdW5jdGlvbih0KXtyZXR1cm4gMD09KHQ9K3QpP3Q6TWF0aC5sb2coKDErdCkvKDEtdCkpLzJ9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9big5MSk7byhvLlMsXCJNYXRoXCIse2NicnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHIodD0rdCkqTWF0aC5wb3coTWF0aC5hYnModCksMS8zKX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCk7byhvLlMsXCJNYXRoXCIse2NsejMyOmZ1bmN0aW9uKHQpe3JldHVybih0Pj4+PTApPzMxLU1hdGguZmxvb3IoTWF0aC5sb2codCsuNSkqTWF0aC5MT0cyRSk6MzJ9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9TWF0aC5leHA7byhvLlMsXCJNYXRoXCIse2Nvc2g6ZnVuY3Rpb24odCl7cmV0dXJuKHIodD0rdCkrcigtdCkpLzJ9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9big5Mik7byhvLlMrby5GKihyIT1NYXRoLmV4cG0xKSxcIk1hdGhcIix7ZXhwbTE6cn0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKTtvKG8uUyxcIk1hdGhcIix7ZnJvdW5kOm4oMjMwKX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89big5MSkscj1NYXRoLnBvdyxpPXIoMiwtNTIpLGE9cigyLC0yMykscz1yKDIsMTI3KSooMi1hKSxjPXIoMiwtMTI2KTt0LmV4cG9ydHM9TWF0aC5mcm91bmR8fGZ1bmN0aW9uKHQpe3ZhciBlLG4scj1NYXRoLmFicyh0KSxsPW8odCk7cmV0dXJuIHI8Yz9sKihyL2MvYSsxL2ktMS9pKSpjKmE6KG49KGU9KDErYS9pKSpyKS0oZS1yKSk+c3x8biE9bj9sKigxLzApOmwqbn19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9TWF0aC5hYnM7byhvLlMsXCJNYXRoXCIse2h5cG90OmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuLG8saT0wLGE9MCxzPWFyZ3VtZW50cy5sZW5ndGgsYz0wO2E8czspYzwobj1yKGFyZ3VtZW50c1thKytdKSk/KGk9aSoobz1jL24pKm8rMSxjPW4pOmkrPW4+MD8obz1uL2MpKm86bjtyZXR1cm4gYz09PTEvMD8xLzA6YypNYXRoLnNxcnQoaSl9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9TWF0aC5pbXVsO28oby5TK28uRipuKDEwKSgoZnVuY3Rpb24oKXtyZXR1cm4tNSE9cig0Mjk0OTY3Mjk1LDUpfHwyIT1yLmxlbmd0aH0pKSxcIk1hdGhcIix7aW11bDpmdW5jdGlvbih0LGUpe3ZhciBuPSt0LG89K2Uscj02NTUzNSZuLGk9NjU1MzUmbztyZXR1cm4gMHxyKmkrKCg2NTUzNSZuPj4+MTYpKmkrciooNjU1MzUmbz4+PjE2KTw8MTY+Pj4wKX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCk7byhvLlMsXCJNYXRoXCIse2xvZzEwOmZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLmxvZyh0KSpNYXRoLkxPRzEwRX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCk7byhvLlMsXCJNYXRoXCIse2xvZzFwOm4oMTIyKX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKTtvKG8uUyxcIk1hdGhcIix7bG9nMjpmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5sb2codCkvTWF0aC5MTjJ9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApO28oby5TLFwiTWF0aFwiLHtzaWduOm4oOTEpfSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9big5MiksaT1NYXRoLmV4cDtvKG8uUytvLkYqbigxMCkoKGZ1bmN0aW9uKCl7cmV0dXJuLTJlLTE3IT0hTWF0aC5zaW5oKC0yZS0xNyl9KSksXCJNYXRoXCIse3Npbmg6ZnVuY3Rpb24odCl7cmV0dXJuIE1hdGguYWJzKHQ9K3QpPDE/KHIodCktcigtdCkpLzI6KGkodC0xKS1pKC10LTEpKSooTWF0aC5FLzIpfX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKSxyPW4oOTIpLGk9TWF0aC5leHA7byhvLlMsXCJNYXRoXCIse3Rhbmg6ZnVuY3Rpb24odCl7dmFyIGU9cih0PSt0KSxuPXIoLXQpO3JldHVybiBlPT0xLzA/MTpuPT0xLzA/LTE6KGUtbikvKGkodCkraSgtdCkpfX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKTtvKG8uUyxcIk1hdGhcIix7dHJ1bmM6ZnVuY3Rpb24odCl7cmV0dXJuKHQ+MD9NYXRoLmZsb29yOk1hdGguY2VpbCkodCl9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9big0NiksaT1TdHJpbmcuZnJvbUNoYXJDb2RlLGE9U3RyaW5nLmZyb21Db2RlUG9pbnQ7byhvLlMrby5GKighIWEmJjEhPWEubGVuZ3RoKSxcIlN0cmluZ1wiLHtmcm9tQ29kZVBvaW50OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuPVtdLG89YXJndW1lbnRzLmxlbmd0aCxhPTA7bz5hOyl7aWYoZT0rYXJndW1lbnRzW2ErK10scihlLDExMTQxMTEpIT09ZSl0aHJvdyBSYW5nZUVycm9yKGUrXCIgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludFwiKTtuLnB1c2goZTw2NTUzNj9pKGUpOmkoNTUyOTYrKChlLT02NTUzNik+PjEwKSxlJTEwMjQrNTYzMjApKX1yZXR1cm4gbi5qb2luKFwiXCIpfX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKSxyPW4oMjgpLGk9bigxNik7byhvLlMsXCJTdHJpbmdcIix7cmF3OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1yKHQucmF3KSxuPWkoZS5sZW5ndGgpLG89YXJndW1lbnRzLmxlbmd0aCxhPVtdLHM9MDtuPnM7KWEucHVzaChTdHJpbmcoZVtzKytdKSksczxvJiZhLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tzXSkpO3JldHVybiBhLmpvaW4oXCJcIil9fSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtuKDUzKShcInRyaW1cIiwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcywzKX19KSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDkzKSghMCk7big5NCkoU3RyaW5nLFwiU3RyaW5nXCIsKGZ1bmN0aW9uKHQpe3RoaXMuX3Q9U3RyaW5nKHQpLHRoaXMuX2k9MH0pLChmdW5jdGlvbigpe3ZhciB0LGU9dGhpcy5fdCxuPXRoaXMuX2k7cmV0dXJuIG4+PWUubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KHQ9byhlLG4pLHRoaXMuX2krPXQubGVuZ3RoLHt2YWx1ZTp0LGRvbmU6ITF9KX0pKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDkzKSghMSk7byhvLlAsXCJTdHJpbmdcIix7Y29kZVBvaW50QXQ6ZnVuY3Rpb24odCl7cmV0dXJuIHIodGhpcyx0KX19KX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDE2KSxpPW4oOTUpLGE9XCJcIi5lbmRzV2l0aDtvKG8uUCtvLkYqbig5NykoXCJlbmRzV2l0aFwiKSxcIlN0cmluZ1wiLHtlbmRzV2l0aDpmdW5jdGlvbih0KXt2YXIgZT1pKHRoaXMsdCxcImVuZHNXaXRoXCIpLG49YXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsbz1yKGUubGVuZ3RoKSxzPXZvaWQgMD09PW4/bzpNYXRoLm1pbihyKG4pLG8pLGM9U3RyaW5nKHQpO3JldHVybiBhP2EuY2FsbChlLGMscyk6ZS5zbGljZShzLWMubGVuZ3RoLHMpPT09Y319KX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDk1KTtvKG8uUCtvLkYqbig5NykoXCJpbmNsdWRlc1wiKSxcIlN0cmluZ1wiLHtpbmNsdWRlczpmdW5jdGlvbih0KXtyZXR1cm4hIX5yKHRoaXMsdCxcImluY2x1ZGVzXCIpLmluZGV4T2YodCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApO28oby5QLFwiU3RyaW5nXCIse3JlcGVhdDpuKDkwKX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigwKSxyPW4oMTYpLGk9big5NSksYT1cIlwiLnN0YXJ0c1dpdGg7byhvLlArby5GKm4oOTcpKFwic3RhcnRzV2l0aFwiKSxcIlN0cmluZ1wiLHtzdGFydHNXaXRoOmZ1bmN0aW9uKHQpe3ZhciBlPWkodGhpcyx0LFwic3RhcnRzV2l0aFwiKSxuPXIoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsZS5sZW5ndGgpKSxvPVN0cmluZyh0KTtyZXR1cm4gYT9hLmNhbGwoZSxvLG4pOmUuc2xpY2UobixuK28ubGVuZ3RoKT09PW99fSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtuKDI0KShcImFuY2hvclwiLChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIHQodGhpcyxcImFcIixcIm5hbWVcIixlKX19KSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtuKDI0KShcImJpZ1wiLChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLFwiYmlnXCIsXCJcIixcIlwiKX19KSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtuKDI0KShcImJsaW5rXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsXCJibGlua1wiLFwiXCIsXCJcIil9fSkpfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7bigyNCkoXCJib2xkXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsXCJiXCIsXCJcIixcIlwiKX19KSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtuKDI0KShcImZpeGVkXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsXCJ0dFwiLFwiXCIsXCJcIil9fSkpfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7bigyNCkoXCJmb250Y29sb3JcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0KHRoaXMsXCJmb250XCIsXCJjb2xvclwiLGUpfX0pKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24oMjQpKFwiZm9udHNpemVcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0KHRoaXMsXCJmb250XCIsXCJzaXplXCIsZSl9fSkpfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7bigyNCkoXCJpdGFsaWNzXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsXCJpXCIsXCJcIixcIlwiKX19KSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtuKDI0KShcImxpbmtcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiB0KHRoaXMsXCJhXCIsXCJocmVmXCIsZSl9fSkpfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7bigyNCkoXCJzbWFsbFwiLChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLFwic21hbGxcIixcIlwiLFwiXCIpfX0pKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24oMjQpKFwic3RyaWtlXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsXCJzdHJpa2VcIixcIlwiLFwiXCIpfX0pKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24oMjQpKFwic3ViXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsXCJzdWJcIixcIlwiLFwiXCIpfX0pKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24oMjQpKFwic3VwXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0KHRoaXMsXCJzdXBcIixcIlwiLFwiXCIpfX0pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCk7byhvLlMsXCJEYXRlXCIse25vdzpmdW5jdGlvbigpe3JldHVybihuZXcgRGF0ZSkuZ2V0VGltZSgpfX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigwKSxyPW4oMjApLGk9big0MCk7byhvLlArby5GKm4oMTApKChmdW5jdGlvbigpe3JldHVybiBudWxsIT09bmV3IERhdGUoTmFOKS50b0pTT04oKXx8MSE9PURhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHt0b0lTT1N0cmluZzpmdW5jdGlvbigpe3JldHVybiAxfX0pfSkpLFwiRGF0ZVwiLHt0b0pTT046ZnVuY3Rpb24odCl7dmFyIGU9cih0aGlzKSxuPWkoZSk7cmV0dXJuXCJudW1iZXJcIiE9dHlwZW9mIG58fGlzRmluaXRlKG4pP2UudG9JU09TdHJpbmcoKTpudWxsfX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKSxyPW4oMjY1KTtvKG8uUCtvLkYqKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nIT09ciksXCJEYXRlXCIse3RvSVNPU3RyaW5nOnJ9KX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMTApLHI9RGF0ZS5wcm90b3R5cGUuZ2V0VGltZSxpPURhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nLGE9ZnVuY3Rpb24odCl7cmV0dXJuIHQ+OT90OlwiMFwiK3R9O3QuZXhwb3J0cz1vKChmdW5jdGlvbigpe3JldHVyblwiMDM4NS0wNy0yNVQwNzowNjozOS45OTlaXCIhPWkuY2FsbChuZXcgRGF0ZSgtNTAwMDAwMDAwMDAwMDEpKX0pKXx8IW8oKGZ1bmN0aW9uKCl7aS5jYWxsKG5ldyBEYXRlKE5hTikpfSkpP2Z1bmN0aW9uKCl7aWYoIWlzRmluaXRlKHIuY2FsbCh0aGlzKSkpdGhyb3cgUmFuZ2VFcnJvcihcIkludmFsaWQgdGltZSB2YWx1ZVwiKTt2YXIgdD10aGlzLGU9dC5nZXRVVENGdWxsWWVhcigpLG49dC5nZXRVVENNaWxsaXNlY29uZHMoKSxvPWU8MD9cIi1cIjplPjk5OTk/XCIrXCI6XCJcIjtyZXR1cm4gbysoXCIwMDAwMFwiK01hdGguYWJzKGUpKS5zbGljZShvPy02Oi00KStcIi1cIithKHQuZ2V0VVRDTW9udGgoKSsxKStcIi1cIithKHQuZ2V0VVRDRGF0ZSgpKStcIlRcIithKHQuZ2V0VVRDSG91cnMoKSkrXCI6XCIrYSh0LmdldFVUQ01pbnV0ZXMoKSkrXCI6XCIrYSh0LmdldFVUQ1NlY29uZHMoKSkrXCIuXCIrKG4+OTk/bjpcIjBcIithKG4pKStcIlpcIn06aX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPURhdGUucHJvdG90eXBlLHI9by50b1N0cmluZyxpPW8uZ2V0VGltZTtuZXcgRGF0ZShOYU4pK1wiXCIhPVwiSW52YWxpZCBEYXRlXCImJm4oMjMpKG8sXCJ0b1N0cmluZ1wiLChmdW5jdGlvbigpe3ZhciB0PWkuY2FsbCh0aGlzKTtyZXR1cm4gdD09dD9yLmNhbGwodGhpcyk6XCJJbnZhbGlkIERhdGVcIn0pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTQpKFwidG9QcmltaXRpdmVcIikscj1EYXRlLnByb3RvdHlwZTtvIGluIHJ8fG4oMjcpKHIsbyxuKDI2OCkpfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigxMSkscj1uKDQwKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoXCJzdHJpbmdcIiE9PXQmJlwibnVtYmVyXCIhPT10JiZcImRlZmF1bHRcIiE9PXQpdGhyb3cgVHlwZUVycm9yKFwiSW5jb3JyZWN0IGhpbnRcIik7cmV0dXJuIHIobyh0aGlzKSxcIm51bWJlclwiIT10KX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApO28oby5TLFwiQXJyYXlcIix7aXNBcnJheTpuKDcwKX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigzMCkscj1uKDApLGk9bigyMCksYT1uKDEyNCkscz1uKDk4KSxjPW4oMTYpLGw9big5OSksdT1uKDEwMCk7cihyLlMrci5GKiFuKDcxKSgoZnVuY3Rpb24odCl7QXJyYXkuZnJvbSh0KX0pKSxcIkFycmF5XCIse2Zyb206ZnVuY3Rpb24odCl7dmFyIGUsbixyLGYsZD1pKHQpLHA9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcz90aGlzOkFycmF5LGg9YXJndW1lbnRzLmxlbmd0aCx2PWg+MT9hcmd1bWVudHNbMV06dm9pZCAwLGc9dm9pZCAwIT09dix5PTAsYj11KGQpO2lmKGcmJih2PW8odixoPjI/YXJndW1lbnRzWzJdOnZvaWQgMCwyKSksbnVsbD09Ynx8cD09QXJyYXkmJnMoYikpZm9yKG49bmV3IHAoZT1jKGQubGVuZ3RoKSk7ZT55O3krKylsKG4seSxnP3YoZFt5XSx5KTpkW3ldKTtlbHNlIGZvcihmPWIuY2FsbChkKSxuPW5ldyBwOyEocj1mLm5leHQoKSkuZG9uZTt5KyspbChuLHksZz9hKGYsdixbci52YWx1ZSx5XSwhMCk6ci52YWx1ZSk7cmV0dXJuIG4ubGVuZ3RoPXksbn19KX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDk5KTtvKG8uUytvLkYqbigxMCkoKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4hKEFycmF5Lm9mLmNhbGwodClpbnN0YW5jZW9mIHQpfSkpLFwiQXJyYXlcIix7b2Y6ZnVuY3Rpb24oKXtmb3IodmFyIHQ9MCxlPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcoXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcz90aGlzOkFycmF5KShlKTtlPnQ7KXIobix0LGFyZ3VtZW50c1t0KytdKTtyZXR1cm4gbi5sZW5ndGg9ZSxufX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigwKSxyPW4oMjgpLGk9W10uam9pbjtvKG8uUCtvLkYqKG4oNjIpIT1PYmplY3R8fCFuKDI5KShpKSksXCJBcnJheVwiLHtqb2luOmZ1bmN0aW9uKHQpe3JldHVybiBpLmNhbGwocih0aGlzKSx2b2lkIDA9PT10P1wiLFwiOnQpfX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigwKSxyPW4oODYpLGk9bigzNiksYT1uKDQ2KSxzPW4oMTYpLGM9W10uc2xpY2U7byhvLlArby5GKm4oMTApKChmdW5jdGlvbigpe3ImJmMuY2FsbChyKX0pKSxcIkFycmF5XCIse3NsaWNlOmZ1bmN0aW9uKHQsZSl7dmFyIG49cyh0aGlzLmxlbmd0aCksbz1pKHRoaXMpO2lmKGU9dm9pZCAwPT09ZT9uOmUsXCJBcnJheVwiPT1vKXJldHVybiBjLmNhbGwodGhpcyx0LGUpO2Zvcih2YXIgcj1hKHQsbiksbD1hKGUsbiksdT1zKGwtciksZj1uZXcgQXJyYXkodSksZD0wO2Q8dTtkKyspZltkXT1cIlN0cmluZ1wiPT1vP3RoaXMuY2hhckF0KHIrZCk6dGhpc1tyK2RdO3JldHVybiBmfX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigwKSxyPW4oMzEpLGk9bigyMCksYT1uKDEwKSxzPVtdLnNvcnQsYz1bMSwyLDNdO28oby5QK28uRiooYSgoZnVuY3Rpb24oKXtjLnNvcnQodm9pZCAwKX0pKXx8IWEoKGZ1bmN0aW9uKCl7Yy5zb3J0KG51bGwpfSkpfHwhbigyOSkocykpLFwiQXJyYXlcIix7c29ydDpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dD9zLmNhbGwoaSh0aGlzKSk6cy5jYWxsKGkodGhpcykscih0KSl9fSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDApLHI9bigzNSkoMCksaT1uKDI5KShbXS5mb3JFYWNoLCEwKTtvKG8uUCtvLkYqIWksXCJBcnJheVwiLHtmb3JFYWNoOmZ1bmN0aW9uKHQpe3JldHVybiByKHRoaXMsdCxhcmd1bWVudHNbMV0pfX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxMikscj1uKDcwKSxpPW4oMTQpKFwic3BlY2llc1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuIHIodCkmJihcImZ1bmN0aW9uXCIhPXR5cGVvZihlPXQuY29uc3RydWN0b3IpfHxlIT09QXJyYXkmJiFyKGUucHJvdG90eXBlKXx8KGU9dm9pZCAwKSxvKGUpJiZudWxsPT09KGU9ZVtpXSkmJihlPXZvaWQgMCkpLHZvaWQgMD09PWU/QXJyYXk6ZX19LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDApLHI9bigzNSkoMSk7byhvLlArby5GKiFuKDI5KShbXS5tYXAsITApLFwiQXJyYXlcIix7bWFwOmZ1bmN0aW9uKHQpe3JldHVybiByKHRoaXMsdCxhcmd1bWVudHNbMV0pfX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigwKSxyPW4oMzUpKDIpO28oby5QK28uRiohbigyOSkoW10uZmlsdGVyLCEwKSxcIkFycmF5XCIse2ZpbHRlcjpmdW5jdGlvbih0KXtyZXR1cm4gcih0aGlzLHQsYXJndW1lbnRzWzFdKX19KX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDM1KSgzKTtvKG8uUCtvLkYqIW4oMjkpKFtdLnNvbWUsITApLFwiQXJyYXlcIix7c29tZTpmdW5jdGlvbih0KXtyZXR1cm4gcih0aGlzLHQsYXJndW1lbnRzWzFdKX19KX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDM1KSg0KTtvKG8uUCtvLkYqIW4oMjkpKFtdLmV2ZXJ5LCEwKSxcIkFycmF5XCIse2V2ZXJ5OmZ1bmN0aW9uKHQpe3JldHVybiByKHRoaXMsdCxhcmd1bWVudHNbMV0pfX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigwKSxyPW4oMTI2KTtvKG8uUCtvLkYqIW4oMjkpKFtdLnJlZHVjZSwhMCksXCJBcnJheVwiLHtyZWR1Y2U6ZnVuY3Rpb24odCl7cmV0dXJuIHIodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGgsYXJndW1lbnRzWzFdLCExKX19KX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDEyNik7byhvLlArby5GKiFuKDI5KShbXS5yZWR1Y2VSaWdodCwhMCksXCJBcnJheVwiLHtyZWR1Y2VSaWdodDpmdW5jdGlvbih0KXtyZXR1cm4gcih0aGlzLHQsYXJndW1lbnRzLmxlbmd0aCxhcmd1bWVudHNbMV0sITApfX0pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89bigwKSxyPW4oNjgpKCExKSxpPVtdLmluZGV4T2YsYT0hIWkmJjEvWzFdLmluZGV4T2YoMSwtMCk8MDtvKG8uUCtvLkYqKGF8fCFuKDI5KShpKSksXCJBcnJheVwiLHtpbmRleE9mOmZ1bmN0aW9uKHQpe3JldHVybiBhP2kuYXBwbHkodGhpcyxhcmd1bWVudHMpfHwwOnIodGhpcyx0LGFyZ3VtZW50c1sxXSl9fSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDApLHI9bigyOCksaT1uKDMyKSxhPW4oMTYpLHM9W10ubGFzdEluZGV4T2YsYz0hIXMmJjEvWzFdLmxhc3RJbmRleE9mKDEsLTApPDA7byhvLlArby5GKihjfHwhbigyOSkocykpLFwiQXJyYXlcIix7bGFzdEluZGV4T2Y6ZnVuY3Rpb24odCl7aWYoYylyZXR1cm4gcy5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fDA7dmFyIGU9cih0aGlzKSxuPWEoZS5sZW5ndGgpLG89bi0xO2Zvcihhcmd1bWVudHMubGVuZ3RoPjEmJihvPU1hdGgubWluKG8saShhcmd1bWVudHNbMV0pKSksbzwwJiYobz1uK28pO28+PTA7by0tKWlmKG8gaW4gZSYmZVtvXT09PXQpcmV0dXJuIG98fDA7cmV0dXJuLTF9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApO28oby5QLFwiQXJyYXlcIix7Y29weVdpdGhpbjpuKDEyNyl9KSxuKDUwKShcImNvcHlXaXRoaW5cIil9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApO28oby5QLFwiQXJyYXlcIix7ZmlsbDpuKDEwMSl9KSxuKDUwKShcImZpbGxcIil9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDApLHI9bigzNSkoNSksaT0hMDtcImZpbmRcImluW10mJkFycmF5KDEpLmZpbmQoKGZ1bmN0aW9uKCl7aT0hMX0pKSxvKG8uUCtvLkYqaSxcIkFycmF5XCIse2ZpbmQ6ZnVuY3Rpb24odCl7cmV0dXJuIHIodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwKX19KSxuKDUwKShcImZpbmRcIil9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDApLHI9bigzNSkoNiksaT1cImZpbmRJbmRleFwiLGE9ITA7aSBpbltdJiZBcnJheSgxKVtpXSgoZnVuY3Rpb24oKXthPSExfSkpLG8oby5QK28uRiphLFwiQXJyYXlcIix7ZmluZEluZGV4OmZ1bmN0aW9uKHQpe3JldHVybiByKHRoaXMsdCxhcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCl9fSksbig1MCkoaSl9LGZ1bmN0aW9uKHQsZSxuKXtuKDU1KShcIkFycmF5XCIpfSxmdW5jdGlvbih0LGUsbil7dmFyIG89big5KSxyPW4oODkpLGk9bigxOSkuZixhPW4oNDgpLmYscz1uKDk2KSxjPW4oNzIpLGw9by5SZWdFeHAsdT1sLGY9bC5wcm90b3R5cGUsZD0vYS9nLHA9L2EvZyxoPW5ldyBsKGQpIT09ZDtpZihuKDE4KSYmKCFofHxuKDEwKSgoZnVuY3Rpb24oKXtyZXR1cm4gcFtuKDE0KShcIm1hdGNoXCIpXT0hMSxsKGQpIT1kfHxsKHApPT1wfHxcIi9hL2lcIiE9bChkLFwiaVwiKX0pKSkpe2w9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzIGluc3RhbmNlb2YgbCxvPXModCksaT12b2lkIDA9PT1lO3JldHVybiFuJiZvJiZ0LmNvbnN0cnVjdG9yPT09bCYmaT90OnIoaD9uZXcgdShvJiYhaT90LnNvdXJjZTp0LGUpOnUoKG89dCBpbnN0YW5jZW9mIGwpP3Quc291cmNlOnQsbyYmaT9jLmNhbGwodCk6ZSksbj90aGlzOmYsbCl9O2Zvcih2YXIgdj1mdW5jdGlvbih0KXt0IGluIGx8fGkobCx0LHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHVbdF19LHNldDpmdW5jdGlvbihlKXt1W3RdPWV9fSl9LGc9YSh1KSx5PTA7Zy5sZW5ndGg+eTspdihnW3krK10pO2YuY29uc3RydWN0b3I9bCxsLnByb3RvdHlwZT1mLG4oMjMpKG8sXCJSZWdFeHBcIixsKX1uKDU1KShcIlJlZ0V4cFwiKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24oMTMwKTt2YXIgbz1uKDExKSxyPW4oNzIpLGk9bigxOCksYT0vLi8udG9TdHJpbmcscz1mdW5jdGlvbih0KXtuKDIzKShSZWdFeHAucHJvdG90eXBlLFwidG9TdHJpbmdcIix0LCEwKX07bigxMCkoKGZ1bmN0aW9uKCl7cmV0dXJuXCIvYS9iXCIhPWEuY2FsbCh7c291cmNlOlwiYVwiLGZsYWdzOlwiYlwifSl9KSk/cygoZnVuY3Rpb24oKXt2YXIgdD1vKHRoaXMpO3JldHVyblwiL1wiLmNvbmNhdCh0LnNvdXJjZSxcIi9cIixcImZsYWdzXCJpbiB0P3QuZmxhZ3M6IWkmJnQgaW5zdGFuY2VvZiBSZWdFeHA/ci5jYWxsKHQpOnZvaWQgMCl9KSk6XCJ0b1N0cmluZ1wiIT1hLm5hbWUmJnMoKGZ1bmN0aW9uKCl7cmV0dXJuIGEuY2FsbCh0aGlzKX0pKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMTEpLHI9bigxNiksaT1uKDEwNCksYT1uKDczKTtuKDc0KShcIm1hdGNoXCIsMSwoZnVuY3Rpb24odCxlLG4scyl7cmV0dXJuW2Z1bmN0aW9uKG4pe3ZhciBvPXQodGhpcykscj1udWxsPT1uP3ZvaWQgMDpuW2VdO3JldHVybiB2b2lkIDAhPT1yP3IuY2FsbChuLG8pOm5ldyBSZWdFeHAobilbZV0oU3RyaW5nKG8pKX0sZnVuY3Rpb24odCl7dmFyIGU9cyhuLHQsdGhpcyk7aWYoZS5kb25lKXJldHVybiBlLnZhbHVlO3ZhciBjPW8odCksbD1TdHJpbmcodGhpcyk7aWYoIWMuZ2xvYmFsKXJldHVybiBhKGMsbCk7dmFyIHU9Yy51bmljb2RlO2MubGFzdEluZGV4PTA7Zm9yKHZhciBmLGQ9W10scD0wO251bGwhPT0oZj1hKGMsbCkpOyl7dmFyIGg9U3RyaW5nKGZbMF0pO2RbcF09aCxcIlwiPT09aCYmKGMubGFzdEluZGV4PWkobCxyKGMubGFzdEluZGV4KSx1KSkscCsrfXJldHVybiAwPT09cD9udWxsOmR9XX0pKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMTEpLHI9bigyMCksaT1uKDE2KSxhPW4oMzIpLHM9bigxMDQpLGM9big3MyksbD1NYXRoLm1heCx1PU1hdGgubWluLGY9TWF0aC5mbG9vcixkPS9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZyxwPS9cXCQoWyQmYCddfFxcZFxcZD8pL2c7big3NCkoXCJyZXBsYWNlXCIsMiwoZnVuY3Rpb24odCxlLG4saCl7cmV0dXJuW2Z1bmN0aW9uKG8scil7dmFyIGk9dCh0aGlzKSxhPW51bGw9PW8/dm9pZCAwOm9bZV07cmV0dXJuIHZvaWQgMCE9PWE/YS5jYWxsKG8saSxyKTpuLmNhbGwoU3RyaW5nKGkpLG8scil9LGZ1bmN0aW9uKHQsZSl7dmFyIHI9aChuLHQsdGhpcyxlKTtpZihyLmRvbmUpcmV0dXJuIHIudmFsdWU7dmFyIGY9byh0KSxkPVN0cmluZyh0aGlzKSxwPVwiZnVuY3Rpb25cIj09dHlwZW9mIGU7cHx8KGU9U3RyaW5nKGUpKTt2YXIgZz1mLmdsb2JhbDtpZihnKXt2YXIgeT1mLnVuaWNvZGU7Zi5sYXN0SW5kZXg9MH1mb3IodmFyIGI9W107Oyl7dmFyIG09YyhmLGQpO2lmKG51bGw9PT1tKWJyZWFrO2lmKGIucHVzaChtKSwhZylicmVhaztcIlwiPT09U3RyaW5nKG1bMF0pJiYoZi5sYXN0SW5kZXg9cyhkLGkoZi5sYXN0SW5kZXgpLHkpKX1mb3IodmFyIGsseD1cIlwiLFM9MCx3PTA7dzxiLmxlbmd0aDt3Kyspe209Ylt3XTtmb3IodmFyIFQ9U3RyaW5nKG1bMF0pLEU9bCh1KGEobS5pbmRleCksZC5sZW5ndGgpLDApLEM9W10sQj0xO0I8bS5sZW5ndGg7QisrKUMucHVzaCh2b2lkIDA9PT0oaz1tW0JdKT9rOlN0cmluZyhrKSk7dmFyIF89bS5ncm91cHM7aWYocCl7dmFyIE89W1RdLmNvbmNhdChDLEUsZCk7dm9pZCAwIT09XyYmTy5wdXNoKF8pO3ZhciBJPVN0cmluZyhlLmFwcGx5KHZvaWQgMCxPKSl9ZWxzZSBJPXYoVCxkLEUsQyxfLGUpO0U+PVMmJih4Kz1kLnNsaWNlKFMsRSkrSSxTPUUrVC5sZW5ndGgpfXJldHVybiB4K2Quc2xpY2UoUyl9XTtmdW5jdGlvbiB2KHQsZSxvLGksYSxzKXt2YXIgYz1vK3QubGVuZ3RoLGw9aS5sZW5ndGgsdT1wO3JldHVybiB2b2lkIDAhPT1hJiYoYT1yKGEpLHU9ZCksbi5jYWxsKHMsdSwoZnVuY3Rpb24obixyKXt2YXIgcztzd2l0Y2goci5jaGFyQXQoMCkpe2Nhc2VcIiRcIjpyZXR1cm5cIiRcIjtjYXNlXCImXCI6cmV0dXJuIHQ7Y2FzZVwiYFwiOnJldHVybiBlLnNsaWNlKDAsbyk7Y2FzZVwiJ1wiOnJldHVybiBlLnNsaWNlKGMpO2Nhc2VcIjxcIjpzPWFbci5zbGljZSgxLC0xKV07YnJlYWs7ZGVmYXVsdDp2YXIgdT0rcjtpZigwPT09dSlyZXR1cm4gbjtpZih1Pmwpe3ZhciBkPWYodS8xMCk7cmV0dXJuIDA9PT1kP246ZDw9bD92b2lkIDA9PT1pW2QtMV0/ci5jaGFyQXQoMSk6aVtkLTFdK3IuY2hhckF0KDEpOm59cz1pW3UtMV19cmV0dXJuIHZvaWQgMD09PXM/XCJcIjpzfSkpfX0pKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMTEpLHI9bigxMTUpLGk9big3Myk7big3NCkoXCJzZWFyY2hcIiwxLChmdW5jdGlvbih0LGUsbixhKXtyZXR1cm5bZnVuY3Rpb24obil7dmFyIG89dCh0aGlzKSxyPW51bGw9PW4/dm9pZCAwOm5bZV07cmV0dXJuIHZvaWQgMCE9PXI/ci5jYWxsKG4sbyk6bmV3IFJlZ0V4cChuKVtlXShTdHJpbmcobykpfSxmdW5jdGlvbih0KXt2YXIgZT1hKG4sdCx0aGlzKTtpZihlLmRvbmUpcmV0dXJuIGUudmFsdWU7dmFyIHM9byh0KSxjPVN0cmluZyh0aGlzKSxsPXMubGFzdEluZGV4O3IobCwwKXx8KHMubGFzdEluZGV4PTApO3ZhciB1PWkocyxjKTtyZXR1cm4gcihzLmxhc3RJbmRleCxsKXx8KHMubGFzdEluZGV4PWwpLG51bGw9PT11Py0xOnUuaW5kZXh9XX0pKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oOTYpLHI9bigxMSksaT1uKDY1KSxhPW4oMTA0KSxzPW4oMTYpLGM9big3MyksbD1uKDEwMyksdT1uKDEwKSxmPU1hdGgubWluLGQ9W10ucHVzaCxwPVwibGVuZ3RoXCIsaD0hdSgoZnVuY3Rpb24oKXtSZWdFeHAoNDI5NDk2NzI5NSxcInlcIil9KSk7big3NCkoXCJzcGxpdFwiLDIsKGZ1bmN0aW9uKHQsZSxuLHUpe3ZhciB2O3JldHVybiB2PVwiY1wiPT1cImFiYmNcIi5zcGxpdCgvKGIpKi8pWzFdfHw0IT1cInRlc3RcIi5zcGxpdCgvKD86KS8sLTEpW3BdfHwyIT1cImFiXCIuc3BsaXQoLyg/OmFiKSovKVtwXXx8NCE9XCIuXCIuc3BsaXQoLyguPykoLj8pLylbcF18fFwiLlwiLnNwbGl0KC8oKSgpLylbcF0+MXx8XCJcIi5zcGxpdCgvLj8vKVtwXT9mdW5jdGlvbih0LGUpe3ZhciByPVN0cmluZyh0aGlzKTtpZih2b2lkIDA9PT10JiYwPT09ZSlyZXR1cm5bXTtpZighbyh0KSlyZXR1cm4gbi5jYWxsKHIsdCxlKTtmb3IodmFyIGksYSxzLGM9W10sdT0odC5pZ25vcmVDYXNlP1wiaVwiOlwiXCIpKyh0Lm11bHRpbGluZT9cIm1cIjpcIlwiKSsodC51bmljb2RlP1widVwiOlwiXCIpKyh0LnN0aWNreT9cInlcIjpcIlwiKSxmPTAsaD12b2lkIDA9PT1lPzQyOTQ5NjcyOTU6ZT4+PjAsdj1uZXcgUmVnRXhwKHQuc291cmNlLHUrXCJnXCIpOyhpPWwuY2FsbCh2LHIpKSYmISgoYT12Lmxhc3RJbmRleCk+ZiYmKGMucHVzaChyLnNsaWNlKGYsaS5pbmRleCkpLGlbcF0+MSYmaS5pbmRleDxyW3BdJiZkLmFwcGx5KGMsaS5zbGljZSgxKSkscz1pWzBdW3BdLGY9YSxjW3BdPj1oKSk7KXYubGFzdEluZGV4PT09aS5pbmRleCYmdi5sYXN0SW5kZXgrKztyZXR1cm4gZj09PXJbcF0/IXMmJnYudGVzdChcIlwiKXx8Yy5wdXNoKFwiXCIpOmMucHVzaChyLnNsaWNlKGYpKSxjW3BdPmg/Yy5zbGljZSgwLGgpOmN9OlwiMFwiLnNwbGl0KHZvaWQgMCwwKVtwXT9mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYwPT09ZT9bXTpuLmNhbGwodGhpcyx0LGUpfTpuLFtmdW5jdGlvbihuLG8pe3ZhciByPXQodGhpcyksaT1udWxsPT1uP3ZvaWQgMDpuW2VdO3JldHVybiB2b2lkIDAhPT1pP2kuY2FsbChuLHIsbyk6di5jYWxsKFN0cmluZyhyKSxuLG8pfSxmdW5jdGlvbih0LGUpe3ZhciBvPXUodix0LHRoaXMsZSx2IT09bik7aWYoby5kb25lKXJldHVybiBvLnZhbHVlO3ZhciBsPXIodCksZD1TdHJpbmcodGhpcykscD1pKGwsUmVnRXhwKSxnPWwudW5pY29kZSx5PShsLmlnbm9yZUNhc2U/XCJpXCI6XCJcIikrKGwubXVsdGlsaW5lP1wibVwiOlwiXCIpKyhsLnVuaWNvZGU/XCJ1XCI6XCJcIikrKGg/XCJ5XCI6XCJnXCIpLGI9bmV3IHAoaD9sOlwiXig/OlwiK2wuc291cmNlK1wiKVwiLHkpLG09dm9pZCAwPT09ZT80Mjk0OTY3Mjk1OmU+Pj4wO2lmKDA9PT1tKXJldHVybltdO2lmKDA9PT1kLmxlbmd0aClyZXR1cm4gbnVsbD09PWMoYixkKT9bZF06W107Zm9yKHZhciBrPTAseD0wLFM9W107eDxkLmxlbmd0aDspe2IubGFzdEluZGV4PWg/eDowO3ZhciB3LFQ9YyhiLGg/ZDpkLnNsaWNlKHgpKTtpZihudWxsPT09VHx8KHc9ZihzKGIubGFzdEluZGV4KyhoPzA6eCkpLGQubGVuZ3RoKSk9PT1rKXg9YShkLHgsZyk7ZWxzZXtpZihTLnB1c2goZC5zbGljZShrLHgpKSxTLmxlbmd0aD09PW0pcmV0dXJuIFM7Zm9yKHZhciBFPTE7RTw9VC5sZW5ndGgtMTtFKyspaWYoUy5wdXNoKFRbRV0pLFMubGVuZ3RoPT09bSlyZXR1cm4gUzt4PWs9d319cmV0dXJuIFMucHVzaChkLnNsaWNlKGspKSxTfV19KSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDkpLHI9bigxMDUpLnNldCxpPW8uTXV0YXRpb25PYnNlcnZlcnx8by5XZWJLaXRNdXRhdGlvbk9ic2VydmVyLGE9by5wcm9jZXNzLHM9by5Qcm9taXNlLGM9XCJwcm9jZXNzXCI9PW4oMzYpKGEpO3QuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciB0LGUsbixsPWZ1bmN0aW9uKCl7dmFyIG8scjtmb3IoYyYmKG89YS5kb21haW4pJiZvLmV4aXQoKTt0Oyl7cj10LmZuLHQ9dC5uZXh0O3RyeXtyKCl9Y2F0Y2gobyl7dGhyb3cgdD9uKCk6ZT12b2lkIDAsb319ZT12b2lkIDAsbyYmby5lbnRlcigpfTtpZihjKW49ZnVuY3Rpb24oKXthLm5leHRUaWNrKGwpfTtlbHNlIGlmKCFpfHxvLm5hdmlnYXRvciYmby5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSlpZihzJiZzLnJlc29sdmUpe3ZhciB1PXMucmVzb2x2ZSh2b2lkIDApO249ZnVuY3Rpb24oKXt1LnRoZW4obCl9fWVsc2Ugbj1mdW5jdGlvbigpe3IuY2FsbChvLGwpfTtlbHNle3ZhciBmPSEwLGQ9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7bmV3IGkobCkub2JzZXJ2ZShkLHtjaGFyYWN0ZXJEYXRhOiEwfSksbj1mdW5jdGlvbigpe2QuZGF0YT1mPSFmfX1yZXR1cm4gZnVuY3Rpb24obyl7dmFyIHI9e2ZuOm8sbmV4dDp2b2lkIDB9O2UmJihlLm5leHQ9ciksdHx8KHQ9cixuKCkpLGU9cn19fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt0cnl7cmV0dXJue2U6ITEsdjp0KCl9fWNhdGNoKHQpe3JldHVybntlOiEwLHY6dH19fX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMTM0KSxyPW4oNTEpO3QuZXhwb3J0cz1uKDc3KShcIk1hcFwiLChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLGFyZ3VtZW50cy5sZW5ndGg+MD9hcmd1bWVudHNbMF06dm9pZCAwKX19KSx7Z2V0OmZ1bmN0aW9uKHQpe3ZhciBlPW8uZ2V0RW50cnkocih0aGlzLFwiTWFwXCIpLHQpO3JldHVybiBlJiZlLnZ9LHNldDpmdW5jdGlvbih0LGUpe3JldHVybiBvLmRlZihyKHRoaXMsXCJNYXBcIiksMD09PXQ/MDp0LGUpfX0sbywhMCl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDEzNCkscj1uKDUxKTt0LmV4cG9ydHM9big3NykoXCJTZXRcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcyxhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCl9fSkse2FkZDpmdW5jdGlvbih0KXtyZXR1cm4gby5kZWYocih0aGlzLFwiU2V0XCIpLHQ9MD09PXQ/MDp0LHQpfX0sbyl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbyxyPW4oOSksaT1uKDM1KSgwKSxhPW4oMjMpLHM9big0MSksYz1uKDExNCksbD1uKDEzNSksdT1uKDEyKSxmPW4oNTEpLGQ9big1MSkscD0hci5BY3RpdmVYT2JqZWN0JiZcIkFjdGl2ZVhPYmplY3RcImluIHIsaD1zLmdldFdlYWssdj1PYmplY3QuaXNFeHRlbnNpYmxlLGc9bC51ZnN0b3JlLHk9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcyxhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCl9fSxiPXtnZXQ6ZnVuY3Rpb24odCl7aWYodSh0KSl7dmFyIGU9aCh0KTtyZXR1cm4hMD09PWU/ZyhmKHRoaXMsXCJXZWFrTWFwXCIpKS5nZXQodCk6ZT9lW3RoaXMuX2ldOnZvaWQgMH19LHNldDpmdW5jdGlvbih0LGUpe3JldHVybiBsLmRlZihmKHRoaXMsXCJXZWFrTWFwXCIpLHQsZSl9fSxtPXQuZXhwb3J0cz1uKDc3KShcIldlYWtNYXBcIix5LGIsbCwhMCwhMCk7ZCYmcCYmKGMoKG89bC5nZXRDb25zdHJ1Y3Rvcih5LFwiV2Vha01hcFwiKSkucHJvdG90eXBlLGIpLHMuTkVFRD0hMCxpKFtcImRlbGV0ZVwiLFwiaGFzXCIsXCJnZXRcIixcInNldFwiXSwoZnVuY3Rpb24odCl7dmFyIGU9bS5wcm90b3R5cGUsbj1lW3RdO2EoZSx0LChmdW5jdGlvbihlLHIpe2lmKHUoZSkmJiF2KGUpKXt0aGlzLl9mfHwodGhpcy5fZj1uZXcgbyk7dmFyIGk9dGhpcy5fZlt0XShlLHIpO3JldHVyblwic2V0XCI9PXQ/dGhpczppfXJldHVybiBuLmNhbGwodGhpcyxlLHIpfSkpfSkpKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMTM1KSxyPW4oNTEpO24oNzcpKFwiV2Vha1NldFwiLChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLGFyZ3VtZW50cy5sZW5ndGg+MD9hcmd1bWVudHNbMF06dm9pZCAwKX19KSx7YWRkOmZ1bmN0aW9uKHQpe3JldHVybiBvLmRlZihyKHRoaXMsXCJXZWFrU2V0XCIpLHQsITApfX0sbywhMSwhMCl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDApLHI9big3OCksaT1uKDEwNiksYT1uKDExKSxzPW4oNDYpLGM9bigxNiksbD1uKDEyKSx1PW4oOSkuQXJyYXlCdWZmZXIsZj1uKDY1KSxkPWkuQXJyYXlCdWZmZXIscD1pLkRhdGFWaWV3LGg9ci5BQlYmJnUuaXNWaWV3LHY9ZC5wcm90b3R5cGUuc2xpY2UsZz1yLlZJRVc7byhvLkcrby5XK28uRioodSE9PWQpLHtBcnJheUJ1ZmZlcjpkfSksbyhvLlMrby5GKiFyLkNPTlNUUixcIkFycmF5QnVmZmVyXCIse2lzVmlldzpmdW5jdGlvbih0KXtyZXR1cm4gaCYmaCh0KXx8bCh0KSYmZyBpbiB0fX0pLG8oby5QK28uVStvLkYqbigxMCkoKGZ1bmN0aW9uKCl7cmV0dXJuIW5ldyBkKDIpLnNsaWNlKDEsdm9pZCAwKS5ieXRlTGVuZ3RofSkpLFwiQXJyYXlCdWZmZXJcIix7c2xpY2U6ZnVuY3Rpb24odCxlKXtpZih2b2lkIDAhPT12JiZ2b2lkIDA9PT1lKXJldHVybiB2LmNhbGwoYSh0aGlzKSx0KTtmb3IodmFyIG49YSh0aGlzKS5ieXRlTGVuZ3RoLG89cyh0LG4pLHI9cyh2b2lkIDA9PT1lP246ZSxuKSxpPW5ldyhmKHRoaXMsZCkpKGMoci1vKSksbD1uZXcgcCh0aGlzKSx1PW5ldyBwKGkpLGg9MDtvPHI7KXUuc2V0VWludDgoaCsrLGwuZ2V0VWludDgobysrKSk7cmV0dXJuIGl9fSksbig1NSkoXCJBcnJheUJ1ZmZlclwiKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCk7byhvLkcrby5XK28uRiohbig3OCkuQUJWLHtEYXRhVmlldzpuKDEwNikuRGF0YVZpZXd9KX0sZnVuY3Rpb24odCxlLG4pe24oMzgpKFwiSW50OFwiLDEsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLG4sbyl7cmV0dXJuIHQodGhpcyxlLG4sbyl9fSkpfSxmdW5jdGlvbih0LGUsbil7bigzOCkoXCJVaW50OFwiLDEsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLG4sbyl7cmV0dXJuIHQodGhpcyxlLG4sbyl9fSkpfSxmdW5jdGlvbih0LGUsbil7bigzOCkoXCJVaW50OFwiLDEsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLG4sbyl7cmV0dXJuIHQodGhpcyxlLG4sbyl9fSksITApfSxmdW5jdGlvbih0LGUsbil7bigzOCkoXCJJbnQxNlwiLDIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLG4sbyl7cmV0dXJuIHQodGhpcyxlLG4sbyl9fSkpfSxmdW5jdGlvbih0LGUsbil7bigzOCkoXCJVaW50MTZcIiwyLChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSxuLG8pe3JldHVybiB0KHRoaXMsZSxuLG8pfX0pKX0sZnVuY3Rpb24odCxlLG4pe24oMzgpKFwiSW50MzJcIiw0LChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSxuLG8pe3JldHVybiB0KHRoaXMsZSxuLG8pfX0pKX0sZnVuY3Rpb24odCxlLG4pe24oMzgpKFwiVWludDMyXCIsNCwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUsbixvKXtyZXR1cm4gdCh0aGlzLGUsbixvKX19KSl9LGZ1bmN0aW9uKHQsZSxuKXtuKDM4KShcIkZsb2F0MzJcIiw0LChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSxuLG8pe3JldHVybiB0KHRoaXMsZSxuLG8pfX0pKX0sZnVuY3Rpb24odCxlLG4pe24oMzgpKFwiRmxvYXQ2NFwiLDgsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLG4sbyl7cmV0dXJuIHQodGhpcyxlLG4sbyl9fSkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKSxyPW4oMzEpLGk9bigxMSksYT0obig5KS5SZWZsZWN0fHx7fSkuYXBwbHkscz1GdW5jdGlvbi5hcHBseTtvKG8uUytvLkYqIW4oMTApKChmdW5jdGlvbigpe2EoKGZ1bmN0aW9uKCl7fSkpfSkpLFwiUmVmbGVjdFwiLHthcHBseTpmdW5jdGlvbih0LGUsbil7dmFyIG89cih0KSxjPWkobik7cmV0dXJuIGE/YShvLGUsYyk6cy5jYWxsKG8sZSxjKX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCkscj1uKDQ3KSxpPW4oMzEpLGE9bigxMSkscz1uKDEyKSxjPW4oMTApLGw9bigxMTYpLHU9KG4oOSkuUmVmbGVjdHx8e30pLmNvbnN0cnVjdCxmPWMoKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4hKHUoKGZ1bmN0aW9uKCl7fSksW10sdClpbnN0YW5jZW9mIHQpfSkpLGQ9IWMoKGZ1bmN0aW9uKCl7dSgoZnVuY3Rpb24oKXt9KSl9KSk7byhvLlMrby5GKihmfHxkKSxcIlJlZmxlY3RcIix7Y29uc3RydWN0OmZ1bmN0aW9uKHQsZSl7aSh0KSxhKGUpO3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg8Mz90OmkoYXJndW1lbnRzWzJdKTtpZihkJiYhZilyZXR1cm4gdSh0LGUsbik7aWYodD09bil7c3dpdGNoKGUubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyB0O2Nhc2UgMTpyZXR1cm4gbmV3IHQoZVswXSk7Y2FzZSAyOnJldHVybiBuZXcgdChlWzBdLGVbMV0pO2Nhc2UgMzpyZXR1cm4gbmV3IHQoZVswXSxlWzFdLGVbMl0pO2Nhc2UgNDpyZXR1cm4gbmV3IHQoZVswXSxlWzFdLGVbMl0sZVszXSl9dmFyIG89W251bGxdO3JldHVybiBvLnB1c2guYXBwbHkobyxlKSxuZXcobC5hcHBseSh0LG8pKX12YXIgYz1uLnByb3RvdHlwZSxwPXIocyhjKT9jOk9iamVjdC5wcm90b3R5cGUpLGg9RnVuY3Rpb24uYXBwbHkuY2FsbCh0LHAsZSk7cmV0dXJuIHMoaCk/aDpwfX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxOSkscj1uKDApLGk9bigxMSksYT1uKDQwKTtyKHIuUytyLkYqbigxMCkoKGZ1bmN0aW9uKCl7UmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShvLmYoe30sMSx7dmFsdWU6MX0pLDEse3ZhbHVlOjJ9KX0pKSxcIlJlZmxlY3RcIix7ZGVmaW5lUHJvcGVydHk6ZnVuY3Rpb24odCxlLG4pe2kodCksZT1hKGUsITApLGkobik7dHJ5e3JldHVybiBvLmYodCxlLG4pLCEwfWNhdGNoKHQpe3JldHVybiExfX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCkscj1uKDMzKS5mLGk9bigxMSk7byhvLlMsXCJSZWZsZWN0XCIse2RlbGV0ZVByb3BlcnR5OmZ1bmN0aW9uKHQsZSl7dmFyIG49cihpKHQpLGUpO3JldHVybiEobiYmIW4uY29uZmlndXJhYmxlKSYmZGVsZXRlIHRbZV19fSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDApLHI9bigxMSksaT1mdW5jdGlvbih0KXt0aGlzLl90PXIodCksdGhpcy5faT0wO3ZhciBlLG49dGhpcy5faz1bXTtmb3IoZSBpbiB0KW4ucHVzaChlKX07bigxMjMpKGksXCJPYmplY3RcIiwoZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMuX2s7ZG97aWYodGhpcy5faT49ZS5sZW5ndGgpcmV0dXJue3ZhbHVlOnZvaWQgMCxkb25lOiEwfX13aGlsZSghKCh0PWVbdGhpcy5faSsrXSlpbiB0aGlzLl90KSk7cmV0dXJue3ZhbHVlOnQsZG9uZTohMX19KSksbyhvLlMsXCJSZWZsZWN0XCIse2VudW1lcmF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IGkodCl9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDMzKSxyPW4oNDkpLGk9bigyNiksYT1uKDApLHM9bigxMiksYz1uKDExKTthKGEuUyxcIlJlZmxlY3RcIix7Z2V0OmZ1bmN0aW9uIHQoZSxuKXt2YXIgYSxsLHU9YXJndW1lbnRzLmxlbmd0aDwzP2U6YXJndW1lbnRzWzJdO3JldHVybiBjKGUpPT09dT9lW25dOihhPW8uZihlLG4pKT9pKGEsXCJ2YWx1ZVwiKT9hLnZhbHVlOnZvaWQgMCE9PWEuZ2V0P2EuZ2V0LmNhbGwodSk6dm9pZCAwOnMobD1yKGUpKT90KGwsbix1KTp2b2lkIDB9fSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDMzKSxyPW4oMCksaT1uKDExKTtyKHIuUyxcIlJlZmxlY3RcIix7Z2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG8uZihpKHQpLGUpfX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKSxyPW4oNDkpLGk9bigxMSk7byhvLlMsXCJSZWZsZWN0XCIse2dldFByb3RvdHlwZU9mOmZ1bmN0aW9uKHQpe3JldHVybiByKGkodCkpfX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKTtvKG8uUyxcIlJlZmxlY3RcIix7aGFzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUgaW4gdH19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCkscj1uKDExKSxpPU9iamVjdC5pc0V4dGVuc2libGU7byhvLlMsXCJSZWZsZWN0XCIse2lzRXh0ZW5zaWJsZTpmdW5jdGlvbih0KXtyZXR1cm4gcih0KSwhaXx8aSh0KX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMCk7byhvLlMsXCJSZWZsZWN0XCIse293bktleXM6bigxMzcpfSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9bigxMSksaT1PYmplY3QucHJldmVudEV4dGVuc2lvbnM7byhvLlMsXCJSZWZsZWN0XCIse3ByZXZlbnRFeHRlbnNpb25zOmZ1bmN0aW9uKHQpe3IodCk7dHJ5e3JldHVybiBpJiZpKHQpLCEwfWNhdGNoKHQpe3JldHVybiExfX19KX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMTkpLHI9bigzMyksaT1uKDQ5KSxhPW4oMjYpLHM9bigwKSxjPW4oNDIpLGw9bigxMSksdT1uKDEyKTtzKHMuUyxcIlJlZmxlY3RcIix7c2V0OmZ1bmN0aW9uIHQoZSxuLHMpe3ZhciBmLGQscD1hcmd1bWVudHMubGVuZ3RoPDQ/ZTphcmd1bWVudHNbM10saD1yLmYobChlKSxuKTtpZighaCl7aWYodShkPWkoZSkpKXJldHVybiB0KGQsbixzLHApO2g9YygwKX1pZihhKGgsXCJ2YWx1ZVwiKSl7aWYoITE9PT1oLndyaXRhYmxlfHwhdShwKSlyZXR1cm4hMTtpZihmPXIuZihwLG4pKXtpZihmLmdldHx8Zi5zZXR8fCExPT09Zi53cml0YWJsZSlyZXR1cm4hMTtmLnZhbHVlPXMsby5mKHAsbixmKX1lbHNlIG8uZihwLG4sYygwLHMpKTtyZXR1cm4hMH1yZXR1cm4gdm9pZCAwIT09aC5zZXQmJihoLnNldC5jYWxsKHAscyksITApfX0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKSxyPW4oODcpO3ImJm8oby5TLFwiUmVmbGVjdFwiLHtzZXRQcm90b3R5cGVPZjpmdW5jdGlvbih0LGUpe3IuY2hlY2sodCxlKTt0cnl7cmV0dXJuIHIuc2V0KHQsZSksITB9Y2F0Y2godCl7cmV0dXJuITF9fX0pfSxmdW5jdGlvbih0LGUsbil7bigzMjgpLHQuZXhwb3J0cz1uKDE3KS5BcnJheS5pbmNsdWRlc30sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDY4KSghMCk7byhvLlAsXCJBcnJheVwiLHtpbmNsdWRlczpmdW5jdGlvbih0KXtyZXR1cm4gcih0aGlzLHQsYXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDApfX0pLG4oNTApKFwiaW5jbHVkZXNcIil9LGZ1bmN0aW9uKHQsZSxuKXtuKDMzMCksdC5leHBvcnRzPW4oMTcpLkFycmF5LmZsYXRNYXB9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDApLHI9bigzMzEpLGk9bigyMCksYT1uKDE2KSxzPW4oMzEpLGM9bigxMjUpO28oby5QLFwiQXJyYXlcIix7ZmxhdE1hcDpmdW5jdGlvbih0KXt2YXIgZSxuLG89aSh0aGlzKTtyZXR1cm4gcyh0KSxlPWEoby5sZW5ndGgpLG49YyhvLDApLHIobixvLG8sZSwwLDEsdCxhcmd1bWVudHNbMV0pLG59fSksbig1MCkoXCJmbGF0TWFwXCIpfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89big3MCkscj1uKDEyKSxpPW4oMTYpLGE9bigzMCkscz1uKDE0KShcImlzQ29uY2F0U3ByZWFkYWJsZVwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24gdChlLG4sYyxsLHUsZixkLHApe2Zvcih2YXIgaCx2LGc9dSx5PTAsYj0hIWQmJmEoZCxwLDMpO3k8bDspe2lmKHkgaW4gYyl7aWYoaD1iP2IoY1t5XSx5LG4pOmNbeV0sdj0hMSxyKGgpJiYodj12b2lkIDAhPT0odj1oW3NdKT8hIXY6byhoKSksdiYmZj4wKWc9dChlLG4saCxpKGgubGVuZ3RoKSxnLGYtMSktMTtlbHNle2lmKGc+PTkwMDcxOTkyNTQ3NDA5OTEpdGhyb3cgVHlwZUVycm9yKCk7ZVtnXT1ofWcrK315Kyt9cmV0dXJuIGd9fSxmdW5jdGlvbih0LGUsbil7bigzMzMpLHQuZXhwb3J0cz1uKDE3KS5TdHJpbmcucGFkU3RhcnR9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1uKDApLHI9bigxMzgpLGk9big3NiksYT0vVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QoaSk7byhvLlArby5GKmEsXCJTdHJpbmdcIix7cGFkU3RhcnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHIodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLCEwKX19KX0sZnVuY3Rpb24odCxlLG4pe24oMzM1KSx0LmV4cG9ydHM9bigxNykuU3RyaW5nLnBhZEVuZH0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDEzOCksaT1uKDc2KSxhPS9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdChpKTtvKG8uUCtvLkYqYSxcIlN0cmluZ1wiLHtwYWRFbmQ6ZnVuY3Rpb24odCl7cmV0dXJuIHIodGhpcyx0LGFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLCExKX19KX0sZnVuY3Rpb24odCxlLG4pe24oMzM3KSx0LmV4cG9ydHM9bigxNykuU3RyaW5nLnRyaW1MZWZ0fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7big1MykoXCJ0cmltTGVmdFwiLChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLDEpfX0pLFwidHJpbVN0YXJ0XCIpfSxmdW5jdGlvbih0LGUsbil7bigzMzkpLHQuZXhwb3J0cz1uKDE3KS5TdHJpbmcudHJpbVJpZ2h0fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7big1MykoXCJ0cmltUmlnaHRcIiwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcywyKX19KSxcInRyaW1FbmRcIil9LGZ1bmN0aW9uKHQsZSxuKXtuKDM0MSksdC5leHBvcnRzPW4oODMpLmYoXCJhc3luY0l0ZXJhdG9yXCIpfSxmdW5jdGlvbih0LGUsbil7bigxMTApKFwiYXN5bmNJdGVyYXRvclwiKX0sZnVuY3Rpb24odCxlLG4pe24oMzQzKSx0LmV4cG9ydHM9bigxNykuT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9bigxMzcpLGk9bigyOCksYT1uKDMzKSxzPW4oOTkpO28oby5TLFwiT2JqZWN0XCIse2dldE93blByb3BlcnR5RGVzY3JpcHRvcnM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG4sbz1pKHQpLGM9YS5mLGw9cihvKSx1PXt9LGY9MDtsLmxlbmd0aD5mOyl2b2lkIDAhPT0obj1jKG8sZT1sW2YrK10pKSYmcyh1LGUsbik7cmV0dXJuIHV9fSl9LGZ1bmN0aW9uKHQsZSxuKXtuKDM0NSksdC5leHBvcnRzPW4oMTcpLk9iamVjdC52YWx1ZXN9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9bigxMzkpKCExKTtvKG8uUyxcIk9iamVjdFwiLHt2YWx1ZXM6ZnVuY3Rpb24odCl7cmV0dXJuIHIodCl9fSl9LGZ1bmN0aW9uKHQsZSxuKXtuKDM0NyksdC5leHBvcnRzPW4oMTcpLk9iamVjdC5lbnRyaWVzfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigwKSxyPW4oMTM5KSghMCk7byhvLlMsXCJPYmplY3RcIix7ZW50cmllczpmdW5jdGlvbih0KXtyZXR1cm4gcih0KX19KX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24oMTMxKSxuKDM0OSksdC5leHBvcnRzPW4oMTcpLlByb21pc2UuZmluYWxseX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvPW4oMCkscj1uKDE3KSxpPW4oOSksYT1uKDY1KSxzPW4oMTMzKTtvKG8uUCtvLlIsXCJQcm9taXNlXCIse2ZpbmFsbHk6ZnVuY3Rpb24odCl7dmFyIGU9YSh0aGlzLHIuUHJvbWlzZXx8aS5Qcm9taXNlKSxuPVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ7cmV0dXJuIHRoaXMudGhlbihuP2Z1bmN0aW9uKG4pe3JldHVybiBzKGUsdCgpKS50aGVuKChmdW5jdGlvbigpe3JldHVybiBufSkpfTp0LG4/ZnVuY3Rpb24obil7cmV0dXJuIHMoZSx0KCkpLnRoZW4oKGZ1bmN0aW9uKCl7dGhyb3cgbn0pKX06dCl9fSl9LGZ1bmN0aW9uKHQsZSxuKXtuKDM1MSksbigzNTIpLG4oMzUzKSx0LmV4cG9ydHM9bigxNyl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDkpLHI9bigwKSxpPW4oNzYpLGE9W10uc2xpY2Uscz0vTVNJRSAuXFwuLy50ZXN0KGkpLGM9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUsbil7dmFyIG89YXJndW1lbnRzLmxlbmd0aD4yLHI9ISFvJiZhLmNhbGwoYXJndW1lbnRzLDIpO3JldHVybiB0KG8/ZnVuY3Rpb24oKXsoXCJmdW5jdGlvblwiPT10eXBlb2YgZT9lOkZ1bmN0aW9uKGUpKS5hcHBseSh0aGlzLHIpfTplLG4pfX07cihyLkcrci5CK3IuRipzLHtzZXRUaW1lb3V0OmMoby5zZXRUaW1lb3V0KSxzZXRJbnRlcnZhbDpjKG8uc2V0SW50ZXJ2YWwpfSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDApLHI9bigxMDUpO28oby5HK28uQix7c2V0SW1tZWRpYXRlOnIuc2V0LGNsZWFySW1tZWRpYXRlOnIuY2xlYXJ9KX0sZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgbz1uKDEwMikscj1uKDQ1KSxpPW4oMjMpLGE9big5KSxzPW4oMjcpLGM9big1NCksbD1uKDE0KSx1PWwoXCJpdGVyYXRvclwiKSxmPWwoXCJ0b1N0cmluZ1RhZ1wiKSxkPWMuQXJyYXkscD17Q1NTUnVsZUxpc3Q6ITAsQ1NTU3R5bGVEZWNsYXJhdGlvbjohMSxDU1NWYWx1ZUxpc3Q6ITEsQ2xpZW50UmVjdExpc3Q6ITEsRE9NUmVjdExpc3Q6ITEsRE9NU3RyaW5nTGlzdDohMSxET01Ub2tlbkxpc3Q6ITAsRGF0YVRyYW5zZmVySXRlbUxpc3Q6ITEsRmlsZUxpc3Q6ITEsSFRNTEFsbENvbGxlY3Rpb246ITEsSFRNTENvbGxlY3Rpb246ITEsSFRNTEZvcm1FbGVtZW50OiExLEhUTUxTZWxlY3RFbGVtZW50OiExLE1lZGlhTGlzdDohMCxNaW1lVHlwZUFycmF5OiExLE5hbWVkTm9kZU1hcDohMSxOb2RlTGlzdDohMCxQYWludFJlcXVlc3RMaXN0OiExLFBsdWdpbjohMSxQbHVnaW5BcnJheTohMSxTVkdMZW5ndGhMaXN0OiExLFNWR051bWJlckxpc3Q6ITEsU1ZHUGF0aFNlZ0xpc3Q6ITEsU1ZHUG9pbnRMaXN0OiExLFNWR1N0cmluZ0xpc3Q6ITEsU1ZHVHJhbnNmb3JtTGlzdDohMSxTb3VyY2VCdWZmZXJMaXN0OiExLFN0eWxlU2hlZXRMaXN0OiEwLFRleHRUcmFja0N1ZUxpc3Q6ITEsVGV4dFRyYWNrTGlzdDohMSxUb3VjaExpc3Q6ITF9LGg9cihwKSx2PTA7djxoLmxlbmd0aDt2Kyspe3ZhciBnLHk9aFt2XSxiPXBbeV0sbT1hW3ldLGs9bSYmbS5wcm90b3R5cGU7aWYoayYmKGtbdV18fHMoayx1LGQpLGtbZl18fHMoayxmLHkpLGNbeV09ZCxiKSlmb3IoZyBpbiBvKWtbZ118fGkoayxnLG9bZ10sITApfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigzOSksbigyKSxuKDMpLG4oMzU4KSxuKDM2MCksbigzNjEpLG4oOCldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSxzLGMsbCx1KXtcInVzZSBzdHJpY3RcIjt2YXIgZj1uKDEzKSxkPW4oMSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPWQociksaT1kKGkpLGE9ZChhKSxsPWQobCksdT1mKHUpO3ZhciBwPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgbj10aGlzOygwLGkuZGVmYXVsdCkodGhpcyx0KTt2YXIgbz1mdW5jdGlvbigpe307dS5pc09iamVjdChlKSYmdS5pc0Z1bmN0aW9uKGUub25SZWFkeSkmJihvPWUub25SZWFkeSk7dmFyIHI9bmV3IGwuZGVmYXVsdChlKTt0aGlzLmlzUmVhZHk9ci5pc1JlYWR5LnRoZW4oKGZ1bmN0aW9uKCl7bi5leHBvcnRBUEkociksbygpfSkpfXJldHVybigwLGEuZGVmYXVsdCkodCxbe2tleTpcImV4cG9ydEFQSVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7W1wiY29uZmlndXJhdGlvblwiXS5mb3JFYWNoKChmdW5jdGlvbihuKXtlW25dPXRbbl19KSksdGhpcy5kZXN0cm95PWZ1bmN0aW9uKCl7Zm9yKHZhciBuIGluIE9iamVjdC52YWx1ZXModC5tb2R1bGVJbnN0YW5jZXMpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3UuaXNGdW5jdGlvbih0LmRlc3Ryb3kpJiZ0LmRlc3Ryb3koKSx0Lmxpc3RlbmVycy5yZW1vdmVBbGwoKX0pKSx0PW51bGwsZSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSYmZGVsZXRlIGVbbl07T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsbnVsbCl9LE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLHQubW9kdWxlSW5zdGFuY2VzLkFQSS5tZXRob2RzKSxkZWxldGUgdGhpcy5leHBvcnRBUEksT2JqZWN0LmVudHJpZXMoe2Jsb2Nrczp7Y2xlYXI6XCJjbGVhclwiLHJlbmRlcjpcInJlbmRlclwifSxjYXJldDp7Zm9jdXM6XCJmb2N1c1wifSxldmVudHM6e29uOlwib25cIixvZmY6XCJvZmZcIixlbWl0OlwiZW1pdFwifSxzYXZlcjp7c2F2ZTpcInNhdmVcIn19KS5mb3JFYWNoKChmdW5jdGlvbihuKXt2YXIgbz0oMCxyLmRlZmF1bHQpKG4sMiksaT1vWzBdLGE9b1sxXTtPYmplY3QuZW50cmllcyhhKS5mb3JFYWNoKChmdW5jdGlvbihuKXt2YXIgbz0oMCxyLmRlZmF1bHQpKG4sMiksYT1vWzBdLHM9b1sxXTtlW3NdPXQubW9kdWxlSW5zdGFuY2VzLkFQSS5tZXRob2RzW2ldW2FdfSkpfSkpfX1dLFt7a2V5OlwidmVyc2lvblwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiMi4xOS4zXCJ9fV0pLHR9KCk7by5kZWZhdWx0PXAscC5kaXNwbGF5TmFtZT1cIkVkaXRvckpTXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoQXJyYXkuaXNBcnJheSh0KSlyZXR1cm4gdH19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdCh0KSl7dmFyIG49W10sbz0hMCxyPSExLGk9dm9pZCAwO3RyeXtmb3IodmFyIGEscz10W1N5bWJvbC5pdGVyYXRvcl0oKTshKG89KGE9cy5uZXh0KCkpLmRvbmUpJiYobi5wdXNoKGEudmFsdWUpLCFlfHxuLmxlbmd0aCE9PWUpO289ITApO31jYXRjaCh0KXtyPSEwLGk9dH1maW5hbGx5e3RyeXtvfHxudWxsPT1zLnJldHVybnx8cy5yZXR1cm4oKX1maW5hbGx5e2lmKHIpdGhyb3cgaX19cmV0dXJuIG59fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfX0sZnVuY3Rpb24odCxlLG4peyhlPXQuZXhwb3J0cz1mdW5jdGlvbiguLi50KXtyZXR1cm4gciguLi50KX0pLl9fZXNNb2R1bGU9ITA7Y29uc3Qgbz1uKDM1OSkscj1vLmRlZmF1bHQ7T2JqZWN0LmFzc2lnbihlLG8pfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PWZ1bmN0aW9uKCl7fSxlLnJldmVydD1mdW5jdGlvbigpe319LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtdLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzfHwoRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcz1FbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzU2VsZWN0b3J8fEVsZW1lbnQucHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3Rvcnx8RWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3J8fEVsZW1lbnQucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3J8fEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8ZnVuY3Rpb24odCl7Zm9yKHZhciBlPSh0aGlzLmRvY3VtZW50fHx0aGlzLm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwodCksbj1lLmxlbmd0aDstLW4+PTAmJmUuaXRlbShuKSE9PXRoaXM7KTtyZXR1cm4gbj4tMX0pLEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3R8fChFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhlKSlyZXR1cm4gbnVsbDtkb3tpZihlLm1hdGNoZXModCkpcmV0dXJuIGU7ZT1lLnBhcmVudEVsZW1lbnR8fGUucGFyZW50Tm9kZX13aGlsZShudWxsIT09ZSk7cmV0dXJuIG51bGx9KSxFbGVtZW50LnByb3RvdHlwZS5wcmVwZW5kfHwoRWxlbWVudC5wcm90b3R5cGUucHJlcGVuZD1mdW5jdGlvbih0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7QXJyYXkuaXNBcnJheSh0KXx8KHQ9W3RdKSx0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPXQgaW5zdGFuY2VvZiBOb2RlO2UuYXBwZW5kQ2hpbGQobj90OmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpKX0pKSx0aGlzLmluc2VydEJlZm9yZShlLHRoaXMuZmlyc3RDaGlsZCl9KX0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyMSksbigyMiksbigyKSxuKDMpLG4oMTUpLG4oOCksbig1OSksbigxNDUpLG4oMzcxKV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhLHMsYyxsLHUsZixkKXtcInVzZSBzdHJpY3RcIjt2YXIgcD1uKDEzKSxoPW4oMSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPWgociksaT1oKGkpLGE9aChhKSxzPWgocyksYz1oKGMpLGw9cChsKSx1PWgodSksZD1oKGQpO3ZhciB2PW4oMzcyKSxnPVtdO3Yua2V5cygpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3QubWF0Y2goL15cXC5cXC9bXl9dW1xcdy9dKlxcLihbdGpdKXMkLykmJmcucHVzaCh2KHQpKX0pKTt2YXIgeT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIG4sbyxzPXRoaXM7KDAsYS5kZWZhdWx0KSh0aGlzLHQpLHRoaXMubW9kdWxlSW5zdGFuY2VzPXt9LHRoaXMuZXZlbnRzRGlzcGF0Y2hlcj1uZXcgZC5kZWZhdWx0LHRoaXMuaXNSZWFkeT1uZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxlKXtuPXQsbz1lfSkpLFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKDAsaS5kZWZhdWx0KShyLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdCgpe3JldHVybiByLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6cmV0dXJuIHMuY29uZmlndXJhdGlvbj1lLHQubmV4dD0zLHMudmFsaWRhdGUoKTtjYXNlIDM6cmV0dXJuIHQubmV4dD01LHMuaW5pdCgpO2Nhc2UgNTpyZXR1cm4gdC5uZXh0PTcscy5zdGFydCgpO2Nhc2UgNzpsLmxvZ0xhYmVsZWQoXCJJJ20gcmVhZHkhICjvvonil5Xjg67il5Up776JKjrvvaXvvp/inKdcIixcImxvZ1wiLFwiXCIsXCJjb2xvcjogI0UyNEE3NVwiKSxzZXRUaW1lb3V0KCgwLGkuZGVmYXVsdCkoci5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoKXt2YXIgZSxvLGk7cmV0dXJuIHIuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gdC5uZXh0PTIscy5yZW5kZXIoKTtjYXNlIDI6cy5jb25maWd1cmF0aW9uLmF1dG9mb2N1cyYmKGU9cy5tb2R1bGVJbnN0YW5jZXMsbz1lLkJsb2NrTWFuYWdlciwoaT1lLkNhcmV0KS5zZXRUb0Jsb2NrKG8uYmxvY2tzWzBdLGkucG9zaXRpb25zLlNUQVJUKSxvLmhpZ2hsaWdodEN1cnJlbnROb2RlKCkpLHMubW9kdWxlSW5zdGFuY2VzLlVJLnJlbW92ZUxvYWRlcigpLG4oKTtjYXNlIDU6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQpfSkpKSw1MDApO2Nhc2UgOTpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCl9KSkpKS5jYXRjaCgoZnVuY3Rpb24odCl7bC5sb2coXCJFZGl0b3IuanMgaXMgbm90IHJlYWR5IGJlY2F1c2Ugb2YgXCIuY29uY2F0KHQpLFwiZXJyb3JcIiksbyh0KX0pKX12YXIgZSxuO3JldHVybigwLHMuZGVmYXVsdCkodCxbe2tleTpcInZhbGlkYXRlXCIsdmFsdWU6KG49KDAsaS5kZWZhdWx0KShyLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdCgpe3ZhciBlLG4sbztyZXR1cm4gci5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmlmKGU9dGhpcy5jb25maWcsbj1lLmhvbGRlcklkLG89ZS5ob2xkZXIsIW58fCFvKXt0Lm5leHQ9MzticmVha310aHJvdyBFcnJvcihcIsKraG9sZGVySWTCuyBhbmQgwqtob2xkZXLCuyBwYXJhbSBjYW4ndCBhc3NpZ24gYXQgdGhlIHNhbWUgdGltZS5cIik7Y2FzZSAzOmlmKCFsLmlzU3RyaW5nKG8pfHxjLmRlZmF1bHQuZ2V0KG8pKXt0Lm5leHQ9NTticmVha310aHJvdyBFcnJvcihcImVsZW1lbnQgd2l0aCBJRCDCq1wiLmNvbmNhdChvLFwiwrsgaXMgbWlzc2luZy4gUGFzcyBjb3JyZWN0IGhvbGRlcidzIElELlwiKSk7Y2FzZSA1OmlmKCFvfHwhbC5pc09iamVjdChvKXx8Yy5kZWZhdWx0LmlzRWxlbWVudChvKSl7dC5uZXh0PTc7YnJlYWt9dGhyb3cgRXJyb3IoXCLCq2hvbGRlcsK7IHZhbHVlIG11c3QgYmUgYW4gRWxlbWVudCBub2RlXCIpO2Nhc2UgNzpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSksdCx0aGlzKX0pKSksZnVuY3Rpb24oKXtyZXR1cm4gbi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImluaXRcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuY29uc3RydWN0TW9kdWxlcygpLHRoaXMuY29uZmlndXJlTW9kdWxlcygpfX0se2tleTpcInN0YXJ0XCIsdmFsdWU6KGU9KDAsaS5kZWZhdWx0KShyLmRlZmF1bHQubWFyaygoZnVuY3Rpb24gdCgpe3ZhciBlLG49dGhpcztyZXR1cm4gci5kZWZhdWx0LndyYXAoKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOnJldHVybiBlPVtcIlRvb2xzXCIsXCJVSVwiLFwiQmxvY2tNYW5hZ2VyXCIsXCJQYXN0ZVwiLFwiQmxvY2tTZWxlY3Rpb25cIixcIlJlY3RhbmdsZVNlbGVjdGlvblwiLFwiQ3Jvc3NCbG9ja1NlbGVjdGlvblwiLFwiUmVhZE9ubHlcIl0sdC5uZXh0PTMsZS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQudGhlbigoMCxpLmRlZmF1bHQpKHIuZGVmYXVsdC5tYXJrKChmdW5jdGlvbiB0KCl7cmV0dXJuIHIuZGVmYXVsdC53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gdC5wcmV2PTAsdC5uZXh0PTMsbi5tb2R1bGVJbnN0YW5jZXNbZV0ucHJlcGFyZSgpO2Nhc2UgMzp0Lm5leHQ9MTA7YnJlYWs7Y2FzZSA1OmlmKHQucHJldj01LHQudDA9dC5jYXRjaCgwKSwhKHQudDAgaW5zdGFuY2VvZiBmLkNyaXRpY2FsRXJyb3IpKXt0Lm5leHQ9OTticmVha310aHJvdyBuZXcgRXJyb3IodC50MC5tZXNzYWdlKTtjYXNlIDk6bC5sb2coXCJNb2R1bGUgXCIuY29uY2F0KGUsXCIgd2FzIHNraXBwZWQgYmVjYXVzZSBvZiAlb1wiKSxcIndhcm5cIix0LnQwKTtjYXNlIDEwOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LG51bGwsW1swLDVdXSl9KSkpKX0pLFByb21pc2UucmVzb2x2ZSgpKTtjYXNlIDM6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0pLHQpfSkpKSxmdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tb2R1bGVJbnN0YW5jZXMuUmVuZGVyZXIucmVuZGVyKHRoaXMuY29uZmlnLmRhdGEuYmxvY2tzKX19LHtrZXk6XCJjb25zdHJ1Y3RNb2R1bGVzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2cuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49bC5pc0Z1bmN0aW9uKGUpP2U6ZS5kZWZhdWx0O3RyeXt0Lm1vZHVsZUluc3RhbmNlc1tuLmRpc3BsYXlOYW1lXT1uZXcgbih7Y29uZmlnOnQuY29uZmlndXJhdGlvbixldmVudHNEaXNwYXRjaGVyOnQuZXZlbnRzRGlzcGF0Y2hlcn0pfWNhdGNoKHQpe2wubG9nKFwiTW9kdWxlIFwiLmNvbmNhdChuLmRpc3BsYXlOYW1lLFwiIHNraXBwZWQgYmVjYXVzZVwiKSxcIndhcm5cIix0KX19KSl9fSx7a2V5OlwiY29uZmlndXJlTW9kdWxlc1wiLHZhbHVlOmZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMubW9kdWxlSW5zdGFuY2VzKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm1vZHVsZUluc3RhbmNlcyx0KSYmKHRoaXMubW9kdWxlSW5zdGFuY2VzW3RdLnN0YXRlPXRoaXMuZ2V0TW9kdWxlc0RpZmYodCkpfX0se2tleTpcImdldE1vZHVsZXNEaWZmXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9e307Zm9yKHZhciBuIGluIHRoaXMubW9kdWxlSW5zdGFuY2VzKW4hPT10JiYoZVtuXT10aGlzLm1vZHVsZUluc3RhbmNlc1tuXSk7cmV0dXJuIGV9fSx7a2V5OlwiY29uZmlndXJhdGlvblwiLHNldDpmdW5jdGlvbih0KXt2YXIgZSxuO2wuaXNPYmplY3QodCk/dGhpcy5jb25maWc9T2JqZWN0LmFzc2lnbih7fSx0KTp0aGlzLmNvbmZpZz17aG9sZGVyOnR9LGwuZGVwcmVjYXRpb25Bc3NlcnQoISF0aGlzLmNvbmZpZy5ob2xkZXJJZCxcImNvbmZpZy5ob2xkZXJJZFwiLFwiY29uZmlnLmhvbGRlclwiKSx0aGlzLmNvbmZpZy5ob2xkZXJJZCYmIXRoaXMuY29uZmlnLmhvbGRlciYmKHRoaXMuY29uZmlnLmhvbGRlcj10aGlzLmNvbmZpZy5ob2xkZXJJZCx0aGlzLmNvbmZpZy5ob2xkZXJJZD1udWxsKSxudWxsPT10aGlzLmNvbmZpZy5ob2xkZXImJih0aGlzLmNvbmZpZy5ob2xkZXI9XCJlZGl0b3Jqc1wiKSx0aGlzLmNvbmZpZy5sb2dMZXZlbHx8KHRoaXMuY29uZmlnLmxvZ0xldmVsPWwuTG9nTGV2ZWxzLlZFUkJPU0UpLGwuc2V0TG9nTGV2ZWwodGhpcy5jb25maWcubG9nTGV2ZWwpLGwuZGVwcmVjYXRpb25Bc3NlcnQoQm9vbGVhbih0aGlzLmNvbmZpZy5pbml0aWFsQmxvY2spLFwiY29uZmlnLmluaXRpYWxCbG9ja1wiLFwiY29uZmlnLmRlZmF1bHRCbG9ja1wiKSx0aGlzLmNvbmZpZy5kZWZhdWx0QmxvY2s9dGhpcy5jb25maWcuZGVmYXVsdEJsb2NrfHx0aGlzLmNvbmZpZy5pbml0aWFsQmxvY2t8fFwicGFyYWdyYXBoXCIsdGhpcy5jb25maWcubWluSGVpZ2h0PXZvaWQgMCE9PXRoaXMuY29uZmlnLm1pbkhlaWdodD90aGlzLmNvbmZpZy5taW5IZWlnaHQ6MzAwO3ZhciBvPXt0eXBlOnRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayxkYXRhOnt9fTt0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcj10aGlzLmNvbmZpZy5wbGFjZWhvbGRlcnx8ITEsdGhpcy5jb25maWcuc2FuaXRpemVyPXRoaXMuY29uZmlnLnNhbml0aXplcnx8e3A6ITAsYjohMCxhOiEwfSx0aGlzLmNvbmZpZy5oaWRlVG9vbGJhcj0hIXRoaXMuY29uZmlnLmhpZGVUb29sYmFyJiZ0aGlzLmNvbmZpZy5oaWRlVG9vbGJhcix0aGlzLmNvbmZpZy50b29scz10aGlzLmNvbmZpZy50b29sc3x8e30sdGhpcy5jb25maWcuaTE4bj10aGlzLmNvbmZpZy5pMThufHx7fSx0aGlzLmNvbmZpZy5kYXRhPXRoaXMuY29uZmlnLmRhdGF8fHtibG9ja3M6W119LHRoaXMuY29uZmlnLm9uUmVhZHk9dGhpcy5jb25maWcub25SZWFkeXx8ZnVuY3Rpb24oKXt9LHRoaXMuY29uZmlnLm9uQ2hhbmdlPXRoaXMuY29uZmlnLm9uQ2hhbmdlfHxmdW5jdGlvbigpe30sdGhpcy5jb25maWcuaW5saW5lVG9vbGJhcj12b2lkIDA9PT10aGlzLmNvbmZpZy5pbmxpbmVUb29sYmFyfHx0aGlzLmNvbmZpZy5pbmxpbmVUb29sYmFyLCFsLmlzRW1wdHkodGhpcy5jb25maWcuZGF0YSkmJnRoaXMuY29uZmlnLmRhdGEuYmxvY2tzJiYwIT09dGhpcy5jb25maWcuZGF0YS5ibG9ja3MubGVuZ3RofHwodGhpcy5jb25maWcuZGF0YT17YmxvY2tzOltvXX0pLHRoaXMuY29uZmlnLnJlYWRPbmx5PXRoaXMuY29uZmlnLnJlYWRPbmx5fHwhMSwobnVsbD09PShlPXRoaXMuY29uZmlnLmkxOG4pfHx2b2lkIDA9PT1lP3ZvaWQgMDplLm1lc3NhZ2VzKSYmdS5kZWZhdWx0LnNldERpY3Rpb25hcnkodGhpcy5jb25maWcuaTE4bi5tZXNzYWdlcyksdGhpcy5jb25maWcuaTE4bi5kaXJlY3Rpb249KG51bGw9PT0obj10aGlzLmNvbmZpZy5pMThuKXx8dm9pZCAwPT09bj92b2lkIDA6bi5kaXJlY3Rpb24pfHxcImx0clwifSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25maWd9fV0pLHR9KCk7by5kZWZhdWx0PXkseS5kaXNwbGF5TmFtZT1cIkNvcmVcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigxNDIpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBvKHQpfX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdCh0KSlyZXR1cm4gQXJyYXkuZnJvbSh0KX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGUgaW4gdD9PYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpuLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1uLHR9fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZih2b2lkIDA9PT10KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gdH19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDQpLHI9bigxMDcpLGk9bigzNjgpLGE9bigzNjkpO2Z1bmN0aW9uIHMoZSl7dmFyIG49XCJmdW5jdGlvblwiPT10eXBlb2YgTWFwP25ldyBNYXA6dm9pZCAwO3JldHVybiB0LmV4cG9ydHM9cz1mdW5jdGlvbih0KXtpZihudWxsPT09dHx8IWkodCkpcmV0dXJuIHQ7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7aWYodm9pZCAwIT09bil7aWYobi5oYXModCkpcmV0dXJuIG4uZ2V0KHQpO24uc2V0KHQsZSl9ZnVuY3Rpb24gZSgpe3JldHVybiBhKHQsYXJndW1lbnRzLG8odGhpcykuY29uc3RydWN0b3IpfXJldHVybiBlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxyKGUsdCl9LHMoZSl9dC5leHBvcnRzPXN9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybi0xIT09RnVuY3Rpb24udG9TdHJpbmcuY2FsbCh0KS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1uKDEwNykscj1uKDM3MCk7ZnVuY3Rpb24gaShlLG4sYSl7cmV0dXJuIHIoKT90LmV4cG9ydHM9aT1SZWZsZWN0LmNvbnN0cnVjdDp0LmV4cG9ydHM9aT1mdW5jdGlvbih0LGUsbil7dmFyIHI9W251bGxdO3IucHVzaC5hcHBseShyLGUpO3ZhciBpPW5ldyhGdW5jdGlvbi5iaW5kLmFwcGx5KHQscikpO3JldHVybiBuJiZvKGksbi5wcm90b3R5cGUpLGl9LGkuYXBwbHkobnVsbCxhcmd1bWVudHMpfXQuZXhwb3J0cz1pfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSxbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKHQpe3JldHVybiExfX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGE9bigxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9YShyKSxpPWEoaSk7dmFyIHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7KDAsci5kZWZhdWx0KSh0aGlzLHQpLHRoaXMuc3Vic2NyaWJlcnM9e319cmV0dXJuKDAsaS5kZWZhdWx0KSh0LFt7a2V5Olwib25cIix2YWx1ZTpmdW5jdGlvbih0LGUpe3QgaW4gdGhpcy5zdWJzY3JpYmVyc3x8KHRoaXMuc3Vic2NyaWJlcnNbdF09W10pLHRoaXMuc3Vic2NyaWJlcnNbdF0ucHVzaChlKX19LHtrZXk6XCJvbmNlXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO3QgaW4gdGhpcy5zdWJzY3JpYmVyc3x8KHRoaXMuc3Vic2NyaWJlcnNbdF09W10pLHRoaXMuc3Vic2NyaWJlcnNbdF0ucHVzaCgoZnVuY3Rpb24gbyhyKXt2YXIgaT1lKHIpLGE9bi5zdWJzY3JpYmVyc1t0XS5pbmRleE9mKG8pO3JldHVybi0xIT09YSYmbi5zdWJzY3JpYmVyc1t0XS5zcGxpY2UoYSwxKSxpfSkpfX0se2tleTpcImVtaXRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3RoaXMuc3Vic2NyaWJlcnNbdF0mJnRoaXMuc3Vic2NyaWJlcnNbdF0ucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiBlKHQpfHx0fSksZSl9fSx7a2V5Olwib2ZmXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MDtuPHRoaXMuc3Vic2NyaWJlcnNbdF0ubGVuZ3RoO24rKylpZih0aGlzLnN1YnNjcmliZXJzW3RdW25dPT09ZSl7ZGVsZXRlIHRoaXMuc3Vic2NyaWJlcnNbdF1bbl07YnJlYWt9fX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc3Vic2NyaWJlcnM9bnVsbH19XSksdH0oKTtvLmRlZmF1bHQ9cyxzLmRpc3BsYXlOYW1lPVwiRXZlbnRzRGlzcGF0Y2hlclwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbz17XCIuL2FwaVwiOjc5LFwiLi9hcGkvXCI6NzksXCIuL2FwaS9ibG9ja3NcIjoxNDYsXCIuL2FwaS9ibG9ja3MudHNcIjoxNDYsXCIuL2FwaS9jYXJldFwiOjE0OCxcIi4vYXBpL2NhcmV0LnRzXCI6MTQ4LFwiLi9hcGkvZXZlbnRzXCI6MTQ5LFwiLi9hcGkvZXZlbnRzLnRzXCI6MTQ5LFwiLi9hcGkvaTE4blwiOjE1MCxcIi4vYXBpL2kxOG4udHNcIjoxNTAsXCIuL2FwaS9pbmRleFwiOjc5LFwiLi9hcGkvaW5kZXgudHNcIjo3OSxcIi4vYXBpL2lubGluZVRvb2xiYXJcIjoxNTEsXCIuL2FwaS9pbmxpbmVUb29sYmFyLnRzXCI6MTUxLFwiLi9hcGkvbGlzdGVuZXJzXCI6MTUyLFwiLi9hcGkvbGlzdGVuZXJzLnRzXCI6MTUyLFwiLi9hcGkvbm90aWZpZXJcIjoxNTMsXCIuL2FwaS9ub3RpZmllci50c1wiOjE1MyxcIi4vYXBpL3JlYWRvbmx5XCI6MTU0LFwiLi9hcGkvcmVhZG9ubHkudHNcIjoxNTQsXCIuL2FwaS9zYW5pdGl6ZXJcIjoxNTUsXCIuL2FwaS9zYW5pdGl6ZXIudHNcIjoxNTUsXCIuL2FwaS9zYXZlclwiOjE1NixcIi4vYXBpL3NhdmVyLnRzXCI6MTU2LFwiLi9hcGkvc2VsZWN0aW9uXCI6MTU3LFwiLi9hcGkvc2VsZWN0aW9uLnRzXCI6MTU3LFwiLi9hcGkvc3R5bGVzXCI6MTU4LFwiLi9hcGkvc3R5bGVzLnRzXCI6MTU4LFwiLi9hcGkvdG9vbGJhclwiOjE1OSxcIi4vYXBpL3Rvb2xiYXIudHNcIjoxNTksXCIuL2FwaS90b29sdGlwXCI6MTYwLFwiLi9hcGkvdG9vbHRpcC50c1wiOjE2MCxcIi4vYmxvY2tFdmVudHNcIjoxNjEsXCIuL2Jsb2NrRXZlbnRzLnRzXCI6MTYxLFwiLi9ibG9ja01hbmFnZXJcIjoxNjIsXCIuL2Jsb2NrTWFuYWdlci50c1wiOjE2MixcIi4vYmxvY2tTZWxlY3Rpb25cIjoxNjMsXCIuL2Jsb2NrU2VsZWN0aW9uLnRzXCI6MTYzLFwiLi9jYXJldFwiOjE2NCxcIi4vY2FyZXQudHNcIjoxNjQsXCIuL2Nyb3NzQmxvY2tTZWxlY3Rpb25cIjoxNjUsXCIuL2Nyb3NzQmxvY2tTZWxlY3Rpb24udHNcIjoxNjUsXCIuL2RyYWdORHJvcFwiOjE2NixcIi4vZHJhZ05Ecm9wLnRzXCI6MTY2LFwiLi9tb2RpZmljYXRpb25zT2JzZXJ2ZXJcIjoxNjcsXCIuL21vZGlmaWNhdGlvbnNPYnNlcnZlci50c1wiOjE2NyxcIi4vbm90aWZpZXJcIjoxNjgsXCIuL25vdGlmaWVyLnRzXCI6MTY4LFwiLi9wYXN0ZVwiOjE2OSxcIi4vcGFzdGUudHNcIjoxNjksXCIuL3JlYWRvbmx5XCI6MTcwLFwiLi9yZWFkb25seS50c1wiOjE3MCxcIi4vcmVjdGFuZ2xlU2VsZWN0aW9uXCI6MTcxLFwiLi9yZWN0YW5nbGVTZWxlY3Rpb24udHNcIjoxNzEsXCIuL3JlbmRlcmVyXCI6MTcyLFwiLi9yZW5kZXJlci50c1wiOjE3MixcIi4vc2FuaXRpemVyXCI6MTczLFwiLi9zYW5pdGl6ZXIudHNcIjoxNzMsXCIuL3NhdmVyXCI6MTc0LFwiLi9zYXZlci50c1wiOjE3NCxcIi4vdG9vbGJhclwiOjgwLFwiLi90b29sYmFyL1wiOjgwLFwiLi90b29sYmFyL2Jsb2NrU2V0dGluZ3NcIjoxNzUsXCIuL3Rvb2xiYXIvYmxvY2tTZXR0aW5ncy50c1wiOjE3NSxcIi4vdG9vbGJhci9jb252ZXJzaW9uXCI6MTc2LFwiLi90b29sYmFyL2NvbnZlcnNpb24udHNcIjoxNzYsXCIuL3Rvb2xiYXIvaW5kZXhcIjo4MCxcIi4vdG9vbGJhci9pbmRleC50c1wiOjgwLFwiLi90b29sYmFyL2lubGluZVwiOjE3NyxcIi4vdG9vbGJhci9pbmxpbmUudHNcIjoxNzcsXCIuL3Rvb2xiYXIvdG9vbGJveFwiOjE3OCxcIi4vdG9vbGJhci90b29sYm94LnRzXCI6MTc4LFwiLi90b29sc1wiOjY2LFwiLi90b29scy50c1wiOjY2LFwiLi90b29sdGlwXCI6MTc5LFwiLi90b29sdGlwLnRzXCI6MTc5LFwiLi91aVwiOjE4MCxcIi4vdWkudHNcIjoxODB9O2Z1bmN0aW9uIHIodCl7dmFyIGU9aSh0KTtyZXR1cm4gbihlKX1mdW5jdGlvbiBpKHQpe2lmKCFuLm8obyx0KSl7dmFyIGU9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIit0K1wiJ1wiKTt0aHJvdyBlLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZX1yZXR1cm4gb1t0XX1yLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmtleXMobyl9LHIucmVzb2x2ZT1pLHQuZXhwb3J0cz1yLHIuaWQ9MzcyfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbig4KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhKXtcInVzZSBzdHJpY3RcIjt2YXIgcz1uKDEzKSxjPW4oMSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPWMociksaT1jKGkpLGE9cyhhKTt2YXIgbD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXsoMCxyLmRlZmF1bHQpKHRoaXMsdCksdGhpcy5hbGxMaXN0ZW5lcnM9W119cmV0dXJuKDAsaS5kZWZhdWx0KSh0LFt7a2V5Olwib25cIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7dmFyIG89YXJndW1lbnRzLmxlbmd0aD4zJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10mJmFyZ3VtZW50c1szXSxyPWEuZ2VuZXJhdGVJZChcImxcIiksaT17aWQ6cixlbGVtZW50OnQsZXZlbnRUeXBlOmUsaGFuZGxlcjpuLG9wdGlvbnM6b30scz10aGlzLmZpbmRPbmUodCxlLG4pO2lmKCFzKXJldHVybiB0aGlzLmFsbExpc3RlbmVycy5wdXNoKGkpLHQuYWRkRXZlbnRMaXN0ZW5lcihlLG4sbykscn19LHtrZXk6XCJvZmZcIix2YWx1ZTpmdW5jdGlvbih0LGUsbixvKXt2YXIgcj10aGlzLGk9dGhpcy5maW5kQWxsKHQsZSxuKTtpLmZvckVhY2goKGZ1bmN0aW9uKHQsZSl7dmFyIG49ci5hbGxMaXN0ZW5lcnMuaW5kZXhPZihpW2VdKTtuPi0xJiYoci5hbGxMaXN0ZW5lcnMuc3BsaWNlKG4sMSksdC5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodC5ldmVudFR5cGUsdC5oYW5kbGVyLHQub3B0aW9ucykpfSkpfX0se2tleTpcIm9mZkJ5SWRcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmZpbmRCeUlkKHQpO2UmJmUuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGUuZXZlbnRUeXBlLGUuaGFuZGxlcixlLm9wdGlvbnMpfX0se2tleTpcImZpbmRPbmVcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7dmFyIG89dGhpcy5maW5kQWxsKHQsZSxuKTtyZXR1cm4gby5sZW5ndGg+MD9vWzBdOm51bGx9fSx7a2V5OlwiZmluZEFsbFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz10P3RoaXMuZmluZEJ5RXZlbnRUYXJnZXQodCk6W107cmV0dXJuIHQmJmUmJm4/by5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmV2ZW50VHlwZT09PWUmJnQuaGFuZGxlcj09PW59KSk6dCYmZT9vLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuZXZlbnRUeXBlPT09ZX0pKTpvfX0se2tleTpcInJlbW92ZUFsbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5hbGxMaXN0ZW5lcnMubWFwKChmdW5jdGlvbih0KXt0LmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LmV2ZW50VHlwZSx0LmhhbmRsZXIsdC5vcHRpb25zKX0pKSx0aGlzLmFsbExpc3RlbmVycz1bXX19LHtrZXk6XCJkZXN0cm95XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnJlbW92ZUFsbCgpfX0se2tleTpcImZpbmRCeUV2ZW50VGFyZ2V0XCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuYWxsTGlzdGVuZXJzLmZpbHRlcigoZnVuY3Rpb24oZSl7aWYoZS5lbGVtZW50PT09dClyZXR1cm4gZX0pKX19LHtrZXk6XCJmaW5kQnlUeXBlXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuYWxsTGlzdGVuZXJzLmZpbHRlcigoZnVuY3Rpb24oZSl7aWYoZS5ldmVudFR5cGU9PT10KXJldHVybiBlfSkpfX0se2tleTpcImZpbmRCeUhhbmRsZXJcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5hbGxMaXN0ZW5lcnMuZmlsdGVyKChmdW5jdGlvbihlKXtpZihlLmhhbmRsZXI9PT10KXJldHVybiBlfSkpfX0se2tleTpcImZpbmRCeUlkXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuYWxsTGlzdGVuZXJzLmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkPT09dH0pKX19XSksdH0oKTtvLmRlZmF1bHQ9bCxsLmRpc3BsYXlOYW1lPVwiTGlzdGVuZXJzXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3dpbmRvdyx0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gbihvKXtpZihlW29dKXJldHVybiBlW29dLmV4cG9ydHM7dmFyIHI9ZVtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsbiksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gbi5tPXQsbi5jPWUsbi5kPWZ1bmN0aW9uKHQsZSxvKXtuLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6b30pfSxuLnI9ZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1uKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBvPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKG8pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgciBpbiB0KW4uZChvLHIsZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxyKSk7cmV0dXJuIG99LG4ubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gbi5kKGUsXCJhXCIsZSksZX0sbi5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxuLnA9XCIvXCIsbihuLnM9MCl9KFtmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gbyh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxvLmtleSxvKX19ZnVuY3Rpb24gcih0LGUsbil7cmV0dXJuIGUmJm8odC5wcm90b3R5cGUsZSksbiYmbyh0LG4pLHR9bigxKS50b1N0cmluZygpO3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgbj1lLmRhdGEsbz1lLmNvbmZpZyxyPWUuYXBpLGk9ZS5yZWFkT25seTshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuYXBpPXIsdGhpcy5yZWFkT25seT1pLHRoaXMuX0NTUz17YmxvY2s6dGhpcy5hcGkuc3R5bGVzLmJsb2NrLHdyYXBwZXI6XCJjZS1wYXJhZ3JhcGhcIn0sdGhpcy5yZWFkT25seXx8KHRoaXMub25LZXlVcD10aGlzLm9uS2V5VXAuYmluZCh0aGlzKSksdGhpcy5fcGxhY2Vob2xkZXI9by5wbGFjZWhvbGRlcj9vLnBsYWNlaG9sZGVyOnQuREVGQVVMVF9QTEFDRUhPTERFUix0aGlzLl9kYXRhPXt9LHRoaXMuX2VsZW1lbnQ9dGhpcy5kcmF3VmlldygpLHRoaXMuX3ByZXNlcnZlQmxhbms9dm9pZCAwIT09by5wcmVzZXJ2ZUJsYW5rJiZvLnByZXNlcnZlQmxhbmssdGhpcy5kYXRhPW59cmV0dXJuIHIodCxudWxsLFt7a2V5OlwiREVGQVVMVF9QTEFDRUhPTERFUlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiXCJ9fV0pLHIodCxbe2tleTpcIm9uS2V5VXBcIix2YWx1ZTpmdW5jdGlvbih0KXtcIkJhY2tzcGFjZVwiIT09dC5jb2RlJiZcIkRlbGV0ZVwiIT09dC5jb2RlfHxcIlwiPT09dGhpcy5fZWxlbWVudC50ZXh0Q29udGVudCYmKHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MPVwiXCIpfX0se2tleTpcImRyYXdWaWV3XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpO3JldHVybiB0LmNsYXNzTGlzdC5hZGQodGhpcy5fQ1NTLndyYXBwZXIsdGhpcy5fQ1NTLmJsb2NrKSx0LmNvbnRlbnRFZGl0YWJsZT0hMSx0LmRhdGFzZXQucGxhY2Vob2xkZXI9dGhpcy5hcGkuaTE4bi50KHRoaXMuX3BsYWNlaG9sZGVyKSx0aGlzLnJlYWRPbmx5fHwodC5jb250ZW50RWRpdGFibGU9ITAsdC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIix0aGlzLm9uS2V5VXApKSx0fX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2VsZW1lbnR9fSx7a2V5OlwibWVyZ2VcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT17dGV4dDp0aGlzLmRhdGEudGV4dCt0LnRleHR9O3RoaXMuZGF0YT1lfX0se2tleTpcInZhbGlkYXRlXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIShcIlwiPT09dC50ZXh0LnRyaW0oKSYmIXRoaXMuX3ByZXNlcnZlQmxhbmspfX0se2tleTpcInNhdmVcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm57dGV4dDp0LmlubmVySFRNTH19fSx7a2V5Olwib25QYXN0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXt0ZXh0OnQuZGV0YWlsLmRhdGEuaW5uZXJIVE1MfTt0aGlzLmRhdGE9ZX19LHtrZXk6XCJkYXRhXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZWxlbWVudC5pbm5lckhUTUw7cmV0dXJuIHRoaXMuX2RhdGEudGV4dD10LHRoaXMuX2RhdGF9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9kYXRhPXR8fHt9LHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MPXRoaXMuX2RhdGEudGV4dHx8XCJcIn19XSxbe2tleTpcImNvbnZlcnNpb25Db25maWdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57ZXhwb3J0OlwidGV4dFwiLGltcG9ydDpcInRleHRcIn19fSx7a2V5Olwic2FuaXRpemVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57dGV4dDp7YnI6ITB9fX19LHtrZXk6XCJpc1JlYWRPbmx5U3VwcG9ydGVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuITB9fSx7a2V5OlwicGFzdGVDb25maWdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57dGFnczpbXCJQXCJdfX19LHtrZXk6XCJ0b29sYm94XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue2ljb246big1KS5kZWZhdWx0LHRpdGxlOlwiVGV4dFwifX19XSksdH0oKTt0LmV4cG9ydHM9aX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvPW4oMikscj1uKDMpO1wic3RyaW5nXCI9PXR5cGVvZihyPXIuX19lc01vZHVsZT9yLmRlZmF1bHQ6cikmJihyPVtbdC5pLHIsXCJcIl1dKSxvKHIse2luc2VydDpcImhlYWRcIixzaW5nbGV0b246ITF9KSx0LmV4cG9ydHM9ci5sb2NhbHN8fHt9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG8scj1mdW5jdGlvbigpe3ZhciB0PXt9O3JldHVybiBmdW5jdGlvbihlKXtpZih2b2lkIDA9PT10W2VdKXt2YXIgbj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpO2lmKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCYmbiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCl0cnl7bj1uLmNvbnRlbnREb2N1bWVudC5oZWFkfWNhdGNoKHQpe249bnVsbH10W2VdPW59cmV0dXJuIHRbZV19fSgpLGk9W107ZnVuY3Rpb24gYSh0KXtmb3IodmFyIGU9LTEsbj0wO248aS5sZW5ndGg7bisrKWlmKGlbbl0uaWRlbnRpZmllcj09PXQpe2U9bjticmVha31yZXR1cm4gZX1mdW5jdGlvbiBzKHQsZSl7Zm9yKHZhciBuPXt9LG89W10scj0wO3I8dC5sZW5ndGg7cisrKXt2YXIgcz10W3JdLGM9ZS5iYXNlP3NbMF0rZS5iYXNlOnNbMF0sbD1uW2NdfHwwLHU9XCJcIi5jb25jYXQoYyxcIiBcIikuY29uY2F0KGwpO25bY109bCsxO3ZhciBmPWEodSksZD17Y3NzOnNbMV0sbWVkaWE6c1syXSxzb3VyY2VNYXA6c1szXX07LTEhPT1mPyhpW2ZdLnJlZmVyZW5jZXMrKyxpW2ZdLnVwZGF0ZXIoZCkpOmkucHVzaCh7aWRlbnRpZmllcjp1LHVwZGF0ZXI6dihkLGUpLHJlZmVyZW5jZXM6MX0pLG8ucHVzaCh1KX1yZXR1cm4gb31mdW5jdGlvbiBjKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPXQuYXR0cmlidXRlc3x8e307aWYodm9pZCAwPT09by5ub25jZSl7dmFyIGk9bi5uYztpJiYoby5ub25jZT1pKX1pZihPYmplY3Qua2V5cyhvKS5mb3JFYWNoKChmdW5jdGlvbih0KXtlLnNldEF0dHJpYnV0ZSh0LG9bdF0pfSkpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQuaW5zZXJ0KXQuaW5zZXJ0KGUpO2Vsc2V7dmFyIGE9cih0Lmluc2VydHx8XCJoZWFkXCIpO2lmKCFhKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7YS5hcHBlbmRDaGlsZChlKX1yZXR1cm4gZX12YXIgbCx1PShsPVtdLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGxbdF09ZSxsLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpfSk7ZnVuY3Rpb24gZih0LGUsbixvKXt2YXIgcj1uP1wiXCI6by5tZWRpYT9cIkBtZWRpYSBcIi5jb25jYXQoby5tZWRpYSxcIiB7XCIpLmNvbmNhdChvLmNzcyxcIn1cIik6by5jc3M7aWYodC5zdHlsZVNoZWV0KXQuc3R5bGVTaGVldC5jc3NUZXh0PXUoZSxyKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpLGE9dC5jaGlsZE5vZGVzO2FbZV0mJnQucmVtb3ZlQ2hpbGQoYVtlXSksYS5sZW5ndGg/dC5pbnNlcnRCZWZvcmUoaSxhW2VdKTp0LmFwcGVuZENoaWxkKGkpfX1mdW5jdGlvbiBkKHQsZSxuKXt2YXIgbz1uLmNzcyxyPW4ubWVkaWEsaT1uLnNvdXJjZU1hcDtpZihyP3Quc2V0QXR0cmlidXRlKFwibWVkaWFcIixyKTp0LnJlbW92ZUF0dHJpYnV0ZShcIm1lZGlhXCIpLGkmJmJ0b2EmJihvKz1cIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGkpKSkpLFwiICovXCIpKSx0LnN0eWxlU2hlZXQpdC5zdHlsZVNoZWV0LmNzc1RleHQ9bztlbHNle2Zvcig7dC5maXJzdENoaWxkOyl0LnJlbW92ZUNoaWxkKHQuZmlyc3RDaGlsZCk7dC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvKSl9fXZhciBwPW51bGwsaD0wO2Z1bmN0aW9uIHYodCxlKXt2YXIgbixvLHI7aWYoZS5zaW5nbGV0b24pe3ZhciBpPWgrKztuPXB8fChwPWMoZSkpLG89Zi5iaW5kKG51bGwsbixpLCExKSxyPWYuYmluZChudWxsLG4saSwhMCl9ZWxzZSBuPWMoZSksbz1kLmJpbmQobnVsbCxuLGUpLHI9ZnVuY3Rpb24oKXshZnVuY3Rpb24odCl7aWYobnVsbD09PXQucGFyZW50Tm9kZSlyZXR1cm4hMTt0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCl9KG4pfTtyZXR1cm4gbyh0KSxmdW5jdGlvbihlKXtpZihlKXtpZihlLmNzcz09PXQuY3NzJiZlLm1lZGlhPT09dC5tZWRpYSYmZS5zb3VyY2VNYXA9PT10LnNvdXJjZU1hcClyZXR1cm47byh0PWUpfWVsc2UgcigpfX10LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXsoZT1lfHx7fSkuc2luZ2xldG9ufHxcImJvb2xlYW5cIj09dHlwZW9mIGUuc2luZ2xldG9ufHwoZS5zaW5nbGV0b249KHZvaWQgMD09PW8mJihvPUJvb2xlYW4od2luZG93JiZkb2N1bWVudCYmZG9jdW1lbnQuYWxsJiYhd2luZG93LmF0b2IpKSxvKSk7dmFyIG49cyh0PXR8fFtdLGUpO3JldHVybiBmdW5jdGlvbih0KXtpZih0PXR8fFtdLFwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSl7Zm9yKHZhciBvPTA7bzxuLmxlbmd0aDtvKyspe3ZhciByPWEobltvXSk7aVtyXS5yZWZlcmVuY2VzLS19Zm9yKHZhciBjPXModCxlKSxsPTA7bDxuLmxlbmd0aDtsKyspe3ZhciB1PWEobltsXSk7MD09PWlbdV0ucmVmZXJlbmNlcyYmKGlbdV0udXBkYXRlcigpLGkuc3BsaWNlKHUsMSkpfW49Y319fX0sZnVuY3Rpb24odCxlLG4peyhlPW4oNCkoITEpKS5wdXNoKFt0LmksXCIuY2UtcGFyYWdyYXBoIHtcXG4gICAgbGluZS1oZWlnaHQ6IDEuNmVtO1xcbiAgICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG4uY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OjpiZWZvcmV7XFxuICBjb250ZW50OiBhdHRyKGRhdGEtcGxhY2Vob2xkZXIpO1xcbiAgY29sb3I6ICM3MDc2ODQ7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuXFxuLyoqIFNob3cgcGxhY2Vob2xkZXIgYXQgdGhlIGZpcnN0IHBhcmFncmFwaCBpZiBFZGl0b3IgaXMgZW1wdHkgKi9cXG4uY29kZXgtZWRpdG9yLS1lbXB0eSAuY2UtYmxvY2s6Zmlyc3QtY2hpbGQgLmNlLXBhcmFncmFwaFtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTo6YmVmb3JlIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5jb2RleC1lZGl0b3ItLXRvb2xib3gtb3BlbmVkIC5jZS1ibG9jazpmaXJzdC1jaGlsZCAuY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OjpiZWZvcmUsXFxuLmNvZGV4LWVkaXRvci0tZW1wdHkgLmNlLWJsb2NrOmZpcnN0LWNoaWxkIC5jZS1wYXJhZ3JhcGhbZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6Zm9jdXM6OmJlZm9yZSB7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4uY2UtcGFyYWdyYXBoIHA6Zmlyc3Qtb2YtdHlwZXtcXG4gICAgbWFyZ2luLXRvcDogMDtcXG59XFxuXFxuLmNlLXBhcmFncmFwaCBwOmxhc3Qtb2YtdHlwZXtcXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXCIsXCJcIl0pLHQuZXhwb3J0cz1lfSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO3JldHVybiBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKChmdW5jdGlvbihlKXt2YXIgbj1mdW5jdGlvbih0LGUpe3ZhciBuLG8scixpPXRbMV18fFwiXCIsYT10WzNdO2lmKCFhKXJldHVybiBpO2lmKGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBzPShuPWEsbz1idG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShuKSkpKSxyPVwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KG8pLFwiLyojIFwiLmNvbmNhdChyLFwiICovXCIpKSxjPWEuc291cmNlcy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoYS5zb3VyY2VSb290fHxcIlwiKS5jb25jYXQodCxcIiAqL1wiKX0pKTtyZXR1cm5baV0uY29uY2F0KGMpLmNvbmNhdChbc10pLmpvaW4oXCJcXG5cIil9cmV0dXJuW2ldLmpvaW4oXCJcXG5cIil9KGUsdCk7cmV0dXJuIGVbMl0/XCJAbWVkaWEgXCIuY29uY2F0KGVbMl0sXCIge1wiKS5jb25jYXQobixcIn1cIik6bn0pKS5qb2luKFwiXCIpfSxlLmk9ZnVuY3Rpb24odCxuLG8pe1wic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1bW251bGwsdCxcIlwiXV0pO3ZhciByPXt9O2lmKG8pZm9yKHZhciBpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3ZhciBhPXRoaXNbaV1bMF07bnVsbCE9YSYmKHJbYV09ITApfWZvcih2YXIgcz0wO3M8dC5sZW5ndGg7cysrKXt2YXIgYz1bXS5jb25jYXQodFtzXSk7byYmcltjWzBdXXx8KG4mJihjWzJdP2NbMl09XCJcIi5jb25jYXQobixcIiBhbmQgXCIpLmNvbmNhdChjWzJdKTpjWzJdPW4pLGUucHVzaChjKSl9fSxlfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24ucihlKSxlLmRlZmF1bHQ9JzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwLjIgLTAuMyA5IDExLjRcIiB3aWR0aD1cIjEyXCIgaGVpZ2h0PVwiMTRcIj5cXG4gIDxwYXRoIGQ9XCJNMCAyLjc3Vi45MkExIDEgMCAwMS4yLjI4Qy4zNS4xLjU2IDAgLjgzIDBoNy42NmMuMjguMDEuNDguMS42My4yOC4xNC4xNy4yMS4zOC4yMS42NHYxLjg1YzAgLjI2LS4wOC40OC0uMjMuNjYtLjE1LjE3LS4zNy4yNi0uNjYuMjYtLjI4IDAtLjUtLjA5LS42NC0uMjZhMSAxIDAgMDEtLjIxLS42NlYxLjY5SDUuNnY3LjU4aC41Yy4yNSAwIC40NS4wOC42LjIzLjE3LjE2LjI1LjM1LjI1LjZzLS4wOC40NS0uMjQuNmEuODcuODcgMCAwMS0uNjIuMjJIMy4yMWEuODcuODcgMCAwMS0uNjEtLjIyLjc4Ljc4IDAgMDEtLjI0LS42YzAtLjI1LjA4LS40NC4yNC0uNmEuODUuODUgMCAwMS42MS0uMjNoLjVWMS43SDEuNzN2MS4wOGMwIC4yNi0uMDguNDgtLjIzLjY2LS4xNS4xNy0uMzcuMjYtLjY2LjI2LS4yOCAwLS41LS4wOS0uNjQtLjI2QTEgMSAwIDAxMCAyLjc3elwiLz5cXG48L3N2Zz5cXG4nfV0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbigxNSldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHM9bigxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9cyhyKSxpPXMoaSksYT1zKGEpO3ZhciBjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpeygwLHIuZGVmYXVsdCkodGhpcyx0KSx0aGlzLmNvbW1hbmROYW1lPVwiYm9sZFwiLHRoaXMuQ1NTPXtidXR0b246XCJjZS1pbmxpbmUtdG9vbFwiLGJ1dHRvbkFjdGl2ZTpcImNlLWlubGluZS10b29sLS1hY3RpdmVcIixidXR0b25Nb2RpZmllcjpcImNlLWlubGluZS10b29sLS1ib2xkXCJ9LHRoaXMubm9kZXM9e2J1dHRvbjp2b2lkIDB9fXJldHVybigwLGkuZGVmYXVsdCkodCxbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZXMuYnV0dG9uPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksdGhpcy5ub2Rlcy5idXR0b24udHlwZT1cImJ1dHRvblwiLHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYnV0dG9uLHRoaXMuQ1NTLmJ1dHRvbk1vZGlmaWVyKSx0aGlzLm5vZGVzLmJ1dHRvbi5hcHBlbmRDaGlsZChhLmRlZmF1bHQuc3ZnKFwiYm9sZFwiLDEyLDE0KSksdGhpcy5ub2Rlcy5idXR0b259fSx7a2V5Olwic3Vycm91bmRcIix2YWx1ZTpmdW5jdGlvbih0KXtkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmNvbW1hbmROYW1lKX19LHtrZXk6XCJjaGVja1N0YXRlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQucXVlcnlDb21tYW5kU3RhdGUodGhpcy5jb21tYW5kTmFtZSk7cmV0dXJuIHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC50b2dnbGUodGhpcy5DU1MuYnV0dG9uQWN0aXZlLGUpLGV9fSx7a2V5Olwic2hvcnRjdXRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIkNNRCtCXCJ9fV0sW3trZXk6XCJzYW5pdGl6ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybntiOnt9fX19XSksdH0oKTtvLmRlZmF1bHQ9YyxjLmRpc3BsYXlOYW1lPVwiQm9sZElubGluZVRvb2xcIixjLmlzSW5saW5lPSEwLGMudGl0bGU9XCJCb2xkXCIsdC5leHBvcnRzPWUuZGVmYXVsdH0pP28uYXBwbHkoZSxyKTpvKXx8KHQuZXhwb3J0cz1pKX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaTtcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLHI9W2UsbigyKSxuKDMpLG4oMTUpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEpe1widXNlIHN0cmljdFwiO3ZhciBzPW4oMSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPXMociksaT1zKGkpLGE9cyhhKTt2YXIgYz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXsoMCxyLmRlZmF1bHQpKHRoaXMsdCksdGhpcy5jb21tYW5kTmFtZT1cIml0YWxpY1wiLHRoaXMuQ1NTPXtidXR0b246XCJjZS1pbmxpbmUtdG9vbFwiLGJ1dHRvbkFjdGl2ZTpcImNlLWlubGluZS10b29sLS1hY3RpdmVcIixidXR0b25Nb2RpZmllcjpcImNlLWlubGluZS10b29sLS1pdGFsaWNcIn0sdGhpcy5ub2Rlcz17YnV0dG9uOm51bGx9fXJldHVybigwLGkuZGVmYXVsdCkodCxbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZXMuYnV0dG9uPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksdGhpcy5ub2Rlcy5idXR0b24udHlwZT1cImJ1dHRvblwiLHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYnV0dG9uLHRoaXMuQ1NTLmJ1dHRvbk1vZGlmaWVyKSx0aGlzLm5vZGVzLmJ1dHRvbi5hcHBlbmRDaGlsZChhLmRlZmF1bHQuc3ZnKFwiaXRhbGljXCIsNCwxMSkpLHRoaXMubm9kZXMuYnV0dG9ufX0se2tleTpcInN1cnJvdW5kXCIsdmFsdWU6ZnVuY3Rpb24odCl7ZG9jdW1lbnQuZXhlY0NvbW1hbmQodGhpcy5jb21tYW5kTmFtZSl9fSx7a2V5OlwiY2hlY2tTdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKHRoaXMuY29tbWFuZE5hbWUpO3JldHVybiB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuQ1NTLmJ1dHRvbkFjdGl2ZSxlKSxlfX0se2tleTpcInNob3J0Y3V0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJDTUQrSVwifX1dLFt7a2V5Olwic2FuaXRpemVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57aTp7fX19fV0pLHR9KCk7by5kZWZhdWx0PWMsYy5kaXNwbGF5TmFtZT1cIkl0YWxpY0lubGluZVRvb2xcIixjLmlzSW5saW5lPSEwLGMudGl0bGU9XCJJdGFsaWNcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbigyNSksbigxNSksbig4KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhLHMsYyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGw9bigxMyksdT1uKDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj11KHIpLGk9dShpKSxhPXUoYSkscz11KHMpLGM9bChjKTt2YXIgZj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIG49ZS5hcGk7KDAsci5kZWZhdWx0KSh0aGlzLHQpLHRoaXMuY29tbWFuZExpbms9XCJjcmVhdGVMaW5rXCIsdGhpcy5jb21tYW5kVW5saW5rPVwidW5saW5rXCIsdGhpcy5FTlRFUl9LRVk9MTMsdGhpcy5DU1M9e2J1dHRvbjpcImNlLWlubGluZS10b29sXCIsYnV0dG9uQWN0aXZlOlwiY2UtaW5saW5lLXRvb2wtLWFjdGl2ZVwiLGJ1dHRvbk1vZGlmaWVyOlwiY2UtaW5saW5lLXRvb2wtLWxpbmtcIixidXR0b25Vbmxpbms6XCJjZS1pbmxpbmUtdG9vbC0tdW5saW5rXCIsaW5wdXQ6XCJjZS1pbmxpbmUtdG9vbC1pbnB1dFwiLGlucHV0U2hvd2VkOlwiY2UtaW5saW5lLXRvb2wtaW5wdXQtLXNob3dlZFwifSx0aGlzLm5vZGVzPXtidXR0b246bnVsbCxpbnB1dDpudWxsfSx0aGlzLmlucHV0T3BlbmVkPSExLHRoaXMudG9vbGJhcj1uLnRvb2xiYXIsdGhpcy5pbmxpbmVUb29sYmFyPW4uaW5saW5lVG9vbGJhcix0aGlzLm5vdGlmaWVyPW4ubm90aWZpZXIsdGhpcy5pMThuPW4uaTE4bix0aGlzLnNlbGVjdGlvbj1uZXcgYS5kZWZhdWx0fXJldHVybigwLGkuZGVmYXVsdCkodCxbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubm9kZXMuYnV0dG9uPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksdGhpcy5ub2Rlcy5idXR0b24udHlwZT1cImJ1dHRvblwiLHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYnV0dG9uLHRoaXMuQ1NTLmJ1dHRvbk1vZGlmaWVyKSx0aGlzLm5vZGVzLmJ1dHRvbi5hcHBlbmRDaGlsZChzLmRlZmF1bHQuc3ZnKFwibGlua1wiLDE0LDEwKSksdGhpcy5ub2Rlcy5idXR0b24uYXBwZW5kQ2hpbGQocy5kZWZhdWx0LnN2ZyhcInVubGlua1wiLDE1LDExKSksdGhpcy5ub2Rlcy5idXR0b259fSx7a2V5OlwicmVuZGVyQWN0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm4gdGhpcy5ub2Rlcy5pbnB1dD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksdGhpcy5ub2Rlcy5pbnB1dC5wbGFjZWhvbGRlcj10aGlzLmkxOG4udChcIkFkZCBhIGxpbmtcIiksdGhpcy5ub2Rlcy5pbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmlucHV0KSx0aGlzLm5vZGVzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsKGZ1bmN0aW9uKGUpe2Uua2V5Q29kZT09PXQuRU5URVJfS0VZJiZ0LmVudGVyUHJlc3NlZChlKX0pKSx0aGlzLm5vZGVzLmlucHV0fX0se2tleTpcInN1cnJvdW5kXCIsdmFsdWU6ZnVuY3Rpb24odCl7aWYodCl7dGhpcy5pbnB1dE9wZW5lZD8odGhpcy5zZWxlY3Rpb24ucmVzdG9yZSgpLHRoaXMuc2VsZWN0aW9uLnJlbW92ZUZha2VCYWNrZ3JvdW5kKCkpOih0aGlzLnNlbGVjdGlvbi5zZXRGYWtlQmFja2dyb3VuZCgpLHRoaXMuc2VsZWN0aW9uLnNhdmUoKSk7dmFyIGU9dGhpcy5zZWxlY3Rpb24uZmluZFBhcmVudFRhZyhcIkFcIik7aWYoZSlyZXR1cm4gdGhpcy5zZWxlY3Rpb24uZXhwYW5kVG9UYWcoZSksdGhpcy51bmxpbmsoKSx0aGlzLmNsb3NlQWN0aW9ucygpLHRoaXMuY2hlY2tTdGF0ZSgpLHZvaWQgdGhpcy50b29sYmFyLmNsb3NlKCl9dGhpcy50b2dnbGVBY3Rpb25zKCl9fSx7a2V5OlwiY2hlY2tTdGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuc2VsZWN0aW9uLmZpbmRQYXJlbnRUYWcoXCJBXCIpO2lmKGUpe3RoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYnV0dG9uVW5saW5rKSx0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmJ1dHRvbkFjdGl2ZSksdGhpcy5vcGVuQWN0aW9ucygpO3ZhciBuPWUuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTt0aGlzLm5vZGVzLmlucHV0LnZhbHVlPVwibnVsbFwiIT09bj9uOlwiXCIsdGhpcy5zZWxlY3Rpb24uc2F2ZSgpfWVsc2UgdGhpcy5ub2Rlcy5idXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy5idXR0b25VbmxpbmspLHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5DU1MuYnV0dG9uQWN0aXZlKTtyZXR1cm4hIWV9fSx7a2V5OlwiY2xlYXJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuY2xvc2VBY3Rpb25zKCl9fSx7a2V5OlwidG9nZ2xlQWN0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5pbnB1dE9wZW5lZD90aGlzLmNsb3NlQWN0aW9ucyghMSk6dGhpcy5vcGVuQWN0aW9ucyghMCl9fSx7a2V5Olwib3BlbkFjdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF07dGhpcy5ub2Rlcy5pbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmlucHV0U2hvd2VkKSx0JiZ0aGlzLm5vZGVzLmlucHV0LmZvY3VzKCksdGhpcy5pbnB1dE9wZW5lZD0hMH19LHtrZXk6XCJjbG9zZUFjdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PSEoYXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0pfHxhcmd1bWVudHNbMF07aWYodGhpcy5zZWxlY3Rpb24uaXNGYWtlQmFja2dyb3VuZEVuYWJsZWQpe3ZhciBlPW5ldyBhLmRlZmF1bHQ7ZS5zYXZlKCksdGhpcy5zZWxlY3Rpb24ucmVzdG9yZSgpLHRoaXMuc2VsZWN0aW9uLnJlbW92ZUZha2VCYWNrZ3JvdW5kKCksZS5yZXN0b3JlKCl9dGhpcy5ub2Rlcy5pbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLmlucHV0U2hvd2VkKSx0aGlzLm5vZGVzLmlucHV0LnZhbHVlPVwiXCIsdCYmdGhpcy5zZWxlY3Rpb24uY2xlYXJTYXZlZCgpLHRoaXMuaW5wdXRPcGVuZWQ9ITF9fSx7a2V5OlwiZW50ZXJQcmVzc2VkXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5ub2Rlcy5pbnB1dC52YWx1ZXx8XCJcIjtyZXR1cm4gZS50cmltKCk/dGhpcy52YWxpZGF0ZVVSTChlKT8oZT10aGlzLnByZXBhcmVMaW5rKGUpLHRoaXMuc2VsZWN0aW9uLnJlc3RvcmUoKSx0aGlzLnNlbGVjdGlvbi5yZW1vdmVGYWtlQmFja2dyb3VuZCgpLHRoaXMuaW5zZXJ0TGluayhlKSx0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSx0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHRoaXMuc2VsZWN0aW9uLmNvbGxhcHNlVG9FbmQoKSx2b2lkIHRoaXMuaW5saW5lVG9vbGJhci5jbG9zZSgpKToodGhpcy5ub3RpZmllci5zaG93KHttZXNzYWdlOlwiUGFzdGVkIGxpbmsgaXMgbm90IHZhbGlkLlwiLHN0eWxlOlwiZXJyb3JcIn0pLHZvaWQgYy5sb2coXCJJbmNvcnJlY3QgTGluayBwYXN0ZWRcIixcIndhcm5cIixlKSk6KHRoaXMuc2VsZWN0aW9uLnJlc3RvcmUoKSx0aGlzLnVubGluaygpLHQucHJldmVudERlZmF1bHQoKSx2b2lkIHRoaXMuY2xvc2VBY3Rpb25zKCkpfX0se2tleTpcInZhbGlkYXRlVVJMXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIS9cXHMvLnRlc3QodCl9fSx7a2V5OlwicHJlcGFyZUxpbmtcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdD10LnRyaW0oKSx0PXRoaXMuYWRkUHJvdG9jb2wodCl9fSx7a2V5OlwiYWRkUHJvdG9jb2xcIix2YWx1ZTpmdW5jdGlvbih0KXtpZigvXihcXHcrKTooXFwvXFwvKT8vLnRlc3QodCkpcmV0dXJuIHQ7dmFyIGU9L15cXC9bXi9cXHNdLy50ZXN0KHQpLG49XCIjXCI9PT10LnN1YnN0cmluZygwLDEpLG89L15cXC9cXC9bXi9cXHNdLy50ZXN0KHQpO3JldHVybiBlfHxufHxvfHwodD1cImh0dHA6Ly9cIit0KSx0fX0se2tleTpcImluc2VydExpbmtcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnNlbGVjdGlvbi5maW5kUGFyZW50VGFnKFwiQVwiKTtlJiZ0aGlzLnNlbGVjdGlvbi5leHBhbmRUb1RhZyhlKSxkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmNvbW1hbmRMaW5rLCExLHQpfX0se2tleTpcInVubGlua1wiLHZhbHVlOmZ1bmN0aW9uKCl7ZG9jdW1lbnQuZXhlY0NvbW1hbmQodGhpcy5jb21tYW5kVW5saW5rKX19LHtrZXk6XCJzaG9ydGN1dFwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiQ01EK0tcIn19XSxbe2tleTpcInNhbml0aXplXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue2E6e2hyZWY6ITAsdGFyZ2V0OlwiX2JsYW5rXCIscmVsOlwibm9mb2xsb3dcIn19fX1dKSx0fSgpO28uZGVmYXVsdD1mLGYuZGlzcGxheU5hbWU9XCJMaW5rSW5saW5lVG9vbFwiLGYuaXNJbmxpbmU9ITAsZi50aXRsZT1cIkxpbmtcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbigxNSldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHM9bigxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9cyhyKSxpPXMoaSksYT1zKGEpO3ZhciBjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgbj1lLmRhdGEsbz1lLmFwaTsoMCxyLmRlZmF1bHQpKHRoaXMsdCksdGhpcy5DU1M9e3dyYXBwZXI6XCJjZS1zdHViXCIsaW5mbzpcImNlLXN0dWJfX2luZm9cIix0aXRsZTpcImNlLXN0dWJfX3RpdGxlXCIsc3VidGl0bGU6XCJjZS1zdHViX19zdWJ0aXRsZVwifSx0aGlzLmFwaT1vLHRoaXMudGl0bGU9bi50aXRsZXx8dGhpcy5hcGkuaTE4bi50KFwiRXJyb3JcIiksdGhpcy5zdWJ0aXRsZT10aGlzLmFwaS5pMThuLnQoXCJUaGUgYmxvY2sgY2FuIG5vdCBiZSBkaXNwbGF5ZWQgY29ycmVjdGx5LlwiKSx0aGlzLnNhdmVkRGF0YT1uLnNhdmVkRGF0YSx0aGlzLndyYXBwZXI9dGhpcy5tYWtlKCl9cmV0dXJuKDAsaS5kZWZhdWx0KSh0LFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53cmFwcGVyfX0se2tleTpcInNhdmVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNhdmVkRGF0YX19LHtrZXk6XCJtYWtlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD1hLmRlZmF1bHQubWFrZShcImRpdlwiLHRoaXMuQ1NTLndyYXBwZXIpLGU9YS5kZWZhdWx0LnN2ZyhcInNhZC1mYWNlXCIsNTIsNTIpLG49YS5kZWZhdWx0Lm1ha2UoXCJkaXZcIix0aGlzLkNTUy5pbmZvKSxvPWEuZGVmYXVsdC5tYWtlKFwiZGl2XCIsdGhpcy5DU1MudGl0bGUse3RleHRDb250ZW50OnRoaXMudGl0bGV9KSxyPWEuZGVmYXVsdC5tYWtlKFwiZGl2XCIsdGhpcy5DU1Muc3VidGl0bGUse3RleHRDb250ZW50OnRoaXMuc3VidGl0bGV9KTtyZXR1cm4gdC5hcHBlbmRDaGlsZChlKSxuLmFwcGVuZENoaWxkKG8pLG4uYXBwZW5kQ2hpbGQociksdC5hcHBlbmRDaGlsZChuKSx0fX1dKSx0fSgpO28uZGVmYXVsdD1jLGMuZGlzcGxheU5hbWU9XCJTdHViXCIsYy5pc1JlYWRPbmx5U3VwcG9ydGVkPSEwLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDE1KSxuKDgpLG4oMjUpXSx2b2lkIDA9PT0oaT1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKG8scixpLGEscyxjKXtcInVzZSBzdHJpY3RcIjt2YXIgbD1uKDEzKSx1PW4oMSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksby5kZWZhdWx0PXZvaWQgMCxyPXUociksaT11KGkpLGE9dShhKSxzPWwocyksYz11KGMpO3ZhciBmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlLG4peygwLHIuZGVmYXVsdCkodGhpcyx0KSx0aGlzLmN1cnNvcj0tMSx0aGlzLml0ZW1zPVtdLHRoaXMuaXRlbXM9ZXx8W10sdGhpcy5mb2N1c2VkQ3NzQ2xhc3M9bn1yZXR1cm4oMCxpLmRlZmF1bHQpKHQsW3trZXk6XCJzZXRJdGVtc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuaXRlbXM9dH19LHtrZXk6XCJuZXh0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmN1cnNvcj10aGlzLmxlYWZOb2Rlc0FuZFJldHVybkluZGV4KHQuZGlyZWN0aW9ucy5SSUdIVCl9fSx7a2V5OlwicHJldmlvdXNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuY3Vyc29yPXRoaXMubGVhZk5vZGVzQW5kUmV0dXJuSW5kZXgodC5kaXJlY3Rpb25zLkxFRlQpfX0se2tleTpcImRyb3BDdXJzb3JcIix2YWx1ZTpmdW5jdGlvbigpey0xIT09dGhpcy5jdXJzb3ImJih0aGlzLml0ZW1zW3RoaXMuY3Vyc29yXS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuZm9jdXNlZENzc0NsYXNzKSx0aGlzLmN1cnNvcj0tMSl9fSx7a2V5OlwibGVhZk5vZGVzQW5kUmV0dXJuSW5kZXhcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgbj10aGlzO2lmKDA9PT10aGlzLml0ZW1zLmxlbmd0aClyZXR1cm4gdGhpcy5jdXJzb3I7dmFyIG89dGhpcy5jdXJzb3I7cmV0dXJuLTE9PT1vP289ZT09PXQuZGlyZWN0aW9ucy5SSUdIVD8tMTowOnRoaXMuaXRlbXNbb10uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmZvY3VzZWRDc3NDbGFzcyksbz1lPT09dC5kaXJlY3Rpb25zLlJJR0hUPyhvKzEpJXRoaXMuaXRlbXMubGVuZ3RoOih0aGlzLml0ZW1zLmxlbmd0aCtvLTEpJXRoaXMuaXRlbXMubGVuZ3RoLGEuZGVmYXVsdC5jYW5TZXRDYXJldCh0aGlzLml0ZW1zW29dKSYmcy5kZWxheSgoZnVuY3Rpb24oKXtyZXR1cm4gYy5kZWZhdWx0LnNldEN1cnNvcihuLml0ZW1zW29dKX0pLDUwKSgpLHRoaXMuaXRlbXNbb10uY2xhc3NMaXN0LmFkZCh0aGlzLmZvY3VzZWRDc3NDbGFzcyksb319LHtrZXk6XCJjdXJyZW50SXRlbVwiLGdldDpmdW5jdGlvbigpe3JldHVybi0xPT09dGhpcy5jdXJzb3I/bnVsbDp0aGlzLml0ZW1zW3RoaXMuY3Vyc29yXX19XSksdH0oKTtvLmRlZmF1bHQ9ZixmLmRpc3BsYXlOYW1lPVwiRG9tSXRlcmF0b3JcIixmLmRpcmVjdGlvbnM9e1JJR0hUOlwicmlnaHRcIixMRUZUOlwibGVmdFwifSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbigxNSldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHM9bigxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9cyhyKSxpPXMoaSksYT1zKGEpO3ZhciBjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgbj1lLmFwaTsoMCxyLmRlZmF1bHQpKHRoaXMsdCksdGhpcy5DU1M9e2J1dHRvbjpcImNlLXNldHRpbmdzX19idXR0b25cIix3cmFwcGVyOlwiY2UtdHVuZS1tb3ZlLXVwXCIsYW5pbWF0aW9uOlwid29iYmxlXCJ9LHRoaXMuYXBpPW59cmV0dXJuKDAsaS5kZWZhdWx0KSh0LFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9YS5kZWZhdWx0Lm1ha2UoXCJkaXZcIixbdGhpcy5DU1MuYnV0dG9uLHRoaXMuQ1NTLndyYXBwZXJdLHt9KTtyZXR1cm4gZS5hcHBlbmRDaGlsZChhLmRlZmF1bHQuc3ZnKFwiYXJyb3ctdXBcIiwxNCwxNCkpLHRoaXMuYXBpLmxpc3RlbmVycy5vbihlLFwiY2xpY2tcIiwoZnVuY3Rpb24obil7cmV0dXJuIHQuaGFuZGxlQ2xpY2sobixlKX0pLCExKSx0aGlzLmFwaS50b29sdGlwLm9uSG92ZXIoZSx0aGlzLmFwaS5pMThuLnQoXCJNb3ZlIHVwXCIpKSxlfX0se2tleTpcImhhbmRsZUNsaWNrXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLG89dGhpcy5hcGkuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCkscj10aGlzLmFwaS5ibG9ja3MuZ2V0QmxvY2tCeUluZGV4KG8pLGk9dGhpcy5hcGkuYmxvY2tzLmdldEJsb2NrQnlJbmRleChvLTEpO2lmKDA9PT1vfHwhcnx8IWkpcmV0dXJuIGUuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5hbmltYXRpb24pLHZvaWQgd2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5jbGFzc0xpc3QucmVtb3ZlKG4uQ1NTLmFuaW1hdGlvbil9KSw1MDApO3ZhciBhLHM9ci5ob2xkZXIsYz1pLmhvbGRlcixsPXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksdT1jLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2E9dS50b3A+MD9NYXRoLmFicyhsLnRvcCktTWF0aC5hYnModS50b3ApOndpbmRvdy5pbm5lckhlaWdodC1NYXRoLmFicyhsLnRvcCkrTWF0aC5hYnModS50b3ApLHdpbmRvdy5zY3JvbGxCeSgwLC0xKmEpLHRoaXMuYXBpLmJsb2Nrcy5tb3ZlKG8tMSksdGhpcy5hcGkudG9vbHRpcC5oaWRlKCl9fV0pLHR9KCk7by5kZWZhdWx0PWMsYy5kaXNwbGF5TmFtZT1cIk1vdmVVcFR1bmVcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbigxNSldLHZvaWQgMD09PShpPVwiZnVuY3Rpb25cIj09dHlwZW9mKG89ZnVuY3Rpb24obyxyLGksYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHM9bigxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxvLmRlZmF1bHQ9dm9pZCAwLHI9cyhyKSxpPXMoaSksYT1zKGEpO3ZhciBjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgbj10aGlzLG89ZS5hcGk7KDAsci5kZWZhdWx0KSh0aGlzLHQpLHRoaXMuQ1NTPXtidXR0b246XCJjZS1zZXR0aW5nc19fYnV0dG9uXCIsYnV0dG9uRGVsZXRlOlwiY2Utc2V0dGluZ3NfX2J1dHRvbi0tZGVsZXRlXCIsYnV0dG9uQ29uZmlybTpcImNlLXNldHRpbmdzX19idXR0b24tLWNvbmZpcm1cIn0sdGhpcy5ub2Rlcz17YnV0dG9uOm51bGx9LHRoaXMuYXBpPW8sdGhpcy5yZXNldENvbmZpcm1hdGlvbj1mdW5jdGlvbigpe24uc2V0Q29uZmlybWF0aW9uKCExKX19cmV0dXJuKDAsaS5kZWZhdWx0KSh0LFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybiB0aGlzLm5vZGVzLmJ1dHRvbj1hLmRlZmF1bHQubWFrZShcImRpdlwiLFt0aGlzLkNTUy5idXR0b24sdGhpcy5DU1MuYnV0dG9uRGVsZXRlXSx7fSksdGhpcy5ub2Rlcy5idXR0b24uYXBwZW5kQ2hpbGQoYS5kZWZhdWx0LnN2ZyhcImNyb3NzXCIsMTIsMTIpKSx0aGlzLmFwaS5saXN0ZW5lcnMub24odGhpcy5ub2Rlcy5idXR0b24sXCJjbGlja1wiLChmdW5jdGlvbihlKXtyZXR1cm4gdC5oYW5kbGVDbGljayhlKX0pLCExKSx0aGlzLmFwaS50b29sdGlwLm9uSG92ZXIodGhpcy5ub2Rlcy5idXR0b24sdGhpcy5hcGkuaTE4bi50KFwiRGVsZXRlXCIpKSx0aGlzLm5vZGVzLmJ1dHRvbn19LHtrZXk6XCJoYW5kbGVDbGlja1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMubmVlZENvbmZpcm1hdGlvbj8odGhpcy5hcGkuZXZlbnRzLm9mZihcImJsb2NrLXNldHRpbmdzLWNsb3NlZFwiLHRoaXMucmVzZXRDb25maXJtYXRpb24pLHRoaXMuYXBpLmJsb2Nrcy5kZWxldGUoKSx0aGlzLmFwaS50b29sYmFyLmNsb3NlKCksdGhpcy5hcGkudG9vbHRpcC5oaWRlKCksdC5zdG9wUHJvcGFnYXRpb24oKSk6KHRoaXMuc2V0Q29uZmlybWF0aW9uKCEwKSx0aGlzLmFwaS5ldmVudHMub24oXCJibG9jay1zZXR0aW5ncy1jbG9zZWRcIix0aGlzLnJlc2V0Q29uZmlybWF0aW9uKSl9fSx7a2V5Olwic2V0Q29uZmlybWF0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5uZWVkQ29uZmlybWF0aW9uPXQsdGhpcy5ub2Rlcy5idXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5idXR0b25Db25maXJtKX19XSksdH0oKTtvLmRlZmF1bHQ9YyxjLmRpc3BsYXlOYW1lPVwiRGVsZXRlVHVuZVwiLHQuZXhwb3J0cz1lLmRlZmF1bHR9KT9vLmFwcGx5KGUscik6byl8fCh0LmV4cG9ydHM9aSl9LGZ1bmN0aW9uKHQsZSxuKXt2YXIgbyxyLGk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZixyPVtlLG4oMiksbigzKSxuKDE1KV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhKXtcInVzZSBzdHJpY3RcIjt2YXIgcz1uKDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj1zKHIpLGk9cyhpKSxhPXMoYSk7dmFyIGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe3ZhciBuPWUuYXBpOygwLHIuZGVmYXVsdCkodGhpcyx0KSx0aGlzLkNTUz17YnV0dG9uOlwiY2Utc2V0dGluZ3NfX2J1dHRvblwiLHdyYXBwZXI6XCJjZS10dW5lLW1vdmUtZG93blwiLGFuaW1hdGlvbjpcIndvYmJsZVwifSx0aGlzLmFwaT1ufXJldHVybigwLGkuZGVmYXVsdCkodCxbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWEuZGVmYXVsdC5tYWtlKFwiZGl2XCIsW3RoaXMuQ1NTLmJ1dHRvbix0aGlzLkNTUy53cmFwcGVyXSx7fSk7cmV0dXJuIGUuYXBwZW5kQ2hpbGQoYS5kZWZhdWx0LnN2ZyhcImFycm93LWRvd25cIiwxNCwxNCkpLHRoaXMuYXBpLmxpc3RlbmVycy5vbihlLFwiY2xpY2tcIiwoZnVuY3Rpb24obil7cmV0dXJuIHQuaGFuZGxlQ2xpY2sobixlKX0pLCExKSx0aGlzLmFwaS50b29sdGlwLm9uSG92ZXIoZSx0aGlzLmFwaS5pMThuLnQoXCJNb3ZlIGRvd25cIikpLGV9fSx7a2V5OlwiaGFuZGxlQ2xpY2tcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMsbz10aGlzLmFwaS5ibG9ja3MuZ2V0Q3VycmVudEJsb2NrSW5kZXgoKSxyPXRoaXMuYXBpLmJsb2Nrcy5nZXRCbG9ja0J5SW5kZXgobysxKTtpZighcilyZXR1cm4gZS5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmFuaW1hdGlvbiksdm9pZCB3aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLmNsYXNzTGlzdC5yZW1vdmUobi5DU1MuYW5pbWF0aW9uKX0pLDUwMCk7dmFyIGk9ci5ob2xkZXIsYT1pLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHM9TWF0aC5hYnMod2luZG93LmlubmVySGVpZ2h0LWkub2Zmc2V0SGVpZ2h0KTthLnRvcDx3aW5kb3cuaW5uZXJIZWlnaHQmJihzPXdpbmRvdy5zY3JvbGxZK2kub2Zmc2V0SGVpZ2h0KSx3aW5kb3cuc2Nyb2xsVG8oMCxzKSx0aGlzLmFwaS5ibG9ja3MubW92ZShvKzEpLHRoaXMuYXBpLnRvb2x0aXAuaGlkZSgpfX1dKSx0fSgpO28uZGVmYXVsdD1jLGMuZGlzcGxheU5hbWU9XCJNb3ZlRG93blR1bmVcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scixpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYscj1bZSxuKDIpLG4oMyksbig4KSxuKDE1KSxuKDYxKV0sdm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbihvLHIsaSxhLHMsYyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGw9bigxMyksdT1uKDEpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLG8uZGVmYXVsdD12b2lkIDAscj11KHIpLGk9dShpKSxhPWwoYSkscz11KHMpO3ZhciBmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXsoMCxyLmRlZmF1bHQpKHRoaXMsdCksdGhpcy5ibG9ja3M9W10sdGhpcy53b3JraW5nQXJlYT1lfXJldHVybigwLGkuZGVmYXVsdCkodCxbe2tleTpcInB1c2hcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmJsb2Nrcy5wdXNoKHQpLHRoaXMuaW5zZXJ0VG9ET00odCl9fSx7a2V5Olwic3dhcFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5ibG9ja3NbZV07cy5kZWZhdWx0LnN3YXAodGhpcy5ibG9ja3NbdF0uaG9sZGVyLG4uaG9sZGVyKSx0aGlzLmJsb2Nrc1tlXT10aGlzLmJsb2Nrc1t0XSx0aGlzLmJsb2Nrc1t0XT1ufX0se2tleTpcIm1vdmVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuYmxvY2tzLnNwbGljZShlLDEpWzBdLG89dC0xLHI9TWF0aC5tYXgoMCxvKSxpPXRoaXMuYmxvY2tzW3JdO3Q+MD90aGlzLmluc2VydFRvRE9NKG4sXCJhZnRlcmVuZFwiLGkpOnRoaXMuaW5zZXJ0VG9ET00obixcImJlZm9yZWJlZ2luXCIsaSksdGhpcy5ibG9ja3Muc3BsaWNlKHQsMCxuKTt2YXIgYT10aGlzLmNvbXBvc2VCbG9ja0V2ZW50KFwibW92ZVwiLHtmcm9tSW5kZXg6ZSx0b0luZGV4OnR9KTtuLmNhbGwoYy5CbG9ja1Rvb2xBUEkuTU9WRUQsYSl9fSx7a2V5OlwiaW5zZXJ0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdO2lmKHRoaXMubGVuZ3RoKXt0PnRoaXMubGVuZ3RoJiYodD10aGlzLmxlbmd0aCksbiYmKHRoaXMuYmxvY2tzW3RdLmhvbGRlci5yZW1vdmUoKSx0aGlzLmJsb2Nrc1t0XS5jYWxsKGMuQmxvY2tUb29sQVBJLlJFTU9WRUQpKTt2YXIgbz1uPzE6MDtpZih0aGlzLmJsb2Nrcy5zcGxpY2UodCxvLGUpLHQ+MCl7dmFyIHI9dGhpcy5ibG9ja3NbdC0xXTt0aGlzLmluc2VydFRvRE9NKGUsXCJhZnRlcmVuZFwiLHIpfWVsc2V7dmFyIGk9dGhpcy5ibG9ja3NbdCsxXTtpP3RoaXMuaW5zZXJ0VG9ET00oZSxcImJlZm9yZWJlZ2luXCIsaSk6dGhpcy5pbnNlcnRUb0RPTShlKX19ZWxzZSB0aGlzLnB1c2goZSl9fSx7a2V5OlwicmVtb3ZlXCIsdmFsdWU6ZnVuY3Rpb24odCl7aXNOYU4odCkmJih0PXRoaXMubGVuZ3RoLTEpLHRoaXMuYmxvY2tzW3RdLmhvbGRlci5yZW1vdmUoKSx0aGlzLmJsb2Nrc1t0XS5jYWxsKGMuQmxvY2tUb29sQVBJLlJFTU9WRUQpLHRoaXMuYmxvY2tzLnNwbGljZSh0LDEpfX0se2tleTpcInJlbW92ZUFsbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy53b3JraW5nQXJlYS5pbm5lckhUTUw9XCJcIix0aGlzLmJsb2Nrcy5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jYWxsKGMuQmxvY2tUb29sQVBJLlJFTU9WRUQpfSkpLHRoaXMuYmxvY2tzLmxlbmd0aD0wfX0se2tleTpcImluc2VydEFmdGVyXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmJsb2Nrcy5pbmRleE9mKHQpO3RoaXMuaW5zZXJ0KG4rMSxlKX19LHtrZXk6XCJnZXRcIix2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5ibG9ja3NbdF19fSx7a2V5OlwiaW5kZXhPZlwiLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmJsb2Nrcy5pbmRleE9mKHQpfX0se2tleTpcImluc2VydFRvRE9NXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe2U/bi5ob2xkZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KGUsdC5ob2xkZXIpOnRoaXMud29ya2luZ0FyZWEuYXBwZW5kQ2hpbGQodC5ob2xkZXIpLHQuY2FsbChjLkJsb2NrVG9vbEFQSS5SRU5ERVJFRCl9fSx7a2V5OlwiY29tcG9zZUJsb2NrRXZlbnRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiBuZXcgQ3VzdG9tRXZlbnQodCx7ZGV0YWlsOmV9KX19LHtrZXk6XCJsZW5ndGhcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ibG9ja3MubGVuZ3RofX0se2tleTpcImFycmF5XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYmxvY2tzfX0se2tleTpcIm5vZGVzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGEuYXJyYXkodGhpcy53b3JraW5nQXJlYS5jaGlsZHJlbil9fV0sW3trZXk6XCJzZXRcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIGlzTmFOKE51bWJlcihlKSk/KFJlZmxlY3Quc2V0KHQsZSxuKSwhMCk6KHQuaW5zZXJ0KCtlLG4pLCEwKX19LHtrZXk6XCJnZXRcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3JldHVybiBpc05hTihOdW1iZXIoZSkpP1JlZmxlY3QuZ2V0KHQsZSk6dC5nZXQoK2UpfX1dKSx0fSgpO28uZGVmYXVsdD1mLGYuZGlzcGxheU5hbWU9XCJCbG9ja3NcIix0LmV4cG9ydHM9ZS5kZWZhdWx0fSk/by5hcHBseShlLHIpOm8pfHwodC5leHBvcnRzPWkpfSxmdW5jdGlvbih0LGUsbil7d2luZG93LHQuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT17fTtmdW5jdGlvbiBuKG8pe2lmKGVbb10pcmV0dXJuIGVbb10uZXhwb3J0czt2YXIgcj1lW29dPXtpOm8sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtvXS5jYWxsKHIuZXhwb3J0cyxyLHIuZXhwb3J0cyxuKSxyLmw9ITAsci5leHBvcnRzfXJldHVybiBuLm09dCxuLmM9ZSxuLmQ9ZnVuY3Rpb24odCxlLG8pe24ubyh0LGUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiEwLGdldDpvfSl9LG4ucj1mdW5jdGlvbih0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxuLnQ9ZnVuY3Rpb24odCxlKXtpZigxJmUmJih0PW4odCkpLDgmZSlyZXR1cm4gdDtpZig0JmUmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0JiZ0Ll9fZXNNb2R1bGUpcmV0dXJuIHQ7dmFyIG89T2JqZWN0LmNyZWF0ZShudWxsKTtpZihuLnIobyksT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6dH0pLDImZSYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpZm9yKHZhciByIGluIHQpbi5kKG8scixmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0uYmluZChudWxsLHIpKTtyZXR1cm4gb30sbi5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBuLmQoZSxcImFcIixlKSxlfSxuLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LG4ucD1cIlwiLG4obi5zPTApfShbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG8odCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIG89ZVtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsby5rZXksbyl9fWZ1bmN0aW9uIHIodCxlLG4pe3JldHVybiBlJiZvKHQucHJvdG90eXBlLGUpLG4mJm8odCxuKSx0fW4ucihlKTt2YXIgaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIG49dGhpczshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuY29tbWFuZHM9e30sdGhpcy5rZXlzPXt9LHRoaXMubmFtZT1lLm5hbWUsdGhpcy5wYXJzZVNob3J0Y3V0TmFtZShlLm5hbWUpLHRoaXMuZWxlbWVudD1lLm9uLHRoaXMuY2FsbGJhY2s9ZS5jYWxsYmFjayx0aGlzLmV4ZWN1dGVTaG9ydGN1dD1mdW5jdGlvbih0KXtuLmV4ZWN1dGUodCl9LHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMuZXhlY3V0ZVNob3J0Y3V0LCExKX1yZXR1cm4gcih0LG51bGwsW3trZXk6XCJzdXBwb3J0ZWRDb21tYW5kc1wiLGdldDpmdW5jdGlvbigpe3JldHVybntTSElGVDpbXCJTSElGVFwiXSxDTUQ6W1wiQ01EXCIsXCJDT05UUk9MXCIsXCJDT01NQU5EXCIsXCJXSU5ET1dTXCIsXCJDVFJMXCJdLEFMVDpbXCJBTFRcIixcIk9QVElPTlwiXX19fSx7a2V5Olwia2V5Q29kZXNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57MDo0OCwxOjQ5LDI6NTAsMzo1MSw0OjUyLDU6NTMsNjo1NCw3OjU1LDg6NTYsOTo1NyxBOjY1LEI6NjYsQzo2NyxEOjY4LEU6NjksRjo3MCxHOjcxLEg6NzIsSTo3MyxKOjc0LEs6NzUsTDo3NixNOjc3LE46NzgsTzo3OSxQOjgwLFE6ODEsUjo4MixTOjgzLFQ6ODQsVTo4NSxWOjg2LFc6ODcsWDo4OCxZOjg5LFo6OTAsQkFDS1NQQUNFOjgsRU5URVI6MTMsRVNDQVBFOjI3LExFRlQ6MzcsVVA6MzgsUklHSFQ6MzksRE9XTjo0MCxJTlNFUlQ6NDUsREVMRVRFOjQ2fX19XSkscih0LFt7a2V5OlwicGFyc2VTaG9ydGN1dE5hbWVcIix2YWx1ZTpmdW5jdGlvbihlKXtlPWUuc3BsaXQoXCIrXCIpO2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXtlW25dPWVbbl0udG9VcHBlckNhc2UoKTt2YXIgbz0hMTtmb3IodmFyIHIgaW4gdC5zdXBwb3J0ZWRDb21tYW5kcylpZih0LnN1cHBvcnRlZENvbW1hbmRzW3JdLmluY2x1ZGVzKGVbbl0pKXtvPXRoaXMuY29tbWFuZHNbcl09ITA7YnJlYWt9b3x8KHRoaXMua2V5c1tlW25dXT0hMCl9Zm9yKHZhciBpIGluIHQuc3VwcG9ydGVkQ29tbWFuZHMpdGhpcy5jb21tYW5kc1tpXXx8KHRoaXMuY29tbWFuZHNbaV09ITEpfX0se2tleTpcImV4ZWN1dGVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgbixvPXtDTUQ6ZS5jdHJsS2V5fHxlLm1ldGFLZXksU0hJRlQ6ZS5zaGlmdEtleSxBTFQ6ZS5hbHRLZXl9LHI9ITA7Zm9yKG4gaW4gdGhpcy5jb21tYW5kcyl0aGlzLmNvbW1hbmRzW25dIT09b1tuXSYmKHI9ITEpO3ZhciBpLGE9ITA7Zm9yKGkgaW4gdGhpcy5rZXlzKWE9YSYmZS5rZXlDb2RlPT09dC5rZXlDb2Rlc1tpXTtyJiZhJiZ0aGlzLmNhbGxiYWNrKGUpfX0se2tleTpcInJlbW92ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsdGhpcy5leGVjdXRlU2hvcnRjdXQpfX1dKSx0fSgpO2UuZGVmYXVsdD1pfV0pLmRlZmF1bHR9LGZ1bmN0aW9uKHQsZSxuKXt3aW5kb3csdC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXt9O2Z1bmN0aW9uIG4obyl7aWYoZVtvXSlyZXR1cm4gZVtvXS5leHBvcnRzO3ZhciByPWVbb109e2k6byxsOiExLGV4cG9ydHM6e319O3JldHVybiB0W29dLmNhbGwoci5leHBvcnRzLHIsci5leHBvcnRzLG4pLHIubD0hMCxyLmV4cG9ydHN9cmV0dXJuIG4ubT10LG4uYz1lLG4uZD1mdW5jdGlvbih0LGUsbyl7bi5vKHQsZSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2VudW1lcmFibGU6ITAsZ2V0Om99KX0sbi5yPWZ1bmN0aW9uKHQpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LG4udD1mdW5jdGlvbih0LGUpe2lmKDEmZSYmKHQ9bih0KSksOCZlKXJldHVybiB0O2lmKDQmZSYmXCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJnQuX19lc01vZHVsZSlyZXR1cm4gdDt2YXIgbz1PYmplY3QuY3JlYXRlKG51bGwpO2lmKG4ucihvKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTp0fSksMiZlJiZcInN0cmluZ1wiIT10eXBlb2YgdClmb3IodmFyIHIgaW4gdCluLmQobyxyLGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfS5iaW5kKG51bGwscikpO3JldHVybiBvfSxuLm49ZnVuY3Rpb24odCl7dmFyIGU9dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHQuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIG4uZChlLFwiYVwiLGUpLGV9LG4ubz1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0sbi5wPVwiL1wiLG4obi5zPTApfShbZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24oMSksdC5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIHQ9big2KSxlPW51bGw7cmV0dXJue3Nob3c6ZnVuY3Rpb24obil7aWYobi5tZXNzYWdlKXshZnVuY3Rpb24oKXtpZihlKXJldHVybiEwO2U9dC5nZXRXcmFwcGVyKCksZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlKX0oKTt2YXIgbz1udWxsLHI9bi50aW1lfHw4ZTM7c3dpdGNoKG4udHlwZSl7Y2FzZVwiY29uZmlybVwiOm89dC5jb25maXJtKG4pO2JyZWFrO2Nhc2VcInByb21wdFwiOm89dC5wcm9tcHQobik7YnJlYWs7ZGVmYXVsdDpvPXQuYWxlcnQobiksd2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7by5yZW1vdmUoKX0pLHIpfWUuYXBwZW5kQ2hpbGQobyksby5jbGFzc0xpc3QuYWRkKFwiY2R4LW5vdGlmeS0tYm91bmNlLWluXCIpfX19fSgpfSxmdW5jdGlvbih0LGUsbil7dmFyIG89bigyKTtcInN0cmluZ1wiPT10eXBlb2YgbyYmKG89W1t0LmksbyxcIlwiXV0pLG4oNCkobyx7aG1yOiEwLHRyYW5zZm9ybTp2b2lkIDAsaW5zZXJ0SW50bzp2b2lkIDB9KSxvLmxvY2FscyYmKHQuZXhwb3J0cz1vLmxvY2Fscyl9LGZ1bmN0aW9uKHQsZSxuKXsodC5leHBvcnRzPW4oMykoITEpKS5wdXNoKFt0LmksJy5jZHgtbm90aWZ5LS1lcnJvcntiYWNrZ3JvdW5kOiNmZmZiZmIhaW1wb3J0YW50fS5jZHgtbm90aWZ5LS1lcnJvcjo6YmVmb3Jle2JhY2tncm91bmQ6I2ZiNWQ1ZCFpbXBvcnRhbnR9LmNkeC1ub3RpZnlfX2lucHV0e21heC13aWR0aDoxMzBweDtwYWRkaW5nOjVweCAxMHB4O2JhY2tncm91bmQ6I2Y3ZjdmNztib3JkZXI6MDtib3JkZXItcmFkaXVzOjNweDtmb250LXNpemU6MTNweDtjb2xvcjojNjU2YjdjO291dGxpbmU6MH0uY2R4LW5vdGlmeV9faW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM2NTZiN2N9LmNkeC1ub3RpZnlfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjojNjU2YjdjfS5jZHgtbm90aWZ5X19pbnB1dDpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgxMDEsMTA3LDEyNCwuMyl9LmNkeC1ub3RpZnlfX2lucHV0OmZvY3VzOjpwbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDEwMSwxMDcsMTI0LC4zKX0uY2R4LW5vdGlmeV9fYnV0dG9ue2JvcmRlcjpub25lO2JvcmRlci1yYWRpdXM6M3B4O2ZvbnQtc2l6ZToxM3B4O3BhZGRpbmc6NXB4IDEwcHg7Y3Vyc29yOnBvaW50ZXJ9LmNkeC1ub3RpZnlfX2J1dHRvbjpsYXN0LWNoaWxke21hcmdpbi1sZWZ0OjEwcHh9LmNkeC1ub3RpZnlfX2J1dHRvbi0tY2FuY2Vse2JhY2tncm91bmQ6I2YyZjVmNztib3gtc2hhZG93OjAgMnB4IDFweCAwIHJnYmEoMTYsMTksMjksMCk7Y29sb3I6IzY1NmI3Y30uY2R4LW5vdGlmeV9fYnV0dG9uLS1jYW5jZWw6aG92ZXJ7YmFja2dyb3VuZDojZWVlfS5jZHgtbm90aWZ5X19idXR0b24tLWNvbmZpcm17YmFja2dyb3VuZDojMzRjOTkyO2JveC1zaGFkb3c6MCAxcHggMXB4IDAgcmdiYSgxOCw0OSwzNSwuMDUpO2NvbG9yOiNmZmZ9LmNkeC1ub3RpZnlfX2J1dHRvbi0tY29uZmlybTpob3ZlcntiYWNrZ3JvdW5kOiMzM2IwODJ9LmNkeC1ub3RpZnlfX2J0bnMtd3JhcHBlcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1mbG93OnJvdyBub3dyYXA7ZmxleC1mbG93OnJvdyBub3dyYXA7bWFyZ2luLXRvcDo1cHh9LmNkeC1ub3RpZnlfX2Nyb3Nze3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1cHg7cmlnaHQ6NXB4O3dpZHRoOjEwcHg7aGVpZ2h0OjEwcHg7cGFkZGluZzo1cHg7b3BhY2l0eTouNTQ7Y3Vyc29yOnBvaW50ZXJ9LmNkeC1ub3RpZnlfX2Nyb3NzOjphZnRlciwuY2R4LW5vdGlmeV9fY3Jvc3M6OmJlZm9yZXtjb250ZW50OlxcJ1xcJztwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjlweDt0b3A6NXB4O2hlaWdodDoxMnB4O3dpZHRoOjJweDtiYWNrZ3JvdW5kOiM1NzVkNjd9LmNkeC1ub3RpZnlfX2Nyb3NzOjpiZWZvcmV7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfS5jZHgtbm90aWZ5X19jcm9zczo6YWZ0ZXJ7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyl9LmNkeC1ub3RpZnlfX2Nyb3NzOmhvdmVye29wYWNpdHk6MX0uY2R4LW5vdGlmaWVze3Bvc2l0aW9uOmZpeGVkO3otaW5kZXg6Mjtib3R0b206MjBweDtsZWZ0OjIwcHg7Zm9udC1mYW1pbHk6LWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsXCJTZWdvZSBVSVwiLFJvYm90byxPeHlnZW4sVWJ1bnR1LENhbnRhcmVsbCxcIkZpcmEgU2Fuc1wiLFwiRHJvaWQgU2Fuc1wiLFwiSGVsdmV0aWNhIE5ldWVcIixzYW5zLXNlcmlmfS5jZHgtbm90aWZ5e3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjIyMHB4O21hcmdpbi10b3A6MTVweDtwYWRkaW5nOjEzcHggMTZweDtiYWNrZ3JvdW5kOiNmZmY7Ym94LXNoYWRvdzowIDExcHggMTdweCAwIHJnYmEoMjMsMzIsNjEsLjEzKTtib3JkZXItcmFkaXVzOjVweDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoxLjRlbTt3b3JkLXdyYXA6YnJlYWstd29yZH0uY2R4LW5vdGlmeTo6YmVmb3Jle2NvbnRlbnQ6XFwnXFwnO3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6YmxvY2s7dG9wOjA7bGVmdDowO3dpZHRoOjNweDtoZWlnaHQ6Y2FsYygxMDAlIC0gNnB4KTttYXJnaW46M3B4O2JvcmRlci1yYWRpdXM6NXB4O2JhY2tncm91bmQ6MCAwfUBrZXlmcmFtZXMgYm91bmNlSW57MCV7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSguMyl9NTAle29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMS4wNSl9NzAle3RyYW5zZm9ybTpzY2FsZSguOSl9MTAwJXt0cmFuc2Zvcm06c2NhbGUoMSl9fS5jZHgtbm90aWZ5LS1ib3VuY2UtaW57YW5pbWF0aW9uLW5hbWU6Ym91bmNlSW47YW5pbWF0aW9uLWR1cmF0aW9uOi42czthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjF9LmNkeC1ub3RpZnktLXN1Y2Nlc3N7YmFja2dyb3VuZDojZmFmZmZlIWltcG9ydGFudH0uY2R4LW5vdGlmeS0tc3VjY2Vzczo6YmVmb3Jle2JhY2tncm91bmQ6IzQxZmZiMSFpbXBvcnRhbnR9JyxcIlwiXSl9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO3JldHVybiBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKChmdW5jdGlvbihlKXt2YXIgbj1mdW5jdGlvbih0LGUpe3ZhciBuLG89dFsxXXx8XCJcIixyPXRbM107aWYoIXIpcmV0dXJuIG87aWYoZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYSl7dmFyIGk9KG49cixcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShuKSkpKStcIiAqL1wiKSxhPXIuc291cmNlcy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIityLnNvdXJjZVJvb3QrdCtcIiAqL1wifSkpO3JldHVybltvXS5jb25jYXQoYSkuY29uY2F0KFtpXSkuam9pbihcIlxcblwiKX1yZXR1cm5bb10uam9pbihcIlxcblwiKX0oZSx0KTtyZXR1cm4gZVsyXT9cIkBtZWRpYSBcIitlWzJdK1wie1wiK24rXCJ9XCI6bn0pKS5qb2luKFwiXCIpfSxlLmk9ZnVuY3Rpb24odCxuKXtcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9W1tudWxsLHQsXCJcIl1dKTtmb3IodmFyIG89e30scj0wO3I8dGhpcy5sZW5ndGg7cisrKXt2YXIgaT10aGlzW3JdWzBdO1wibnVtYmVyXCI9PXR5cGVvZiBpJiYob1tpXT0hMCl9Zm9yKHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIGE9dFtyXTtcIm51bWJlclwiPT10eXBlb2YgYVswXSYmb1thWzBdXXx8KG4mJiFhWzJdP2FbMl09bjpuJiYoYVsyXT1cIihcIithWzJdK1wiKSBhbmQgKFwiK24rXCIpXCIpLGUucHVzaChhKSl9fSxlfX0sZnVuY3Rpb24odCxlLG4pe3ZhciBvLHIsaT17fSxhPShvPWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdyYmZG9jdW1lbnQmJmRvY3VtZW50LmFsbCYmIXdpbmRvdy5hdG9ifSxmdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1yJiYocj1vLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkscn0pLHM9ZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIHQoKTtpZih2b2lkIDA9PT1lW3RdKXt2YXIgbj1mdW5jdGlvbih0KXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KX0uY2FsbCh0aGlzLHQpO2lmKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCYmbiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCl0cnl7bj1uLmNvbnRlbnREb2N1bWVudC5oZWFkfWNhdGNoKHQpe249bnVsbH1lW3RdPW59cmV0dXJuIGVbdF19fSgpLGM9bnVsbCxsPTAsdT1bXSxmPW4oNSk7ZnVuY3Rpb24gZCh0LGUpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgbz10W25dLHI9aVtvLmlkXTtpZihyKXtyLnJlZnMrKztmb3IodmFyIGE9MDthPHIucGFydHMubGVuZ3RoO2ErKylyLnBhcnRzW2FdKG8ucGFydHNbYV0pO2Zvcig7YTxvLnBhcnRzLmxlbmd0aDthKyspci5wYXJ0cy5wdXNoKGIoby5wYXJ0c1thXSxlKSl9ZWxzZXt2YXIgcz1bXTtmb3IoYT0wO2E8by5wYXJ0cy5sZW5ndGg7YSsrKXMucHVzaChiKG8ucGFydHNbYV0sZSkpO2lbby5pZF09e2lkOm8uaWQscmVmczoxLHBhcnRzOnN9fX19ZnVuY3Rpb24gcCh0LGUpe2Zvcih2YXIgbj1bXSxvPXt9LHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIGk9dFtyXSxhPWUuYmFzZT9pWzBdK2UuYmFzZTppWzBdLHM9e2NzczppWzFdLG1lZGlhOmlbMl0sc291cmNlTWFwOmlbM119O29bYV0/b1thXS5wYXJ0cy5wdXNoKHMpOm4ucHVzaChvW2FdPXtpZDphLHBhcnRzOltzXX0pfXJldHVybiBufWZ1bmN0aW9uIGgodCxlKXt2YXIgbj1zKHQuaW5zZXJ0SW50byk7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7dmFyIG89dVt1Lmxlbmd0aC0xXTtpZihcInRvcFwiPT09dC5pbnNlcnRBdClvP28ubmV4dFNpYmxpbmc/bi5pbnNlcnRCZWZvcmUoZSxvLm5leHRTaWJsaW5nKTpuLmFwcGVuZENoaWxkKGUpOm4uaW5zZXJ0QmVmb3JlKGUsbi5maXJzdENoaWxkKSx1LnB1c2goZSk7ZWxzZSBpZihcImJvdHRvbVwiPT09dC5pbnNlcnRBdCluLmFwcGVuZENoaWxkKGUpO2Vsc2V7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHQuaW5zZXJ0QXR8fCF0Lmluc2VydEF0LmJlZm9yZSl0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTt2YXIgcj1zKHQuaW5zZXJ0SW50bytcIiBcIit0Lmluc2VydEF0LmJlZm9yZSk7bi5pbnNlcnRCZWZvcmUoZSxyKX19ZnVuY3Rpb24gdih0KXtpZihudWxsPT09dC5wYXJlbnROb2RlKXJldHVybiExO3QucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KTt2YXIgZT11LmluZGV4T2YodCk7ZT49MCYmdS5zcGxpY2UoZSwxKX1mdW5jdGlvbiBnKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtyZXR1cm4gdm9pZCAwPT09dC5hdHRycy50eXBlJiYodC5hdHRycy50eXBlPVwidGV4dC9jc3NcIikseShlLHQuYXR0cnMpLGgodCxlKSxlfWZ1bmN0aW9uIHkodCxlKXtPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbihuKXt0LnNldEF0dHJpYnV0ZShuLGVbbl0pfSkpfWZ1bmN0aW9uIGIodCxlKXt2YXIgbixvLHIsaTtpZihlLnRyYW5zZm9ybSYmdC5jc3Mpe2lmKCEoaT1lLnRyYW5zZm9ybSh0LmNzcykpKXJldHVybiBmdW5jdGlvbigpe307dC5jc3M9aX1pZihlLnNpbmdsZXRvbil7dmFyIGE9bCsrO249Y3x8KGM9ZyhlKSksbz14LmJpbmQobnVsbCxuLGEsITEpLHI9eC5iaW5kKG51bGwsbixhLCEwKX1lbHNlIHQuc291cmNlTWFwJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwmJlwiZnVuY3Rpb25cIj09dHlwZW9mIEJsb2ImJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2E/KG49ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7cmV0dXJuIHZvaWQgMD09PXQuYXR0cnMudHlwZSYmKHQuYXR0cnMudHlwZT1cInRleHQvY3NzXCIpLHQuYXR0cnMucmVsPVwic3R5bGVzaGVldFwiLHkoZSx0LmF0dHJzKSxoKHQsZSksZX0oZSksbz1mdW5jdGlvbih0LGUsbil7dmFyIG89bi5jc3Mscj1uLnNvdXJjZU1hcCxpPXZvaWQgMD09PWUuY29udmVydFRvQWJzb2x1dGVVcmxzJiZyOyhlLmNvbnZlcnRUb0Fic29sdXRlVXJsc3x8aSkmJihvPWYobykpLHImJihvKz1cIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocikpKSkrXCIgKi9cIik7dmFyIGE9bmV3IEJsb2IoW29dLHt0eXBlOlwidGV4dC9jc3NcIn0pLHM9dC5ocmVmO3QuaHJlZj1VUkwuY3JlYXRlT2JqZWN0VVJMKGEpLHMmJlVSTC5yZXZva2VPYmplY3RVUkwocyl9LmJpbmQobnVsbCxuLGUpLHI9ZnVuY3Rpb24oKXt2KG4pLG4uaHJlZiYmVVJMLnJldm9rZU9iamVjdFVSTChuLmhyZWYpfSk6KG49ZyhlKSxvPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5jc3Msbz1lLm1lZGlhO2lmKG8mJnQuc2V0QXR0cmlidXRlKFwibWVkaWFcIixvKSx0LnN0eWxlU2hlZXQpdC5zdHlsZVNoZWV0LmNzc1RleHQ9bjtlbHNle2Zvcig7dC5maXJzdENoaWxkOyl0LnJlbW92ZUNoaWxkKHQuZmlyc3RDaGlsZCk7dC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKSl9fS5iaW5kKG51bGwsbikscj1mdW5jdGlvbigpe3Yobil9KTtyZXR1cm4gbyh0KSxmdW5jdGlvbihlKXtpZihlKXtpZihlLmNzcz09PXQuY3NzJiZlLm1lZGlhPT09dC5tZWRpYSYmZS5zb3VyY2VNYXA9PT10LnNvdXJjZU1hcClyZXR1cm47byh0PWUpfWVsc2UgcigpfX10LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgREVCVUcmJkRFQlVHJiZcIm9iamVjdFwiIT10eXBlb2YgZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpOyhlPWV8fHt9KS5hdHRycz1cIm9iamVjdFwiPT10eXBlb2YgZS5hdHRycz9lLmF0dHJzOnt9LGUuc2luZ2xldG9ufHxcImJvb2xlYW5cIj09dHlwZW9mIGUuc2luZ2xldG9ufHwoZS5zaW5nbGV0b249YSgpKSxlLmluc2VydEludG98fChlLmluc2VydEludG89XCJoZWFkXCIpLGUuaW5zZXJ0QXR8fChlLmluc2VydEF0PVwiYm90dG9tXCIpO3ZhciBuPXAodCxlKTtyZXR1cm4gZChuLGUpLGZ1bmN0aW9uKHQpe2Zvcih2YXIgbz1bXSxyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBhPW5bcl07KHM9aVthLmlkXSkucmVmcy0tLG8ucHVzaChzKX1mb3IodCYmZChwKHQsZSksZSkscj0wO3I8by5sZW5ndGg7cisrKXt2YXIgcztpZigwPT09KHM9b1tyXSkucmVmcyl7Zm9yKHZhciBjPTA7YzxzLnBhcnRzLmxlbmd0aDtjKyspcy5wYXJ0c1tjXSgpO2RlbGV0ZSBpW3MuaWRdfX19fTt2YXIgbSxrPShtPVtdLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIG1bdF09ZSxtLmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpfSk7ZnVuY3Rpb24geCh0LGUsbixvKXt2YXIgcj1uP1wiXCI6by5jc3M7aWYodC5zdHlsZVNoZWV0KXQuc3R5bGVTaGVldC5jc3NUZXh0PWsoZSxyKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpLGE9dC5jaGlsZE5vZGVzO2FbZV0mJnQucmVtb3ZlQ2hpbGQoYVtlXSksYS5sZW5ndGg/dC5pbnNlcnRCZWZvcmUoaSxhW2VdKTp0LmFwcGVuZENoaWxkKGkpfX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5sb2NhdGlvbjtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtpZighdHx8XCJzdHJpbmdcIiE9dHlwZW9mIHQpcmV0dXJuIHQ7dmFyIG49ZS5wcm90b2NvbCtcIi8vXCIrZS5ob3N0LG89bitlLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLyxcIi9cIik7cmV0dXJuIHQucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksKGZ1bmN0aW9uKHQsZSl7dmFyIHIsaT1lLnRyaW0oKS5yZXBsYWNlKC9eXCIoLiopXCIkLywoZnVuY3Rpb24odCxlKXtyZXR1cm4gZX0pKS5yZXBsYWNlKC9eJyguKiknJC8sKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV9KSk7cmV0dXJuL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdChpKT90OihyPTA9PT1pLmluZGV4T2YoXCIvL1wiKT9pOjA9PT1pLmluZGV4T2YoXCIvXCIpP24raTpvK2kucmVwbGFjZSgvXlxcLlxcLy8sXCJcIiksXCJ1cmwoXCIrSlNPTi5zdHJpbmdpZnkocikrXCIpXCIpfSkpfX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBvLHIsaSxhLHMsYzt0LmV4cG9ydHM9KG89XCJjZHgtbm90aWZ5XCIscj1cImNkeC1ub3RpZnlfX2Nyb3NzXCIsaT1cImNkeC1ub3RpZnlfX2J1dHRvbi0tY29uZmlybVwiLGE9XCJjZHgtbm90aWZ5X19idXR0b25cIixzPVwiY2R4LW5vdGlmeV9fYnRucy13cmFwcGVyXCIse2FsZXJ0OmM9ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSxuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksaT10Lm1lc3NhZ2UsYT10LnN0eWxlO3JldHVybiBlLmNsYXNzTGlzdC5hZGQobyksYSYmZS5jbGFzc0xpc3QuYWRkKG8rXCItLVwiK2EpLGUuaW5uZXJIVE1MPWksbi5jbGFzc0xpc3QuYWRkKHIpLG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZS5yZW1vdmUuYmluZChlKSksZS5hcHBlbmRDaGlsZChuKSxlfSxjb25maXJtOmZ1bmN0aW9uKHQpe3ZhciBlPWModCksbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSxsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksdT1lLnF1ZXJ5U2VsZWN0b3IoXCIuXCIrciksZj10LmNhbmNlbEhhbmRsZXIsZD10Lm9rSGFuZGxlcjtyZXR1cm4gbi5jbGFzc0xpc3QuYWRkKHMpLG8uaW5uZXJIVE1MPXQub2tUZXh0fHxcIkNvbmZpcm1cIixsLmlubmVySFRNTD10LmNhbmNlbFRleHR8fFwiQ2FuY2VsXCIsby5jbGFzc0xpc3QuYWRkKGEpLGwuY2xhc3NMaXN0LmFkZChhKSxvLmNsYXNzTGlzdC5hZGQoaSksbC5jbGFzc0xpc3QuYWRkKFwiY2R4LW5vdGlmeV9fYnV0dG9uLS1jYW5jZWxcIiksZiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZiYmKGwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZiksdS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmKSksZCYmXCJmdW5jdGlvblwiPT10eXBlb2YgZCYmby5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixkKSxvLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGUucmVtb3ZlLmJpbmQoZSkpLGwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZS5yZW1vdmUuYmluZChlKSksbi5hcHBlbmRDaGlsZChvKSxuLmFwcGVuZENoaWxkKGwpLGUuYXBwZW5kQ2hpbGQobiksZX0scHJvbXB0OmZ1bmN0aW9uKHQpe3ZhciBlPWModCksbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSxsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSx1PWUucXVlcnlTZWxlY3RvcihcIi5cIityKSxmPXQuY2FuY2VsSGFuZGxlcixkPXQub2tIYW5kbGVyO3JldHVybiBuLmNsYXNzTGlzdC5hZGQocyksby5pbm5lckhUTUw9dC5va1RleHR8fFwiT2tcIixvLmNsYXNzTGlzdC5hZGQoYSksby5jbGFzc0xpc3QuYWRkKGkpLGwuY2xhc3NMaXN0LmFkZChcImNkeC1ub3RpZnlfX2lucHV0XCIpLHQucGxhY2Vob2xkZXImJmwuc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIix0LnBsYWNlaG9sZGVyKSx0LmRlZmF1bHQmJihsLnZhbHVlPXQuZGVmYXVsdCksdC5pbnB1dFR5cGUmJihsLnR5cGU9dC5pbnB1dFR5cGUpLGYmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGYmJnUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZiksZCYmXCJmdW5jdGlvblwiPT10eXBlb2YgZCYmby5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoZnVuY3Rpb24oKXtkKGwudmFsdWUpfSkpLG8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsZS5yZW1vdmUuYmluZChlKSksbi5hcHBlbmRDaGlsZChsKSxuLmFwcGVuZENoaWxkKG8pLGUuYXBwZW5kQ2hpbGQobiksZX0sZ2V0V3JhcHBlcjpmdW5jdGlvbigpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7cmV0dXJuIHQuY2xhc3NMaXN0LmFkZChcImNkeC1ub3RpZmllc1wiKSx0fX0pfV0pfSxmdW5jdGlvbih0LGUsbil7dmFyIG8scjt2b2lkIDA9PT0ocj1cImZ1bmN0aW9uXCI9PXR5cGVvZihvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt2YXIgZT10LnRhZ3M7aWYoIU9iamVjdC5rZXlzKGUpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiBlW3RdfSkpLmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm5cIm9iamVjdFwiPT09dHx8XCJib29sZWFuXCI9PT10fHxcImZ1bmN0aW9uXCI9PT10fSkpKXRocm93IG5ldyBFcnJvcihcIlRoZSBjb25maWd1cmF0aW9uIHdhcyBpbnZhbGlkXCIpO3RoaXMuY29uZmlnPXR9dmFyIGU9W1wiUFwiLFwiTElcIixcIlREXCIsXCJUSFwiLFwiRElWXCIsXCJIMVwiLFwiSDJcIixcIkgzXCIsXCJINFwiLFwiSDVcIixcIkg2XCIsXCJQUkVcIl07ZnVuY3Rpb24gbih0KXtyZXR1cm4tMSE9PWUuaW5kZXhPZih0Lm5vZGVOYW1lKX12YXIgbz1bXCJBXCIsXCJCXCIsXCJTVFJPTkdcIixcIklcIixcIkVNXCIsXCJTVUJcIixcIlNVUFwiLFwiVVwiLFwiU1RSSUtFXCJdO2Z1bmN0aW9uIHIodCl7cmV0dXJuLTEhPT1vLmluZGV4T2YodC5ub2RlTmFtZSl9ZnVuY3Rpb24gaSh0LGUsbil7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdC50YWdzW2VdP3QudGFnc1tlXShuKTp0LnRhZ3NbZV19ZnVuY3Rpb24gYSh0LGUpe3JldHVybiB2b2lkIDA9PT1lfHxcImJvb2xlYW5cIj09dHlwZW9mIGUmJiFlfWZ1bmN0aW9uIHModCxlLG4pe3ZhciBvPXQubmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiEwIT09ZSYmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGVbb10/IWVbb10odC52YWx1ZSxuKTp2b2lkIDA9PT1lW29dfHwhMT09PWVbb118fFwic3RyaW5nXCI9PXR5cGVvZiBlW29dJiZlW29dIT09dC52YWx1ZSl9cmV0dXJuIHQucHJvdG90eXBlLmNsZWFuPWZ1bmN0aW9uKHQpe2NvbnN0IGU9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCksbj1lLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIG4uaW5uZXJIVE1MPXQsdGhpcy5fc2FuaXRpemUoZSxuKSxuLmlubmVySFRNTH0sdC5wcm90b3R5cGUuX3Nhbml0aXplPWZ1bmN0aW9uKHQsZSl7dmFyIG89ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jcmVhdGVUcmVlV2Fsa2VyKGUsTm9kZUZpbHRlci5TSE9XX1RFWFR8Tm9kZUZpbHRlci5TSE9XX0VMRU1FTlR8Tm9kZUZpbHRlci5TSE9XX0NPTU1FTlQsbnVsbCwhMSl9KHQsZSksYz1vLmZpcnN0Q2hpbGQoKTtpZihjKWRve2lmKGMubm9kZVR5cGUhPT1Ob2RlLlRFWFRfTk9ERSl7aWYoYy5ub2RlVHlwZT09PU5vZGUuQ09NTUVOVF9OT0RFKXtlLnJlbW92ZUNoaWxkKGMpLHRoaXMuX3Nhbml0aXplKHQsZSk7YnJlYWt9dmFyIGwsdT1yKGMpO3UmJihsPUFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwoYy5jaGlsZE5vZGVzLG4pKTt2YXIgZj0hIWUucGFyZW50Tm9kZSxkPW4oZSkmJm4oYykmJmYscD1jLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksaD1pKHRoaXMuY29uZmlnLHAsYyk7aWYodSYmbHx8YSgwLGgpfHwhdGhpcy5jb25maWcua2VlcE5lc3RlZEJsb2NrRWxlbWVudHMmJmQpe2lmKFwiU0NSSVBUXCIhPT1jLm5vZGVOYW1lJiZcIlNUWUxFXCIhPT1jLm5vZGVOYW1lKWZvcig7Yy5jaGlsZE5vZGVzLmxlbmd0aD4wOyllLmluc2VydEJlZm9yZShjLmNoaWxkTm9kZXNbMF0sYyk7ZS5yZW1vdmVDaGlsZChjKSx0aGlzLl9zYW5pdGl6ZSh0LGUpO2JyZWFrfWZvcih2YXIgdj0wO3Y8Yy5hdHRyaWJ1dGVzLmxlbmd0aDt2Kz0xKXt2YXIgZz1jLmF0dHJpYnV0ZXNbdl07cyhnLGgsYykmJihjLnJlbW92ZUF0dHJpYnV0ZShnLm5hbWUpLHYtPTEpfXRoaXMuX3Nhbml0aXplKHQsYyl9ZWxzZSBpZihcIlwiPT09Yy5kYXRhLnRyaW0oKSYmKGMucHJldmlvdXNFbGVtZW50U2libGluZyYmbihjLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpfHxjLm5leHRFbGVtZW50U2libGluZyYmbihjLm5leHRFbGVtZW50U2libGluZykpKXtlLnJlbW92ZUNoaWxkKGMpLHRoaXMuX3Nhbml0aXplKHQsZSk7YnJlYWt9fXdoaWxlKGM9by5uZXh0U2libGluZygpKX0sdH0pP28uY2FsbChlLG4sZSx0KTpvKXx8KHQuZXhwb3J0cz1yKX0sZnVuY3Rpb24odCxlLG4pe3dpbmRvdyx0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gbihvKXtpZihlW29dKXJldHVybiBlW29dLmV4cG9ydHM7dmFyIHI9ZVtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsbiksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gbi5tPXQsbi5jPWUsbi5kPWZ1bmN0aW9uKHQsZSxvKXtuLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6b30pfSxuLnI9ZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1uKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBvPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKG8pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgciBpbiB0KW4uZChvLHIsZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxyKSk7cmV0dXJuIG99LG4ubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gbi5kKGUsXCJhXCIsZSksZX0sbi5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxuLnA9XCJcIixuKG4ucz0wKX0oW2Z1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9bigxKX0sZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO24ucihlKSxuLmQoZSxcImRlZmF1bHRcIiwoZnVuY3Rpb24oKXtyZXR1cm4gb30pKTtjbGFzcyBve2NvbnN0cnVjdG9yKCl7dGhpcy5ub2Rlcz17d3JhcHBlcjpudWxsLGNvbnRlbnQ6bnVsbH0sdGhpcy5zaG93ZWQ9ITEsdGhpcy5vZmZzZXRUb3A9MTAsdGhpcy5vZmZzZXRMZWZ0PTEwLHRoaXMub2Zmc2V0UmlnaHQ9MTAsdGhpcy5oaWRpbmdEZWxheT0wLHRoaXMubG9hZFN0eWxlcygpLHRoaXMucHJlcGFyZSgpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsKCk9Pnt0aGlzLnNob3dlZCYmdGhpcy5oaWRlKCEwKX0se3Bhc3NpdmU6ITB9KX1nZXQgQ1NTKCl7cmV0dXJue3Rvb2x0aXA6XCJjdFwiLHRvb2x0aXBDb250ZW50OlwiY3RfX2NvbnRlbnRcIix0b29sdGlwU2hvd246XCJjdC0tc2hvd25cIixwbGFjZW1lbnQ6e2xlZnQ6XCJjdC0tbGVmdFwiLGJvdHRvbTpcImN0LS1ib3R0b21cIixyaWdodDpcImN0LS1yaWdodFwiLHRvcDpcImN0LS10b3BcIn19fXNob3codCxlLG4pe3RoaXMubm9kZXMud3JhcHBlcnx8dGhpcy5wcmVwYXJlKCksdGhpcy5oaWRpbmdUaW1lb3V0JiZjbGVhclRpbWVvdXQodGhpcy5oaWRpbmdUaW1lb3V0KTtjb25zdCBvPU9iamVjdC5hc3NpZ24oe3BsYWNlbWVudDpcImJvdHRvbVwiLG1hcmdpblRvcDowLG1hcmdpbkxlZnQ6MCxtYXJnaW5SaWdodDowLG1hcmdpbkJvdHRvbTowLGRlbGF5OjcwLGhpZGluZ0RlbGF5OjB9LG4pO2lmKG8uaGlkaW5nRGVsYXkmJih0aGlzLmhpZGluZ0RlbGF5PW8uaGlkaW5nRGVsYXkpLHRoaXMubm9kZXMuY29udGVudC5pbm5lckhUTUw9XCJcIixcInN0cmluZ1wiPT10eXBlb2YgZSl0aGlzLm5vZGVzLmNvbnRlbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZSkpO2Vsc2V7aWYoIShlIGluc3RhbmNlb2YgTm9kZSkpdGhyb3cgRXJyb3IoXCJbQ29kZVggVG9vbHRpcF0gV3JvbmcgdHlwZSBvZiDCq2NvbnRlbnTCuyBwYXNzZWQuIEl0IHNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiBOb2RlIG9yIFN0cmluZy4gQnV0IFwiK3R5cGVvZiBlK1wiIGdpdmVuLlwiKTt0aGlzLm5vZGVzLmNvbnRlbnQuYXBwZW5kQ2hpbGQoZSl9c3dpdGNoKHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKC4uLk9iamVjdC52YWx1ZXModGhpcy5DU1MucGxhY2VtZW50KSksby5wbGFjZW1lbnQpe2Nhc2VcInRvcFwiOnRoaXMucGxhY2VUb3AodCxvKTticmVhaztjYXNlXCJsZWZ0XCI6dGhpcy5wbGFjZUxlZnQodCxvKTticmVhaztjYXNlXCJyaWdodFwiOnRoaXMucGxhY2VSaWdodCh0LG8pO2JyZWFrO2Nhc2VcImJvdHRvbVwiOmRlZmF1bHQ6dGhpcy5wbGFjZUJvdHRvbSh0LG8pfW8mJm8uZGVsYXk/dGhpcy5zaG93aW5nVGltZW91dD1zZXRUaW1lb3V0KCgpPT57dGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MudG9vbHRpcFNob3duKSx0aGlzLnNob3dlZD0hMH0sby5kZWxheSk6KHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLnRvb2x0aXBTaG93biksdGhpcy5zaG93ZWQ9ITApfWhpZGUodD0hMSl7aWYodGhpcy5oaWRpbmdEZWxheSYmIXQpcmV0dXJuIHRoaXMuaGlkaW5nVGltZW91dCYmY2xlYXJUaW1lb3V0KHRoaXMuaGlkaW5nVGltZW91dCksdm9pZCh0aGlzLmhpZGluZ1RpbWVvdXQ9c2V0VGltZW91dCgoKT0+e3RoaXMuaGlkZSghMCl9LHRoaXMuaGlkaW5nRGVsYXkpKTt0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy50b29sdGlwU2hvd24pLHRoaXMuc2hvd2VkPSExLHRoaXMuc2hvd2luZ1RpbWVvdXQmJmNsZWFyVGltZW91dCh0aGlzLnNob3dpbmdUaW1lb3V0KX1vbkhvdmVyKHQsZSxuKXt0LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsKCk9Pnt0aGlzLnNob3codCxlLG4pfSksdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCgpPT57dGhpcy5oaWRlKCl9KX1wcmVwYXJlKCl7dGhpcy5ub2Rlcy53cmFwcGVyPXRoaXMubWFrZShcImRpdlwiLHRoaXMuQ1NTLnRvb2x0aXApLHRoaXMubm9kZXMuY29udGVudD10aGlzLm1ha2UoXCJkaXZcIix0aGlzLkNTUy50b29sdGlwQ29udGVudCksdGhpcy5hcHBlbmQodGhpcy5ub2Rlcy53cmFwcGVyLHRoaXMubm9kZXMuY29udGVudCksdGhpcy5hcHBlbmQoZG9jdW1lbnQuYm9keSx0aGlzLm5vZGVzLndyYXBwZXIpfWxvYWRTdHlsZXMoKXtjb25zdCB0PVwiY29kZXgtdG9vbHRpcHMtc3R5bGVcIjtpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KSlyZXR1cm47Y29uc3QgZT1uKDIpLG89dGhpcy5tYWtlKFwic3R5bGVcIixudWxsLHt0ZXh0Q29udGVudDplLnRvU3RyaW5nKCksaWQ6dH0pO3RoaXMucHJlcGVuZChkb2N1bWVudC5oZWFkLG8pfXBsYWNlQm90dG9tKHQsZSl7Y29uc3Qgbj10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG89bi5sZWZ0K3QuY2xpZW50V2lkdGgvMi10aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0V2lkdGgvMixyPW4uYm90dG9tK3dpbmRvdy5wYWdlWU9mZnNldCt0aGlzLm9mZnNldFRvcCtlLm1hcmdpblRvcDt0aGlzLmFwcGx5UGxhY2VtZW50KFwiYm90dG9tXCIsbyxyKX1wbGFjZVRvcCh0LGUpe2NvbnN0IG49dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxvPW4ubGVmdCt0LmNsaWVudFdpZHRoLzItdGhpcy5ub2Rlcy53cmFwcGVyLm9mZnNldFdpZHRoLzIscj1uLnRvcCt3aW5kb3cucGFnZVlPZmZzZXQtdGhpcy5ub2Rlcy53cmFwcGVyLmNsaWVudEhlaWdodC10aGlzLm9mZnNldFRvcDt0aGlzLmFwcGx5UGxhY2VtZW50KFwidG9wXCIsbyxyKX1wbGFjZUxlZnQodCxlKXtjb25zdCBuPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbz1uLmxlZnQtdGhpcy5ub2Rlcy53cmFwcGVyLm9mZnNldFdpZHRoLXRoaXMub2Zmc2V0TGVmdC1lLm1hcmdpbkxlZnQscj1uLnRvcCt3aW5kb3cucGFnZVlPZmZzZXQrdC5jbGllbnRIZWlnaHQvMi10aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0SGVpZ2h0LzI7dGhpcy5hcHBseVBsYWNlbWVudChcImxlZnRcIixvLHIpfXBsYWNlUmlnaHQodCxlKXtjb25zdCBuPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbz1uLnJpZ2h0K3RoaXMub2Zmc2V0UmlnaHQrZS5tYXJnaW5SaWdodCxyPW4udG9wK3dpbmRvdy5wYWdlWU9mZnNldCt0LmNsaWVudEhlaWdodC8yLXRoaXMubm9kZXMud3JhcHBlci5vZmZzZXRIZWlnaHQvMjt0aGlzLmFwcGx5UGxhY2VtZW50KFwicmlnaHRcIixvLHIpfWFwcGx5UGxhY2VtZW50KHQsZSxuKXt0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5wbGFjZW1lbnRbdF0pLHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS5sZWZ0PWUrXCJweFwiLHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS50b3A9bitcInB4XCJ9bWFrZSh0LGU9bnVsbCxuPXt9KXtjb25zdCBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCk7QXJyYXkuaXNBcnJheShlKT9vLmNsYXNzTGlzdC5hZGQoLi4uZSk6ZSYmby5jbGFzc0xpc3QuYWRkKGUpO2Zvcihjb25zdCB0IGluIG4pbi5oYXNPd25Qcm9wZXJ0eSh0KSYmKG9bdF09blt0XSk7cmV0dXJuIG99YXBwZW5kKHQsZSl7QXJyYXkuaXNBcnJheShlKT9lLmZvckVhY2goZT0+dC5hcHBlbmRDaGlsZChlKSk6dC5hcHBlbmRDaGlsZChlKX1wcmVwZW5kKHQsZSl7QXJyYXkuaXNBcnJheShlKT8oZT1lLnJldmVyc2UoKSkuZm9yRWFjaChlPT50LnByZXBlbmQoZSkpOnQucHJlcGVuZChlKX19fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nLmN0e3otaW5kZXg6OTk5O29wYWNpdHk6MDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7cG9pbnRlci1ldmVudHM6bm9uZTstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSA1MG1zIGVhc2UtaW4sLXdlYmtpdC10cmFuc2Zvcm0gNzBtcyBjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTt0cmFuc2l0aW9uOm9wYWNpdHkgNTBtcyBlYXNlLWluLC13ZWJraXQtdHJhbnNmb3JtIDcwbXMgY3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7dHJhbnNpdGlvbjpvcGFjaXR5IDUwbXMgZWFzZS1pbix0cmFuc2Zvcm0gNzBtcyBjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTt0cmFuc2l0aW9uOm9wYWNpdHkgNTBtcyBlYXNlLWluLHRyYW5zZm9ybSA3MG1zIGN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpLC13ZWJraXQtdHJhbnNmb3JtIDcwbXMgY3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7d2lsbC1jaGFuZ2U6b3BhY2l0eSx0b3AsbGVmdDstd2Via2l0LWJveC1zaGFkb3c6MCA4cHggMTJweCAwIHJnYmEoMjksMzIsNDMsLjE3KSwwIDRweCA1cHggLTNweCByZ2JhKDUsNiwxMiwuNDkpO2JveC1zaGFkb3c6MCA4cHggMTJweCAwIHJnYmEoMjksMzIsNDMsLjE3KSwwIDRweCA1cHggLTNweCByZ2JhKDUsNiwxMiwuNDkpO2JvcmRlci1yYWRpdXM6OXB4fS5jdCwuY3Q6YmVmb3Jle3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MH0uY3Q6YmVmb3Jle2NvbnRlbnQ6XCJcIjtib3R0b206MDtyaWdodDowO2JhY2tncm91bmQtY29sb3I6IzFkMjAyYjt6LWluZGV4Oi0xO2JvcmRlci1yYWRpdXM6NHB4fUBzdXBwb3J0cygtd2Via2l0LW1hc2stYm94LWltYWdlOnVybChcIlwiKSl7LmN0OmJlZm9yZXtib3JkZXItcmFkaXVzOjA7LXdlYmtpdC1tYXNrLWJveC1pbWFnZTp1cmwoXFwnZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCI+PHBhdGggZD1cIk0xMC43MSAwaDIuNThjMy4wMiAwIDQuNjQuNDIgNi4xIDEuMmE4LjE4IDguMTggMCAwMTMuNCAzLjRDMjMuNiA2LjA3IDI0IDcuNyAyNCAxMC43MXYyLjU4YzAgMy4wMi0uNDIgNC42NC0xLjIgNi4xYTguMTggOC4xOCAwIDAxLTMuNCAzLjRjLTEuNDcuOC0zLjEgMS4yMS02LjExIDEuMjFIMTAuN2MtMy4wMiAwLTQuNjQtLjQyLTYuMS0xLjJhOC4xOCA4LjE4IDAgMDEtMy40LTMuNEMuNCAxNy45MyAwIDE2LjMgMCAxMy4yOVYxMC43YzAtMy4wMi40Mi00LjY0IDEuMi02LjFhOC4xOCA4LjE4IDAgMDEzLjQtMy40QzYuMDcuNCA3LjcgMCAxMC43MSAwelwiLz48L3N2Zz5cXCcpIDQ4JSA0MSUgMzcuOSUgNTMuMyV9fUBtZWRpYSAoLS1tb2JpbGUpey5jdHtkaXNwbGF5Om5vbmV9fS5jdF9fY29udGVudHtwYWRkaW5nOjZweCAxMHB4O2NvbG9yOiNjZGQxZTA7Zm9udC1zaXplOjEycHg7dGV4dC1hbGlnbjpjZW50ZXI7bGV0dGVyLXNwYWNpbmc6LjAyZW07bGluZS1oZWlnaHQ6MWVtfS5jdDphZnRlcntjb250ZW50OlwiXCI7d2lkdGg6OHB4O2hlaWdodDo4cHg7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojMWQyMDJiO3otaW5kZXg6LTF9LmN0LS1ib3R0b217LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSg1cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDVweCl9LmN0LS1ib3R0b206YWZ0ZXJ7dG9wOi0zcHg7bGVmdDo1MCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKSByb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKSByb3RhdGUoLTQ1ZGVnKX0uY3QtLXRvcHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC01cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01cHgpfS5jdC0tdG9wOmFmdGVye3RvcDphdXRvO2JvdHRvbTotM3B4O2xlZnQ6NTAlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKC00NWRlZyl9LmN0LS1sZWZ0ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTVweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTVweCl9LmN0LS1sZWZ0OmFmdGVye3RvcDo1MCU7bGVmdDphdXRvO3JpZ2h0OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKDQxLjYlLC01MCUpIHJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGUoNDEuNiUsLTUwJSkgcm90YXRlKC00NWRlZyl9LmN0LS1yaWdodHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDVweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoNXB4KX0uY3QtLXJpZ2h0OmFmdGVye3RvcDo1MCU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgtNDEuNiUsLTUwJSkgcm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNDEuNiUsLTUwJSkgcm90YXRlKC00NWRlZyl9LmN0LS1zaG93bntvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX0nfV0pLmRlZmF1bHR9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtuLnIoZSksZS5kZWZhdWx0PSc8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJ1dGYtOFwiPz5cXG48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cXG48c3ltYm9sIGlkPVwiYXJyb3ctZG93blwiIHZpZXdCb3g9XCIwIDAgMTQgMTRcIj5cXG4gIDxwYXRoIHRyYW5zZm9ybT1cIm1hdHJpeCgxIDAgMCAtMSAwIDE0KVwiIGQ9XCJNOC4wMjQgNC4xdjguNmExLjEyNSAxLjEyNSAwIDAgMS0yLjI1IDBWNC4xTDIuMTggNy42OTVBMS4xMjUgMS4xMjUgMCAxIDEgLjU5IDYuMTA0TDYuMTAzLjU4OGMuNDQtLjQzOSAxLjE1MS0uNDM5IDEuNTkgMGw1LjUxNiA1LjUxNmExLjEyNSAxLjEyNSAwIDAgMS0xLjU5IDEuNTlMOC4wMjMgNC4xelwiLz5cXG5cXG48L3N5bWJvbD5cXG48c3ltYm9sIGlkPVwiYXJyb3ctdXBcIiB2aWV3Qm94PVwiMCAwIDE0IDE0XCI+XFxuICAgIDxwYXRoIGQ9XCJNOC4wMjQgNC4xdjguNmExLjEyNSAxLjEyNSAwIDAgMS0yLjI1IDBWNC4xTDIuMTggNy42OTVBMS4xMjUgMS4xMjUgMCAxIDEgLjU5IDYuMTA0TDYuMTAzLjU4OGMuNDQtLjQzOSAxLjE1MS0uNDM5IDEuNTkgMGw1LjUxNiA1LjUxNmExLjEyNSAxLjEyNSAwIDAgMS0xLjU5IDEuNTlMOC4wMjMgNC4xelwiLz5cXG5cXG48L3N5bWJvbD5cXG48c3ltYm9sIGlkPVwiYm9sZFwiIHZpZXdCb3g9XCIwIDAgMTIgMTRcIj48cGF0aCBkPVwiTTUuOTk3IDE0SDEuNzJjLS42MTggMC0xLjA1OC0uMTM4LTEuMzIzLS40MTVDLjEzMiAxMy4zMDggMCAxMi44NjcgMCAxMi4yNjJWMS43MzhDMCAxLjEyMS4xMzUuNjc2LjQwNi40MDYuNjc2LjEzNiAxLjExNCAwIDEuNzE5IDBoNC41MzZjLjY2OSAwIDEuMjQ4LjA0MSAxLjczOC4xMjQuNDkuMDgzLjkzLjI0MiAxLjMxOC40NzhhMy40NTggMy40NTggMCAwIDEgMS40NjEgMS43NTJjLjEzNC4zNjYuMi43NTMuMiAxLjE2IDAgMS40MDEtLjcgMi40MjYtMi4xIDMuMDc1IDEuODQuNTg2IDIuNzYgMS43MjYgMi43NiAzLjQyIDAgLjc4Mi0uMiAxLjQ4Ny0uNjAyIDIuMTE0YTMuNjEgMy42MSAwIDAgMS0xLjYyMyAxLjM5IDUuNzcyIDUuNzcyIDAgMCAxLTEuNDcxLjM3N2MtLjU1NC4wNzMtMS4yLjExLTEuOTM5LjExem0tLjIxLTYuMjE3aC0yLjk1djQuMDg3aDMuMDQ2YzEuOTE2IDAgMi44NzQtLjY5IDIuODc0LTIuMDcyIDAtLjcwNy0uMjQ4LTEuMjItLjc0NS0xLjUzNy0uNDk2LS4zMTktMS4yMzgtLjQ3OC0yLjIyNS0uNDc4ek0yLjgzNyAyLjEzdjMuNjE5aDIuNTk3Yy43MDcgMCAxLjI1Mi0uMDY3IDEuNjM4LS4yLjM4NS0uMTM0LjY4LS4zODkuODgzLS43NjUuMTYtLjI2Ny4yMzktLjU2Ni4yMzktLjg5NyAwLS43MDctLjI1Mi0xLjE3Ni0uNzU1LTEuNDA5LS41MDMtLjIzMi0xLjI3LS4zNDgtMi4zMDEtLjM0OEgyLjgzNnpcIi8+XFxuPC9zeW1ib2w+XFxuPHN5bWJvbCBpZD1cImNyb3NzXCIgdmlld0JveD1cIjAgMCAyMzcgMjM3XCI+XFxuICA8cGF0aCB0cmFuc2Zvcm09XCJyb3RhdGUoNDUgMjgwLjY3NSA1MS4zMjUpXCIgZD1cIk0xOTEgMTkxVjczYzAtNS41MjMgNC40NzctMTAgMTAtMTBoMjVjNS41MjMgMCAxMCA0LjQ3NyAxMCAxMHYxMThoMTE4YzUuNTIzIDAgMTAgNC40NzcgMTAgMTB2MjVjMCA1LjUyMy00LjQ3NyAxMC0xMCAxMEgyMzZ2MTE4YzAgNS41MjMtNC40NzcgMTAtMTAgMTBoLTI1Yy01LjUyMyAwLTEwLTQuNDc3LTEwLTEwVjIzNkg3M2MtNS41MjMgMC0xMC00LjQ3Ny0xMC0xMHYtMjVjMC01LjUyMyA0LjQ3Ny0xMCAxMC0xMGgxMTh6XCIvPlxcblxcbjwvc3ltYm9sPlxcbjxzeW1ib2wgaWQ9XCJkb3RzXCIgdmlld0JveD1cIjAgMCA4IDhcIj5cXG4gIDxjaXJjbGUgY3g9XCI2LjVcIiBjeT1cIjEuNVwiIHI9XCIxLjVcIi8+XFxuICA8Y2lyY2xlIGN4PVwiNi41XCIgY3k9XCI2LjVcIiByPVwiMS41XCIvPlxcbiAgPGNpcmNsZSBjeD1cIjEuNVwiIGN5PVwiMS41XCIgcj1cIjEuNVwiLz5cXG4gIDxjaXJjbGUgY3g9XCIxLjVcIiBjeT1cIjYuNVwiIHI9XCIxLjVcIi8+XFxuXFxuPC9zeW1ib2w+XFxuPHN5bWJvbCBpZD1cIml0YWxpY1wiIHZpZXdCb3g9XCIwIDAgNCAxMVwiPlxcbiAgICA8cGF0aCBkPVwiTTMuMjg5IDQuMTdMMi4xNjQgOS43MTNjLS4wNzguMzg0LS4yMzguNjc0LS40OC44Ny0uMjQzLjE5OC0uNTIuMjk2LS44MzEuMjk2LS4zMTIgMC0uNTQ1LS4xLS42OTktLjMwMi0uMTUzLS4yMDItLjE5Mi0uNDktLjExNi0uODY0TDEuMTUgNC4yMjVjLjA3Ny0uMzguMjMyLS42NjUuNDY2LS44NTdhMS4yNSAxLjI1IDAgMDEuODE4LS4yODhjLjMxMiAwIC41NS4wOTYuNzEzLjI4OC4xNjMuMTkyLjIxLjQ2LjE0MS44MDF6bS0uNjY3LTIuMDljLS4yOTUgMC0uNTMtLjA5LS43MDYtLjI3My0uMTc2LS4xODEtLjIzMy0uNDM5LS4xNzMtLjc3LjA1NS0uMzAyLjIwNy0uNTUuNDU3LS43NDVDMi40NS4wOTcgMi43MTYgMCAzIDBjLjI3MyAwIC41LjA4OC42OC4yNjUuMTc5LjE3Ni4yMzguNDM0LjE3Ny43NzEtLjA2LjMyNy0uMjEuNTgzLS40NS43NjctLjI0LjE4NS0uNTAyLjI3Ny0uNzg1LjI3N3pcIi8+XFxuXFxuPC9zeW1ib2w+XFxuPHN5bWJvbCBpZD1cImxpbmtcIiB2aWV3Qm94PVwiMCAwIDE0IDEwXCI+XFxuICA8cGF0aCBkPVwiTTYgMHYySDVhMyAzIDAgMDAwIDZoMXYySDVBNSA1IDAgMTE1IDBoMXptMiAwaDFhNSA1IDAgMTEwIDEwSDhWOGgxYTMgMyAwIDAwMC02SDhWMHpNNSA0aDRhMSAxIDAgMTEwIDJINWExIDEgMCAxMTAtMnpcIi8+XFxuXFxuPC9zeW1ib2w+XFxuPHN5bWJvbCBpZD1cInBsdXNcIiB2aWV3Qm94PVwiMCAwIDE0IDE0XCI+XFxuICAgIDxwYXRoIGQ9XCJNOC4wNSA1LjhoNC42MjVhMS4xMjUgMS4xMjUgMCAwIDEgMCAyLjI1SDguMDV2NC42MjVhMS4xMjUgMS4xMjUgMCAwIDEtMi4yNSAwVjguMDVIMS4xMjVhMS4xMjUgMS4xMjUgMCAwIDEgMC0yLjI1SDUuOFYxLjEyNWExLjEyNSAxLjEyNSAwIDAgMSAyLjI1IDBWNS44elwiLz5cXG5cXG48L3N5bWJvbD5cXG48c3ltYm9sIGlkPVwic2FkLWZhY2VcIiB2aWV3Qm94PVwiMCAwIDUyIDUyXCI+XFxuICAgIDxwYXRoIGZpbGw9XCIjRDc2QjZCXCIgZmlsbC1ydWxlPVwibm9uemVyb1wiIGQ9XCJNMjYgNTJDMTEuNjQgNTIgMCA0MC4zNiAwIDI2UzExLjY0IDAgMjYgMHMyNiAxMS42NCAyNiAyNi0xMS42NCAyNi0yNiAyNnptMC0zLjI1YzEyLjU2NCAwIDIyLjc1LTEwLjE4NiAyMi43NS0yMi43NVMzOC41NjQgMy4yNSAyNiAzLjI1IDMuMjUgMTMuNDM2IDMuMjUgMjYgMTMuNDM2IDQ4Ljc1IDI2IDQ4Ljc1ek0xNS43MDggMzMuMDQyYTIuMTY3IDIuMTY3IDAgMSAxIDAtNC4zMzQgMi4xNjcgMi4xNjcgMCAwIDEgMCA0LjMzNHptMjMuODM0IDBhMi4xNjcgMi4xNjcgMCAxIDEgMC00LjMzNCAyLjE2NyAyLjE2NyAwIDAgMSAwIDQuMzM0em0tMTUuODc1IDUuNDUyYTEuMDgzIDEuMDgzIDAgMSAxLTEuODM0LTEuMTU1YzEuMzMxLTIuMTE0IDMuNDktMy4xNzkgNi4zMzQtMy4xNzkgMi44NDQgMCA1LjAwMiAxLjA2NSA2LjMzMyAzLjE4YTEuMDgzIDEuMDgzIDAgMSAxLTEuODMzIDEuMTU0Yy0uOTEzLTEuNDUtMi4zNjYtMi4xNjctNC41LTIuMTY3cy0zLjU4Ny43MTctNC41IDIuMTY3elwiLz5cXG5cXG48L3N5bWJvbD5cXG48c3ltYm9sIGlkPVwidG9nZ2xlci1kb3duXCI+XFxuICA8cGF0aCBkPVwiTTYuNSA5LjI5NGEuNzkyLjc5MiAwIDAxLS41NjItLjIzMkwyLjIzMyA1LjM1NmEuNzk0Ljc5NCAwIDAxMS4xMjMtMS4xMjNMNi41IDcuMzc3bDMuMTQ0LTMuMTQ0YS43OTQuNzk0IDAgMDExLjEyMyAxLjEyM0w3LjA2MiA5LjA2MmEuNzkyLjc5MiAwIDAxLS41NjIuMjMyelwiLz5cXG5cXG48L3N5bWJvbD5cXG48c3ltYm9sIGlkPVwidW5saW5rXCIgdmlld0JveD1cIjAgMCAxNSAxMVwiPlxcbiAgPHBhdGggZD1cIk0xMy4wNzMgMi4wOTlsLTEuNDQ4IDEuNDQ4QTMgMyAwIDAwOSAySDhWMGgxYzEuNjggMCAzLjE2Ni44MjggNC4wNzMgMi4wOTl6TTYuOTI5IDRsLS44NzkuODc5TDcuMTcyIDZINWExIDEgMCAxMTAtMmgxLjkyOXpNNiAwdjJINWEzIDMgMCAxMDAgNmgxdjJINUE1IDUgMCAxMTUgMGgxem02LjQxNCA3bDIuMTIyIDIuMTIxLTEuNDE1IDEuNDE1TDExIDguNDE0bC0yLjEyMSAyLjEyMkw3LjQ2NCA5LjEyIDkuNTg2IDcgNy40NjQgNC44NzkgOC44OCAzLjQ2NCAxMSA1LjU4NmwyLjEyMS0yLjEyMiAxLjQxNSAxLjQxNUwxMi40MTQgN3pcIi8+XFxuXFxuPC9zeW1ib2w+PC9zdmc+J30sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jy5jb2RleC1lZGl0b3J7cG9zaXRpb246cmVsYXRpdmU7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3otaW5kZXg6MX0uY29kZXgtZWRpdG9yIC5oaWRlLC5jb2RleC1lZGl0b3JfX3JlZGFjdG9yLS1oaWRkZW57ZGlzcGxheTpub25lfS5jb2RleC1lZGl0b3JfX3JlZGFjdG9yIFtjb250ZW50ZWRpdGFibGVdOmVtcHR5OmFmdGVye2NvbnRlbnQ6XCJcXFxcZmVmZiBcIn1AbWVkaWEgKG1pbi13aWR0aDo2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93IC5jb2RleC1lZGl0b3JfX3JlZGFjdG9ye21hcmdpbi1yaWdodDo1MHB4fX1AbWVkaWEgKG1pbi13aWR0aDo2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93LmNvZGV4LWVkaXRvci0tcnRsIC5jb2RleC1lZGl0b3JfX3JlZGFjdG9ye21hcmdpbi1sZWZ0OjUwcHg7bWFyZ2luLXJpZ2h0OjB9fUBtZWRpYSAobWluLXdpZHRoOjY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cgLmNlLXRvb2xiYXJfX2FjdGlvbnN7cmlnaHQ6LTVweH19LmNvZGV4LWVkaXRvcl9fbG9hZGVye3Bvc2l0aW9uOnJlbGF0aXZlO2hlaWdodDozMHZofS5jb2RleC1lZGl0b3JfX2xvYWRlcjpiZWZvcmV7Y29udGVudDpcIlwiO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3RvcDo1MCU7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDttYXJnaW4tdG9wOi0xNXB4O21hcmdpbi1sZWZ0Oi0xNXB4O2JvcmRlci1yYWRpdXM6NTAlO2JvcmRlcjoycHggc29saWQgcmdiYSgyMDEsMjAxLDIwNCwuNDgpO2JvcmRlci10b3AtY29sb3I6dHJhbnNwYXJlbnQ7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94Oy13ZWJraXQtYW5pbWF0aW9uOmVkaXRvci1sb2FkZXItc3BpbiAuOHMgbGluZWFyIGluZmluaXRlO2FuaW1hdGlvbjplZGl0b3ItbG9hZGVyLXNwaW4gLjhzIGxpbmVhciBpbmZpbml0ZTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm19LmNvZGV4LWVkaXRvci1jb3B5YWJsZXtwb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6MXB4O3dpZHRoOjFweDt0b3A6LTQwMCU7b3BhY2l0eTouMDAxfS5jb2RleC1lZGl0b3Itb3ZlcmxheXtwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDt6LWluZGV4Ojk5OTtwb2ludGVyLWV2ZW50czpub25lO292ZXJmbG93OmhpZGRlbn0uY29kZXgtZWRpdG9yLW92ZXJsYXlfX2NvbnRhaW5lcntwb3NpdGlvbjpyZWxhdGl2ZTtwb2ludGVyLWV2ZW50czphdXRvO3otaW5kZXg6MH0uY29kZXgtZWRpdG9yLW92ZXJsYXlfX3JlY3RhbmdsZXtwb3NpdGlvbjphYnNvbHV0ZTtwb2ludGVyLWV2ZW50czpub25lO2JhY2tncm91bmQtY29sb3I6cmdiYSg0NiwxNzAsMjIwLC4yKTtib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50fS5jb2RleC1lZGl0b3Igc3Zne2ZpbGw6Y3VycmVudENvbG9yO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTttYXgtaGVpZ2h0OjEwMCV9OjotbW96LXNlbGVjdGlvbntiYWNrZ3JvdW5kLWNvbG9yOiNkNGVjZmZ9OjpzZWxlY3Rpb257YmFja2dyb3VuZC1jb2xvcjojZDRlY2ZmfS5jb2RleC1lZGl0b3ItLXRvb2xib3gtb3BlbmVkIFtjb250ZW50RWRpdGFibGU9dHJ1ZV1bZGF0YS1wbGFjZWhvbGRlcl06Zm9jdXM6YmVmb3Jle29wYWNpdHk6MCFpbXBvcnRhbnR9QC13ZWJraXQta2V5ZnJhbWVzIGVkaXRvci1sb2FkZXItc3BpbnswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMXR1cm4pO3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1Aa2V5ZnJhbWVzIGVkaXRvci1sb2FkZXItc3BpbnswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMXR1cm4pO3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX0uY2UtdG9vbGJhcntwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7cmlnaHQ6MDt0b3A6MDstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuMXMgZWFzZTt0cmFuc2l0aW9uOm9wYWNpdHkgLjFzIGVhc2U7d2lsbC1jaGFuZ2U6b3BhY2l0eSx0cmFuc2Zvcm07ZGlzcGxheTpub25lfUBtZWRpYSAobWF4LXdpZHRoOjY1MHB4KXsuY2UtdG9vbGJhcntwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjZWFlYWVhOy13ZWJraXQtYm94LXNoYWRvdzowIDNweCAxNXB4IC0zcHggcmdiYSgxMywyMCwzMywuMTMpO2JveC1zaGFkb3c6MCAzcHggMTVweCAtM3B4IHJnYmEoMTMsMjAsMzMsLjEzKTtib3JkZXItcmFkaXVzOjRweDt6LWluZGV4OjJ9fUBtZWRpYSAobWF4LXdpZHRoOjY1MHB4KSBhbmQgKG1heC13aWR0aDo2NTBweCl7LmNlLXRvb2xiYXJ7LXdlYmtpdC1ib3gtc2hhZG93OjAgMTNweCA3cHggLTVweCByZ2JhKDI2LDM4LDQ5LC4wOSksNnB4IDE1cHggMzRweCAtNnB4IHJnYmEoMzMsNDgsNzMsLjI5KTtib3gtc2hhZG93OjAgMTNweCA3cHggLTVweCByZ2JhKDI2LDM4LDQ5LC4wOSksNnB4IDE1cHggMzRweCAtNnB4IHJnYmEoMzMsNDgsNzMsLjI5KTtib3JkZXItYm90dG9tLWNvbG9yOiNkNWQ3ZGJ9fUBtZWRpYSAobWF4LXdpZHRoOjY1MHB4KXsuY2UtdG9vbGJhcntwYWRkaW5nOjNweDttYXJnaW4tdG9wOjVweH0uY2UtdG9vbGJhci0tbGVmdC1vcmllbnRlZDpiZWZvcmV7bGVmdDoxNXB4O21hcmdpbi1sZWZ0OjB9LmNlLXRvb2xiYXItLXJpZ2h0LW9yaWVudGVkOmJlZm9yZXtsZWZ0OmF1dG87cmlnaHQ6MTVweDttYXJnaW4tbGVmdDowfX0uY2UtdG9vbGJhci0tb3BlbmVke2Rpc3BsYXk6YmxvY2t9QG1lZGlhIChtYXgtd2lkdGg6NjUwcHgpey5jZS10b29sYmFyLS1vcGVuZWR7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH19LmNlLXRvb2xiYXJfX2NvbnRlbnR7bWF4LXdpZHRoOjY1MHB4O21hcmdpbjowIGF1dG87cG9zaXRpb246cmVsYXRpdmV9QG1lZGlhIChtYXgtd2lkdGg6NjUwcHgpey5jZS10b29sYmFyX19jb250ZW50e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtbGluZS1wYWNrOmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcjttYXJnaW46MDttYXgtd2lkdGg6Y2FsYygxMDAlIC0gMzVweCl9fS5jZS10b29sYmFyX19wbHVze2NvbG9yOiM3MDc2ODQ7Y3Vyc29yOnBvaW50ZXI7d2lkdGg6MzRweDtoZWlnaHQ6MzRweDtkaXNwbGF5Oi13ZWJraXQtaW5saW5lLWJveDtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveDtkaXNwbGF5OmlubGluZS1mbGV4Oy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7cG9zaXRpb246YWJzb2x1dGU7bGVmdDotMzRweDstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjB9LmNlLXRvb2xiYXJfX3BsdXMtLWFjdGl2ZSwuY2UtdG9vbGJhcl9fcGx1czpob3Zlcntjb2xvcjojMzg4YWU1fS5jZS10b29sYmFyX19wbHVzLS1hY3RpdmV7LXdlYmtpdC1hbmltYXRpb246Ym91bmNlSW4gLjc1cyAxO2FuaW1hdGlvbjpib3VuY2VJbiAuNzVzIDE7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHN9LmNlLXRvb2xiYXJfX3BsdXMtc2hvcnRjdXR7b3BhY2l0eTouNjt3b3JkLXNwYWNpbmc6LTJweDttYXJnaW4tdG9wOjVweH0uY2UtdG9vbGJhcl9fcGx1cy0taGlkZGVue2Rpc3BsYXk6bm9uZX1AbWVkaWEgKG1heC13aWR0aDo2NTBweCl7LmNlLXRvb2xiYXJfX3BsdXN7ZGlzcGxheTotd2Via2l0LWlubGluZS1ib3ghaW1wb3J0YW50O2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94IWltcG9ydGFudDtkaXNwbGF5OmlubGluZS1mbGV4IWltcG9ydGFudDtwb3NpdGlvbjpzdGF0aWM7LXdlYmtpdC10cmFuc2Zvcm06bm9uZSFpbXBvcnRhbnQ7dHJhbnNmb3JtOm5vbmUhaW1wb3J0YW50fX0uY2UtdG9vbGJhciAuY2UtdG9vbGJveCwuY2UtdG9vbGJhcl9fcGx1c3t0b3A6NTAlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSl9LmNlLXRvb2xiYXJfX2FjdGlvbnN7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6LTMwcHg7dG9wOjVweDtvcGFjaXR5OjB9QG1lZGlhIChtYXgtd2lkdGg6NjUwcHgpey5jZS10b29sYmFyX19hY3Rpb25ze3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0Oi0yOHB4O3RvcDo1MCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfX0uY2UtdG9vbGJhcl9fYWN0aW9ucy0tb3BlbmVke29wYWNpdHk6MX0uY2UtdG9vbGJhcl9fYWN0aW9ucy1idXR0b25ze3RleHQtYWxpZ246cmlnaHR9LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bntkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MThweDtoZWlnaHQ6MThweDtjb2xvcjojNzA3Njg0O2N1cnNvcjpwb2ludGVyO2JhY2tncm91bmQ6I2VmZjJmNTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bjpob3Zlcntjb2xvcjojMWQyMDJifUBtZWRpYSAobWF4LXdpZHRoOjY1MHB4KXsuY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRue2JhY2tncm91bmQ6dHJhbnNwYXJlbnR9fUBtZWRpYSAobWluLXdpZHRoOjY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cgLmNlLXRvb2xiYXJfX3BsdXN7bGVmdDo1cHh9fS5jZS10b29sYm94e3Bvc2l0aW9uOmFic29sdXRlO3Zpc2liaWxpdHk6aGlkZGVuOy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IC4xcyBlYXNlO3RyYW5zaXRpb246b3BhY2l0eSAuMXMgZWFzZTt3aWxsLWNoYW5nZTpvcGFjaXR5O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtZGlyZWN0aW9uOnJvd31AbWVkaWEgKG1heC13aWR0aDo2NTBweCl7LmNlLXRvb2xib3h7cG9zaXRpb246c3RhdGljOy13ZWJraXQtdHJhbnNmb3JtOm5vbmUhaW1wb3J0YW50O3RyYW5zZm9ybTpub25lIWltcG9ydGFudDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtvdmVyZmxvdy14OmF1dG99fS5jZS10b29sYm94LS1vcGVuZWR7b3BhY2l0eToxO3Zpc2liaWxpdHk6dmlzaWJsZX0uY2UtdG9vbGJveF9fYnV0dG9ue2NvbG9yOiM3MDc2ODQ7Y3Vyc29yOnBvaW50ZXI7d2lkdGg6MzRweDtoZWlnaHQ6MzRweDtkaXNwbGF5Oi13ZWJraXQtaW5saW5lLWJveDtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveDtkaXNwbGF5OmlubGluZS1mbGV4Oy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtbmVnYXRpdmU6MDtmbGV4LXNocmluazowfS5jZS10b29sYm94X19idXR0b24tLWFjdGl2ZSwuY2UtdG9vbGJveF9fYnV0dG9uOmhvdmVye2NvbG9yOiMzODhhZTV9LmNlLXRvb2xib3hfX2J1dHRvbi0tYWN0aXZley13ZWJraXQtYW5pbWF0aW9uOmJvdW5jZUluIC43NXMgMTthbmltYXRpb246Ym91bmNlSW4gLjc1cyAxOy13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzfS5jZS10b29sYm94LWJ1dHRvbi10b29sdGlwX19zaG9ydGN1dHtvcGFjaXR5Oi42O3dvcmQtc3BhY2luZzotM3B4O21hcmdpbi10b3A6M3B4fUBtZWRpYSAobWluLXdpZHRoOjY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cgLmNlLXRvb2xib3h7YmFja2dyb3VuZDojZmZmO3otaW5kZXg6Mn19LmNlLWlubGluZS10b29sYmFye3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNlYWVhZWE7LXdlYmtpdC1ib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCByZ2JhKDEzLDIwLDMzLC4xMyk7Ym94LXNoYWRvdzowIDNweCAxNXB4IC0zcHggcmdiYSgxMywyMCwzMywuMTMpO2JvcmRlci1yYWRpdXM6NHB4O3otaW5kZXg6Mn1AbWVkaWEgKG1heC13aWR0aDo2NTBweCl7LmNlLWlubGluZS10b29sYmFyey13ZWJraXQtYm94LXNoYWRvdzowIDEzcHggN3B4IC01cHggcmdiYSgyNiwzOCw0OSwuMDkpLDZweCAxNXB4IDM0cHggLTZweCByZ2JhKDMzLDQ4LDczLC4yOSk7Ym94LXNoYWRvdzowIDEzcHggN3B4IC01cHggcmdiYSgyNiwzOCw0OSwuMDkpLDZweCAxNXB4IDM0cHggLTZweCByZ2JhKDMzLDQ4LDczLC4yOSk7Ym9yZGVyLWJvdHRvbS1jb2xvcjojZDVkN2RifX0uY2UtaW5saW5lLXRvb2xiYXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKSB0cmFuc2xhdGVZKDhweCkgc2NhbGUoLjkpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoOHB4KSBzY2FsZSguOSk7b3BhY2l0eTowO3Zpc2liaWxpdHk6aGlkZGVuOy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IC4yNXMgZWFzZSwtd2Via2l0LXRyYW5zZm9ybSAuMTVzIGVhc2U7dHJhbnNpdGlvbjpvcGFjaXR5IC4yNXMgZWFzZSwtd2Via2l0LXRyYW5zZm9ybSAuMTVzIGVhc2U7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjE1cyBlYXNlLG9wYWNpdHkgLjI1cyBlYXNlO3RyYW5zaXRpb246dHJhbnNmb3JtIC4xNXMgZWFzZSxvcGFjaXR5IC4yNXMgZWFzZSwtd2Via2l0LXRyYW5zZm9ybSAuMTVzIGVhc2U7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtLG9wYWNpdHk7dG9wOjA7bGVmdDowfS5jZS1pbmxpbmUtdG9vbGJhci0tbGVmdC1vcmllbnRlZDpiZWZvcmV7bGVmdDoxNXB4O21hcmdpbi1sZWZ0OjB9LmNlLWlubGluZS10b29sYmFyLS1yaWdodC1vcmllbnRlZDpiZWZvcmV7bGVmdDphdXRvO3JpZ2h0OjE1cHg7bWFyZ2luLWxlZnQ6MH0uY2UtaW5saW5lLXRvb2xiYXItLXNob3dlZHtvcGFjaXR5OjE7dmlzaWJpbGl0eTp2aXNpYmxlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSl9LmNlLWlubGluZS10b29sYmFyLS1sZWZ0LW9yaWVudGVkey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIzcHgpIHRyYW5zbGF0ZVkoOHB4KSBzY2FsZSguOSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIzcHgpIHRyYW5zbGF0ZVkoOHB4KSBzY2FsZSguOSl9LmNlLWlubGluZS10b29sYmFyLS1sZWZ0LW9yaWVudGVkLmNlLWlubGluZS10b29sYmFyLS1zaG93ZWR7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjNweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIzcHgpfS5jZS1pbmxpbmUtdG9vbGJhci0tcmlnaHQtb3JpZW50ZWR7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSkgdHJhbnNsYXRlWSg4cHgpIHNjYWxlKC45KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSkgdHJhbnNsYXRlWSg4cHgpIHNjYWxlKC45KTttYXJnaW4tbGVmdDoyM3B4fS5jZS1pbmxpbmUtdG9vbGJhci0tcmlnaHQtb3JpZW50ZWQuY2UtaW5saW5lLXRvb2xiYXItLXNob3dlZHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSl9LmNlLWlubGluZS10b29sYmFyIFtoaWRkZW5de2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LmNlLWlubGluZS10b29sYmFyX190b2dnbGVyLWFuZC1idXR0b24td3JhcHBlcnt3aWR0aDoxMDAlO3BhZGRpbmc6MCA2cHh9LmNlLWlubGluZS10b29sYmFyX19idXR0b25zLC5jZS1pbmxpbmUtdG9vbGJhcl9fdG9nZ2xlci1hbmQtYnV0dG9uLXdyYXBwZXJ7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH0uY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3due2Rpc3BsYXk6LXdlYmtpdC1pbmxpbmUtYm94O2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6aW5saW5lLWZsZXg7aGVpZ2h0OjM0cHg7cGFkZGluZzowIDlweCAwIDEwcHg7bWFyZ2luOjAgNnB4IDAgLTZweDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtjdXJzb3I6cG9pbnRlcjtib3JkZXItcmlnaHQ6MXB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KX0uY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duOmhvdmVye2JhY2tncm91bmQ6I2VmZjJmNX0uY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duLS1oaWRkZW57ZGlzcGxheTpub25lfS5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tY29udGVudHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O2ZvbnQtd2VpZ2h0OjUwMDtmb250LXNpemU6MTRweH0uY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duLWNvbnRlbnQgc3Zne2hlaWdodDoxMnB4fS5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24gLmljb24tLXRvZ2dsZXItZG93bnttYXJnaW4tbGVmdDo0cHh9LmNlLWlubGluZS10b29sYmFyX19zaG9ydGN1dHtvcGFjaXR5Oi42O3dvcmQtc3BhY2luZzotM3B4O21hcmdpbi10b3A6M3B4fS5jZS1pbmxpbmUtdG9vbHtkaXNwbGF5Oi13ZWJraXQtaW5saW5lLWJveDtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveDtkaXNwbGF5OmlubGluZS1mbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MzRweDtoZWlnaHQ6MzRweDtsaW5lLWhlaWdodDozNHB4O3BhZGRpbmc6MCFpbXBvcnRhbnQ7dGV4dC1hbGlnbjpjZW50ZXI7Ym9yZGVyLXJhZGl1czozcHg7Y3Vyc29yOnBvaW50ZXI7Ym9yZGVyOjA7b3V0bGluZTpub25lO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7dmVydGljYWwtYWxpZ246Ym90dG9tO2NvbG9yOiMwMDA7bWFyZ2luOjB9LmNlLWlubGluZS10b29sOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmZjJmNX0uY2UtaW5saW5lLXRvb2x7Ym9yZGVyLXJhZGl1czowO2xpbmUtaGVpZ2h0Om5vcm1hbDt3aWR0aDphdXRvO3BhZGRpbmc6MCA1cHghaW1wb3J0YW50O21pbi13aWR0aDoyNHB4fS5jZS1pbmxpbmUtdG9vbC0tYWN0aXZle2NvbG9yOiMzODhhZTV9LmNlLWlubGluZS10b29sLS1mb2N1c2Vkey13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggcmdiYSg3LDE2MSwyMjcsLjA4KTtib3gtc2hhZG93Omluc2V0IDAgMCAwIDFweCByZ2JhKDcsMTYxLDIyNywuMDgpO2JhY2tncm91bmQ6cmdiYSgzNCwxODYsMjU1LC4wOCkhaW1wb3J0YW50fS5jZS1pbmxpbmUtdG9vbC0tZm9jdXNlZC1hbmltYXRlZHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJ1dHRvbkNsaWNrZWQ7YW5pbWF0aW9uLW5hbWU6YnV0dG9uQ2xpY2tlZDstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjouMjVzO2FuaW1hdGlvbi1kdXJhdGlvbjouMjVzfS5jZS1pbmxpbmUtdG9vbDpub3QoOmxhc3Qtb2YtdHlwZSl7bWFyZ2luLXJpZ2h0OjJweH0uY2UtaW5saW5lLXRvb2wgLmljb257aGVpZ2h0OjEycHh9LmNlLWlubGluZS10b29sLS1saW5rIC5pY29uLS11bmxpbmssLmNlLWlubGluZS10b29sLS11bmxpbmsgLmljb24tLWxpbmt7ZGlzcGxheTpub25lfS5jZS1pbmxpbmUtdG9vbC0tdW5saW5rIC5pY29uLS11bmxpbmt7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWJvdHRvbTotMXB4fS5jZS1pbmxpbmUtdG9vbC1pbnB1dHtvdXRsaW5lOm5vbmU7Ym9yZGVyOjA7Ym9yZGVyLXJhZGl1czowIDAgNHB4IDRweDttYXJnaW46MDtmb250LXNpemU6MTNweDtwYWRkaW5nOjEwcHg7d2lkdGg6MTAwJTstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpub25lO2ZvbnQtd2VpZ2h0OjUwMDtib3JkZXItdG9wOjFweCBzb2xpZCByZ2JhKDIwMSwyMDEsMjA0LC40OCl9LmNlLWlubGluZS10b29sLWlucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM3MDc2ODR9LmNlLWlubGluZS10b29sLWlucHV0OjotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM3MDc2ODR9LmNlLWlubGluZS10b29sLWlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0fS5jZS1pbmxpbmUtdG9vbC1pbnB1dDo6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM3MDc2ODR9LmNlLWlubGluZS10b29sLWlucHV0OjpwbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0fS5jZS1pbmxpbmUtdG9vbC1pbnB1dC0tc2hvd2Vke2Rpc3BsYXk6YmxvY2t9LmNlLWNvbnZlcnNpb24tdG9vbGJhcntwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjZWFlYWVhOy13ZWJraXQtYm94LXNoYWRvdzowIDNweCAxNXB4IC0zcHggcmdiYSgxMywyMCwzMywuMTMpO2JveC1zaGFkb3c6MCAzcHggMTVweCAtM3B4IHJnYmEoMTMsMjAsMzMsLjEzKTtib3JkZXItcmFkaXVzOjRweDt6LWluZGV4OjJ9QG1lZGlhIChtYXgtd2lkdGg6NjUwcHgpey5jZS1jb252ZXJzaW9uLXRvb2xiYXJ7LXdlYmtpdC1ib3gtc2hhZG93OjAgMTNweCA3cHggLTVweCByZ2JhKDI2LDM4LDQ5LC4wOSksNnB4IDE1cHggMzRweCAtNnB4IHJnYmEoMzMsNDgsNzMsLjI5KTtib3gtc2hhZG93OjAgMTNweCA3cHggLTVweCByZ2JhKDI2LDM4LDQ5LC4wOSksNnB4IDE1cHggMzRweCAtNnB4IHJnYmEoMzMsNDgsNzMsLjI5KTtib3JkZXItYm90dG9tLWNvbG9yOiNkNWQ3ZGJ9fS5jZS1jb252ZXJzaW9uLXRvb2xiYXJ7b3BhY2l0eTowO3Zpc2liaWxpdHk6aGlkZGVuO3dpbGwtY2hhbmdlOnRyYW5zZm9ybSxvcGFjaXR5Oy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IC4xcyBlYXNlLC13ZWJraXQtdHJhbnNmb3JtIC4xcyBlYXNlO3RyYW5zaXRpb246b3BhY2l0eSAuMXMgZWFzZSwtd2Via2l0LXRyYW5zZm9ybSAuMXMgZWFzZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMXMgZWFzZSxvcGFjaXR5IC4xcyBlYXNlO3RyYW5zaXRpb246dHJhbnNmb3JtIC4xcyBlYXNlLG9wYWNpdHkgLjFzIGVhc2UsLXdlYmtpdC10cmFuc2Zvcm0gLjFzIGVhc2U7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtOHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtOHB4KTtsZWZ0Oi0xcHg7d2lkdGg6MTUwcHg7bWFyZ2luLXRvcDo1cHg7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3h9LmNlLWNvbnZlcnNpb24tdG9vbGJhci0tbGVmdC1vcmllbnRlZDpiZWZvcmV7bGVmdDoxNXB4O21hcmdpbi1sZWZ0OjB9LmNlLWNvbnZlcnNpb24tdG9vbGJhci0tcmlnaHQtb3JpZW50ZWQ6YmVmb3Jle2xlZnQ6YXV0bztyaWdodDoxNXB4O21hcmdpbi1sZWZ0OjB9LmNlLWNvbnZlcnNpb24tdG9vbGJhci0tc2hvd2Vke29wYWNpdHk6MTt2aXNpYmlsaXR5OnZpc2libGU7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX0uY2UtY29udmVyc2lvbi10b29sYmFyIFtoaWRkZW5de2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LmNlLWNvbnZlcnNpb24tdG9vbGJhcl9fYnV0dG9uc3tkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4fS5jZS1jb252ZXJzaW9uLXRvb2xiYXJfX2xhYmVse2NvbG9yOiM3MDc2ODQ7Zm9udC1zaXplOjExcHg7Zm9udC13ZWlnaHQ6NTAwO2xldHRlci1zcGFjaW5nOi4zM3B4O3BhZGRpbmc6MTBweCAxMHB4IDVweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmNlLWNvbnZlcnNpb24tdG9vbHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3BhZGRpbmc6NXB4IDEwcHg7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjBweDtmb250LXdlaWdodDo1MDA7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmNlLWNvbnZlcnNpb24tdG9vbC0taGlkZGVue2Rpc3BsYXk6bm9uZX0uY2UtY29udmVyc2lvbi10b29sLS1mb2N1c2Vkey13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggcmdiYSg3LDE2MSwyMjcsLjA4KTtib3gtc2hhZG93Omluc2V0IDAgMCAwIDFweCByZ2JhKDcsMTYxLDIyNywuMDgpO2JhY2tncm91bmQ6cmdiYSgzNCwxODYsMjU1LC4wOCkhaW1wb3J0YW50fS5jZS1jb252ZXJzaW9uLXRvb2wtLWZvY3VzZWQtYW5pbWF0ZWR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpidXR0b25DbGlja2VkO2FuaW1hdGlvbi1uYW1lOmJ1dHRvbkNsaWNrZWQ7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246LjI1czthbmltYXRpb24tZHVyYXRpb246LjI1c30uY2UtY29udmVyc2lvbi10b29sOmhvdmVye2JhY2tncm91bmQ6I2VmZjJmNX0uY2UtY29udmVyc2lvbi10b29sX19pY29ue2Rpc3BsYXk6LXdlYmtpdC1pbmxpbmUtYm94O2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6aW5saW5lLWZsZXg7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTtib3JkZXItcmFkaXVzOjNweDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbi1yaWdodDoxMHB4O2JhY2tncm91bmQ6I2ZmZn0uY2UtY29udmVyc2lvbi10b29sX19pY29uIHN2Z3t3aWR0aDoxMXB4O2hlaWdodDoxMXB4fS5jZS1jb252ZXJzaW9uLXRvb2wtLWxhc3R7bWFyZ2luLXJpZ2h0OjAhaW1wb3J0YW50fS5jZS1jb252ZXJzaW9uLXRvb2wtLWFjdGl2ZXtjb2xvcjojMzg4YWU1IWltcG9ydGFudDstd2Via2l0LWFuaW1hdGlvbjpib3VuY2VJbiAuNzVzIDE7YW5pbWF0aW9uOmJvdW5jZUluIC43NXMgMTstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkc30uY2Utc2V0dGluZ3N7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI2VhZWFlYTstd2Via2l0LWJveC1zaGFkb3c6MCAzcHggMTVweCAtM3B4IHJnYmEoMTMsMjAsMzMsLjEzKTtib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCByZ2JhKDEzLDIwLDMzLC4xMyk7Ym9yZGVyLXJhZGl1czo0cHg7ei1pbmRleDoyfUBtZWRpYSAobWF4LXdpZHRoOjY1MHB4KXsuY2Utc2V0dGluZ3N7LXdlYmtpdC1ib3gtc2hhZG93OjAgMTNweCA3cHggLTVweCByZ2JhKDI2LDM4LDQ5LC4wOSksNnB4IDE1cHggMzRweCAtNnB4IHJnYmEoMzMsNDgsNzMsLjI5KTtib3gtc2hhZG93OjAgMTNweCA3cHggLTVweCByZ2JhKDI2LDM4LDQ5LC4wOSksNnB4IDE1cHggMzRweCAtNnB4IHJnYmEoMzMsNDgsNzMsLjI5KTtib3JkZXItYm90dG9tLWNvbG9yOiNkNWQ3ZGJ9fS5jZS1zZXR0aW5nc3tyaWdodDotMXB4O3RvcDozMHB4O21pbi13aWR0aDoxMTRweDstd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7Ym94LXNpemluZzpjb250ZW50LWJveH0uY2Utc2V0dGluZ3MtLWxlZnQtb3JpZW50ZWQ6YmVmb3Jle2xlZnQ6MTVweDttYXJnaW4tbGVmdDowfS5jZS1zZXR0aW5ncy0tcmlnaHQtb3JpZW50ZWQ6YmVmb3Jle2xlZnQ6YXV0bztyaWdodDoxNXB4O21hcmdpbi1sZWZ0OjB9QG1lZGlhIChtYXgtd2lkdGg6NjUwcHgpey5jZS1zZXR0aW5nc3tib3R0b206NDBweDtyaWdodDotMTFweDt0b3A6YXV0b319LmNlLXNldHRpbmdzOmJlZm9yZXtsZWZ0OmF1dG87cmlnaHQ6MTJweH1AbWVkaWEgKG1heC13aWR0aDo2NTBweCl7LmNlLXNldHRpbmdzOmJlZm9yZXtib3R0b206LTVweDt0b3A6YXV0b319LmNlLXNldHRpbmdze2Rpc3BsYXk6bm9uZX0uY2Utc2V0dGluZ3MtLW9wZW5lZHtkaXNwbGF5OmJsb2NrOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi4xczthbmltYXRpb24tZHVyYXRpb246LjFzOy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6cGFuZWxTaG93aW5nO2FuaW1hdGlvbi1uYW1lOnBhbmVsU2hvd2luZ30uY2Utc2V0dGluZ3NfX3BsdWdpbi16b25lOm5vdCg6ZW1wdHkpe3BhZGRpbmc6M3B4IDNweCAwfS5jZS1zZXR0aW5nc19fZGVmYXVsdC16b25lOm5vdCg6ZW1wdHkpe3BhZGRpbmc6M3B4fS5jZS1zZXR0aW5nc19fYnV0dG9ue2Rpc3BsYXk6LXdlYmtpdC1pbmxpbmUtYm94O2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6aW5saW5lLWZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDozNHB4O2hlaWdodDozNHB4O2xpbmUtaGVpZ2h0OjM0cHg7cGFkZGluZzowIWltcG9ydGFudDt0ZXh0LWFsaWduOmNlbnRlcjtib3JkZXItcmFkaXVzOjNweDtjdXJzb3I6cG9pbnRlcjtib3JkZXI6MDtvdXRsaW5lOm5vbmU7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDt2ZXJ0aWNhbC1hbGlnbjpib3R0b207Y29sb3I6IzAwMDttYXJnaW46MH0uY2Utc2V0dGluZ3NfX2J1dHRvbjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNlZmYyZjV9LmNlLXNldHRpbmdzX19idXR0b24tLWFjdGl2ZXtjb2xvcjojMzg4YWU1fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1mb2N1c2Vkey13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggcmdiYSg3LDE2MSwyMjcsLjA4KTtib3gtc2hhZG93Omluc2V0IDAgMCAwIDFweCByZ2JhKDcsMTYxLDIyNywuMDgpO2JhY2tncm91bmQ6cmdiYSgzNCwxODYsMjU1LC4wOCkhaW1wb3J0YW50fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1mb2N1c2VkLWFuaW1hdGVkey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6YnV0dG9uQ2xpY2tlZDthbmltYXRpb24tbmFtZTpidXR0b25DbGlja2VkOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi4yNXM7YW5pbWF0aW9uLWR1cmF0aW9uOi4yNXN9LmNlLXNldHRpbmdzX19idXR0b246bm90KDpudGgtY2hpbGQoM24rMykpe21hcmdpbi1yaWdodDozcHh9LmNlLXNldHRpbmdzX19idXR0b246bnRoLWNoaWxkKG4rNCl7bWFyZ2luLXRvcDozcHh9LmNlLXNldHRpbmdzX19idXR0b257bGluZS1oZWlnaHQ6MzJweH0uY2Utc2V0dGluZ3NfX2J1dHRvbi0tZGlzYWJsZWR7Y3Vyc29yOm5vdC1hbGxvd2VkIWltcG9ydGFudDtvcGFjaXR5Oi4zfS5jZS1zZXR0aW5nc19fYnV0dG9uLS1zZWxlY3RlZHtjb2xvcjojMzg4YWU1fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1kZWxldGV7LXdlYmtpdC10cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjNzIGVhc2U7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4zcyBlYXNlO3dpbGwtY2hhbmdlOmJhY2tncm91bmQtY29sb3J9LmNlLXNldHRpbmdzX19idXR0b24tLWRlbGV0ZSAuaWNvbnstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjJzIGVhc2Utb3V0O3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjJzIGVhc2Utb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4ycyBlYXNlLW91dDt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMnMgZWFzZS1vdXQsLXdlYmtpdC10cmFuc2Zvcm0gLjJzIGVhc2Utb3V0O3dpbGwtY2hhbmdlOnRyYW5zZm9ybX0uY2Utc2V0dGluZ3NfX2J1dHRvbi0tY29uZmlybXtiYWNrZ3JvdW5kLWNvbG9yOiNlMjRhNGEhaW1wb3J0YW50O2NvbG9yOiNmZmZ9LmNlLXNldHRpbmdzX19idXR0b24tLWNvbmZpcm06aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZDU0YTRhIWltcG9ydGFudH0uY2Utc2V0dGluZ3NfX2J1dHRvbi0tY29uZmlybSAuaWNvbnstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpfS5jZS1ibG9jazpmaXJzdC1vZi10eXBle21hcmdpbi10b3A6MH0uY2UtYmxvY2stLXNlbGVjdGVkIC5jZS1ibG9ja19fY29udGVudHtiYWNrZ3JvdW5kOiNlMWYyZmZ9LmNlLWJsb2NrLS1zZWxlY3RlZCAuY2UtYmxvY2tfX2NvbnRlbnQgW2NvbnRlbnRlZGl0YWJsZV17LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5jZS1ibG9jay0tc2VsZWN0ZWQgLmNlLWJsb2NrX19jb250ZW50IC5jZS1zdHViLC5jZS1ibG9jay0tc2VsZWN0ZWQgLmNlLWJsb2NrX19jb250ZW50IGltZ3tvcGFjaXR5Oi41NX0uY2UtYmxvY2stLXN0cmV0Y2hlZCAuY2UtYmxvY2tfX2NvbnRlbnR7bWF4LXdpZHRoOm5vbmV9LmNlLWJsb2NrX19jb250ZW50e3Bvc2l0aW9uOnJlbGF0aXZlO21heC13aWR0aDo2NTBweDttYXJnaW46MCBhdXRvOy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZTt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjE1cyBlYXNlfS5jZS1ibG9jay0tZHJvcC10YXJnZXQgLmNlLWJsb2NrX19jb250ZW50OmJlZm9yZXtjb250ZW50OlwiXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7bGVmdDotMjBweDttYXJnaW4tdG9wOi0xcHg7aGVpZ2h0OjhweDt3aWR0aDo4cHg7Ym9yZGVyOnNvbGlkICMzODhhZTU7Ym9yZGVyLXdpZHRoOjFweCAxcHggMCAwOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodDt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0Oy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyl9LmNlLWJsb2NrLS1kcm9wLXRhcmdldCAuY2UtYmxvY2tfX2NvbnRlbnQ6YWZ0ZXJ7Y29udGVudDpcIlwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO2hlaWdodDoxcHg7d2lkdGg6MTAwJTtjb2xvcjojMzg4YWU1O2JhY2tncm91bmQ6cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCg5MGRlZywjMzg4YWU1LCMzODhhZTUgMXB4LCNmZmYgMCwjZmZmIDZweCl9LmNlLWJsb2NrIGF7Y3Vyc29yOnBvaW50ZXI7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZX0uY2UtYmxvY2sgYntmb250LXdlaWdodDo3MDB9LmNlLWJsb2NrIGl7Zm9udC1zdHlsZTppdGFsaWN9QG1lZGlhIChtaW4td2lkdGg6NjUxcHgpey5jb2RleC1lZGl0b3ItLW5hcnJvdyAuY2UtYmxvY2stLWZvY3VzZWR7bWFyZ2luLXJpZ2h0Oi01MHB4O3BhZGRpbmctcmlnaHQ6NTBweH19LndvYmJsZXstd2Via2l0LWFuaW1hdGlvbi1uYW1lOndvYmJsZTthbmltYXRpb24tbmFtZTp3b2JibGU7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246LjRzO2FuaW1hdGlvbi1kdXJhdGlvbjouNHN9QC13ZWJraXQta2V5ZnJhbWVzIHdvYmJsZXswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfTE1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNSUsMCwwKSByb3RhdGUoLTVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNSUsMCwwKSByb3RhdGUoLTVkZWcpfTMwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgyJSwwLDApIHJvdGF0ZSgzZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMiUsMCwwKSByb3RhdGUoM2RlZyl9NDUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0zJSwwLDApIHJvdGF0ZSgtM2RlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0zJSwwLDApIHJvdGF0ZSgtM2RlZyl9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDIlLDAsMCkgcm90YXRlKDJkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgyJSwwLDApIHJvdGF0ZSgyZGVnKX03NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTElLDAsMCkgcm90YXRlKC0xZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTElLDAsMCkgcm90YXRlKC0xZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfX1Aa2V5ZnJhbWVzIHdvYmJsZXswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfTE1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNSUsMCwwKSByb3RhdGUoLTVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNSUsMCwwKSByb3RhdGUoLTVkZWcpfTMwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgyJSwwLDApIHJvdGF0ZSgzZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMiUsMCwwKSByb3RhdGUoM2RlZyl9NDUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0zJSwwLDApIHJvdGF0ZSgtM2RlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0zJSwwLDApIHJvdGF0ZSgtM2RlZyl9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDIlLDAsMCkgcm90YXRlKDJkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgyJSwwLDApIHJvdGF0ZSgyZGVnKX03NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTElLDAsMCkgcm90YXRlKC0xZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTElLDAsMCkgcm90YXRlKC0xZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlSW57MCUsMjAlLDQwJSw2MCUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpfTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpO3RyYW5zZm9ybTpzY2FsZTNkKC45LC45LC45KX0yMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjAzLDEuMDMsMS4wMyk7dHJhbnNmb3JtOnNjYWxlM2QoMS4wMywxLjAzLDEuMDMpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMSk7dHJhbnNmb3JtOnNjYWxlWCgxKX19QGtleWZyYW1lcyBib3VuY2VJbnswJSwyMCUsNDAlLDYwJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSl9MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCguOSwuOSwuOSk7dHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpfTIwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMDMsMS4wMywxLjAzKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjAzLDEuMDMsMS4wMyl9NjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgxKTt0cmFuc2Zvcm06c2NhbGVYKDEpfX1ALXdlYmtpdC1rZXlmcmFtZXMgc2VsZWN0aW9uQm91bmNlezAlLDIwJSw0MCUsNjAlLDgwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjAxLDEuMDEsMS4wMSk7dHJhbnNmb3JtOnNjYWxlM2QoMS4wMSwxLjAxLDEuMDEpfTcwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMSk7dHJhbnNmb3JtOnNjYWxlWCgxKX19QGtleWZyYW1lcyBzZWxlY3Rpb25Cb3VuY2V7MCUsMjAlLDQwJSw2MCUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpfTUwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMDEsMS4wMSwxLjAxKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjAxLDEuMDEsMS4wMSl9NzAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgxKTt0cmFuc2Zvcm06c2NhbGVYKDEpfX1ALXdlYmtpdC1rZXlmcmFtZXMgYnV0dG9uQ2xpY2tlZHswJSwyMCUsNDAlLDYwJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSl9MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCguOTUsLjk1LC45NSk7dHJhbnNmb3JtOnNjYWxlM2QoLjk1LC45NSwuOTUpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMDIsMS4wMiwxLjAyKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjAyLDEuMDIsMS4wMil9ODAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgxKTt0cmFuc2Zvcm06c2NhbGVYKDEpfX1Aa2V5ZnJhbWVzIGJ1dHRvbkNsaWNrZWR7MCUsMjAlLDQwJSw2MCUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpfTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjk1LC45NSwuOTUpO3RyYW5zZm9ybTpzY2FsZTNkKC45NSwuOTUsLjk1KX02MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjAyLDEuMDIsMS4wMik7dHJhbnNmb3JtOnNjYWxlM2QoMS4wMiwxLjAyLDEuMDIpfTgwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMSk7dHJhbnNmb3JtOnNjYWxlWCgxKX19QC13ZWJraXQta2V5ZnJhbWVzIHBhbmVsU2hvd2luZ3swJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtOHB4KSBzY2FsZSguOSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLThweCkgc2NhbGUoLjkpfTcwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgycHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDJweCl9dG97LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QGtleWZyYW1lcyBwYW5lbFNob3dpbmd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLThweCkgc2NhbGUoLjkpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC04cHgpIHNjYWxlKC45KX03MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgycHgpfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fS5jZHgtYmxvY2t7cGFkZGluZzouNGVtIDB9LmNkeC1pbnB1dHtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTstd2Via2l0LWJveC1zaGFkb3c6aW5zZXQgMCAxcHggMnB4IDAgcmdiYSgzNSw0NCw3MiwuMDYpO2JveC1zaGFkb3c6aW5zZXQgMCAxcHggMnB4IDAgcmdiYSgzNSw0NCw3MiwuMDYpO2JvcmRlci1yYWRpdXM6M3B4O3BhZGRpbmc6MTBweCAxMnB4O291dGxpbmU6bm9uZTt3aWR0aDoxMDAlOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH0uY2R4LWlucHV0W2RhdGEtcGxhY2Vob2xkZXJdOmJlZm9yZXtwb3NpdGlvbjpzdGF0aWMhaW1wb3J0YW50O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjA7d2hpdGUtc3BhY2U6bm93cmFwO3BvaW50ZXItZXZlbnRzOm5vbmV9LmNkeC1zZXR0aW5ncy1idXR0b257ZGlzcGxheTotd2Via2l0LWlubGluZS1ib3g7ZGlzcGxheTotbXMtaW5saW5lLWZsZXhib3g7ZGlzcGxheTppbmxpbmUtZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjM0cHg7aGVpZ2h0OjM0cHg7bGluZS1oZWlnaHQ6MzRweDtwYWRkaW5nOjAhaW1wb3J0YW50O3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6M3B4O2N1cnNvcjpwb2ludGVyO2JvcmRlcjowO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3ZlcnRpY2FsLWFsaWduOmJvdHRvbTtjb2xvcjojMDAwO21hcmdpbjowfS5jZHgtc2V0dGluZ3MtYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmZjJmNX0uY2R4LXNldHRpbmdzLWJ1dHRvbi0tZm9jdXNlZHstd2Via2l0LWJveC1zaGFkb3c6aW5zZXQgMCAwIDAgMXB4IHJnYmEoNywxNjEsMjI3LC4wOCk7Ym94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggcmdiYSg3LDE2MSwyMjcsLjA4KTtiYWNrZ3JvdW5kOnJnYmEoMzQsMTg2LDI1NSwuMDgpIWltcG9ydGFudH0uY2R4LXNldHRpbmdzLWJ1dHRvbi0tZm9jdXNlZC1hbmltYXRlZHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJ1dHRvbkNsaWNrZWQ7YW5pbWF0aW9uLW5hbWU6YnV0dG9uQ2xpY2tlZDstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjouMjVzO2FuaW1hdGlvbi1kdXJhdGlvbjouMjVzfS5jZHgtc2V0dGluZ3MtYnV0dG9uOm5vdCg6bnRoLWNoaWxkKDNuKzMpKXttYXJnaW4tcmlnaHQ6M3B4fS5jZHgtc2V0dGluZ3MtYnV0dG9uOm50aC1jaGlsZChuKzQpe21hcmdpbi10b3A6M3B4fS5jZHgtc2V0dGluZ3MtYnV0dG9uLS1hY3RpdmV7Y29sb3I6IzM4OGFlNX0uY2R4LWxvYWRlcntwb3NpdGlvbjpyZWxhdGl2ZTtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KX0uY2R4LWxvYWRlcjpiZWZvcmV7Y29udGVudDpcIlwiO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3RvcDo1MCU7d2lkdGg6MThweDtoZWlnaHQ6MThweDttYXJnaW46LTExcHggMCAwIC0xMXB4O2JvcmRlcjoycHggc29saWQgcmdiYSgyMDEsMjAxLDIwNCwuNDgpO2JvcmRlci1sZWZ0LWNvbG9yOiMzODhhZTU7Ym9yZGVyLXJhZGl1czo1MCU7LXdlYmtpdC1hbmltYXRpb246Y2R4Um90YXRpb24gMS4ycyBsaW5lYXIgaW5maW5pdGU7YW5pbWF0aW9uOmNkeFJvdGF0aW9uIDEuMnMgbGluZWFyIGluZmluaXRlfUAtd2Via2l0LWtleWZyYW1lcyBjZHhSb3RhdGlvbnswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMXR1cm4pO3RyYW5zZm9ybTpyb3RhdGUoMXR1cm4pfX1Aa2V5ZnJhbWVzIGNkeFJvdGF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfXRvey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgxdHVybik7dHJhbnNmb3JtOnJvdGF0ZSgxdHVybil9fS5jZHgtYnV0dG9ue3BhZGRpbmc6MTNweDtib3JkZXItcmFkaXVzOjNweDtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTtmb250LXNpemU6MTQuOXB4O2JhY2tncm91bmQ6I2ZmZjstd2Via2l0LWJveC1zaGFkb3c6MCAycHggMnB4IDAgcmdiYSgxOCwzMCw1NywuMDQpO2JveC1zaGFkb3c6MCAycHggMnB4IDAgcmdiYSgxOCwzMCw1NywuMDQpO2NvbG9yOiM3MDc2ODQ7dGV4dC1hbGlnbjpjZW50ZXI7Y3Vyc29yOnBvaW50ZXJ9LmNkeC1idXR0b246aG92ZXJ7YmFja2dyb3VuZDojZmJmY2ZlOy13ZWJraXQtYm94LXNoYWRvdzowIDFweCAzcHggMCByZ2JhKDE4LDMwLDU3LC4wOCk7Ym94LXNoYWRvdzowIDFweCAzcHggMCByZ2JhKDE4LDMwLDU3LC4wOCl9LmNkeC1idXR0b24gc3Zne2hlaWdodDoyMHB4O21hcmdpbi1yaWdodDouMmVtO21hcmdpbi10b3A6LTJweH0uY2Utc3R1YntkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTtwYWRkaW5nOjMuNWVtIDA7bWFyZ2luOjE3cHggMDtib3JkZXItcmFkaXVzOjNweDtiYWNrZ3JvdW5kOiNmY2Y3Zjc7Y29sb3I6I2I0NjI2Mn0uY2Utc3R1Yl9faW5mb3ttYXJnaW4tbGVmdDoyMHB4fS5jZS1zdHViX190aXRsZXttYXJnaW4tYm90dG9tOjNweDtmb250LXdlaWdodDo2MDA7Zm9udC1zaXplOjE4cHg7dGV4dC10cmFuc2Zvcm06Y2FwaXRhbGl6ZX0uY2Utc3R1Yl9fc3VidGl0bGV7Zm9udC1zaXplOjE2cHh9LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bHtkaXJlY3Rpb246cnRsfS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNkeC1saXN0e3BhZGRpbmctbGVmdDowO3BhZGRpbmctcmlnaHQ6NDBweH0uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS10b29sYmFyX19wbHVze3JpZ2h0Oi0zNHB4O2xlZnQ6YXV0b30uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS10b29sYmFyX19hY3Rpb25ze3JpZ2h0OmF1dG87bGVmdDotMzRweH1AbWVkaWEgKG1heC13aWR0aDo2NTBweCl7LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2UtdG9vbGJhcl9fYWN0aW9uc3ttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDphdXRvO3BhZGRpbmctcmlnaHQ6MDtwYWRkaW5nLWxlZnQ6MTBweH19LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2Utc2V0dGluZ3N7bGVmdDo1cHg7cmlnaHQ6YXV0b30uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS1zZXR0aW5nczpiZWZvcmV7cmlnaHQ6YXV0bztsZWZ0OjI1cHh9LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2Utc2V0dGluZ3NfX2J1dHRvbjpub3QoOm50aC1jaGlsZCgzbiszKSl7bWFyZ2luLWxlZnQ6M3B4O21hcmdpbi1yaWdodDowfS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLWNvbnZlcnNpb24tdG9vbF9faWNvbnttYXJnaW4tcmlnaHQ6MDttYXJnaW4tbGVmdDoxMHB4fS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLWlubGluZS10b29sYmFyX19kcm9wZG93bntib3JkZXItcmlnaHQ6MCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItbGVmdDoxcHggc29saWQgcmdiYSgyMDEsMjAxLDIwNCwuNDgpO21hcmdpbjowIC02cHggMCA2cHh9LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duIC5pY29uLS10b2dnbGVyLWRvd257bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6NHB4fUBtZWRpYSAobWluLXdpZHRoOjY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cuY29kZXgtZWRpdG9yLS1ydGwgLmNlLXRvb2xiYXJfX3BsdXN7bGVmdDowO3JpZ2h0OjVweH19QG1lZGlhIChtaW4td2lkdGg6NjUxcHgpey5jb2RleC1lZGl0b3ItLW5hcnJvdy5jb2RleC1lZGl0b3ItLXJ0bCAuY2UtdG9vbGJhcl9fYWN0aW9uc3tsZWZ0Oi01cHh9fSd9XSl9KSk7IiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5FbWJlZD10KCk6ZS5FbWJlZD10KCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1uKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgaSBpbiBlKW4uZChyLGksZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxpKSk7cmV0dXJuIHJ9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsXCJhXCIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9XCIvXCIsbihuLnM9MTQpfShbZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oNSksaT1uKDYpLG89big3KSxhPW4oOSk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHIoZSl8fGkoZSx0KXx8byhlLHQpfHxhKCl9fSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIG4odCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2UuZXhwb3J0cz1uPWZ1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZS5leHBvcnRzPW49ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0sbih0KX1lLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0JiZuKGUucHJvdG90eXBlLHQpLHImJm4oZSxyKSxlfX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKGUsdCxuKXt2YXIgcixpLG8sYSxsO2Z1bmN0aW9uIGMoKXt2YXIgcz1EYXRlLm5vdygpLWE7czx0JiZzPj0wP3I9c2V0VGltZW91dChjLHQtcyk6KHI9bnVsbCxufHwobD1lLmFwcGx5KG8saSksbz1pPW51bGwpKX1udWxsPT10JiYodD0xMDApO3ZhciBzPWZ1bmN0aW9uKCl7bz10aGlzLGk9YXJndW1lbnRzLGE9RGF0ZS5ub3coKTt2YXIgcz1uJiYhcjtyZXR1cm4gcnx8KHI9c2V0VGltZW91dChjLHQpKSxzJiYobD1lLmFwcGx5KG8saSksbz1pPW51bGwpLGx9O3JldHVybiBzLmNsZWFyPWZ1bmN0aW9uKCl7ciYmKGNsZWFyVGltZW91dChyKSxyPW51bGwpfSxzLmZsdXNoPWZ1bmN0aW9uKCl7ciYmKGw9ZS5hcHBseShvLGkpLG89aT1udWxsLGNsZWFyVGltZW91dChyKSxyPW51bGwpfSxzfW4uZGVib3VuY2U9bixlLmV4cG9ydHM9bn0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZX19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChlKSl7dmFyIG49W10scj0hMCxpPSExLG89dm9pZCAwO3RyeXtmb3IodmFyIGEsbD1lW1N5bWJvbC5pdGVyYXRvcl0oKTshKHI9KGE9bC5uZXh0KCkpLmRvbmUpJiYobi5wdXNoKGEudmFsdWUpLCF0fHxuLmxlbmd0aCE9PXQpO3I9ITApO31jYXRjaChlKXtpPSEwLG89ZX1maW5hbGx5e3RyeXtyfHxudWxsPT1sLnJldHVybnx8bC5yZXR1cm4oKX1maW5hbGx5e2lmKGkpdGhyb3cgb319cmV0dXJuIG59fX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oOCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIHIoZSx0KTt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJPYmplY3RcIj09PW4mJmUuY29uc3RydWN0b3ImJihuPWUuY29uc3RydWN0b3IubmFtZSksXCJNYXBcIj09PW58fFwiU2V0XCI9PT1uP0FycmF5LmZyb20obik6XCJBcmd1bWVudHNcIj09PW58fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pP3IoZSx0KTp2b2lkIDB9fX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXsobnVsbD09dHx8dD5lLmxlbmd0aCkmJih0PWUubGVuZ3RoKTtmb3IodmFyIG49MCxyPW5ldyBBcnJheSh0KTtuPHQ7bisrKXJbbl09ZVtuXTtyZXR1cm4gcn19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDExKSxpPW4oMTIpO1wic3RyaW5nXCI9PXR5cGVvZihpPWkuX19lc01vZHVsZT9pLmRlZmF1bHQ6aSkmJihpPVtbZS5pLGksXCJcIl1dKTt2YXIgbz17aW5zZXJ0OlwiaGVhZFwiLHNpbmdsZXRvbjohMX07cihpLG8pO2UuZXhwb3J0cz1pLmxvY2Fsc3x8e319LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjt2YXIgcixpPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PXImJihyPUJvb2xlYW4od2luZG93JiZkb2N1bWVudCYmZG9jdW1lbnQuYWxsJiYhd2luZG93LmF0b2IpKSxyfSxvPWZ1bmN0aW9uKCl7dmFyIGU9e307cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09PWVbdF0pe3ZhciBuPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCk7aWYod2luZG93LkhUTUxJRnJhbWVFbGVtZW50JiZuIGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KXRyeXtuPW4uY29udGVudERvY3VtZW50LmhlYWR9Y2F0Y2goZSl7bj1udWxsfWVbdF09bn1yZXR1cm4gZVt0XX19KCksYT1bXTtmdW5jdGlvbiBsKGUpe2Zvcih2YXIgdD0tMSxuPTA7bjxhLmxlbmd0aDtuKyspaWYoYVtuXS5pZGVudGlmaWVyPT09ZSl7dD1uO2JyZWFrfXJldHVybiB0fWZ1bmN0aW9uIGMoZSx0KXtmb3IodmFyIG49e30scj1bXSxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciBvPWVbaV0sYz10LmJhc2U/b1swXSt0LmJhc2U6b1swXSxzPW5bY118fDAsZD1cIlwiLmNvbmNhdChjLFwiIFwiKS5jb25jYXQocyk7bltjXT1zKzE7dmFyIHU9bChkKSxoPXtjc3M6b1sxXSxtZWRpYTpvWzJdLHNvdXJjZU1hcDpvWzNdfTstMSE9PXU/KGFbdV0ucmVmZXJlbmNlcysrLGFbdV0udXBkYXRlcihoKSk6YS5wdXNoKHtpZGVudGlmaWVyOmQsdXBkYXRlcjpiKGgsdCkscmVmZXJlbmNlczoxfSksci5wdXNoKGQpfXJldHVybiByfWZ1bmN0aW9uIHMoZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLHI9ZS5hdHRyaWJ1dGVzfHx7fTtpZih2b2lkIDA9PT1yLm5vbmNlKXt2YXIgaT1uLm5jO2kmJihyLm5vbmNlPWkpfWlmKE9iamVjdC5rZXlzKHIpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3Quc2V0QXR0cmlidXRlKGUscltlXSl9KSksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5pbnNlcnQpZS5pbnNlcnQodCk7ZWxzZXt2YXIgYT1vKGUuaW5zZXJ0fHxcImhlYWRcIik7aWYoIWEpdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTthLmFwcGVuZENoaWxkKHQpfXJldHVybiB0fXZhciBkLHU9KGQ9W10sZnVuY3Rpb24oZSx0KXtyZXR1cm4gZFtlXT10LGQuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIil9KTtmdW5jdGlvbiBoKGUsdCxuLHIpe3ZhciBpPW4/XCJcIjpyLm1lZGlhP1wiQG1lZGlhIFwiLmNvbmNhdChyLm1lZGlhLFwiIHtcIikuY29uY2F0KHIuY3NzLFwifVwiKTpyLmNzcztpZihlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9dSh0LGkpO2Vsc2V7dmFyIG89ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoaSksYT1lLmNoaWxkTm9kZXM7YVt0XSYmZS5yZW1vdmVDaGlsZChhW3RdKSxhLmxlbmd0aD9lLmluc2VydEJlZm9yZShvLGFbdF0pOmUuYXBwZW5kQ2hpbGQobyl9fWZ1bmN0aW9uIGYoZSx0LG4pe3ZhciByPW4uY3NzLGk9bi5tZWRpYSxvPW4uc291cmNlTWFwO2lmKGk/ZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLGkpOmUucmVtb3ZlQXR0cmlidXRlKFwibWVkaWFcIiksbyYmYnRvYSYmKHIrPVwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkobykpKSksXCIgKi9cIikpLGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD1yO2Vsc2V7Zm9yKDtlLmZpcnN0Q2hpbGQ7KWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKTtlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpKX19dmFyIG09bnVsbCxwPTA7ZnVuY3Rpb24gYihlLHQpe3ZhciBuLHIsaTtpZih0LnNpbmdsZXRvbil7dmFyIG89cCsrO249bXx8KG09cyh0KSkscj1oLmJpbmQobnVsbCxuLG8sITEpLGk9aC5iaW5kKG51bGwsbixvLCEwKX1lbHNlIG49cyh0KSxyPWYuYmluZChudWxsLG4sdCksaT1mdW5jdGlvbigpeyFmdW5jdGlvbihlKXtpZihudWxsPT09ZS5wYXJlbnROb2RlKXJldHVybiExO2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKX0obil9O3JldHVybiByKGUpLGZ1bmN0aW9uKHQpe2lmKHQpe2lmKHQuY3NzPT09ZS5jc3MmJnQubWVkaWE9PT1lLm1lZGlhJiZ0LnNvdXJjZU1hcD09PWUuc291cmNlTWFwKXJldHVybjtyKGU9dCl9ZWxzZSBpKCl9fWUuZXhwb3J0cz1mdW5jdGlvbihlLHQpeyh0PXR8fHt9KS5zaW5nbGV0b258fFwiYm9vbGVhblwiPT10eXBlb2YgdC5zaW5nbGV0b258fCh0LnNpbmdsZXRvbj1pKCkpO3ZhciBuPWMoZT1lfHxbXSx0KTtyZXR1cm4gZnVuY3Rpb24oZSl7aWYoZT1lfHxbXSxcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkpe2Zvcih2YXIgcj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgaT1sKG5bcl0pO2FbaV0ucmVmZXJlbmNlcy0tfWZvcih2YXIgbz1jKGUsdCkscz0wO3M8bi5sZW5ndGg7cysrKXt2YXIgZD1sKG5bc10pOzA9PT1hW2RdLnJlZmVyZW5jZXMmJihhW2RdLnVwZGF0ZXIoKSxhLnNwbGljZShkLDEpKX1uPW99fX19LGZ1bmN0aW9uKGUsdCxuKXsodD1uKDEzKSghMSkpLnB1c2goW2UuaSxcIi5lbWJlZC10b29sLS1sb2FkaW5nIC5lbWJlZC10b29sX19jYXB0aW9uIHtcXG4gICAgICBkaXNwbGF5OiBub25lO1xcbiAgICB9XFxuXFxuICAgIC5lbWJlZC10b29sLS1sb2FkaW5nIC5lbWJlZC10b29sX19wcmVsb2FkZXIge1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB9XFxuXFxuICAgIC5lbWJlZC10b29sLS1sb2FkaW5nIC5lbWJlZC10b29sX19jb250ZW50IHtcXG4gICAgICBkaXNwbGF5OiBub25lO1xcbiAgICB9XFxuICAuZW1iZWQtdG9vbF9fcHJlbG9hZGVyIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBoZWlnaHQ6IDIwMHB4O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNlNmU5ZWI7XFxuICB9XFxuICAuZW1iZWQtdG9vbF9fcHJlbG9hZGVyOjpiZWZvcmUge1xcbiAgICAgIGNvbnRlbnQ6ICcnO1xcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICB6LWluZGV4OiAzO1xcbiAgICAgIGxlZnQ6IDUwJTtcXG4gICAgICB0b3A6IDUwJTtcXG4gICAgICB3aWR0aDogMzBweDtcXG4gICAgICBoZWlnaHQ6IDMwcHg7XFxuICAgICAgbWFyZ2luLXRvcDogLTI1cHg7XFxuICAgICAgbWFyZ2luLWxlZnQ6IC0xNXB4O1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gICAgICBib3JkZXI6IDJweCBzb2xpZCAjY2RkMWUwO1xcbiAgICAgIGJvcmRlci10b3AtY29sb3I6ICMzODhhZTU7XFxuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICBhbmltYXRpb246IGVtYmVkLXByZWxvYWRlci1zcGluIDJzIGluZmluaXRlIGxpbmVhcjtcXG4gICAgfVxcbiAgLmVtYmVkLXRvb2xfX3VybCB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgYm90dG9tOiAyMHB4O1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG4gICAgbWF4LXdpZHRoOiAyNTBweDtcXG4gICAgY29sb3I6ICM3YjdlODk7XFxuICAgIGZvbnQtc2l6ZTogMTFweDtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB9XFxuICAuZW1iZWQtdG9vbF9fY29udGVudCB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgfVxcbiAgLmVtYmVkLXRvb2xfX2NhcHRpb24ge1xcbiAgICBtYXJnaW4tdG9wOiA3cHg7XFxuICB9XFxuICAuZW1iZWQtdG9vbF9fY2FwdGlvbltjb250ZW50RWRpdGFibGU9dHJ1ZV1bZGF0YS1wbGFjZWhvbGRlcl06OmJlZm9yZXtcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgY29udGVudDogYXR0cihkYXRhLXBsYWNlaG9sZGVyKTtcXG4gICAgICBjb2xvcjogIzcwNzY4NDtcXG4gICAgICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgICAgIG9wYWNpdHk6IDA7XFxuICAgIH1cXG4gIC5lbWJlZC10b29sX19jYXB0aW9uW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTo6YmVmb3JlIHtcXG4gICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICAgIH1cXG4gIC5lbWJlZC10b29sX19jYXB0aW9uW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTpmb2N1czo6YmVmb3JlIHtcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgfVxcblxcbkBrZXlmcmFtZXMgZW1iZWQtcHJlbG9hZGVyLXNwaW4ge1xcbiAgMCUge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbiAgfVxcbn1cXG5cIixcIlwiXSksZS5leHBvcnRzPXR9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107cmV0dXJuIHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBuPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZVsxXXx8XCJcIixyPWVbM107aWYoIXIpcmV0dXJuIG47aWYodCYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYSl7dmFyIGk9KGE9cixsPWJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGEpKSkpLGM9XCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQobCksXCIvKiMgXCIuY29uY2F0KGMsXCIgKi9cIikpLG89ci5zb3VyY2VzLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChyLnNvdXJjZVJvb3R8fFwiXCIpLmNvbmNhdChlLFwiICovXCIpfSkpO3JldHVybltuXS5jb25jYXQobykuY29uY2F0KFtpXSkuam9pbihcIlxcblwiKX12YXIgYSxsLGM7cmV0dXJuW25dLmpvaW4oXCJcXG5cIil9KHQsZSk7cmV0dXJuIHRbMl0/XCJAbWVkaWEgXCIuY29uY2F0KHRbMl0sXCIge1wiKS5jb25jYXQobixcIn1cIik6bn0pKS5qb2luKFwiXCIpfSx0Lmk9ZnVuY3Rpb24oZSxuLHIpe1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1bW251bGwsZSxcIlwiXV0pO3ZhciBpPXt9O2lmKHIpZm9yKHZhciBvPTA7bzx0aGlzLmxlbmd0aDtvKyspe3ZhciBhPXRoaXNbb11bMF07bnVsbCE9YSYmKGlbYV09ITApfWZvcih2YXIgbD0wO2w8ZS5sZW5ndGg7bCsrKXt2YXIgYz1bXS5jb25jYXQoZVtsXSk7ciYmaVtjWzBdXXx8KG4mJihjWzJdP2NbMl09XCJcIi5jb25jYXQobixcIiBhbmQgXCIpLmNvbmNhdChjWzJdKTpjWzJdPW4pLHQucHVzaChjKSl9fSx0fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO24ucih0KSxuLmQodCxcImRlZmF1bHRcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZn0pKTt2YXIgcj1uKDEpLGk9bi5uKHIpLG89bigwKSxhPW4ubihvKSxsPW4oMiksYz1uLm4obCkscz1uKDMpLGQ9bi5uKHMpLHU9e3ZpbWVvOntyZWdleDovKD86aHR0cFtzXT86XFwvXFwvKT8oPzp3d3cuKT92aW1lb1xcLmNvKD86LitcXC8oW15cXC9dXFxkKykoPzojdD1bXFxkXSspP3M/JCkvLGVtYmVkVXJsOlwiaHR0cHM6Ly9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLzwlPSByZW1vdGVfaWQgJT4/dGl0bGU9MCZieWxpbmU9MFwiLGh0bWw6JzxpZnJhbWUgc3R5bGU9XCJ3aWR0aDoxMDAlO1wiIGhlaWdodD1cIjMyMFwiIGZyYW1lYm9yZGVyPVwiMFwiPjwvaWZyYW1lPicsaGVpZ2h0OjMyMCx3aWR0aDo1ODB9LHlvdXR1YmU6e3JlZ2V4Oi8oPzpodHRwcz86XFwvXFwvKT8oPzp3d3dcXC4pPyg/Oig/OnlvdXR1XFwuYmVcXC8pfCg/OnlvdXR1YmVcXC5jb20pXFwvKD86dlxcL3x1XFwvXFx3XFwvfGVtYmVkXFwvfHdhdGNoKSkoPzooPzpcXD92PSk/KFteIyY/PV0qKSk/KCg/Ols/Jl1cXHcqPVxcdyopKikvLGVtYmVkVXJsOlwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvPCU9IHJlbW90ZV9pZCAlPlwiLGh0bWw6JzxpZnJhbWUgc3R5bGU9XCJ3aWR0aDoxMDAlO1wiIGhlaWdodD1cIjMyMFwiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nLGhlaWdodDozMjAsd2lkdGg6NTgwLGlkOmZ1bmN0aW9uKGUpe3ZhciB0PWEoKShlLDIpLG49dFswXSxyPXRbMV07aWYoIXImJm4pcmV0dXJuIG47dmFyIGk9e3N0YXJ0Olwic3RhcnRcIixlbmQ6XCJlbmRcIix0Olwic3RhcnRcIix0aW1lX2NvbnRpbnVlOlwic3RhcnRcIixsaXN0OlwibGlzdFwifTtyZXR1cm4gcj1yLnNsaWNlKDEpLnNwbGl0KFwiJlwiKS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PWUuc3BsaXQoXCI9XCIpLHI9YSgpKHQsMiksbz1yWzBdLGw9clsxXTtpZihufHxcInZcIiE9PW8pe2lmKGlbb10pcmV0dXJuXCJcIi5jb25jYXQoaVtvXSxcIj1cIikuY29uY2F0KGwpfWVsc2Ugbj1sfSkpLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuISFlfSkpLG4rXCI/XCIrci5qb2luKFwiJlwiKX19LGNvdWI6e3JlZ2V4Oi9odHRwcz86XFwvXFwvY291YlxcLmNvbVxcL3ZpZXdcXC8oW15cXC9cXD9cXCZdKykvLGVtYmVkVXJsOlwiaHR0cHM6Ly9jb3ViLmNvbS9lbWJlZC88JT0gcmVtb3RlX2lkICU+XCIsaHRtbDonPGlmcmFtZSBzdHlsZT1cIndpZHRoOjEwMCU7XCIgaGVpZ2h0PVwiMzIwXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPicsaGVpZ2h0OjMyMCx3aWR0aDo1ODB9LHZpbmU6e3JlZ2V4Oi9odHRwcz86XFwvXFwvdmluZVxcLmNvXFwvdlxcLyhbXlxcL1xcP1xcJl0rKS8sZW1iZWRVcmw6XCJodHRwczovL3ZpbmUuY28vdi88JT0gcmVtb3RlX2lkICU+L2VtYmVkL3NpbXBsZS9cIixodG1sOic8aWZyYW1lIHN0eWxlPVwid2lkdGg6MTAwJTtcIiBoZWlnaHQ9XCIzMjBcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+JyxoZWlnaHQ6MzIwLHdpZHRoOjU4MH0saW1ndXI6e3JlZ2V4Oi9odHRwcz86XFwvXFwvKD86aVxcLik/aW1ndXJcXC5jb20uKlxcLyhbYS16QS1aMC05XSspKD86XFwuZ2lmdik/LyxlbWJlZFVybDpcImh0dHA6Ly9pbWd1ci5jb20vPCU9IHJlbW90ZV9pZCAlPi9lbWJlZFwiLGh0bWw6JzxpZnJhbWUgYWxsb3dmdWxsc2NyZWVuPVwidHJ1ZVwiIHNjcm9sbGluZz1cIm5vXCIgaWQ9XCJpbWd1ci1lbWJlZC1pZnJhbWUtcHViLTwlPSByZW1vdGVfaWQgJT5cIiBjbGFzcz1cImltZ3VyLWVtYmVkLWlmcmFtZS1wdWJcIiBzdHlsZT1cImhlaWdodDogNTAwcHg7IHdpZHRoOiAxMDAlOyBib3JkZXI6IDFweCBzb2xpZCAjMDAwXCI+PC9pZnJhbWU+JyxoZWlnaHQ6NTAwLHdpZHRoOjU0MH0sZ2Z5Y2F0OntyZWdleDovaHR0cHM/OlxcL1xcL2dmeWNhdFxcLmNvbSg/OlxcL2RldGFpbCk/XFwvKFthLXpBLVpdKykvLGVtYmVkVXJsOlwiaHR0cHM6Ly9nZnljYXQuY29tL2lmci88JT0gcmVtb3RlX2lkICU+XCIsaHRtbDpcIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHNjcm9sbGluZz0nbm8nIHN0eWxlPVxcXCJ3aWR0aDoxMDAlO1xcXCIgaGVpZ2h0PSc0MzYnIGFsbG93ZnVsbHNjcmVlbiA+PC9pZnJhbWU+XCIsaGVpZ2h0OjQzNix3aWR0aDo1ODB9LFwidHdpdGNoLWNoYW5uZWxcIjp7cmVnZXg6L2h0dHBzPzpcXC9cXC93d3dcXC50d2l0Y2hcXC50dlxcLyhbXlxcL1xcP1xcJl0qKVxcLz8kLyxlbWJlZFVybDpcImh0dHBzOi8vcGxheWVyLnR3aXRjaC50di8/Y2hhbm5lbD08JT0gcmVtb3RlX2lkICU+XCIsaHRtbDonPGlmcmFtZSBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW49XCJ0cnVlXCIgc2Nyb2xsaW5nPVwibm9cIiBoZWlnaHQ9XCIzNjZcIiBzdHlsZT1cIndpZHRoOjEwMCU7XCI+PC9pZnJhbWU+JyxoZWlnaHQ6MzY2LHdpZHRoOjYwMH0sXCJ0d2l0Y2gtdmlkZW9cIjp7cmVnZXg6L2h0dHBzPzpcXC9cXC93d3dcXC50d2l0Y2hcXC50dlxcLyg/OlteXFwvXFw/XFwmXSpcXC92fHZpZGVvcylcXC8oWzAtOV0qKS8sZW1iZWRVcmw6XCJodHRwczovL3BsYXllci50d2l0Y2gudHYvP3ZpZGVvPXY8JT0gcmVtb3RlX2lkICU+XCIsaHRtbDonPGlmcmFtZSBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW49XCJ0cnVlXCIgc2Nyb2xsaW5nPVwibm9cIiBoZWlnaHQ9XCIzNjZcIiBzdHlsZT1cIndpZHRoOjEwMCU7XCI+PC9pZnJhbWU+JyxoZWlnaHQ6MzY2LHdpZHRoOjYwMH0sXCJ5YW5kZXgtbXVzaWMtYWxidW1cIjp7cmVnZXg6L2h0dHBzPzpcXC9cXC9tdXNpY1xcLnlhbmRleFxcLnJ1XFwvYWxidW1cXC8oWzAtOV0qKVxcLz8kLyxlbWJlZFVybDpcImh0dHBzOi8vbXVzaWMueWFuZGV4LnJ1L2lmcmFtZS8jYWxidW0vPCU9IHJlbW90ZV9pZCAlPi9cIixodG1sOic8aWZyYW1lIGZyYW1lYm9yZGVyPVwiMFwiIHN0eWxlPVwiYm9yZGVyOm5vbmU7d2lkdGg6NTQwcHg7aGVpZ2h0OjQwMHB4O1wiIHN0eWxlPVwid2lkdGg6MTAwJTtcIiBoZWlnaHQ9XCI0MDBcIj48L2lmcmFtZT4nLGhlaWdodDo0MDAsd2lkdGg6NTQwfSxcInlhbmRleC1tdXNpYy10cmFja1wiOntyZWdleDovaHR0cHM/OlxcL1xcL211c2ljXFwueWFuZGV4XFwucnVcXC9hbGJ1bVxcLyhbMC05XSopXFwvdHJhY2tcXC8oWzAtOV0qKS8sZW1iZWRVcmw6XCJodHRwczovL211c2ljLnlhbmRleC5ydS9pZnJhbWUvI3RyYWNrLzwlPSByZW1vdGVfaWQgJT4vXCIsaHRtbDonPGlmcmFtZSBmcmFtZWJvcmRlcj1cIjBcIiBzdHlsZT1cImJvcmRlcjpub25lO3dpZHRoOjU0MHB4O2hlaWdodDoxMDBweDtcIiBzdHlsZT1cIndpZHRoOjEwMCU7XCIgaGVpZ2h0PVwiMTAwXCI+PC9pZnJhbWU+JyxoZWlnaHQ6MTAwLHdpZHRoOjU0MCxpZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5qb2luKFwiL1wiKX19LFwieWFuZGV4LW11c2ljLXBsYXlsaXN0XCI6e3JlZ2V4Oi9odHRwcz86XFwvXFwvbXVzaWNcXC55YW5kZXhcXC5ydVxcL3VzZXJzXFwvKFteXFwvXFw/XFwmXSopXFwvcGxheWxpc3RzXFwvKFswLTldKikvLGVtYmVkVXJsOlwiaHR0cHM6Ly9tdXNpYy55YW5kZXgucnUvaWZyYW1lLyNwbGF5bGlzdC88JT0gcmVtb3RlX2lkICU+L3Nob3cvY292ZXIvZGVzY3JpcHRpb24vXCIsaHRtbDonPGlmcmFtZSBmcmFtZWJvcmRlcj1cIjBcIiBzdHlsZT1cImJvcmRlcjpub25lO3dpZHRoOjU0MHB4O2hlaWdodDo0MDBweDtcIiB3aWR0aD1cIjU0MFwiIGhlaWdodD1cIjQwMFwiPjwvaWZyYW1lPicsaGVpZ2h0OjQwMCx3aWR0aDo1NDAsaWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuam9pbihcIi9cIil9fSxjb2RlcGVuOntyZWdleDovaHR0cHM/OlxcL1xcL2NvZGVwZW5cXC5pb1xcLyhbXlxcL1xcP1xcJl0qKVxcL3BlblxcLyhbXlxcL1xcP1xcJl0qKS8sZW1iZWRVcmw6XCJodHRwczovL2NvZGVwZW4uaW8vPCU9IHJlbW90ZV9pZCAlPj9oZWlnaHQ9MzAwJnRoZW1lLWlkPTAmZGVmYXVsdC10YWI9Y3NzLHJlc3VsdCZlbWJlZC12ZXJzaW9uPTJcIixodG1sOlwiPGlmcmFtZSBoZWlnaHQ9JzMwMCcgc2Nyb2xsaW5nPSdubycgZnJhbWVib3JkZXI9J25vJyBhbGxvd3RyYW5zcGFyZW5jeT0ndHJ1ZScgYWxsb3dmdWxsc2NyZWVuPSd0cnVlJyBzdHlsZT0nd2lkdGg6IDEwMCU7Jz48L2lmcmFtZT5cIixoZWlnaHQ6MzAwLHdpZHRoOjYwMCxpZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5qb2luKFwiL2VtYmVkL1wiKX19LGluc3RhZ3JhbTp7cmVnZXg6L2h0dHBzPzpcXC9cXC93d3dcXC5pbnN0YWdyYW1cXC5jb21cXC9wXFwvKFteXFwvXFw/XFwmXSspXFwvPy8sZW1iZWRVcmw6XCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3AvPCU9IHJlbW90ZV9pZCAlPi9lbWJlZFwiLGh0bWw6JzxpZnJhbWUgd2lkdGg9XCI0MDBcIiBoZWlnaHQ9XCI1MDVcIiBzdHlsZT1cIm1hcmdpbjogMCBhdXRvO1wiIGZyYW1lYm9yZGVyPVwiMFwiIHNjcm9sbGluZz1cIm5vXCIgYWxsb3d0cmFuc3BhcmVuY3k9XCJ0cnVlXCI+PC9pZnJhbWU+JyxoZWlnaHQ6NTA1LHdpZHRoOjQwMH0sdHdpdHRlcjp7cmVnZXg6L15odHRwcz86XFwvXFwvdHdpdHRlclxcLmNvbVxcLyg/OiMhXFwvKT8oXFx3KylcXC9zdGF0dXMoPzplcyk/XFwvKFxcZCspKD86XFwvLiopPyQvLGVtYmVkVXJsOlwiaHR0cHM6Ly90d2l0ZnJhbWUuY29tL3Nob3c/dXJsPWh0dHBzOi8vdHdpdHRlci5jb20vPCU9IHJlbW90ZV9pZCAlPlwiLGh0bWw6JzxpZnJhbWUgd2lkdGg9XCI2MDBcIiBoZWlnaHQ9XCI2MDBcIiBzdHlsZT1cIm1hcmdpbjogMCBhdXRvO1wiIGZyYW1lYm9yZGVyPVwiMFwiIHNjcm9sbGluZz1cIm5vXCIgYWxsb3d0cmFuc3BhcmVuY3k9XCJ0cnVlXCI+PC9pZnJhbWU+JyxoZWlnaHQ6MzAwLHdpZHRoOjYwMCxpZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5qb2luKFwiL3N0YXR1cy9cIil9fX0saD0obigxMCksbig0KSksZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7dmFyIG49dC5kYXRhLHI9dC5hcGksaT10LnJlYWRPbmx5O2MoKSh0aGlzLGUpLHRoaXMuYXBpPXIsdGhpcy5fZGF0YT17fSx0aGlzLmVsZW1lbnQ9bnVsbCx0aGlzLnJlYWRPbmx5PWksdGhpcy5kYXRhPW59cmV0dXJuIGQoKShlLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCF0aGlzLmRhdGEuc2VydmljZSl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtyZXR1cm4gdGhpcy5lbGVtZW50PW4sbn12YXIgcj1lLnNlcnZpY2VzW3RoaXMuZGF0YS5zZXJ2aWNlXS5odG1sLGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIiksbD10aGlzLmNyZWF0ZVByZWxvYWRlcigpO2kuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5iYXNlQ2xhc3MsdGhpcy5DU1MuY29udGFpbmVyLHRoaXMuQ1NTLmNvbnRhaW5lckxvYWRpbmcpLG8uY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5pbnB1dCx0aGlzLkNTUy5jYXB0aW9uKSxpLmFwcGVuZENoaWxkKGwpLG8uY29udGVudEVkaXRhYmxlPSF0aGlzLnJlYWRPbmx5LG8uZGF0YXNldC5wbGFjZWhvbGRlcj1cIkVudGVyIGEgY2FwdGlvblwiLG8uaW5uZXJIVE1MPXRoaXMuZGF0YS5jYXB0aW9ufHxcIlwiLGEuaW5uZXJIVE1MPXIsYS5jb250ZW50LmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwic3JjXCIsdGhpcy5kYXRhLmVtYmVkKSxhLmNvbnRlbnQuZmlyc3RDaGlsZC5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmNvbnRlbnQpO3ZhciBjPXRoaXMuZW1iZWRJc1JlYWR5KGkpO3JldHVybiBpLmFwcGVuZENoaWxkKGEuY29udGVudC5maXJzdENoaWxkKSxpLmFwcGVuZENoaWxkKG8pLGMudGhlbigoZnVuY3Rpb24oKXtpLmNsYXNzTGlzdC5yZW1vdmUodC5DU1MuY29udGFpbmVyTG9hZGluZyl9KSksdGhpcy5lbGVtZW50PWksaX19LHtrZXk6XCJjcmVhdGVQcmVsb2FkZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwcmVsb2FkZXJcIiksdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiB0LnRleHRDb250ZW50PXRoaXMuZGF0YS5zb3VyY2UsZS5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLnByZWxvYWRlciksdC5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLnVybCksZS5hcHBlbmRDaGlsZCh0KSxlfX0se2tleTpcInNhdmVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGF9fSx7a2V5Olwib25QYXN0ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBuPXQuZGV0YWlsLHI9bi5rZXksaT1uLmRhdGEsbz1lLnNlcnZpY2VzW3JdLGE9by5yZWdleCxsPW8uZW1iZWRVcmwsYz1vLndpZHRoLHM9by5oZWlnaHQsZD1vLmlkLHU9dm9pZCAwPT09ZD9mdW5jdGlvbihlKXtyZXR1cm4gZS5zaGlmdCgpfTpkLGg9YS5leGVjKGkpLnNsaWNlKDEpLGY9bC5yZXBsYWNlKC88XFwlXFw9IHJlbW90ZVxcX2lkIFxcJVxcPi9nLHUoaCkpO3RoaXMuZGF0YT17c2VydmljZTpyLHNvdXJjZTppLGVtYmVkOmYsd2lkdGg6YyxoZWlnaHQ6c319fSx7a2V5OlwiZW1iZWRJc1JlYWR5XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9bnVsbDtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4scil7KHQ9bmV3IE11dGF0aW9uT2JzZXJ2ZXIoT2JqZWN0KGguZGVib3VuY2UpKG4sNDUwKSkpLm9ic2VydmUoZSx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KX0pKS50aGVuKChmdW5jdGlvbigpe3QuZGlzY29ubmVjdCgpfSkpfX0se2tleTpcImRhdGFcIixzZXQ6ZnVuY3Rpb24oZSl7aWYoIShlIGluc3RhbmNlb2YgT2JqZWN0KSl0aHJvdyBFcnJvcihcIkVtYmVkIFRvb2wgZGF0YSBzaG91bGQgYmUgb2JqZWN0XCIpO3ZhciB0PWUuc2VydmljZSxuPWUuc291cmNlLHI9ZS5lbWJlZCxpPWUud2lkdGgsbz1lLmhlaWdodCxhPWUuY2FwdGlvbixsPXZvaWQgMD09PWE/XCJcIjphO3RoaXMuX2RhdGE9e3NlcnZpY2U6dHx8dGhpcy5kYXRhLnNlcnZpY2Usc291cmNlOm58fHRoaXMuZGF0YS5zb3VyY2UsZW1iZWQ6cnx8dGhpcy5kYXRhLmVtYmVkLHdpZHRoOml8fHRoaXMuZGF0YS53aWR0aCxoZWlnaHQ6b3x8dGhpcy5kYXRhLmhlaWdodCxjYXB0aW9uOmx8fHRoaXMuZGF0YS5jYXB0aW9ufHxcIlwifTt2YXIgYz10aGlzLmVsZW1lbnQ7YyYmYy5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0aGlzLnJlbmRlcigpLGMpfSxnZXQ6ZnVuY3Rpb24oKXtpZih0aGlzLmVsZW1lbnQpe3ZhciBlPXRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdCh0aGlzLmFwaS5zdHlsZXMuaW5wdXQpKTt0aGlzLl9kYXRhLmNhcHRpb249ZT9lLmlubmVySFRNTDpcIlwifXJldHVybiB0aGlzLl9kYXRhfX0se2tleTpcIkNTU1wiLGdldDpmdW5jdGlvbigpe3JldHVybntiYXNlQ2xhc3M6dGhpcy5hcGkuc3R5bGVzLmJsb2NrLGlucHV0OnRoaXMuYXBpLnN0eWxlcy5pbnB1dCxjb250YWluZXI6XCJlbWJlZC10b29sXCIsY29udGFpbmVyTG9hZGluZzpcImVtYmVkLXRvb2wtLWxvYWRpbmdcIixwcmVsb2FkZXI6XCJlbWJlZC10b29sX19wcmVsb2FkZXJcIixjYXB0aW9uOlwiZW1iZWQtdG9vbF9fY2FwdGlvblwiLHVybDpcImVtYmVkLXRvb2xfX3VybFwiLGNvbnRlbnQ6XCJlbWJlZC10b29sX19jb250ZW50XCJ9fX1dLFt7a2V5OlwicHJlcGFyZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBuPXQuY29uZmlnLHI9KHZvaWQgMD09PW4/e306bikuc2VydmljZXMsbz12b2lkIDA9PT1yP3t9OnIsbD1PYmplY3QuZW50cmllcyh1KSxjPU9iamVjdC5lbnRyaWVzKG8pLmZpbHRlcigoZnVuY3Rpb24oZSl7dmFyIHQ9YSgpKGUsMiksbj0odFswXSx0WzFdKTtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIG4mJiEwPT09bn0pKS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiBhKCkoZSwxKVswXX0pKSxzPU9iamVjdC5lbnRyaWVzKG8pLmZpbHRlcigoZnVuY3Rpb24oZSl7dmFyIHQ9YSgpKGUsMiksbj0odFswXSx0WzFdKTtyZXR1cm5cIm9iamVjdFwiPT09aSgpKG4pfSkpLmZpbHRlcigoZnVuY3Rpb24odCl7dmFyIG49YSgpKHQsMikscj0oblswXSxuWzFdKTtyZXR1cm4gZS5jaGVja1NlcnZpY2VDb25maWcocil9KSkubWFwKChmdW5jdGlvbihlKXt2YXIgdD1hKCkoZSwyKSxuPXRbMF0scj10WzFdO3JldHVybltuLHtyZWdleDpyLnJlZ2V4LGVtYmVkVXJsOnIuZW1iZWRVcmwsaHRtbDpyLmh0bWwsaGVpZ2h0OnIuaGVpZ2h0LHdpZHRoOnIud2lkdGgsaWQ6ci5pZH1dfSkpO2MubGVuZ3RoJiYobD1sLmZpbHRlcigoZnVuY3Rpb24oZSl7dmFyIHQ9YSgpKGUsMSlbMF07cmV0dXJuIGMuaW5jbHVkZXModCl9KSkpLGw9bC5jb25jYXQocyksZS5zZXJ2aWNlcz1sLnJlZHVjZSgoZnVuY3Rpb24oZSx0KXt2YXIgbj1hKCkodCwyKSxyPW5bMF0saT1uWzFdO3JldHVybiByIGluIGU/KGVbcl09T2JqZWN0LmFzc2lnbih7fSxlW3JdLGkpLGUpOihlW3JdPWksZSl9KSx7fSksZS5wYXR0ZXJucz1sLnJlZHVjZSgoZnVuY3Rpb24oZSx0KXt2YXIgbj1hKCkodCwyKSxyPW5bMF0saT1uWzFdO3JldHVybiBlW3JdPWkucmVnZXgsZX0pLHt9KX19LHtrZXk6XCJjaGVja1NlcnZpY2VDb25maWdcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJlZ2V4LG49ZS5lbWJlZFVybCxyPWUuaHRtbCxpPWUuaGVpZ2h0LG89ZS53aWR0aCxhPWUuaWQsbD10JiZ0IGluc3RhbmNlb2YgUmVnRXhwJiZuJiZcInN0cmluZ1wiPT10eXBlb2YgbiYmciYmXCJzdHJpbmdcIj09dHlwZW9mIHI7cmV0dXJuIGw9KGw9KGw9bCYmKHZvaWQgMD09PWF8fGEgaW5zdGFuY2VvZiBGdW5jdGlvbikpJiYodm9pZCAwPT09aXx8TnVtYmVyLmlzRmluaXRlKGkpKSkmJih2b2lkIDA9PT1vfHxOdW1iZXIuaXNGaW5pdGUobykpfX0se2tleTpcInBhc3RlQ29uZmlnXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue3BhdHRlcm5zOmUucGF0dGVybnN9fX0se2tleTpcImlzUmVhZE9ubHlTdXBwb3J0ZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH19XSksZX0oKX1dKS5kZWZhdWx0fSkpOyIsIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuSGVhZGVyPXQoKTplLkhlYWRlcj10KCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1uKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgaSBpbiBlKW4uZChyLGksZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxpKSk7cmV0dXJuIHJ9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsXCJhXCIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9XCIvXCIsbihuLnM9MCl9KFtmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gcihlKXtyZXR1cm4ocj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSkoZSl9ZnVuY3Rpb24gaShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19bigxKS50b1N0cmluZygpO1xuLyoqXG4gKiBIZWFkZXIgYmxvY2sgZm9yIHRoZSBFZGl0b3IuanMuXG4gKlxuICogQGF1dGhvciBDb2RlWCAodGVhbUBpZm1vLnN1KVxuICogQGNvcHlyaWdodCBDb2RlWCAyMDE4XG4gKiBAbGljZW5zZSBNSVRcbiAqIEB2ZXJzaW9uIDIuMC4wXG4gKi9cbnZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXt2YXIgbj10LmRhdGEscj10LmNvbmZpZyxpPXQuYXBpLGE9dC5yZWFkT25seTshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMuYXBpPWksdGhpcy5yZWFkT25seT1hLHRoaXMuX0NTUz17YmxvY2s6dGhpcy5hcGkuc3R5bGVzLmJsb2NrLHNldHRpbmdzQnV0dG9uOnRoaXMuYXBpLnN0eWxlcy5zZXR0aW5nc0J1dHRvbixzZXR0aW5nc0J1dHRvbkFjdGl2ZTp0aGlzLmFwaS5zdHlsZXMuc2V0dGluZ3NCdXR0b25BY3RpdmUsd3JhcHBlcjpcImNlLWhlYWRlclwifSx0aGlzLl9zZXR0aW5ncz1yLHRoaXMuX2RhdGE9dGhpcy5ub3JtYWxpemVEYXRhKG4pLHRoaXMuc2V0dGluZ3NCdXR0b25zPVtdLHRoaXMuX2VsZW1lbnQ9dGhpcy5nZXRUYWcoKX12YXIgdCxhLG87cmV0dXJuIHQ9ZSxvPVt7a2V5OlwiY29udmVyc2lvbkNvbmZpZ1wiLGdldDpmdW5jdGlvbigpe3JldHVybntleHBvcnQ6XCJ0ZXh0XCIsaW1wb3J0OlwidGV4dFwifX19LHtrZXk6XCJzYW5pdGl6ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybntsZXZlbDohMSx0ZXh0Ont9fX19LHtrZXk6XCJpc1JlYWRPbmx5U3VwcG9ydGVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuITB9fSx7a2V5OlwicGFzdGVDb25maWdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57dGFnczpbXCJIMVwiLFwiSDJcIixcIkgzXCIsXCJINFwiLFwiSDVcIixcIkg2XCJdfX19LHtrZXk6XCJ0b29sYm94XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue2ljb246big2KS5kZWZhdWx0LHRpdGxlOlwiSGVhZGluZ1wifX19XSwoYT1be2tleTpcIm5vcm1hbGl6ZURhdGFcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD17fTtyZXR1cm5cIm9iamVjdFwiIT09cihlKSYmKGU9e30pLHQudGV4dD1lLnRleHR8fFwiXCIsdC5sZXZlbD1wYXJzZUludChlLmxldmVsKXx8dGhpcy5kZWZhdWx0TGV2ZWwubnVtYmVyLHR9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZWxlbWVudH19LHtrZXk6XCJyZW5kZXJTZXR0aW5nc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7cmV0dXJuIHRoaXMubGV2ZWxzLmxlbmd0aDw9MXx8dGhpcy5sZXZlbHMuZm9yRWFjaCgoZnVuY3Rpb24obil7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIlNQQU5cIik7ci5jbGFzc0xpc3QuYWRkKGUuX0NTUy5zZXR0aW5nc0J1dHRvbiksZS5jdXJyZW50TGV2ZWwubnVtYmVyPT09bi5udW1iZXImJnIuY2xhc3NMaXN0LmFkZChlLl9DU1Muc2V0dGluZ3NCdXR0b25BY3RpdmUpLHIuaW5uZXJIVE1MPW4uc3ZnLHIuZGF0YXNldC5sZXZlbD1uLm51bWJlcixyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLChmdW5jdGlvbigpe2Uuc2V0TGV2ZWwobi5udW1iZXIpfSkpLHQuYXBwZW5kQ2hpbGQociksZS5zZXR0aW5nc0J1dHRvbnMucHVzaChyKX0pKSx0fX0se2tleTpcInNldExldmVsXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLmRhdGE9e2xldmVsOmUsdGV4dDp0aGlzLmRhdGEudGV4dH0sdGhpcy5zZXR0aW5nc0J1dHRvbnMuZm9yRWFjaCgoZnVuY3Rpb24obil7bi5jbGFzc0xpc3QudG9nZ2xlKHQuX0NTUy5zZXR0aW5nc0J1dHRvbkFjdGl2ZSxwYXJzZUludChuLmRhdGFzZXQubGV2ZWwpPT09ZSl9KSl9fSx7a2V5OlwibWVyZ2VcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD17dGV4dDp0aGlzLmRhdGEudGV4dCtlLnRleHQsbGV2ZWw6dGhpcy5kYXRhLmxldmVsfTt0aGlzLmRhdGE9dH19LHtrZXk6XCJ2YWxpZGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVyblwiXCIhPT1lLnRleHQudHJpbSgpfX0se2tleTpcInNhdmVcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm57dGV4dDplLmlubmVySFRNTCxsZXZlbDp0aGlzLmN1cnJlbnRMZXZlbC5udW1iZXJ9fX0se2tleTpcImdldFRhZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLmN1cnJlbnRMZXZlbC50YWcpO3JldHVybiBlLmlubmVySFRNTD10aGlzLl9kYXRhLnRleHR8fFwiXCIsZS5jbGFzc0xpc3QuYWRkKHRoaXMuX0NTUy53cmFwcGVyKSxlLmNvbnRlbnRFZGl0YWJsZT10aGlzLnJlYWRPbmx5P1wiZmFsc2VcIjpcInRydWVcIixlLmRhdGFzZXQucGxhY2Vob2xkZXI9dGhpcy5hcGkuaTE4bi50KHRoaXMuX3NldHRpbmdzLnBsYWNlaG9sZGVyfHxcIlwiKSxlfX0se2tleTpcIm9uUGFzdGVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLmRldGFpbC5kYXRhLG49dGhpcy5kZWZhdWx0TGV2ZWwubnVtYmVyO3N3aXRjaCh0LnRhZ05hbWUpe2Nhc2VcIkgxXCI6bj0xO2JyZWFrO2Nhc2VcIkgyXCI6bj0yO2JyZWFrO2Nhc2VcIkgzXCI6bj0zO2JyZWFrO2Nhc2VcIkg0XCI6bj00O2JyZWFrO2Nhc2VcIkg1XCI6bj01O2JyZWFrO2Nhc2VcIkg2XCI6bj02fXRoaXMuX3NldHRpbmdzLmxldmVscyYmKG49dGhpcy5fc2V0dGluZ3MubGV2ZWxzLnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gTWF0aC5hYnModC1uKTxNYXRoLmFicyhlLW4pP3Q6ZX0pKSksdGhpcy5kYXRhPXtsZXZlbDpuLHRleHQ6dC5pbm5lckhUTUx9fX0se2tleTpcImRhdGFcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YS50ZXh0PXRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MLHRoaXMuX2RhdGEubGV2ZWw9dGhpcy5jdXJyZW50TGV2ZWwubnVtYmVyLHRoaXMuX2RhdGF9LHNldDpmdW5jdGlvbihlKXtpZih0aGlzLl9kYXRhPXRoaXMubm9ybWFsaXplRGF0YShlKSx2b2lkIDAhPT1lLmxldmVsJiZ0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUpe3ZhciB0PXRoaXMuZ2V0VGFnKCk7dC5pbm5lckhUTUw9dGhpcy5fZWxlbWVudC5pbm5lckhUTUwsdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0LHRoaXMuX2VsZW1lbnQpLHRoaXMuX2VsZW1lbnQ9dH12b2lkIDAhPT1lLnRleHQmJih0aGlzLl9lbGVtZW50LmlubmVySFRNTD10aGlzLl9kYXRhLnRleHR8fFwiXCIpfX0se2tleTpcImN1cnJlbnRMZXZlbFwiLGdldDpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLmxldmVscy5maW5kKChmdW5jdGlvbih0KXtyZXR1cm4gdC5udW1iZXI9PT1lLl9kYXRhLmxldmVsfSkpO3JldHVybiB0fHwodD10aGlzLmRlZmF1bHRMZXZlbCksdH19LHtrZXk6XCJkZWZhdWx0TGV2ZWxcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKHRoaXMuX3NldHRpbmdzLmRlZmF1bHRMZXZlbCl7dmFyIHQ9dGhpcy5sZXZlbHMuZmluZCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubnVtYmVyPT09ZS5fc2V0dGluZ3MuZGVmYXVsdExldmVsfSkpO2lmKHQpcmV0dXJuIHQ7Y29uc29sZS53YXJuKFwiKOC4hyfMgC0nzIEp4LiHIEhlYWRpbmcgVG9vbDogdGhlIGRlZmF1bHQgbGV2ZWwgc3BlY2lmaWVkIHdhcyBub3QgZm91bmQgaW4gYXZhaWxhYmxlIGxldmVsc1wiKX1yZXR1cm4gdGhpcy5sZXZlbHNbMV19fSx7a2V5OlwibGV2ZWxzXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PVt7bnVtYmVyOjEsdGFnOlwiSDFcIixzdmc6Jzxzdmcgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMi4xNCAxLjQ5NFY0Ljk4aDQuNjJWMS40OTRjMC0uNDk4LjA5OC0uODcxLjI5My0xLjEyQS45MjcuOTI3IDAgMCAxIDcuODIgMGMuMzIyIDAgLjU4My4xMjMuNzgyLjM3LjIuMjQ2LjMuNjIuMyAxLjEyNHY5LjU4OGMwIC41MDMtLjEwMS44OC0uMzAzIDEuMTI4YS45NTcuOTU3IDAgMCAxLS43NzkuMzc0LjkyMS45MjEgMCAwIDEtLjc3LS4zNzhjLS4xOTMtLjI1MS0uMjktLjYyNi0uMjktMS4xMjRWNi45ODlIMi4xNHY0LjA5M2MwIC41MDMtLjEuODgtLjMwMiAxLjEyOGEuOTU3Ljk1NyAwIDAgMS0uNzc4LjM3NC45MjEuOTIxIDAgMCAxLS43NzItLjM3OEMuMDk2IDExLjk1NSAwIDExLjU4IDAgMTEuMDgyVjEuNDk0QzAgLjk5Ni4wOTUuNjIzLjI4NS4zNzRBLjkyMi45MjIgMCAwIDEgMS4wNiAwYy4zMjEgMCAuNTgyLjEyMy43ODIuMzcuMTk5LjI0Ni4yOTkuNjIuMjk5IDEuMTI0em0xMS42NTMgOS45ODVWNS4yN2MtMS4yNzkuODg3LTIuMTQgMS4zMy0yLjU4MyAxLjMzYS44MDIuODAyIDAgMCAxLS41NjMtLjIyOC43MDMuNzAzIDAgMCAxLS4yNDUtLjUyOWMwLS4yMzIuMDgtLjQwMi4yNDEtLjUxMS4xNjEtLjExLjQ0Ni0uMjUuODU0LS40MjQuNjEtLjI1OSAxLjA5Ni0uNTMyIDEuNDYyLS44MThhNS44NCA1Ljg0IDAgMCAwIC45Ny0uOTYyYy4yODItLjM1NS40NjYtLjU3My41NTItLjY1NS4wODUtLjA4Mi4yNDYtLjEyMy40ODMtLjEyMy4yNjcgMCAuNDgxLjA5My42NDIuMjguMTYxLjE4Ni4yNDIuNDQzLjI0Mi43N3Y3LjgxM2MwIC45MTQtLjM0NSAxLjM3MS0xLjAzNSAxLjM3MS0uMzA3IDAtLjU1NC0uMDkzLS43NC0uMjgtLjE4Ny0uMTg2LS4yOC0uNDYxLS4yOC0uODI1elwiLz48L3N2Zz4nfSx7bnVtYmVyOjIsdGFnOlwiSDJcIixzdmc6Jzxzdmcgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMi4xNTIgMS40OTRWNC45OGg0LjY0NlYxLjQ5NGMwLS40OTguMDk3LS44NzEuMjkzLTEuMTJBLjkzNC45MzQgMCAwIDEgNy44NjMgMGMuMzI0IDAgLjU4Ni4xMjMuNzg2LjM3LjIuMjQ2LjMwMS42Mi4zMDEgMS4xMjR2OS41ODhjMCAuNTAzLS4xMDEuODgtLjMwNCAxLjEyOGEuOTY0Ljk2NCAwIDAgMS0uNzgzLjM3NC45MjguOTI4IDAgMCAxLS43NzUtLjM3OGMtLjE5NC0uMjUxLS4yOS0uNjI2LS4yOS0xLjEyNFY2Ljk4OUgyLjE1MnY0LjA5M2MwIC41MDMtLjEwMS44OC0uMzA0IDEuMTI4YS45NjQuOTY0IDAgMCAxLS43ODMuMzc0LjkyOC45MjggMCAwIDEtLjc3NS0uMzc4Qy4wOTcgMTEuOTU1IDAgMTEuNTggMCAxMS4wODJWMS40OTRDMCAuOTk2LjA5NS42MjMuMjg2LjM3NEEuOTI5LjkyOSAwIDAgMSAxLjA2NiAwYy4zMjMgMCAuNTg1LjEyMy43ODYuMzcuMi4yNDYuMy42Mi4zIDEuMTI0em0xMC45OSA5LjI4OGgzLjUyN2MuMzUxIDAgLjYyLjA3Mi44MDQuMjE2LjE4NS4xNDQuMjc3LjM0LjI3Ny41ODggMCAuMjItLjA3My40MDgtLjIyLjU2LS4xNDYuMTU0LS4zNjguMjMtLjY2NS4yM2gtNC45NzJjLS4zMzggMC0uNjAxLS4wOTMtLjc5LS4yOGEuODk2Ljg5NiAwIDAgMS0uMjg0LS42NTljMC0uMTYyLjA2LS4zNzcuMTgyLS42NDVzLjI1NS0uNDc4LjM5OS0uNjMxYTM4LjYxNyAzOC42MTcgMCAwIDEgMS42MjEtMS41OThjLjQ4Mi0uNDQ0LjgyNy0uNzM1IDEuMDM0LS44NzUuMzY5LS4yNjEuNjc2LS41MjMuOTIyLS43ODcuMjQ1LS4yNjMuNDMyLS41MzQuNTYtLjgxLjEyOS0uMjc4LjE5My0uNTQ5LjE5My0uODE1IDAtLjI4OC0uMDY5LS41NDYtLjIwNi0uNzczYTEuNDI4IDEuNDI4IDAgMCAwLS41Ni0uNTMgMS42MTggMS42MTggMCAwIDAtLjc3NC0uMTljLS41OSAwLTEuMDU0LjI2LTEuMzkyLjc3Ny0uMDQ1LjA2OC0uMTIuMjUyLS4yMjYuNTU0LS4xMDYuMzAyLS4yMjUuNTM0LS4zNTguNjk2LS4xMzMuMTYyLS4zMjguMjQzLS41ODUuMjQzYS43Ni43NiAwIDAgMS0uNTYtLjIyM2MtLjE0OS0uMTQ4LS4yMjMtLjM1MS0uMjIzLS42MDggMC0uMzEuMDctLjYzNS4yMS0uOTcyLjEzOS0uMzM4LjM0Ny0uNjQ1LjYyNC0uOTJhMy4wOTMgMy4wOTMgMCAwIDEgMS4wNTQtLjY2NWMuNDI2LS4xNjkuOTI0LS4yNTMgMS40OTYtLjI1My42OSAwIDEuMjc3LjEwOCAxLjc2NC4zMjQuMzE1LjE0NC41OTIuMzQzLjgzLjU5NS4yNC4yNTIuNDI1LjU0NC41NTguODc1LjEzMy4zMy4yLjY3NC4yIDEuMDMgMCAuNTU4LS4xNCAxLjA2Ni0uNDE2IDEuNTIzLS4yNzcuNDU3LS41Ni44MTUtLjg0OCAxLjA3NC0uMjg4LjI2LS43NzEuNjY2LTEuNDUgMS4yMi0uNjc3LjU1NC0xLjE0Mi45ODQtMS4zOTQgMS4yOWEzLjgzNiAzLjgzNiAwIDAgMC0uMzMxLjQ0elwiLz48L3N2Zz4nfSx7bnVtYmVyOjMsdGFnOlwiSDNcIixzdmc6Jzxzdmcgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMi4xNTIgMS40OTRWNC45OGg0LjY0NlYxLjQ5NGMwLS40OTguMDk3LS44NzEuMjkzLTEuMTJBLjkzNC45MzQgMCAwIDEgNy44NjMgMGMuMzI0IDAgLjU4Ni4xMjMuNzg2LjM3LjIuMjQ2LjMwMS42Mi4zMDEgMS4xMjR2OS41ODhjMCAuNTAzLS4xMDEuODgtLjMwNCAxLjEyOGEuOTY0Ljk2NCAwIDAgMS0uNzgzLjM3NC45MjguOTI4IDAgMCAxLS43NzUtLjM3OGMtLjE5NC0uMjUxLS4yOS0uNjI2LS4yOS0xLjEyNFY2Ljk4OUgyLjE1MnY0LjA5M2MwIC41MDMtLjEwMS44OC0uMzA0IDEuMTI4YS45NjQuOTY0IDAgMCAxLS43ODMuMzc0LjkyOC45MjggMCAwIDEtLjc3NS0uMzc4Qy4wOTcgMTEuOTU1IDAgMTEuNTggMCAxMS4wODJWMS40OTRDMCAuOTk2LjA5NS42MjMuMjg2LjM3NEEuOTI5LjkyOSAwIDAgMSAxLjA2NiAwYy4zMjMgMCAuNTg1LjEyMy43ODYuMzcuMi4yNDYuMy42Mi4zIDEuMTI0em0xMS42MSA0LjkxOWMuNDE4IDAgLjc3OC0uMTIzIDEuMDgtLjM2OC4zMDEtLjI0NS40NTItLjU5Ny40NTItMS4wNTUgMC0uMzUtLjEyLS42NS0uMzYtLjkwMi0uMjQxLS4yNTItLjU2Ni0uMzc4LS45NzQtLjM3OC0uMjc3IDAtLjUwNS4wMzgtLjY4NC4xMTZhMS4xIDEuMSAwIDAgMC0uNDI2LjMwNiAyLjMxIDIuMzEgMCAwIDAtLjI5Ni40OWMtLjA5My4yLS4xNzguMzg4LS4yNTUuNTY1YS40NzkuNDc5IDAgMCAxLS4yNDUuMjI1Ljk2NS45NjUgMCAwIDEtLjQwOS4wODEuNzA2LjcwNiAwIDAgMS0uNS0uMjJjLS4xNTItLjE0OC0uMjI4LS4zNDUtLjIyOC0uNTkgMC0uMjM2LjA3MS0uNDg0LjIxNC0uNzQ1YTIuNzIgMi43MiAwIDAgMSAuNjI3LS43NDYgMy4xNDkgMy4xNDkgMCAwIDEgMS4wMjQtLjU2OCA0LjEyMiA0LjEyMiAwIDAgMSAxLjM2OC0uMjE0Yy40NCAwIC44NDIuMDYgMS4yMDUuMTguMzY0LjEyLjY3OS4yOTQuOTQ3LjUyLjI2Ny4yMjguNDcuNDkuNjA2Ljc5LjEzNi4zLjIwNC42MjIuMjA0Ljk2NyAwIC40NTQtLjA5OS44NDMtLjI5NiAxLjE2OC0uMTk4LjMyNC0uNDguNjQtLjg0OC45NS4zNTQuMTkuNjUzLjQwOC44OTUuNjUzLjI0My4yNDUuNDI2LjUxNi41NDguODEzLjEyMy4yOTguMTg0LjYxOS4xODQuOTY0IDAgLjQxMy0uMDgzLjgxMi0uMjQ4IDEuMTk4LS4xNjYuMzg2LS40MS43My0uNzMyIDEuMDMxYTMuNDkgMy40OSAwIDAgMS0xLjE0Ny43MDhjLS40NDMuMTctLjkzMi4yNTYtMS40NjcuMjU2YTMuNTEyIDMuNTEyIDAgMCAxLTEuNDY0LS4yOTMgMy4zMzIgMy4zMzIgMCAwIDEtMS42OTktMS42NGMtLjE0Mi0uMzE0LS4yMTQtLjU3My0uMjE0LS43NzcgMC0uMjYzLjA4NS0uNDc1LjI1NS0uNjM2YS44OS44OSAwIDAgMSAuNjM3LS4yNDJjLjEyNyAwIC4yNS4wMzcuMzY3LjExMmEuNTMuNTMgMCAwIDEgLjIzMi4yN2MuMjM2LjYzLjQ4OSAxLjA5OS43NTkgMS40MDUuMjcuMzA2LjY1LjQ2IDEuMTQuNDZhMS43MTQgMS43MTQgMCAwIDAgMS40Ni0uODI0Yy4xNy0uMjczLjI1Ni0uNTg4LjI1Ni0uOTQ3IDAtLjUzLS4xNDUtLjk0Ny0uNDM2LTEuMjQ5LS4yOS0uMzAyLS42OTQtLjQ1My0xLjIxMi0uNDUzLS4wOSAwLS4yMzEuMDEtLjQyMi4wMjgtLjE5LjAxOC0uMzEzLjAyNy0uMzY3LjAyNy0uMjUgMC0uNDQzLS4wNjItLjU3OS0uMTg3LS4xMzYtLjEyNS0uMjA0LS4yOTktLjIwNC0uNTIxIDAtLjIxOC4wODEtLjM5NC4yNDUtLjUyOC4xNjMtLjEzNC40MDYtLjIuNzI4LS4yaC4yOHpcIi8+PC9zdmc+J30se251bWJlcjo0LHRhZzpcIkg0XCIsc3ZnOic8c3ZnIHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIxNFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTIuMTUyIDEuNDk0VjQuOThoNC42NDZWMS40OTRjMC0uNDk4LjA5Ny0uODcxLjI5My0xLjEyQS45MzQuOTM0IDAgMCAxIDcuODYzIDBjLjMyNCAwIC41ODYuMTIzLjc4Ni4zNy4yLjI0Ni4zMDEuNjIuMzAxIDEuMTI0djkuNTg4YzAgLjUwMy0uMTAxLjg4LS4zMDQgMS4xMjhhLjk2NC45NjQgMCAwIDEtLjc4My4zNzQuOTI4LjkyOCAwIDAgMS0uNzc1LS4zNzhjLS4xOTQtLjI1MS0uMjktLjYyNi0uMjktMS4xMjRWNi45ODlIMi4xNTJ2NC4wOTNjMCAuNTAzLS4xMDEuODgtLjMwNCAxLjEyOGEuOTY0Ljk2NCAwIDAgMS0uNzgzLjM3NC45MjguOTI4IDAgMCAxLS43NzUtLjM3OEMuMDk3IDExLjk1NSAwIDExLjU4IDAgMTEuMDgyVjEuNDk0QzAgLjk5Ni4wOTUuNjIzLjI4Ni4zNzRBLjkyOS45MjkgMCAwIDEgMS4wNjYgMGMuMzIzIDAgLjU4NS4xMjMuNzg2LjM3LjIuMjQ2LjMuNjIuMyAxLjEyNHptMTMuMDAzIDEwLjA5di0xLjI1MmgtMy4zOGMtLjQyNyAwLS43NDYtLjA5Ny0uOTYtLjI5LS4yMTMtLjE5My0uMzItLjQ1Ni0uMzItLjc4OCAwLS4wODUuMDE2LS4xNzEuMDQ4LS4yNTkuMDMxLS4wODguMDc4LS4xOC4xNDEtLjI3Ni4wNjMtLjA5Ny4xMjgtLjE5LjE5NS0uMjguMDY4LS4wOS4xNS0uMi4yNS0uMzNsMy41NjgtNC43NzRhNS40NCA1LjQ0IDAgMCAxIC41NzYtLjY4My43NjMuNzYzIDAgMCAxIC41NDItLjIxMmMuNjgyIDAgMS4wMjMuMzkgMS4wMjMgMS4xNzF2NS4yMTJoLjI5Yy4zNDYgMCAuNjIzLjA0Ny44MzIuMTQyLjIwOC4wOTQuMzEzLjMuMzEzLjYyIDAgLjI2LS4wODYuNDUtLjI1Ni41NjgtLjE3LjEyLS40MjcuMTc5LS43NjguMTc5aC0uNDF2MS4yNTJjMCAuMzQ2LS4wNzcuNjAzLS4yMy43NzEtLjE1Mi4xNjgtLjM1Ni4yNTMtLjYxMi4yNTNhLjc4Ljc4IDAgMCAxLS42MS0uMjZjLS4xNTQtLjE3My0uMjMyLS40MjctLjIzMi0uNzY0em0tMi44OTUtMi43NmgyLjg5NVY0LjkxTDEyLjI2IDguODIzelwiLz48L3N2Zz4nfSx7bnVtYmVyOjUsdGFnOlwiSDVcIixzdmc6Jzxzdmcgd2lkdGg9XCIxOFwiIGhlaWdodD1cIjE0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMi4xNTIgMS40OTRWNC45OGg0LjY0NlYxLjQ5NGMwLS40OTguMDk3LS44NzEuMjkzLTEuMTJBLjkzNC45MzQgMCAwIDEgNy44NjMgMGMuMzI0IDAgLjU4Ni4xMjMuNzg2LjM3LjIuMjQ2LjMwMS42Mi4zMDEgMS4xMjR2OS41ODhjMCAuNTAzLS4xMDEuODgtLjMwNCAxLjEyOGEuOTY0Ljk2NCAwIDAgMS0uNzgzLjM3NC45MjguOTI4IDAgMCAxLS43NzUtLjM3OGMtLjE5NC0uMjUxLS4yOS0uNjI2LS4yOS0xLjEyNFY2Ljk4OUgyLjE1MnY0LjA5M2MwIC41MDMtLjEwMS44OC0uMzA0IDEuMTI4YS45NjQuOTY0IDAgMCAxLS43ODMuMzc0LjkyOC45MjggMCAwIDEtLjc3NS0uMzc4Qy4wOTcgMTEuOTU1IDAgMTEuNTggMCAxMS4wODJWMS40OTRDMCAuOTk2LjA5NS42MjMuMjg2LjM3NEEuOTI5LjkyOSAwIDAgMSAxLjA2NiAwYy4zMjMgMCAuNTg1LjEyMy43ODYuMzcuMi4yNDYuMy42Mi4zIDEuMTI0em0xNC4xNiAyLjY0NWgtMy4yMzRsLS4zODggMi4yMDVjLjY0NC0uMzQ0IDEuMjM5LS41MTcgMS43ODMtLjUxNy40MzYgMCAuODQzLjA4MiAxLjIyMi4yNDUuMzguMTY0LjcxMi4zOS45OTguNjc3LjI4Ni4yODkuNTEuNjMuNjc0IDEuMDI1LjE2My4zOTUuMjQ1LjgyLjI0NSAxLjI3MyAwIC42NTgtLjE0OCAxLjI1Ny0uNDQzIDEuNzk3LS4yOTUuNTQtLjcyLjk3LTEuMjc2IDEuMjg3LS41NTYuMzE4LTEuMTk3LjQ3Ny0xLjkyMy40NzctLjgxMyAwLTEuNDcyLS4xNS0xLjk3OC0uNDUtLjUwNi0uMy0uODY1LS42NDMtMS4wNzYtMS4wMzEtLjIxLS4zODgtLjMxNi0uNzI3LS4zMTYtMS4wMTggMC0uMTc3LjA3My0uMzQ1LjIyLS41MDRhLjcyNS43MjUgMCAwIDEgLjU1Ni0uMjM4Yy4zODEgMCAuNjY1LjIyLjg1LjY2LjE4Mi40MDQuNDI3LjcxOS43MzYuOTQzLjMwOS4yMjUuNjU0LjMzNyAxLjAzNS4zMzcuMzUgMCAuNjU2LS4wOS45MTktLjI3Mi4yNjMtLjE4Mi40NjYtLjQzMS42MS0uNzQ5LjE0Mi0uMzE4LjIxNC0uNjc4LjIxNC0xLjA4MiAwLS40MzYtLjA3OC0uODA4LS4yMzItMS4xMTdhMS42MDcgMS42MDcgMCAwIDAtLjYyLS42OSAxLjY3NCAxLjY3NCAwIDAgMC0uODY0LS4yMjljLS4zOSAwLS42Ny4wNDgtLjgzNy4xNDMtLjE2OC4wOTUtLjQxLjI2Mi0uNzI1LjUtLjMxNi4yMzktLjU3Ni4zNTgtLjc4LjM1OGEuODQzLjg0MyAwIDAgMS0uNTkyLS4yNDJjLS4xNzMtLjE2LS4yNTktLjM0NC0uMjU5LS41NDggMC0uMDIyLjAyNS0uMTc3LjA3NS0uNDYzbC41NzItMy4yNmMuMDYzLS4zOS4xODEtLjY3NS4zNTQtLjg1Mi4xNzItLjE3Ny40NTQtLjI2NS44NDQtLjI2NWgzLjU5NWMuNzA4IDAgMS4wNjIuMjcgMS4wNjIuODFhLjcxMS43MTEgMCAwIDEtLjI2LjU3MmMtLjE3Mi4xNDUtLjQyNi4yMTgtLjc2Mi4yMTh6XCIvPjwvc3ZnPid9LHtudW1iZXI6Nix0YWc6XCJINlwiLHN2ZzonPHN2ZyB3aWR0aD1cIjE4XCIgaGVpZ2h0PVwiMTRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0yLjE1MiAxLjQ5NFY0Ljk4aDQuNjQ2VjEuNDk0YzAtLjQ5OC4wOTctLjg3MS4yOTMtMS4xMkEuOTM0LjkzNCAwIDAgMSA3Ljg2MyAwYy4zMjQgMCAuNTg2LjEyMy43ODYuMzcuMi4yNDYuMzAxLjYyLjMwMSAxLjEyNHY5LjU4OGMwIC41MDMtLjEwMS44OC0uMzA0IDEuMTI4YS45NjQuOTY0IDAgMCAxLS43ODMuMzc0LjkyOC45MjggMCAwIDEtLjc3NS0uMzc4Yy0uMTk0LS4yNTEtLjI5LS42MjYtLjI5LTEuMTI0VjYuOTg5SDIuMTUydjQuMDkzYzAgLjUwMy0uMTAxLjg4LS4zMDQgMS4xMjhhLjk2NC45NjQgMCAwIDEtLjc4My4zNzQuOTI4LjkyOCAwIDAgMS0uNzc1LS4zNzhDLjA5NyAxMS45NTUgMCAxMS41OCAwIDExLjA4MlYxLjQ5NEMwIC45OTYuMDk1LjYyMy4yODYuMzc0QS45MjkuOTI5IDAgMCAxIDEuMDY2IDBjLjMyMyAwIC41ODUuMTIzLjc4Ni4zNy4yLjI0Ni4zLjYyLjMgMS4xMjR6TTEyLjUzIDcuMDU4YTMuMDkzIDMuMDkzIDAgMCAxIDEuMDA0LS44MTQgMi43MzQgMi43MzQgMCAwIDEgMS4yMTQtLjI2NGMuNDMgMCAuODI3LjA4IDEuMTkuMjQuMzY1LjE2MS42ODQuMzkuOTU3LjY4Ni4yNzQuMjk2LjQ4NS42NDUuNjM1IDEuMDQ4YTMuNiAzLjYgMCAwIDEgLjIyMyAxLjI2MmMwIC42MzctLjE0NSAxLjIxNi0uNDM3IDEuNzM2LS4yOTIuNTItLjY5OS45MjYtMS4yMjEgMS4yMTgtLjUyMi4yOTItMS4xMTQuNDM4LTEuNzc0LjQzOC0uNzYgMC0xLjQxNi0uMTg2LTEuOTY3LS41NTctLjU1Mi0uMzctLjk3NC0uOTE5LTEuMjY1LTEuNjQ1LS4yOTItLjcyNi0uNDM4LTEuNjEzLS40MzgtMi42NjIgMC0uODU1LjA4OC0xLjYyLjI2NS0yLjI5My4xNzYtLjY3NC40My0xLjIzMy43Ni0xLjY3Ni4zMy0uNDQzLjczLS43NzggMS4yLTEuMDA0LjQ3LS4yMjYgMS4wMDYtLjMzOSAxLjYwOC0uMzM5LjU3OSAwIDEuMDg5LjExMyAxLjUzLjM0LjQ0LjIyNS43NzMuNTA2Ljk5Ny44NC4yMjQuMzM1LjMzNS42NTYuMzM1Ljk2NCAwIC4xODUtLjA3LjM1NC0uMjEuNTA1YS42OTguNjk4IDAgMCAxLS41MzYuMjI3Ljg3NC44NzQgMCAwIDEtLjUyOS0uMTggMS4wMzkgMS4wMzkgMCAwIDEtLjM2LS40OTggMS40MiAxLjQyIDAgMCAwLS40OTUtLjY1NSAxLjMgMS4zIDAgMCAwLS43ODYtLjI0N2MtLjI0IDAtLjQ3OS4wNjktLjcxNi4yMDdhMS44NjMgMS44NjMgMCAwIDAtLjYuNTZjLS4zMy40NzktLjUyNSAxLjMzMy0uNTg0IDIuNTYzem0xLjgzMiA0LjIxM2MuNDU2IDAgLjgzNC0uMTg2IDEuMTMzLS41Ni4yOTgtLjM3My40NDctLjg2Mi40NDctMS40NjggMC0uNDEyLS4wNy0uNzY2LS4yMS0xLjA2MmExLjU4NCAxLjU4NCAwIDAgMC0uNTc3LS42NzggMS40NyAxLjQ3IDAgMCAwLS44MDctLjIzNGMtLjI4IDAtLjU0OC4wNzQtLjgwNC4yMjQtLjI1NS4xNDktLjQ2MS4zNjUtLjYxNy42NDdhMi4wMjQgMi4wMjQgMCAwIDAtLjIzNC45OTRjMCAuNjEuMTU4IDEuMTIuNDc1IDEuNTI3LjMxNi40MDcuNzE0LjYxIDEuMTk0LjYxelwiLz48L3N2Zz4nfV07cmV0dXJuIHRoaXMuX3NldHRpbmdzLmxldmVscz90LmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIGUuX3NldHRpbmdzLmxldmVscy5pbmNsdWRlcyh0Lm51bWJlcil9KSk6dH19XSkmJmkodC5wcm90b3R5cGUsYSksbyYmaSh0LG8pLGV9KCk7ZS5leHBvcnRzPWF9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1uKDIpO1wic3RyaW5nXCI9PXR5cGVvZiByJiYocj1bW2UuaSxyLFwiXCJdXSk7dmFyIGk9e2htcjohMCx0cmFuc2Zvcm06dm9pZCAwLGluc2VydEludG86dm9pZCAwfTtuKDQpKHIsaSk7ci5sb2NhbHMmJihlLmV4cG9ydHM9ci5sb2NhbHMpfSxmdW5jdGlvbihlLHQsbil7KGUuZXhwb3J0cz1uKDMpKCExKSkucHVzaChbZS5pLFwiLyoqXFxuICogUGx1Z2luIHN0eWxlc1xcbiAqL1xcbi5jZS1oZWFkZXIge1xcbiAgcGFkZGluZzogMWVtIDA7XFxuICBtYXJnaW46IDA7XFxuICBtYXJnaW4tYm90dG9tOiAtMC45ZW07XFxuICBsaW5lLWhlaWdodDogMS41ZW07XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG4uY2UtaGVhZGVyIHAsXFxuLmNlLWhlYWRlciBkaXZ7XFxuICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XFxuICBtYXJnaW46IDAgIWltcG9ydGFudDtcXG59XFxuXFxuLyoqXFxuICogU3R5bGVzIGZvciBQbHVnaW4gaWNvbiBpbiBUb29sYmFyXFxuICovXFxuLmNlLWhlYWRlcl9faWNvbiB7fVxcblxcbi5jZS1oZWFkZXJbY29udGVudEVkaXRhYmxlPXRydWVdW2RhdGEtcGxhY2Vob2xkZXJdOjpiZWZvcmV7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBjb250ZW50OiBhdHRyKGRhdGEtcGxhY2Vob2xkZXIpO1xcbiAgY29sb3I6ICM3MDc2ODQ7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGN1cnNvcjogdGV4dDtcXG59XFxuXFxuLmNlLWhlYWRlcltjb250ZW50RWRpdGFibGU9dHJ1ZV1bZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6OmJlZm9yZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLmNlLWhlYWRlcltjb250ZW50RWRpdGFibGU9dHJ1ZV1bZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6Zm9jdXM6OmJlZm9yZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiB0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKChmdW5jdGlvbih0KXt2YXIgbj1mdW5jdGlvbihlLHQpe3ZhciBuPWVbMV18fFwiXCIscj1lWzNdO2lmKCFyKXJldHVybiBuO2lmKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBpPShvPXIsXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkobykpKSkrXCIgKi9cIiksYT1yLnNvdXJjZXMubWFwKChmdW5jdGlvbihlKXtyZXR1cm5cIi8qIyBzb3VyY2VVUkw9XCIrci5zb3VyY2VSb290K2UrXCIgKi9cIn0pKTtyZXR1cm5bbl0uY29uY2F0KGEpLmNvbmNhdChbaV0pLmpvaW4oXCJcXG5cIil9dmFyIG87cmV0dXJuW25dLmpvaW4oXCJcXG5cIil9KHQsZSk7cmV0dXJuIHRbMl0/XCJAbWVkaWEgXCIrdFsyXStcIntcIituK1wifVwiOm59KSkuam9pbihcIlwiKX0sdC5pPWZ1bmN0aW9uKGUsbil7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPVtbbnVsbCxlLFwiXCJdXSk7Zm9yKHZhciByPXt9LGk9MDtpPHRoaXMubGVuZ3RoO2krKyl7dmFyIGE9dGhpc1tpXVswXTtcIm51bWJlclwiPT10eXBlb2YgYSYmKHJbYV09ITApfWZvcihpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciBvPWVbaV07XCJudW1iZXJcIj09dHlwZW9mIG9bMF0mJnJbb1swXV18fChuJiYhb1syXT9vWzJdPW46biYmKG9bMl09XCIoXCIrb1syXStcIikgYW5kIChcIituK1wiKVwiKSx0LnB1c2gobykpfX0sdH19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLGE9e30sbz0ocj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYn0sZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09aSYmKGk9ci5hcHBseSh0aGlzLGFyZ3VtZW50cykpLGl9KSxzPWZ1bmN0aW9uKGUpe3JldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpfSxjPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O3JldHVybiBmdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKXJldHVybiBlKCk7aWYodm9pZCAwPT09dFtlXSl7dmFyIG49cy5jYWxsKHRoaXMsZSk7aWYod2luZG93LkhUTUxJRnJhbWVFbGVtZW50JiZuIGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KXRyeXtuPW4uY29udGVudERvY3VtZW50LmhlYWR9Y2F0Y2goZSl7bj1udWxsfXRbZV09bn1yZXR1cm4gdFtlXX19KCksbD1udWxsLHU9MCxmPVtdLGQ9big1KTtmdW5jdGlvbiBoKGUsdCl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl0saT1hW3IuaWRdO2lmKGkpe2kucmVmcysrO2Zvcih2YXIgbz0wO288aS5wYXJ0cy5sZW5ndGg7bysrKWkucGFydHNbb10oci5wYXJ0c1tvXSk7Zm9yKDtvPHIucGFydHMubGVuZ3RoO28rKylpLnBhcnRzLnB1c2goeShyLnBhcnRzW29dLHQpKX1lbHNle3ZhciBzPVtdO2ZvcihvPTA7bzxyLnBhcnRzLmxlbmd0aDtvKyspcy5wdXNoKHkoci5wYXJ0c1tvXSx0KSk7YVtyLmlkXT17aWQ6ci5pZCxyZWZzOjEscGFydHM6c319fX1mdW5jdGlvbiB2KGUsdCl7Zm9yKHZhciBuPVtdLHI9e30saT0wO2k8ZS5sZW5ndGg7aSsrKXt2YXIgYT1lW2ldLG89dC5iYXNlP2FbMF0rdC5iYXNlOmFbMF0scz17Y3NzOmFbMV0sbWVkaWE6YVsyXSxzb3VyY2VNYXA6YVszXX07cltvXT9yW29dLnBhcnRzLnB1c2gocyk6bi5wdXNoKHJbb109e2lkOm8scGFydHM6W3NdfSl9cmV0dXJuIG59ZnVuY3Rpb24gcChlLHQpe3ZhciBuPWMoZS5pbnNlcnRJbnRvKTtpZighbil0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTt2YXIgcj1mW2YubGVuZ3RoLTFdO2lmKFwidG9wXCI9PT1lLmluc2VydEF0KXI/ci5uZXh0U2libGluZz9uLmluc2VydEJlZm9yZSh0LHIubmV4dFNpYmxpbmcpOm4uYXBwZW5kQ2hpbGQodCk6bi5pbnNlcnRCZWZvcmUodCxuLmZpcnN0Q2hpbGQpLGYucHVzaCh0KTtlbHNlIGlmKFwiYm90dG9tXCI9PT1lLmluc2VydEF0KW4uYXBwZW5kQ2hpbGQodCk7ZWxzZXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5pbnNlcnRBdHx8IWUuaW5zZXJ0QXQuYmVmb3JlKXRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO3ZhciBpPWMoZS5pbnNlcnRJbnRvK1wiIFwiK2UuaW5zZXJ0QXQuYmVmb3JlKTtuLmluc2VydEJlZm9yZSh0LGkpfX1mdW5jdGlvbiBnKGUpe2lmKG51bGw9PT1lLnBhcmVudE5vZGUpcmV0dXJuITE7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpO3ZhciB0PWYuaW5kZXhPZihlKTt0Pj0wJiZmLnNwbGljZSh0LDEpfWZ1bmN0aW9uIG0oZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3JldHVybiB2b2lkIDA9PT1lLmF0dHJzLnR5cGUmJihlLmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiKSxiKHQsZS5hdHRycykscChlLHQpLHR9ZnVuY3Rpb24gYihlLHQpe09iamVjdC5rZXlzKHQpLmZvckVhY2goKGZ1bmN0aW9uKG4pe2Uuc2V0QXR0cmlidXRlKG4sdFtuXSl9KSl9ZnVuY3Rpb24geShlLHQpe3ZhciBuLHIsaSxhO2lmKHQudHJhbnNmb3JtJiZlLmNzcyl7aWYoIShhPXQudHJhbnNmb3JtKGUuY3NzKSkpcmV0dXJuIGZ1bmN0aW9uKCl7fTtlLmNzcz1hfWlmKHQuc2luZ2xldG9uKXt2YXIgbz11Kys7bj1sfHwobD1tKHQpKSxyPUwuYmluZChudWxsLG4sbywhMSksaT1MLmJpbmQobnVsbCxuLG8sITApfWVsc2UgZS5zb3VyY2VNYXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgQmxvYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYT8obj1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtyZXR1cm4gdm9pZCAwPT09ZS5hdHRycy50eXBlJiYoZS5hdHRycy50eXBlPVwidGV4dC9jc3NcIiksZS5hdHRycy5yZWw9XCJzdHlsZXNoZWV0XCIsYih0LGUuYXR0cnMpLHAoZSx0KSx0fSh0KSxyPV8uYmluZChudWxsLG4sdCksaT1mdW5jdGlvbigpe2cobiksbi5ocmVmJiZVUkwucmV2b2tlT2JqZWN0VVJMKG4uaHJlZil9KToobj1tKHQpLHI9SC5iaW5kKG51bGwsbiksaT1mdW5jdGlvbigpe2cobil9KTtyZXR1cm4gcihlKSxmdW5jdGlvbih0KXtpZih0KXtpZih0LmNzcz09PWUuY3NzJiZ0Lm1lZGlhPT09ZS5tZWRpYSYmdC5zb3VyY2VNYXA9PT1lLnNvdXJjZU1hcClyZXR1cm47cihlPXQpfWVsc2UgaSgpfX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgREVCVUcmJkRFQlVHJiZcIm9iamVjdFwiIT10eXBlb2YgZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpOyh0PXR8fHt9KS5hdHRycz1cIm9iamVjdFwiPT10eXBlb2YgdC5hdHRycz90LmF0dHJzOnt9LHQuc2luZ2xldG9ufHxcImJvb2xlYW5cIj09dHlwZW9mIHQuc2luZ2xldG9ufHwodC5zaW5nbGV0b249bygpKSx0Lmluc2VydEludG98fCh0Lmluc2VydEludG89XCJoZWFkXCIpLHQuaW5zZXJ0QXR8fCh0Lmluc2VydEF0PVwiYm90dG9tXCIpO3ZhciBuPXYoZSx0KTtyZXR1cm4gaChuLHQpLGZ1bmN0aW9uKGUpe2Zvcih2YXIgcj1bXSxpPTA7aTxuLmxlbmd0aDtpKyspe3ZhciBvPW5baV07KHM9YVtvLmlkXSkucmVmcy0tLHIucHVzaChzKX1lJiZoKHYoZSx0KSx0KTtmb3IoaT0wO2k8ci5sZW5ndGg7aSsrKXt2YXIgcztpZigwPT09KHM9cltpXSkucmVmcyl7Zm9yKHZhciBjPTA7YzxzLnBhcnRzLmxlbmd0aDtjKyspcy5wYXJ0c1tjXSgpO2RlbGV0ZSBhW3MuaWRdfX19fTt2YXIgdyx4PSh3PVtdLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHdbZV09dCx3LmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpfSk7ZnVuY3Rpb24gTChlLHQsbixyKXt2YXIgaT1uP1wiXCI6ci5jc3M7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PXgodCxpKTtlbHNle3ZhciBhPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGkpLG89ZS5jaGlsZE5vZGVzO29bdF0mJmUucmVtb3ZlQ2hpbGQob1t0XSksby5sZW5ndGg/ZS5pbnNlcnRCZWZvcmUoYSxvW3RdKTplLmFwcGVuZENoaWxkKGEpfX1mdW5jdGlvbiBIKGUsdCl7dmFyIG49dC5jc3Mscj10Lm1lZGlhO2lmKHImJmUuc2V0QXR0cmlidXRlKFwibWVkaWFcIixyKSxlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9bjtlbHNle2Zvcig7ZS5maXJzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKSl9fWZ1bmN0aW9uIF8oZSx0LG4pe3ZhciByPW4uY3NzLGk9bi5zb3VyY2VNYXAsYT12b2lkIDA9PT10LmNvbnZlcnRUb0Fic29sdXRlVXJscyYmaTsodC5jb252ZXJ0VG9BYnNvbHV0ZVVybHN8fGEpJiYocj1kKHIpKSxpJiYocis9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGkpKSkpK1wiICovXCIpO3ZhciBvPW5ldyBCbG9iKFtyXSx7dHlwZTpcInRleHQvY3NzXCJ9KSxzPWUuaHJlZjtlLmhyZWY9VVJMLmNyZWF0ZU9iamVjdFVSTChvKSxzJiZVUkwucmV2b2tlT2JqZWN0VVJMKHMpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmxvY2F0aW9uO2lmKCF0KXRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO2lmKCFlfHxcInN0cmluZ1wiIT10eXBlb2YgZSlyZXR1cm4gZTt2YXIgbj10LnByb3RvY29sK1wiLy9cIit0Lmhvc3Qscj1uK3QucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLFwiL1wiKTtyZXR1cm4gZS5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwoZnVuY3Rpb24oZSx0KXt2YXIgaSxhPXQudHJpbSgpLnJlcGxhY2UoL15cIiguKilcIiQvLChmdW5jdGlvbihlLHQpe3JldHVybiB0fSkpLnJlcGxhY2UoL14nKC4qKSckLywoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdH0pKTtyZXR1cm4vXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KGEpP2U6KGk9MD09PWEuaW5kZXhPZihcIi8vXCIpP2E6MD09PWEuaW5kZXhPZihcIi9cIik/bithOnIrYS5yZXBsYWNlKC9eXFwuXFwvLyxcIlwiKSxcInVybChcIitKU09OLnN0cmluZ2lmeShpKStcIilcIil9KSl9fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7bi5yKHQpLHQuZGVmYXVsdD0nPHN2ZyB3aWR0aD1cIjEwXCIgaGVpZ2h0PVwiMTRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAxMCAxNFwiPlxcbiAgPHBhdGggZD1cIk03LjYgOC4xNUgyLjI1djQuNTI1YTEuMTI1IDEuMTI1IDAgMCAxLTIuMjUgMFYxLjEyNWExLjEyNSAxLjEyNSAwIDEgMSAyLjI1IDBWNS45SDcuNlYxLjEyNWExLjEyNSAxLjEyNSAwIDAgMSAyLjI1IDB2MTEuNTVhMS4xMjUgMS4xMjUgMCAwIDEtMi4yNSAwVjguMTV6XCIvPlxcbjwvc3ZnPlxcbid9XSl9KSk7IiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5JbmxpbmVDb2RlPWUoKTp0LklubGluZUNvZGU9ZSgpfSh3aW5kb3csZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gbihyKXtpZihlW3JdKXJldHVybiBlW3JdLmV4cG9ydHM7dmFyIG89ZVtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbcl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsbiksby5sPSEwLG8uZXhwb3J0c31yZXR1cm4gbi5tPXQsbi5jPWUsbi5kPWZ1bmN0aW9uKHQsZSxyKXtuLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLnI9ZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1uKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgbyBpbiB0KW4uZChyLG8sZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxvKSk7cmV0dXJuIHJ9LG4ubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gbi5kKGUsXCJhXCIsZSksZX0sbi5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxuLnA9XCIvXCIsbihuLnM9MCl9KFtmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19ZnVuY3Rpb24gbyh0LGUsbil7cmV0dXJuIGUmJnIodC5wcm90b3R5cGUsZSksbiYmcih0LG4pLHR9bigxKS50b1N0cmluZygpO3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgbj1lLmFwaTshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuYXBpPW4sdGhpcy5idXR0b249bnVsbCx0aGlzLnRhZz1cIkNPREVcIix0aGlzLmljb25DbGFzc2VzPXtiYXNlOnRoaXMuYXBpLnN0eWxlcy5pbmxpbmVUb29sQnV0dG9uLGFjdGl2ZTp0aGlzLmFwaS5zdHlsZXMuaW5saW5lVG9vbEJ1dHRvbkFjdGl2ZX19cmV0dXJuIG8odCxudWxsLFt7a2V5OlwiQ1NTXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJpbmxpbmUtY29kZVwifX1dKSxvKHQsW3trZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmJ1dHRvbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpLHRoaXMuYnV0dG9uLnR5cGU9XCJidXR0b25cIix0aGlzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuaWNvbkNsYXNzZXMuYmFzZSksdGhpcy5idXR0b24uaW5uZXJIVE1MPXRoaXMudG9vbGJveEljb24sdGhpcy5idXR0b259fSx7a2V5Olwic3Vycm91bmRcIix2YWx1ZTpmdW5jdGlvbihlKXtpZihlKXt2YXIgbj10aGlzLmFwaS5zZWxlY3Rpb24uZmluZFBhcmVudFRhZyh0aGlzLnRhZyx0LkNTUyk7bj90aGlzLnVud3JhcChuKTp0aGlzLndyYXAoZSl9fX0se2tleTpcIndyYXBcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnKTtuLmNsYXNzTGlzdC5hZGQodC5DU1MpLG4uYXBwZW5kQ2hpbGQoZS5leHRyYWN0Q29udGVudHMoKSksZS5pbnNlcnROb2RlKG4pLHRoaXMuYXBpLnNlbGVjdGlvbi5leHBhbmRUb1RhZyhuKX19LHtrZXk6XCJ1bndyYXBcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmFwaS5zZWxlY3Rpb24uZXhwYW5kVG9UYWcodCk7dmFyIGU9d2luZG93LmdldFNlbGVjdGlvbigpLG49ZS5nZXRSYW5nZUF0KDApLHI9bi5leHRyYWN0Q29udGVudHMoKTt0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksbi5pbnNlcnROb2RlKHIpLGUucmVtb3ZlQWxsUmFuZ2VzKCksZS5hZGRSYW5nZShuKX19LHtrZXk6XCJjaGVja1N0YXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmFwaS5zZWxlY3Rpb24uZmluZFBhcmVudFRhZyh0aGlzLnRhZyx0LkNTUyk7dGhpcy5idXR0b24uY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLmljb25DbGFzc2VzLmFjdGl2ZSwhIWUpfX0se2tleTpcInRvb2xib3hJY29uXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4oNikuZGVmYXVsdH19XSxbe2tleTpcImlzSW5saW5lXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuITB9fSx7a2V5Olwic2FuaXRpemVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57Y29kZTp7Y2xhc3M6dC5DU1N9fX19XSksdH0oKTt0LmV4cG9ydHM9aX0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oMik7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbdC5pLHIsXCJcIl1dKTt2YXIgbz17aG1yOiEwLHRyYW5zZm9ybTp2b2lkIDAsaW5zZXJ0SW50bzp2b2lkIDB9O24oNCkocixvKTtyLmxvY2FscyYmKHQuZXhwb3J0cz1yLmxvY2Fscyl9LGZ1bmN0aW9uKHQsZSxuKXsodC5leHBvcnRzPW4oMykoITEpKS5wdXNoKFt0LmksXCIuaW5saW5lLWNvZGUge1xcbiAgYmFja2dyb3VuZDogcmdiYSgyNTAsIDIzOSwgMjQwLCAwLjc4KTtcXG4gIGNvbG9yOiAjYjQ0NDM3O1xcbiAgcGFkZGluZzogM3B4IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIG1hcmdpbjogMCAxcHg7XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG4gIGZvbnQtc2l6ZTogMC44NmVtO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGxldHRlci1zcGFjaW5nOiAwLjNweDtcXG59XFxuXCIsXCJcIl0pfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1bXTtyZXR1cm4gZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbihlKXt2YXIgbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRbMV18fFwiXCIscj10WzNdO2lmKCFyKXJldHVybiBuO2lmKGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBvPShhPXIsXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoYSkpKSkrXCIgKi9cIiksaT1yLnNvdXJjZXMubWFwKGZ1bmN0aW9uKHQpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIityLnNvdXJjZVJvb3QrdCtcIiAqL1wifSk7cmV0dXJuW25dLmNvbmNhdChpKS5jb25jYXQoW29dKS5qb2luKFwiXFxuXCIpfXZhciBhO3JldHVybltuXS5qb2luKFwiXFxuXCIpfShlLHQpO3JldHVybiBlWzJdP1wiQG1lZGlhIFwiK2VbMl0rXCJ7XCIrbitcIn1cIjpufSkuam9pbihcIlwiKX0sZS5pPWZ1bmN0aW9uKHQsbil7XCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PVtbbnVsbCx0LFwiXCJdXSk7Zm9yKHZhciByPXt9LG89MDtvPHRoaXMubGVuZ3RoO28rKyl7dmFyIGk9dGhpc1tvXVswXTtcIm51bWJlclwiPT10eXBlb2YgaSYmKHJbaV09ITApfWZvcihvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBhPXRbb107XCJudW1iZXJcIj09dHlwZW9mIGFbMF0mJnJbYVswXV18fChuJiYhYVsyXT9hWzJdPW46biYmKGFbMl09XCIoXCIrYVsyXStcIikgYW5kIChcIituK1wiKVwiKSxlLnB1c2goYSkpfX0sZX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcixvLGk9e30sYT0ocj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYn0sZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09byYmKG89ci5hcHBseSh0aGlzLGFyZ3VtZW50cykpLG99KSxzPWZ1bmN0aW9uKHQpe3ZhciBlPXt9O3JldHVybiBmdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXJldHVybiB0KCk7aWYodm9pZCAwPT09ZVt0XSl7dmFyIG49ZnVuY3Rpb24odCl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCl9LmNhbGwodGhpcyx0KTtpZih3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQmJm4gaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpdHJ5e249bi5jb250ZW50RG9jdW1lbnQuaGVhZH1jYXRjaCh0KXtuPW51bGx9ZVt0XT1ufXJldHVybiBlW3RdfX0oKSx1PW51bGwsYz0wLGY9W10sbD1uKDUpO2Z1bmN0aW9uIHAodCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXSxvPWlbci5pZF07aWYobyl7by5yZWZzKys7Zm9yKHZhciBhPTA7YTxvLnBhcnRzLmxlbmd0aDthKyspby5wYXJ0c1thXShyLnBhcnRzW2FdKTtmb3IoO2E8ci5wYXJ0cy5sZW5ndGg7YSsrKW8ucGFydHMucHVzaChnKHIucGFydHNbYV0sZSkpfWVsc2V7dmFyIHM9W107Zm9yKGE9MDthPHIucGFydHMubGVuZ3RoO2ErKylzLnB1c2goZyhyLnBhcnRzW2FdLGUpKTtpW3IuaWRdPXtpZDpyLmlkLHJlZnM6MSxwYXJ0czpzfX19fWZ1bmN0aW9uIGQodCxlKXtmb3IodmFyIG49W10scj17fSxvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBpPXRbb10sYT1lLmJhc2U/aVswXStlLmJhc2U6aVswXSxzPXtjc3M6aVsxXSxtZWRpYTppWzJdLHNvdXJjZU1hcDppWzNdfTtyW2FdP3JbYV0ucGFydHMucHVzaChzKTpuLnB1c2goclthXT17aWQ6YSxwYXJ0czpbc119KX1yZXR1cm4gbn1mdW5jdGlvbiBoKHQsZSl7dmFyIG49cyh0Lmluc2VydEludG8pO2lmKCFuKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO3ZhciByPWZbZi5sZW5ndGgtMV07aWYoXCJ0b3BcIj09PXQuaW5zZXJ0QXQpcj9yLm5leHRTaWJsaW5nP24uaW5zZXJ0QmVmb3JlKGUsci5uZXh0U2libGluZyk6bi5hcHBlbmRDaGlsZChlKTpuLmluc2VydEJlZm9yZShlLG4uZmlyc3RDaGlsZCksZi5wdXNoKGUpO2Vsc2UgaWYoXCJib3R0b21cIj09PXQuaW5zZXJ0QXQpbi5hcHBlbmRDaGlsZChlKTtlbHNle2lmKFwib2JqZWN0XCIhPXR5cGVvZiB0Lmluc2VydEF0fHwhdC5pbnNlcnRBdC5iZWZvcmUpdGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7dmFyIG89cyh0Lmluc2VydEludG8rXCIgXCIrdC5pbnNlcnRBdC5iZWZvcmUpO24uaW5zZXJ0QmVmb3JlKGUsbyl9fWZ1bmN0aW9uIHYodCl7aWYobnVsbD09PXQucGFyZW50Tm9kZSlyZXR1cm4hMTt0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCk7dmFyIGU9Zi5pbmRleE9mKHQpO2U+PTAmJmYuc3BsaWNlKGUsMSl9ZnVuY3Rpb24gYih0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7cmV0dXJuIHZvaWQgMD09PXQuYXR0cnMudHlwZSYmKHQuYXR0cnMudHlwZT1cInRleHQvY3NzXCIpLHkoZSx0LmF0dHJzKSxoKHQsZSksZX1mdW5jdGlvbiB5KHQsZSl7T2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihuKXt0LnNldEF0dHJpYnV0ZShuLGVbbl0pfSl9ZnVuY3Rpb24gZyh0LGUpe3ZhciBuLHIsbyxpO2lmKGUudHJhbnNmb3JtJiZ0LmNzcyl7aWYoIShpPWUudHJhbnNmb3JtKHQuY3NzKSkpcmV0dXJuIGZ1bmN0aW9uKCl7fTt0LmNzcz1pfWlmKGUuc2luZ2xldG9uKXt2YXIgYT1jKys7bj11fHwodT1iKGUpKSxyPXguYmluZChudWxsLG4sYSwhMSksbz14LmJpbmQobnVsbCxuLGEsITApfWVsc2UgdC5zb3VyY2VNYXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgQmxvYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYT8obj1mdW5jdGlvbih0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtyZXR1cm4gdm9pZCAwPT09dC5hdHRycy50eXBlJiYodC5hdHRycy50eXBlPVwidGV4dC9jc3NcIiksdC5hdHRycy5yZWw9XCJzdHlsZXNoZWV0XCIseShlLHQuYXR0cnMpLGgodCxlKSxlfShlKSxyPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uLmNzcyxvPW4uc291cmNlTWFwLGk9dm9pZCAwPT09ZS5jb252ZXJ0VG9BYnNvbHV0ZVVybHMmJm87KGUuY29udmVydFRvQWJzb2x1dGVVcmxzfHxpKSYmKHI9bChyKSk7byYmKHIrPVwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShvKSkpKStcIiAqL1wiKTt2YXIgYT1uZXcgQmxvYihbcl0se3R5cGU6XCJ0ZXh0L2Nzc1wifSkscz10LmhyZWY7dC5ocmVmPVVSTC5jcmVhdGVPYmplY3RVUkwoYSkscyYmVVJMLnJldm9rZU9iamVjdFVSTChzKX0uYmluZChudWxsLG4sZSksbz1mdW5jdGlvbigpe3Yobiksbi5ocmVmJiZVUkwucmV2b2tlT2JqZWN0VVJMKG4uaHJlZil9KToobj1iKGUpLHI9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLmNzcyxyPWUubWVkaWE7ciYmdC5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLHIpO2lmKHQuc3R5bGVTaGVldCl0LnN0eWxlU2hlZXQuY3NzVGV4dD1uO2Vsc2V7Zm9yKDt0LmZpcnN0Q2hpbGQ7KXQucmVtb3ZlQ2hpbGQodC5maXJzdENoaWxkKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG4pKX19LmJpbmQobnVsbCxuKSxvPWZ1bmN0aW9uKCl7dihuKX0pO3JldHVybiByKHQpLGZ1bmN0aW9uKGUpe2lmKGUpe2lmKGUuY3NzPT09dC5jc3MmJmUubWVkaWE9PT10Lm1lZGlhJiZlLnNvdXJjZU1hcD09PXQuc291cmNlTWFwKXJldHVybjtyKHQ9ZSl9ZWxzZSBvKCl9fXQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBERUJVRyYmREVCVUcmJlwib2JqZWN0XCIhPXR5cGVvZiBkb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7KGU9ZXx8e30pLmF0dHJzPVwib2JqZWN0XCI9PXR5cGVvZiBlLmF0dHJzP2UuYXR0cnM6e30sZS5zaW5nbGV0b258fFwiYm9vbGVhblwiPT10eXBlb2YgZS5zaW5nbGV0b258fChlLnNpbmdsZXRvbj1hKCkpLGUuaW5zZXJ0SW50b3x8KGUuaW5zZXJ0SW50bz1cImhlYWRcIiksZS5pbnNlcnRBdHx8KGUuaW5zZXJ0QXQ9XCJib3R0b21cIik7dmFyIG49ZCh0LGUpO3JldHVybiBwKG4sZSksZnVuY3Rpb24odCl7Zm9yKHZhciByPVtdLG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGE9bltvXTsocz1pW2EuaWRdKS5yZWZzLS0sci5wdXNoKHMpfXQmJnAoZCh0LGUpLGUpO2ZvcihvPTA7bzxyLmxlbmd0aDtvKyspe3ZhciBzO2lmKDA9PT0ocz1yW29dKS5yZWZzKXtmb3IodmFyIHU9MDt1PHMucGFydHMubGVuZ3RoO3UrKylzLnBhcnRzW3VdKCk7ZGVsZXRlIGlbcy5pZF19fX19O3ZhciBtLHc9KG09W10sZnVuY3Rpb24odCxlKXtyZXR1cm4gbVt0XT1lLG0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIil9KTtmdW5jdGlvbiB4KHQsZSxuLHIpe3ZhciBvPW4/XCJcIjpyLmNzcztpZih0LnN0eWxlU2hlZXQpdC5zdHlsZVNoZWV0LmNzc1RleHQ9dyhlLG8pO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobyksYT10LmNoaWxkTm9kZXM7YVtlXSYmdC5yZW1vdmVDaGlsZChhW2VdKSxhLmxlbmd0aD90Lmluc2VydEJlZm9yZShpLGFbZV0pOnQuYXBwZW5kQ2hpbGQoaSl9fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmxvY2F0aW9uO2lmKCFlKXRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO2lmKCF0fHxcInN0cmluZ1wiIT10eXBlb2YgdClyZXR1cm4gdDt2YXIgbj1lLnByb3RvY29sK1wiLy9cIitlLmhvc3Qscj1uK2UucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLFwiL1wiKTtyZXR1cm4gdC5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSxmdW5jdGlvbih0LGUpe3ZhciBvLGk9ZS50cmltKCkucmVwbGFjZSgvXlwiKC4qKVwiJC8sZnVuY3Rpb24odCxlKXtyZXR1cm4gZX0pLnJlcGxhY2UoL14nKC4qKSckLyxmdW5jdGlvbih0LGUpe3JldHVybiBlfSk7cmV0dXJuL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdChpKT90OihvPTA9PT1pLmluZGV4T2YoXCIvL1wiKT9pOjA9PT1pLmluZGV4T2YoXCIvXCIpP24raTpyK2kucmVwbGFjZSgvXlxcLlxcLy8sXCJcIiksXCJ1cmwoXCIrSlNPTi5zdHJpbmdpZnkobykrXCIpXCIpfSl9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7bi5yKGUpLGUuZGVmYXVsdD0nPHN2ZyB3aWR0aD1cIjE3XCIgaGVpZ2h0PVwiMTJcIiB2aWV3Qm94PVwiMSAtMSAxNiAxNVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTE3LjgzOSA1LjUyNWExLjEwNSAxLjEwNSAwIDAgMS0uMDE1IDEuNTQ3bC00Ljk0MyA0Ljk0M2ExLjEwNSAxLjEwNSAwIDEgMS0xLjU2Mi0xLjU2Mmw0LjEzNy00LjEzNy00LjA3OC00LjA3OEExLjEyNSAxLjEyNSAwIDEgMSAxMi45Ny42NDhsNC43OTYgNC43OTZjLjAyNi4wMjYuMDUuMDUzLjA3NC4wOHptLTE0Ljk1Mi43OTFsNC4xMzcgNC4xMzdhMS4xMDUgMS4xMDUgMCAxIDEtMS41NjIgMS41NjJMLjUxOSA3LjA3MmExLjEwNSAxLjEwNSAwIDAgMS0uMDE1LTEuNTQ3Yy4wMjMtLjAyOC4wNDgtLjA1NS4wNzQtLjA4MUw1LjM3NC42NDdhMS4xMjUgMS4xMjUgMCAwIDEgMS41OTEgMS41OTFMMi44ODcgNi4zMTZ6XCIgaWQ9XCJhXCIvPjwvc3ZnPlxcbid9XSl9KTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLkxpc3Q9dCgpOmUuTGlzdD10KCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1uKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgaSBpbiBlKW4uZChyLGksZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxpKSk7cmV0dXJuIHJ9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsXCJhXCIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9XCIvXCIsbihuLnM9MCl9KFtmdW5jdGlvbihlLHQsbil7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gaShlKX0oZSl8fGZ1bmN0aW9uKGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoZSkpcmV0dXJuIEFycmF5LmZyb20oZSl9KGUpfHxmdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybjtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gaShlLHQpO3ZhciBuPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKS5zbGljZSg4LC0xKTtcIk9iamVjdFwiPT09biYmZS5jb25zdHJ1Y3RvciYmKG49ZS5jb25zdHJ1Y3Rvci5uYW1lKTtpZihcIk1hcFwiPT09bnx8XCJTZXRcIj09PW4pcmV0dXJuIEFycmF5LmZyb20oZSk7aWYoXCJBcmd1bWVudHNcIj09PW58fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKXJldHVybiBpKGUsdCl9KGUpfHxmdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfSgpfWZ1bmN0aW9uIGkoZSx0KXsobnVsbD09dHx8dD5lLmxlbmd0aCkmJih0PWUubGVuZ3RoKTtmb3IodmFyIG49MCxyPW5ldyBBcnJheSh0KTtuPHQ7bisrKXJbbl09ZVtuXTtyZXR1cm4gcn1mdW5jdGlvbiBhKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX1mdW5jdGlvbiBvKGUsdCxuKXtyZXR1cm4gdCYmYShlLnByb3RvdHlwZSx0KSxuJiZhKGUsbiksZX1uKDEpLnRvU3RyaW5nKCk7dmFyIHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciBuPXQuZGF0YSxyPSh0LmNvbmZpZyx0LmFwaSksaT10LnJlYWRPbmx5OyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5fZWxlbWVudHM9e3dyYXBwZXI6bnVsbH0sdGhpcy5hcGk9cix0aGlzLnJlYWRPbmx5PWksdGhpcy5zZXR0aW5ncz1be25hbWU6XCJ1bm9yZGVyZWRcIix0aXRsZTp0aGlzLmFwaS5pMThuLnQoXCJVbm9yZGVyZWRcIiksaWNvbjonPHN2ZyB3aWR0aD1cIjE3XCIgaGVpZ2h0PVwiMTNcIiB2aWV3Qm94PVwiMCAwIDE3IDEzXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPiA8cGF0aCBkPVwiTTUuNjI1IDQuODVoOS4yNWExLjEyNSAxLjEyNSAwIDAgMSAwIDIuMjVoLTkuMjVhMS4xMjUgMS4xMjUgMCAwIDEgMC0yLjI1em0wLTQuODVoOS4yNWExLjEyNSAxLjEyNSAwIDAgMSAwIDIuMjVoLTkuMjVhMS4xMjUgMS4xMjUgMCAwIDEgMC0yLjI1em0wIDkuODVoOS4yNWExLjEyNSAxLjEyNSAwIDAgMSAwIDIuMjVoLTkuMjVhMS4xMjUgMS4xMjUgMCAwIDEgMC0yLjI1em0tNC41LTVhMS4xMjUgMS4xMjUgMCAxIDEgMCAyLjI1IDEuMTI1IDEuMTI1IDAgMCAxIDAtMi4yNXptMC00Ljg1YTEuMTI1IDEuMTI1IDAgMSAxIDAgMi4yNSAxLjEyNSAxLjEyNSAwIDAgMSAwLTIuMjV6bTAgOS44NWExLjEyNSAxLjEyNSAwIDEgMSAwIDIuMjUgMS4xMjUgMS4xMjUgMCAwIDEgMC0yLjI1elwiLz48L3N2Zz4nLGRlZmF1bHQ6ITF9LHtuYW1lOlwib3JkZXJlZFwiLHRpdGxlOnRoaXMuYXBpLmkxOG4udChcIk9yZGVyZWRcIiksaWNvbjonPHN2ZyB3aWR0aD1cIjE3XCIgaGVpZ2h0PVwiMTNcIiB2aWV3Qm94PVwiMCAwIDE3IDEzXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNNS44MTkgNC42MDdoOS4zNjJhMS4wNjkgMS4wNjkgMCAwIDEgMCAyLjEzOEg1LjgyYTEuMDY5IDEuMDY5IDAgMSAxIDAtMi4xMzh6bTAtNC42MDdoOS4zNjJhMS4wNjkgMS4wNjkgMCAwIDEgMCAyLjEzOEg1LjgyYTEuMDY5IDEuMDY5IDAgMSAxIDAtMi4xMzh6bTAgOS4zNTdoOS4zNjJhMS4wNjkgMS4wNjkgMCAwIDEgMCAyLjEzOEg1LjgyYTEuMDY5IDEuMDY5IDAgMCAxIDAtMi4xMzd6TTEuNDY4IDQuMTU1VjEuMzNjLS41NTQuNDA0LS45MjYuNjA2LTEuMTE4LjYwNmEuMzM4LjMzOCAwIDAgMS0uMjQ0LS4xMDRBLjMyNy4zMjcgMCAwIDEgMCAxLjU5YzAtLjEwNy4wMzUtLjE4NC4xMDUtLjIzNC4wNy0uMDUuMTkyLS4xMTQuMzY5LS4xOTIuMjY0LS4xMTguNDc1LS4yNDMuNjMzLS4zNzMuMTU4LS4xMy4yOTgtLjI3Ni40Mi0uNDM4YTMuOTQgMy45NCAwIDAgMSAuMjM4LS4yOThDMS44MDIuMDE5IDEuODcyIDAgMS45NzUgMGMuMTE1IDAgLjIwOC4wNDIuMjc3LjEyNy4wNy4wODUuMTA1LjIwMi4xMDUuMzUxdjMuNTU2YzAgLjQxNi0uMTUuNjI0LS40NDguNjI0YS40MjEuNDIxIDAgMCAxLS4zMi0uMTI3Yy0uMDgtLjA4NS0uMTIxLS4yMS0uMTIxLS4zNzZ6bS0uMjgzIDYuNjY0aDEuNTcyYy4xNTYgMCAuMjc1LjAzLjM1OC4wOTFhLjI5NC4yOTQgMCAwIDEgLjEyMy4yNS4zMjMuMzIzIDAgMCAxLS4wOTguMjM4Yy0uMDY1LjA2NS0uMTY0LjA5Ny0uMjk2LjA5N0guNjI5YS40OTQuNDk0IDAgMCAxLS4zNTMtLjExOS4zNzIuMzcyIDAgMCAxLS4xMjYtLjI4YzAtLjA2OC4wMjctLjE2LjA4MS0uMjczYS45NzcuOTc3IDAgMCAxIC4xNzgtLjI2OGMuMjY3LS4yNjQuNTA3LS40OS43MjItLjY3OC4yMTUtLjE4OC4zNjgtLjMxMi40Ni0uMzcxLjE2NS0uMTEuMzAyLS4yMjIuNDEyLS4zMzQuMTA5LS4xMTIuMTkyLS4yMjYuMjUtLjM0NGEuNzg2Ljc4NiAwIDAgMCAuMDg1LS4zNDUuNi42IDAgMCAwLS4zNDEtLjU1My43NS43NSAwIDAgMC0uMzQ1LS4wOGMtLjI2MyAwLS40Ny4xMS0uNjIuMzI5LS4wMi4wMjktLjA1NC4xMDctLjEwMS4yMzVhLjk2Ni45NjYgMCAwIDEtLjE2LjI5NWMtLjA1OS4wNjktLjE0NS4xMDMtLjI2LjEwM2EuMzQ4LjM0OCAwIDAgMS0uMjUtLjA5NC4zNC4zNCAwIDAgMS0uMDk5LS4yNThjMC0uMTMyLjAzMS0uMjcuMDkzLS40MTMuMDYzLS4xNDMuMTU1LS4yNzMuMjc5LS4zOS4xMjMtLjExNi4yOC0uMjEuNDctLjI4Mi4xODktLjA3Mi40MTEtLjEwNy42NjYtLjEwNy4zMDcgMCAuNTY5LjA0NS43ODYuMTM3YTEuMTgyIDEuMTgyIDAgMCAxIC42MTguNjIzIDEuMTggMS4xOCAwIDAgMS0uMDk2IDEuMDgzIDIuMDMgMi4wMyAwIDAgMS0uMzc4LjQ1N2MtLjEyOC4xMS0uMzQ0LjI4Mi0uNjQ2LjUxNy0uMzAyLjIzNS0uNTA5LjQxNy0uNjIxLjU0N2ExLjYzNyAxLjYzNyAwIDAgMC0uMTQ4LjE4N3pcIi8+PC9zdmc+JyxkZWZhdWx0OiEwfV0sdGhpcy5fZGF0YT17c3R5bGU6dGhpcy5zZXR0aW5ncy5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4hMD09PWUuZGVmYXVsdH0pKS5uYW1lLGl0ZW1zOltdfSx0aGlzLmRhdGE9bn1yZXR1cm4gbyhlLG51bGwsW3trZXk6XCJpc1JlYWRPbmx5U3VwcG9ydGVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuITB9fSx7a2V5OlwiZW5hYmxlTGluZUJyZWFrc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiEwfX0se2tleTpcInRvb2xib3hcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57aWNvbjonPHN2ZyB3aWR0aD1cIjE3XCIgaGVpZ2h0PVwiMTNcIiB2aWV3Qm94PVwiMCAwIDE3IDEzXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPiA8cGF0aCBkPVwiTTUuNjI1IDQuODVoOS4yNWExLjEyNSAxLjEyNSAwIDAgMSAwIDIuMjVoLTkuMjVhMS4xMjUgMS4xMjUgMCAwIDEgMC0yLjI1em0wLTQuODVoOS4yNWExLjEyNSAxLjEyNSAwIDAgMSAwIDIuMjVoLTkuMjVhMS4xMjUgMS4xMjUgMCAwIDEgMC0yLjI1em0wIDkuODVoOS4yNWExLjEyNSAxLjEyNSAwIDAgMSAwIDIuMjVoLTkuMjVhMS4xMjUgMS4xMjUgMCAwIDEgMC0yLjI1em0tNC41LTVhMS4xMjUgMS4xMjUgMCAxIDEgMCAyLjI1IDEuMTI1IDEuMTI1IDAgMCAxIDAtMi4yNXptMC00Ljg1YTEuMTI1IDEuMTI1IDAgMSAxIDAgMi4yNSAxLjEyNSAxLjEyNSAwIDAgMSAwLTIuMjV6bTAgOS44NWExLjEyNSAxLjEyNSAwIDEgMSAwIDIuMjUgMS4xMjUgMS4xMjUgMCAwIDEgMC0yLjI1elwiLz48L3N2Zz4nLHRpdGxlOlwiTGlzdFwifX19XSksbyhlLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiB0aGlzLl9lbGVtZW50cy53cmFwcGVyPXRoaXMubWFrZU1haW5UYWcodGhpcy5fZGF0YS5zdHlsZSksdGhpcy5fZGF0YS5pdGVtcy5sZW5ndGg/dGhpcy5fZGF0YS5pdGVtcy5mb3JFYWNoKChmdW5jdGlvbih0KXtlLl9lbGVtZW50cy53cmFwcGVyLmFwcGVuZENoaWxkKGUuX21ha2UoXCJsaVwiLGUuQ1NTLml0ZW0se2lubmVySFRNTDp0fSkpfSkpOnRoaXMuX2VsZW1lbnRzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5fbWFrZShcImxpXCIsdGhpcy5DU1MuaXRlbSkpLHRoaXMucmVhZE9ubHl8fHRoaXMuX2VsZW1lbnRzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwoZnVuY3Rpb24odCl7c3dpdGNoKHQua2V5Q29kZSl7Y2FzZSAxMzplLmdldE91dG9mTGlzdCh0KTticmVhaztjYXNlIDg6ZS5iYWNrc3BhY2UodCl9fSksITEpLHRoaXMuX2VsZW1lbnRzLndyYXBwZXJ9fSx7a2V5Olwic2F2ZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0YX19LHtrZXk6XCJyZW5kZXJTZXR0aW5nc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMuX21ha2UoXCJkaXZcIixbdGhpcy5DU1Muc2V0dGluZ3NXcmFwcGVyXSx7fSk7cmV0dXJuIHRoaXMuc2V0dGluZ3MuZm9yRWFjaCgoZnVuY3Rpb24obil7dmFyIHI9ZS5fbWFrZShcImRpdlwiLGUuQ1NTLnNldHRpbmdzQnV0dG9uLHtpbm5lckhUTUw6bi5pY29ufSk7ci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoZnVuY3Rpb24oKXtlLnRvZ2dsZVR1bmUobi5uYW1lKTt2YXIgdD1yLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChcIi5cIitlLkNTUy5zZXR0aW5nc0J1dHRvbik7QXJyYXkuZnJvbSh0KS5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jbGFzc0xpc3QucmVtb3ZlKGUuQ1NTLnNldHRpbmdzQnV0dG9uQWN0aXZlKX0pKSxyLmNsYXNzTGlzdC50b2dnbGUoZS5DU1Muc2V0dGluZ3NCdXR0b25BY3RpdmUpfSkpLGUuYXBpLnRvb2x0aXAub25Ib3ZlcihyLG4udGl0bGUse3BsYWNlbWVudDpcInRvcFwiLGhpZGluZ0RlbGF5OjUwMH0pLGUuX2RhdGEuc3R5bGU9PT1uLm5hbWUmJnIuY2xhc3NMaXN0LmFkZChlLkNTUy5zZXR0aW5nc0J1dHRvbkFjdGl2ZSksdC5hcHBlbmRDaGlsZChyKX0pKSx0fX0se2tleTpcIm9uUGFzdGVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLmRldGFpbC5kYXRhO3RoaXMuZGF0YT10aGlzLnBhc3RlSGFuZGxlcih0KX19LHtrZXk6XCJtYWtlTWFpblRhZ1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PVwib3JkZXJlZFwiPT09ZT90aGlzLkNTUy53cmFwcGVyT3JkZXJlZDp0aGlzLkNTUy53cmFwcGVyVW5vcmRlcmVkLG49XCJvcmRlcmVkXCI9PT1lP1wib2xcIjpcInVsXCI7cmV0dXJuIHRoaXMuX21ha2UobixbdGhpcy5DU1MuYmFzZUJsb2NrLHRoaXMuQ1NTLndyYXBwZXIsdF0se2NvbnRlbnRFZGl0YWJsZTohdGhpcy5yZWFkT25seX0pfX0se2tleTpcInRvZ2dsZVR1bmVcIix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy5tYWtlTWFpblRhZyhlKTt0aGlzLl9lbGVtZW50cy53cmFwcGVyLmhhc0NoaWxkTm9kZXMoKTspdC5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50cy53cmFwcGVyLmZpcnN0Q2hpbGQpO3RoaXMuX2VsZW1lbnRzLndyYXBwZXIucmVwbGFjZVdpdGgodCksdGhpcy5fZWxlbWVudHMud3JhcHBlcj10LHRoaXMuX2RhdGEuc3R5bGU9ZX19LHtrZXk6XCJfbWFrZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0LG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm51bGwsaT1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e30sYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO0FycmF5LmlzQXJyYXkobik/KHQ9YS5jbGFzc0xpc3QpLmFkZC5hcHBseSh0LHIobikpOm4mJmEuY2xhc3NMaXN0LmFkZChuKTtmb3IodmFyIG8gaW4gaSlhW29dPWlbb107cmV0dXJuIGF9fSx7a2V5OlwiZ2V0T3V0b2ZMaXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fZWxlbWVudHMud3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiK3RoaXMuQ1NTLml0ZW0pO2lmKCEodC5sZW5ndGg8Mikpe3ZhciBuPXRbdC5sZW5ndGgtMV0scj10aGlzLmN1cnJlbnRJdGVtO3IhPT1ufHxuLnRleHRDb250ZW50LnRyaW0oKS5sZW5ndGh8fChyLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQociksdGhpcy5hcGkuYmxvY2tzLmluc2VydCgpLHRoaXMuYXBpLmNhcmV0LnNldFRvQmxvY2sodGhpcy5hcGkuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCkpLGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpKX19fSx7a2V5OlwiYmFja3NwYWNlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fZWxlbWVudHMud3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiK3RoaXMuQ1NTLml0ZW0pLG49dFswXTtuJiZ0Lmxlbmd0aDwyJiYhbi5pbm5lckhUTUwucmVwbGFjZShcIjxicj5cIixcIiBcIikudHJpbSgpJiZlLnByZXZlbnREZWZhdWx0KCl9fSx7a2V5Olwic2VsZWN0SXRlbVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKTt2YXIgdD13aW5kb3cuZ2V0U2VsZWN0aW9uKCksbj10LmFuY2hvck5vZGUucGFyZW50Tm9kZS5jbG9zZXN0KFwiLlwiK3RoaXMuQ1NTLml0ZW0pLHI9bmV3IFJhbmdlO3Iuc2VsZWN0Tm9kZUNvbnRlbnRzKG4pLHQucmVtb3ZlQWxsUmFuZ2VzKCksdC5hZGRSYW5nZShyKX19LHtrZXk6XCJwYXN0ZUhhbmRsZXJcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdCxuPWUudGFnTmFtZTtzd2l0Y2gobil7Y2FzZVwiT0xcIjp0PVwib3JkZXJlZFwiO2JyZWFrO2Nhc2VcIlVMXCI6Y2FzZVwiTElcIjp0PVwidW5vcmRlcmVkXCJ9dmFyIHI9e3N0eWxlOnQsaXRlbXM6W119O2lmKFwiTElcIj09PW4pci5pdGVtcz1bZS5pbm5lckhUTUxdO2Vsc2V7dmFyIGk9QXJyYXkuZnJvbShlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJMSVwiKSk7ci5pdGVtcz1pLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5uZXJIVE1MfSkpLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuISFlLnRyaW0oKX0pKX1yZXR1cm4gcn19LHtrZXk6XCJDU1NcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57YmFzZUJsb2NrOnRoaXMuYXBpLnN0eWxlcy5ibG9jayx3cmFwcGVyOlwiY2R4LWxpc3RcIix3cmFwcGVyT3JkZXJlZDpcImNkeC1saXN0LS1vcmRlcmVkXCIsd3JhcHBlclVub3JkZXJlZDpcImNkeC1saXN0LS11bm9yZGVyZWRcIixpdGVtOlwiY2R4LWxpc3RfX2l0ZW1cIixzZXR0aW5nc1dyYXBwZXI6XCJjZHgtbGlzdC1zZXR0aW5nc1wiLHNldHRpbmdzQnV0dG9uOnRoaXMuYXBpLnN0eWxlcy5zZXR0aW5nc0J1dHRvbixzZXR0aW5nc0J1dHRvbkFjdGl2ZTp0aGlzLmFwaS5zdHlsZXMuc2V0dGluZ3NCdXR0b25BY3RpdmV9fX0se2tleTpcImRhdGFcIixzZXQ6ZnVuY3Rpb24oZSl7ZXx8KGU9e30pLHRoaXMuX2RhdGEuc3R5bGU9ZS5zdHlsZXx8dGhpcy5zZXR0aW5ncy5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4hMD09PWUuZGVmYXVsdH0pKS5uYW1lLHRoaXMuX2RhdGEuaXRlbXM9ZS5pdGVtc3x8W107dmFyIHQ9dGhpcy5fZWxlbWVudHMud3JhcHBlcjt0JiZ0LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHRoaXMucmVuZGVyKCksdCl9LGdldDpmdW5jdGlvbigpe3RoaXMuX2RhdGEuaXRlbXM9W107Zm9yKHZhciBlPXRoaXMuX2VsZW1lbnRzLndyYXBwZXIucXVlcnlTZWxlY3RvckFsbChcIi5cIi5jb25jYXQodGhpcy5DU1MuaXRlbSkpLHQ9MDt0PGUubGVuZ3RoO3QrKyl7ZVt0XS5pbm5lckhUTUwucmVwbGFjZShcIjxicj5cIixcIiBcIikudHJpbSgpJiZ0aGlzLl9kYXRhLml0ZW1zLnB1c2goZVt0XS5pbm5lckhUTUwpfXJldHVybiB0aGlzLl9kYXRhfX0se2tleTpcImN1cnJlbnRJdGVtXCIsZ2V0OmZ1bmN0aW9uKCl7dmFyIGU9d2luZG93LmdldFNlbGVjdGlvbigpLmFuY2hvck5vZGU7cmV0dXJuIGUubm9kZVR5cGUhPT1Ob2RlLkVMRU1FTlRfTk9ERSYmKGU9ZS5wYXJlbnROb2RlKSxlLmNsb3Nlc3QoXCIuXCIuY29uY2F0KHRoaXMuQ1NTLml0ZW0pKX19XSxbe2tleTpcImNvbnZlcnNpb25Db25maWdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57ZXhwb3J0OmZ1bmN0aW9uKGUpe3JldHVybiBlLml0ZW1zLmpvaW4oXCIuIFwiKX0saW1wb3J0OmZ1bmN0aW9uKGUpe3JldHVybntpdGVtczpbZV0sc3R5bGU6XCJ1bm9yZGVyZWRcIn19fX19LHtrZXk6XCJzYW5pdGl6ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybntzdHlsZTp7fSxpdGVtczp7YnI6ITB9fX19LHtrZXk6XCJwYXN0ZUNvbmZpZ1wiLGdldDpmdW5jdGlvbigpe3JldHVybnt0YWdzOltcIk9MXCIsXCJVTFwiLFwiTElcIl19fX1dKSxlfSgpO2UuZXhwb3J0cz1zfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigyKSxpPW4oMyk7XCJzdHJpbmdcIj09dHlwZW9mKGk9aS5fX2VzTW9kdWxlP2kuZGVmYXVsdDppKSYmKGk9W1tlLmksaSxcIlwiXV0pO3ZhciBhPXtpbnNlcnQ6XCJoZWFkXCIsc2luZ2xldG9uOiExfTtyKGksYSk7ZS5leHBvcnRzPWkubG9jYWxzfHx7fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByLGk9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9Qm9vbGVhbih3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYikpLHJ9LGE9ZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09ZVt0XSl7dmFyIG49ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KTtpZih3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQmJm4gaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpdHJ5e249bi5jb250ZW50RG9jdW1lbnQuaGVhZH1jYXRjaChlKXtuPW51bGx9ZVt0XT1ufXJldHVybiBlW3RdfX0oKSxvPVtdO2Z1bmN0aW9uIHMoZSl7Zm9yKHZhciB0PS0xLG49MDtuPG8ubGVuZ3RoO24rKylpZihvW25dLmlkZW50aWZpZXI9PT1lKXt0PW47YnJlYWt9cmV0dXJuIHR9ZnVuY3Rpb24gYyhlLHQpe2Zvcih2YXIgbj17fSxyPVtdLGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIGE9ZVtpXSxjPXQuYmFzZT9hWzBdK3QuYmFzZTphWzBdLGw9bltjXXx8MCx1PVwiXCIuY29uY2F0KGMsXCIgXCIpLmNvbmNhdChsKTtuW2NdPWwrMTt2YXIgZD1zKHUpLGY9e2NzczphWzFdLG1lZGlhOmFbMl0sc291cmNlTWFwOmFbM119Oy0xIT09ZD8ob1tkXS5yZWZlcmVuY2VzKyssb1tkXS51cGRhdGVyKGYpKTpvLnB1c2goe2lkZW50aWZpZXI6dSx1cGRhdGVyOnYoZix0KSxyZWZlcmVuY2VzOjF9KSxyLnB1c2godSl9cmV0dXJuIHJ9ZnVuY3Rpb24gbChlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIikscj1lLmF0dHJpYnV0ZXN8fHt9O2lmKHZvaWQgMD09PXIubm9uY2Upe3ZhciBpPW4ubmM7aSYmKHIubm9uY2U9aSl9aWYoT2JqZWN0LmtleXMocikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dC5zZXRBdHRyaWJ1dGUoZSxyW2VdKX0pKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluc2VydCllLmluc2VydCh0KTtlbHNle3ZhciBvPWEoZS5pbnNlcnR8fFwiaGVhZFwiKTtpZighbyl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO28uYXBwZW5kQ2hpbGQodCl9cmV0dXJuIHR9dmFyIHUsZD0odT1bXSxmdW5jdGlvbihlLHQpe3JldHVybiB1W2VdPXQsdS5maWx0ZXIoQm9vbGVhbikuam9pbihcIlxcblwiKX0pO2Z1bmN0aW9uIGYoZSx0LG4scil7dmFyIGk9bj9cIlwiOnIubWVkaWE/XCJAbWVkaWEgXCIuY29uY2F0KHIubWVkaWEsXCIge1wiKS5jb25jYXQoci5jc3MsXCJ9XCIpOnIuY3NzO2lmKGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD1kKHQsaSk7ZWxzZXt2YXIgYT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShpKSxvPWUuY2hpbGROb2RlcztvW3RdJiZlLnJlbW92ZUNoaWxkKG9bdF0pLG8ubGVuZ3RoP2UuaW5zZXJ0QmVmb3JlKGEsb1t0XSk6ZS5hcHBlbmRDaGlsZChhKX19ZnVuY3Rpb24gcChlLHQsbil7dmFyIHI9bi5jc3MsaT1uLm1lZGlhLGE9bi5zb3VyY2VNYXA7aWYoaT9lLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsaSk6ZS5yZW1vdmVBdHRyaWJ1dGUoXCJtZWRpYVwiKSxhJiZidG9hJiYocis9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShhKSkpKSxcIiAqL1wiKSksZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PXI7ZWxzZXtmb3IoO2UuZmlyc3RDaGlsZDspZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpO2UuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocikpfX12YXIgaD1udWxsLG09MDtmdW5jdGlvbiB2KGUsdCl7dmFyIG4scixpO2lmKHQuc2luZ2xldG9uKXt2YXIgYT1tKys7bj1ofHwoaD1sKHQpKSxyPWYuYmluZChudWxsLG4sYSwhMSksaT1mLmJpbmQobnVsbCxuLGEsITApfWVsc2Ugbj1sKHQpLHI9cC5iaW5kKG51bGwsbix0KSxpPWZ1bmN0aW9uKCl7IWZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lLnBhcmVudE5vZGUpcmV0dXJuITE7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfShuKX07cmV0dXJuIHIoZSksZnVuY3Rpb24odCl7aWYodCl7aWYodC5jc3M9PT1lLmNzcyYmdC5tZWRpYT09PWUubWVkaWEmJnQuc291cmNlTWFwPT09ZS5zb3VyY2VNYXApcmV0dXJuO3IoZT10KX1lbHNlIGkoKX19ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7KHQ9dHx8e30pLnNpbmdsZXRvbnx8XCJib29sZWFuXCI9PXR5cGVvZiB0LnNpbmdsZXRvbnx8KHQuc2luZ2xldG9uPWkoKSk7dmFyIG49YyhlPWV8fFtdLHQpO3JldHVybiBmdW5jdGlvbihlKXtpZihlPWV8fFtdLFwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSl7Zm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBpPXMobltyXSk7b1tpXS5yZWZlcmVuY2VzLS19Zm9yKHZhciBhPWMoZSx0KSxsPTA7bDxuLmxlbmd0aDtsKyspe3ZhciB1PXMobltsXSk7MD09PW9bdV0ucmVmZXJlbmNlcyYmKG9bdV0udXBkYXRlcigpLG8uc3BsaWNlKHUsMSkpfW49YX19fX0sZnVuY3Rpb24oZSx0LG4peyh0PW4oNCkoITEpKS5wdXNoKFtlLmksXCIuY2R4LWxpc3Qge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmctbGVmdDogNDBweDtcXG4gICAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuICAgIC5jZHgtbGlzdF9faXRlbSB7XFxuICAgICAgICBwYWRkaW5nOiA1LjVweCAwIDUuNXB4IDNweDtcXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxLjZlbTtcXG4gICAgfVxcblxcbiAgICAuY2R4LWxpc3QtLXVub3JkZXJlZCB7XFxuICAgICAgICBsaXN0LXN0eWxlOiBkaXNjO1xcbiAgICB9XFxuXFxuICAgIC5jZHgtbGlzdC0tb3JkZXJlZCB7XFxuICAgICAgICBsaXN0LXN0eWxlOiBkZWNpbWFsO1xcbiAgICB9XFxuXFxuICAgIC5jZHgtbGlzdC1zZXR0aW5ncyB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICB9XFxuXFxuICAgIC5jZHgtbGlzdC1zZXR0aW5ncyAuY2R4LXNldHRpbmdzLWJ1dHRvbiB7XFxuICAgICAgICAgICAgd2lkdGg6IDUwJTtcXG4gICAgICAgIH1cXG5cIixcIlwiXSksZS5leHBvcnRzPXR9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107cmV0dXJuIHQudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBuPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZVsxXXx8XCJcIixyPWVbM107aWYoIXIpcmV0dXJuIG47aWYodCYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYSl7dmFyIGk9KG89cixzPWJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KG8pKSkpLGM9XCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQocyksXCIvKiMgXCIuY29uY2F0KGMsXCIgKi9cIikpLGE9ci5zb3VyY2VzLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChyLnNvdXJjZVJvb3R8fFwiXCIpLmNvbmNhdChlLFwiICovXCIpfSkpO3JldHVybltuXS5jb25jYXQoYSkuY29uY2F0KFtpXSkuam9pbihcIlxcblwiKX12YXIgbyxzLGM7cmV0dXJuW25dLmpvaW4oXCJcXG5cIil9KHQsZSk7cmV0dXJuIHRbMl0/XCJAbWVkaWEgXCIuY29uY2F0KHRbMl0sXCIge1wiKS5jb25jYXQobixcIn1cIik6bn0pKS5qb2luKFwiXCIpfSx0Lmk9ZnVuY3Rpb24oZSxuLHIpe1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1bW251bGwsZSxcIlwiXV0pO3ZhciBpPXt9O2lmKHIpZm9yKHZhciBhPTA7YTx0aGlzLmxlbmd0aDthKyspe3ZhciBvPXRoaXNbYV1bMF07bnVsbCE9byYmKGlbb109ITApfWZvcih2YXIgcz0wO3M8ZS5sZW5ndGg7cysrKXt2YXIgYz1bXS5jb25jYXQoZVtzXSk7ciYmaVtjWzBdXXx8KG4mJihjWzJdP2NbMl09XCJcIi5jb25jYXQobixcIiBhbmQgXCIpLmNvbmNhdChjWzJdKTpjWzJdPW4pLHQucHVzaChjKSl9fSx0fX1dKX0pKTsiLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLk1hcmtlcj1lKCk6dC5NYXJrZXI9ZSgpfSh3aW5kb3csZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9e307ZnVuY3Rpb24gbihyKXtpZihlW3JdKXJldHVybiBlW3JdLmV4cG9ydHM7dmFyIG89ZVtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIHRbcl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsbiksby5sPSEwLG8uZXhwb3J0c31yZXR1cm4gbi5tPXQsbi5jPWUsbi5kPWZ1bmN0aW9uKHQsZSxyKXtuLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLnI9ZnVuY3Rpb24odCl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodCxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1uKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgbyBpbiB0KW4uZChyLG8sZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxvKSk7cmV0dXJuIHJ9LG4ubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gbi5kKGUsXCJhXCIsZSksZX0sbi5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxuLnA9XCIvXCIsbihuLnM9MCl9KFtmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgcj1lW25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxyLmtleSxyKX19ZnVuY3Rpb24gbyh0LGUsbil7cmV0dXJuIGUmJnIodC5wcm90b3R5cGUsZSksbiYmcih0LG4pLHR9bigxKS50b1N0cmluZygpO3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgbj1lLmFwaTshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLHQpLHRoaXMuYXBpPW4sdGhpcy5idXR0b249bnVsbCx0aGlzLnRhZz1cIk1BUktcIix0aGlzLmljb25DbGFzc2VzPXtiYXNlOnRoaXMuYXBpLnN0eWxlcy5pbmxpbmVUb29sQnV0dG9uLGFjdGl2ZTp0aGlzLmFwaS5zdHlsZXMuaW5saW5lVG9vbEJ1dHRvbkFjdGl2ZX19cmV0dXJuIG8odCxudWxsLFt7a2V5OlwiQ1NTXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJjZHgtbWFya2VyXCJ9fV0pLG8odCxbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYnV0dG9uPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksdGhpcy5idXR0b24udHlwZT1cImJ1dHRvblwiLHRoaXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5pY29uQ2xhc3Nlcy5iYXNlKSx0aGlzLmJ1dHRvbi5pbm5lckhUTUw9dGhpcy50b29sYm94SWNvbix0aGlzLmJ1dHRvbn19LHtrZXk6XCJzdXJyb3VuZFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKGUpe3ZhciBuPXRoaXMuYXBpLnNlbGVjdGlvbi5maW5kUGFyZW50VGFnKHRoaXMudGFnLHQuQ1NTKTtuP3RoaXMudW53cmFwKG4pOnRoaXMud3JhcChlKX19fSx7a2V5Olwid3JhcFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy50YWcpO24uY2xhc3NMaXN0LmFkZCh0LkNTUyksbi5hcHBlbmRDaGlsZChlLmV4dHJhY3RDb250ZW50cygpKSxlLmluc2VydE5vZGUobiksdGhpcy5hcGkuc2VsZWN0aW9uLmV4cGFuZFRvVGFnKG4pfX0se2tleTpcInVud3JhcFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuYXBpLnNlbGVjdGlvbi5leHBhbmRUb1RhZyh0KTt2YXIgZT13aW5kb3cuZ2V0U2VsZWN0aW9uKCksbj1lLmdldFJhbmdlQXQoMCkscj1uLmV4dHJhY3RDb250ZW50cygpO3QucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KSxuLmluc2VydE5vZGUociksZS5yZW1vdmVBbGxSYW5nZXMoKSxlLmFkZFJhbmdlKG4pfX0se2tleTpcImNoZWNrU3RhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuYXBpLnNlbGVjdGlvbi5maW5kUGFyZW50VGFnKHRoaXMudGFnLHQuQ1NTKTt0aGlzLmJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuaWNvbkNsYXNzZXMuYWN0aXZlLCEhZSl9fSx7a2V5OlwidG9vbGJveEljb25cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbig2KS5kZWZhdWx0fX1dLFt7a2V5OlwiaXNJbmxpbmVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH19LHtrZXk6XCJzYW5pdGl6ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybnttYXJrOntjbGFzczp0LkNTU319fX1dKSx0fSgpO3QuZXhwb3J0cz1pfSxmdW5jdGlvbih0LGUsbil7dmFyIHI9bigyKTtcInN0cmluZ1wiPT10eXBlb2YgciYmKHI9W1t0LmkscixcIlwiXV0pO3ZhciBvPXtobXI6ITAsdHJhbnNmb3JtOnZvaWQgMCxpbnNlcnRJbnRvOnZvaWQgMH07big0KShyLG8pO3IubG9jYWxzJiYodC5leHBvcnRzPXIubG9jYWxzKX0sZnVuY3Rpb24odCxlLG4peyh0LmV4cG9ydHM9bigzKSghMSkpLnB1c2goW3QuaSxcIi5jZHgtbWFya2VyIHtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMjQ1LDIzNSwxMTEsMC4yOSk7XFxuICBwYWRkaW5nOiAzcHggMDtcXG59XCIsXCJcIl0pfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1bXTtyZXR1cm4gZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbihlKXt2YXIgbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRbMV18fFwiXCIscj10WzNdO2lmKCFyKXJldHVybiBuO2lmKGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBvPShhPXIsXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoYSkpKSkrXCIgKi9cIiksaT1yLnNvdXJjZXMubWFwKGZ1bmN0aW9uKHQpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIityLnNvdXJjZVJvb3QrdCtcIiAqL1wifSk7cmV0dXJuW25dLmNvbmNhdChpKS5jb25jYXQoW29dKS5qb2luKFwiXFxuXCIpfXZhciBhO3JldHVybltuXS5qb2luKFwiXFxuXCIpfShlLHQpO3JldHVybiBlWzJdP1wiQG1lZGlhIFwiK2VbMl0rXCJ7XCIrbitcIn1cIjpufSkuam9pbihcIlwiKX0sZS5pPWZ1bmN0aW9uKHQsbil7XCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PVtbbnVsbCx0LFwiXCJdXSk7Zm9yKHZhciByPXt9LG89MDtvPHRoaXMubGVuZ3RoO28rKyl7dmFyIGk9dGhpc1tvXVswXTtcIm51bWJlclwiPT10eXBlb2YgaSYmKHJbaV09ITApfWZvcihvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBhPXRbb107XCJudW1iZXJcIj09dHlwZW9mIGFbMF0mJnJbYVswXV18fChuJiYhYVsyXT9hWzJdPW46biYmKGFbMl09XCIoXCIrYVsyXStcIikgYW5kIChcIituK1wiKVwiKSxlLnB1c2goYSkpfX0sZX19LGZ1bmN0aW9uKHQsZSxuKXt2YXIgcixvLGk9e30sYT0ocj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYn0sZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09byYmKG89ci5hcHBseSh0aGlzLGFyZ3VtZW50cykpLG99KSxzPWZ1bmN0aW9uKHQpe3ZhciBlPXt9O3JldHVybiBmdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXJldHVybiB0KCk7aWYodm9pZCAwPT09ZVt0XSl7dmFyIG49ZnVuY3Rpb24odCl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCl9LmNhbGwodGhpcyx0KTtpZih3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQmJm4gaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpdHJ5e249bi5jb250ZW50RG9jdW1lbnQuaGVhZH1jYXRjaCh0KXtuPW51bGx9ZVt0XT1ufXJldHVybiBlW3RdfX0oKSx1PW51bGwsYz0wLGY9W10sbD1uKDUpO2Z1bmN0aW9uIHAodCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXSxvPWlbci5pZF07aWYobyl7by5yZWZzKys7Zm9yKHZhciBhPTA7YTxvLnBhcnRzLmxlbmd0aDthKyspby5wYXJ0c1thXShyLnBhcnRzW2FdKTtmb3IoO2E8ci5wYXJ0cy5sZW5ndGg7YSsrKW8ucGFydHMucHVzaChnKHIucGFydHNbYV0sZSkpfWVsc2V7dmFyIHM9W107Zm9yKGE9MDthPHIucGFydHMubGVuZ3RoO2ErKylzLnB1c2goZyhyLnBhcnRzW2FdLGUpKTtpW3IuaWRdPXtpZDpyLmlkLHJlZnM6MSxwYXJ0czpzfX19fWZ1bmN0aW9uIGQodCxlKXtmb3IodmFyIG49W10scj17fSxvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBpPXRbb10sYT1lLmJhc2U/aVswXStlLmJhc2U6aVswXSxzPXtjc3M6aVsxXSxtZWRpYTppWzJdLHNvdXJjZU1hcDppWzNdfTtyW2FdP3JbYV0ucGFydHMucHVzaChzKTpuLnB1c2goclthXT17aWQ6YSxwYXJ0czpbc119KX1yZXR1cm4gbn1mdW5jdGlvbiBoKHQsZSl7dmFyIG49cyh0Lmluc2VydEludG8pO2lmKCFuKXRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO3ZhciByPWZbZi5sZW5ndGgtMV07aWYoXCJ0b3BcIj09PXQuaW5zZXJ0QXQpcj9yLm5leHRTaWJsaW5nP24uaW5zZXJ0QmVmb3JlKGUsci5uZXh0U2libGluZyk6bi5hcHBlbmRDaGlsZChlKTpuLmluc2VydEJlZm9yZShlLG4uZmlyc3RDaGlsZCksZi5wdXNoKGUpO2Vsc2UgaWYoXCJib3R0b21cIj09PXQuaW5zZXJ0QXQpbi5hcHBlbmRDaGlsZChlKTtlbHNle2lmKFwib2JqZWN0XCIhPXR5cGVvZiB0Lmluc2VydEF0fHwhdC5pbnNlcnRBdC5iZWZvcmUpdGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7dmFyIG89cyh0Lmluc2VydEludG8rXCIgXCIrdC5pbnNlcnRBdC5iZWZvcmUpO24uaW5zZXJ0QmVmb3JlKGUsbyl9fWZ1bmN0aW9uIHYodCl7aWYobnVsbD09PXQucGFyZW50Tm9kZSlyZXR1cm4hMTt0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCk7dmFyIGU9Zi5pbmRleE9mKHQpO2U+PTAmJmYuc3BsaWNlKGUsMSl9ZnVuY3Rpb24gYih0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7cmV0dXJuIHZvaWQgMD09PXQuYXR0cnMudHlwZSYmKHQuYXR0cnMudHlwZT1cInRleHQvY3NzXCIpLHkoZSx0LmF0dHJzKSxoKHQsZSksZX1mdW5jdGlvbiB5KHQsZSl7T2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihuKXt0LnNldEF0dHJpYnV0ZShuLGVbbl0pfSl9ZnVuY3Rpb24gZyh0LGUpe3ZhciBuLHIsbyxpO2lmKGUudHJhbnNmb3JtJiZ0LmNzcyl7aWYoIShpPWUudHJhbnNmb3JtKHQuY3NzKSkpcmV0dXJuIGZ1bmN0aW9uKCl7fTt0LmNzcz1pfWlmKGUuc2luZ2xldG9uKXt2YXIgYT1jKys7bj11fHwodT1iKGUpKSxyPXguYmluZChudWxsLG4sYSwhMSksbz14LmJpbmQobnVsbCxuLGEsITApfWVsc2UgdC5zb3VyY2VNYXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgQmxvYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYT8obj1mdW5jdGlvbih0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtyZXR1cm4gdm9pZCAwPT09dC5hdHRycy50eXBlJiYodC5hdHRycy50eXBlPVwidGV4dC9jc3NcIiksdC5hdHRycy5yZWw9XCJzdHlsZXNoZWV0XCIseShlLHQuYXR0cnMpLGgodCxlKSxlfShlKSxyPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uLmNzcyxvPW4uc291cmNlTWFwLGk9dm9pZCAwPT09ZS5jb252ZXJ0VG9BYnNvbHV0ZVVybHMmJm87KGUuY29udmVydFRvQWJzb2x1dGVVcmxzfHxpKSYmKHI9bChyKSk7byYmKHIrPVwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShvKSkpKStcIiAqL1wiKTt2YXIgYT1uZXcgQmxvYihbcl0se3R5cGU6XCJ0ZXh0L2Nzc1wifSkscz10LmhyZWY7dC5ocmVmPVVSTC5jcmVhdGVPYmplY3RVUkwoYSkscyYmVVJMLnJldm9rZU9iamVjdFVSTChzKX0uYmluZChudWxsLG4sZSksbz1mdW5jdGlvbigpe3Yobiksbi5ocmVmJiZVUkwucmV2b2tlT2JqZWN0VVJMKG4uaHJlZil9KToobj1iKGUpLHI9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLmNzcyxyPWUubWVkaWE7ciYmdC5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLHIpO2lmKHQuc3R5bGVTaGVldCl0LnN0eWxlU2hlZXQuY3NzVGV4dD1uO2Vsc2V7Zm9yKDt0LmZpcnN0Q2hpbGQ7KXQucmVtb3ZlQ2hpbGQodC5maXJzdENoaWxkKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG4pKX19LmJpbmQobnVsbCxuKSxvPWZ1bmN0aW9uKCl7dihuKX0pO3JldHVybiByKHQpLGZ1bmN0aW9uKGUpe2lmKGUpe2lmKGUuY3NzPT09dC5jc3MmJmUubWVkaWE9PT10Lm1lZGlhJiZlLnNvdXJjZU1hcD09PXQuc291cmNlTWFwKXJldHVybjtyKHQ9ZSl9ZWxzZSBvKCl9fXQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBERUJVRyYmREVCVUcmJlwib2JqZWN0XCIhPXR5cGVvZiBkb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7KGU9ZXx8e30pLmF0dHJzPVwib2JqZWN0XCI9PXR5cGVvZiBlLmF0dHJzP2UuYXR0cnM6e30sZS5zaW5nbGV0b258fFwiYm9vbGVhblwiPT10eXBlb2YgZS5zaW5nbGV0b258fChlLnNpbmdsZXRvbj1hKCkpLGUuaW5zZXJ0SW50b3x8KGUuaW5zZXJ0SW50bz1cImhlYWRcIiksZS5pbnNlcnRBdHx8KGUuaW5zZXJ0QXQ9XCJib3R0b21cIik7dmFyIG49ZCh0LGUpO3JldHVybiBwKG4sZSksZnVuY3Rpb24odCl7Zm9yKHZhciByPVtdLG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGE9bltvXTsocz1pW2EuaWRdKS5yZWZzLS0sci5wdXNoKHMpfXQmJnAoZCh0LGUpLGUpO2ZvcihvPTA7bzxyLmxlbmd0aDtvKyspe3ZhciBzO2lmKDA9PT0ocz1yW29dKS5yZWZzKXtmb3IodmFyIHU9MDt1PHMucGFydHMubGVuZ3RoO3UrKylzLnBhcnRzW3VdKCk7ZGVsZXRlIGlbcy5pZF19fX19O3ZhciBtLHc9KG09W10sZnVuY3Rpb24odCxlKXtyZXR1cm4gbVt0XT1lLG0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIil9KTtmdW5jdGlvbiB4KHQsZSxuLHIpe3ZhciBvPW4/XCJcIjpyLmNzcztpZih0LnN0eWxlU2hlZXQpdC5zdHlsZVNoZWV0LmNzc1RleHQ9dyhlLG8pO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobyksYT10LmNoaWxkTm9kZXM7YVtlXSYmdC5yZW1vdmVDaGlsZChhW2VdKSxhLmxlbmd0aD90Lmluc2VydEJlZm9yZShpLGFbZV0pOnQuYXBwZW5kQ2hpbGQoaSl9fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmxvY2F0aW9uO2lmKCFlKXRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO2lmKCF0fHxcInN0cmluZ1wiIT10eXBlb2YgdClyZXR1cm4gdDt2YXIgbj1lLnByb3RvY29sK1wiLy9cIitlLmhvc3Qscj1uK2UucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLFwiL1wiKTtyZXR1cm4gdC5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSxmdW5jdGlvbih0LGUpe3ZhciBvLGk9ZS50cmltKCkucmVwbGFjZSgvXlwiKC4qKVwiJC8sZnVuY3Rpb24odCxlKXtyZXR1cm4gZX0pLnJlcGxhY2UoL14nKC4qKSckLyxmdW5jdGlvbih0LGUpe3JldHVybiBlfSk7cmV0dXJuL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdChpKT90OihvPTA9PT1pLmluZGV4T2YoXCIvL1wiKT9pOjA9PT1pLmluZGV4T2YoXCIvXCIpP24raTpyK2kucmVwbGFjZSgvXlxcLlxcLy8sXCJcIiksXCJ1cmwoXCIrSlNPTi5zdHJpbmdpZnkobykrXCIpXCIpfSl9fSxmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7bi5yKGUpLGUuZGVmYXVsdD0nPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjEgMiAxMyAxMlwiIHdpZHRoPVwiMTNcIiBoZWlnaHQ9XCIxMlwiPjxwYXRoIGQ9XCJNOC4zNjcgOS42MzNMMTAuNyAxMC45OGwtLjYyNCAxLjEzNS0uNzg3LS4wMjUtLjc4IDEuMzVINi45NGwxLjE5My0yLjA2Ni0uNDA3LS42Mi42NDItMS4xMjF6bS40MzYtLjc2M2wyLjg5OS01LjA2MWExLjI3OCAxLjI3OCAwIDAxMS43NDYtLjQ3MmMuNjE3LjM1NS44MzUgMS4xMzguNDkyIDEuNzZsLTIuODE1IDUuMTE0LTIuMzIyLTEuMzR6TTIuNjIgMTEuNjQ0SDUuMzlhLjg5OS44OTkgMCAxMTAgMS43OThIMi42MTlhLjg5OS44OTkgMCAwMTAtMS43OTh6XCIvPjwvc3ZnPlxcbid9XSl9KTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLlBhcmFncmFwaD10KCk6ZS5QYXJhZ3JhcGg9dCgpfSh3aW5kb3csKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIG4ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBvPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLG4pLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIG4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQscil7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LG4udD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9bihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgcj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKG4ucihyKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIG8gaW4gZSluLmQocixvLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwsbykpO3JldHVybiByfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LFwiYVwiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPVwiL1wiLG4obi5zPTApfShbZnVuY3Rpb24oZSx0LG4pe2Z1bmN0aW9uIHIoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fWZ1bmN0aW9uIG8oZSx0LG4pe3JldHVybiB0JiZyKGUucHJvdG90eXBlLHQpLG4mJnIoZSxuKSxlfW4oMSkudG9TdHJpbmcoKTtcbi8qKlxuICogQmFzZSBQYXJhZ3JhcGggQmxvY2sgZm9yIHRoZSBFZGl0b3IuanMuXG4gKiBSZXByZXNlbnRzIHNpbXBsZSBwYXJhZ3JhcGhcbiAqXG4gKiBAYXV0aG9yIENvZGVYICh0ZWFtQGNvZGV4LnNvKVxuICogQGNvcHlyaWdodCBDb2RlWCAyMDE4XG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xudmFyIGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciBuPXQuZGF0YSxyPXQuY29uZmlnLG89dC5hcGksYT10LnJlYWRPbmx5OyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5hcGk9byx0aGlzLnJlYWRPbmx5PWEsdGhpcy5fQ1NTPXtibG9jazp0aGlzLmFwaS5zdHlsZXMuYmxvY2ssd3JhcHBlcjpcImNlLXBhcmFncmFwaFwifSx0aGlzLnJlYWRPbmx5fHwodGhpcy5vbktleVVwPXRoaXMub25LZXlVcC5iaW5kKHRoaXMpKSx0aGlzLl9wbGFjZWhvbGRlcj1yLnBsYWNlaG9sZGVyP3IucGxhY2Vob2xkZXI6ZS5ERUZBVUxUX1BMQUNFSE9MREVSLHRoaXMuX2RhdGE9e30sdGhpcy5fZWxlbWVudD10aGlzLmRyYXdWaWV3KCksdGhpcy5fcHJlc2VydmVCbGFuaz12b2lkIDAhPT1yLnByZXNlcnZlQmxhbmsmJnIucHJlc2VydmVCbGFuayx0aGlzLmRhdGE9bn1yZXR1cm4gbyhlLG51bGwsW3trZXk6XCJERUZBVUxUX1BMQUNFSE9MREVSXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJcIn19XSksbyhlLFt7a2V5Olwib25LZXlVcFwiLHZhbHVlOmZ1bmN0aW9uKGUpe1wiQmFja3NwYWNlXCIhPT1lLmNvZGUmJlwiRGVsZXRlXCIhPT1lLmNvZGV8fFwiXCI9PT10aGlzLl9lbGVtZW50LnRleHRDb250ZW50JiYodGhpcy5fZWxlbWVudC5pbm5lckhUTUw9XCJcIil9fSx7a2V5OlwiZHJhd1ZpZXdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7cmV0dXJuIGUuY2xhc3NMaXN0LmFkZCh0aGlzLl9DU1Mud3JhcHBlcix0aGlzLl9DU1MuYmxvY2spLGUuY29udGVudEVkaXRhYmxlPSExLGUuZGF0YXNldC5wbGFjZWhvbGRlcj10aGlzLmFwaS5pMThuLnQodGhpcy5fcGxhY2Vob2xkZXIpLHRoaXMucmVhZE9ubHl8fChlLmNvbnRlbnRFZGl0YWJsZT0hMCxlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLHRoaXMub25LZXlVcCkpLGV9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZWxlbWVudH19LHtrZXk6XCJtZXJnZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXt0ZXh0OnRoaXMuZGF0YS50ZXh0K2UudGV4dH07dGhpcy5kYXRhPXR9fSx7a2V5OlwidmFsaWRhdGVcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4hKFwiXCI9PT1lLnRleHQudHJpbSgpJiYhdGhpcy5fcHJlc2VydmVCbGFuayl9fSx7a2V5Olwic2F2ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybnt0ZXh0OmUuaW5uZXJIVE1MfX19LHtrZXk6XCJvblBhc3RlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9e3RleHQ6ZS5kZXRhaWwuZGF0YS5pbm5lckhUTUx9O3RoaXMuZGF0YT10fX0se2tleTpcImRhdGFcIixnZXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9lbGVtZW50LmlubmVySFRNTDtyZXR1cm4gdGhpcy5fZGF0YS50ZXh0PWUsdGhpcy5fZGF0YX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX2RhdGE9ZXx8e30sdGhpcy5fZWxlbWVudC5pbm5lckhUTUw9dGhpcy5fZGF0YS50ZXh0fHxcIlwifX1dLFt7a2V5OlwiY29udmVyc2lvbkNvbmZpZ1wiLGdldDpmdW5jdGlvbigpe3JldHVybntleHBvcnQ6XCJ0ZXh0XCIsaW1wb3J0OlwidGV4dFwifX19LHtrZXk6XCJzYW5pdGl6ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybnt0ZXh0OnticjohMH19fX0se2tleTpcImlzUmVhZE9ubHlTdXBwb3J0ZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH19LHtrZXk6XCJwYXN0ZUNvbmZpZ1wiLGdldDpmdW5jdGlvbigpe3JldHVybnt0YWdzOltcIlBcIl19fX0se2tleTpcInRvb2xib3hcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57aWNvbjpuKDUpLmRlZmF1bHQsdGl0bGU6XCJUZXh0XCJ9fX1dKSxlfSgpO2UuZXhwb3J0cz1hfSxmdW5jdGlvbihlLHQsbil7dmFyIHI9bigyKSxvPW4oMyk7XCJzdHJpbmdcIj09dHlwZW9mKG89by5fX2VzTW9kdWxlP28uZGVmYXVsdDpvKSYmKG89W1tlLmksbyxcIlwiXV0pO3ZhciBhPXtpbnNlcnQ6XCJoZWFkXCIsc2luZ2xldG9uOiExfTtyKG8sYSk7ZS5leHBvcnRzPW8ubG9jYWxzfHx7fX0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO3ZhciByLG89ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9Qm9vbGVhbih3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYikpLHJ9LGE9ZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09ZVt0XSl7dmFyIG49ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KTtpZih3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQmJm4gaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpdHJ5e249bi5jb250ZW50RG9jdW1lbnQuaGVhZH1jYXRjaChlKXtuPW51bGx9ZVt0XT1ufXJldHVybiBlW3RdfX0oKSxpPVtdO2Z1bmN0aW9uIGMoZSl7Zm9yKHZhciB0PS0xLG49MDtuPGkubGVuZ3RoO24rKylpZihpW25dLmlkZW50aWZpZXI9PT1lKXt0PW47YnJlYWt9cmV0dXJuIHR9ZnVuY3Rpb24gdShlLHQpe2Zvcih2YXIgbj17fSxyPVtdLG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIGE9ZVtvXSx1PXQuYmFzZT9hWzBdK3QuYmFzZTphWzBdLHM9blt1XXx8MCxsPVwiXCIuY29uY2F0KHUsXCIgXCIpLmNvbmNhdChzKTtuW3VdPXMrMTt2YXIgZj1jKGwpLGQ9e2NzczphWzFdLG1lZGlhOmFbMl0sc291cmNlTWFwOmFbM119Oy0xIT09Zj8oaVtmXS5yZWZlcmVuY2VzKyssaVtmXS51cGRhdGVyKGQpKTppLnB1c2goe2lkZW50aWZpZXI6bCx1cGRhdGVyOnkoZCx0KSxyZWZlcmVuY2VzOjF9KSxyLnB1c2gobCl9cmV0dXJuIHJ9ZnVuY3Rpb24gcyhlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIikscj1lLmF0dHJpYnV0ZXN8fHt9O2lmKHZvaWQgMD09PXIubm9uY2Upe3ZhciBvPW4ubmM7byYmKHIubm9uY2U9byl9aWYoT2JqZWN0LmtleXMocikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dC5zZXRBdHRyaWJ1dGUoZSxyW2VdKX0pKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluc2VydCllLmluc2VydCh0KTtlbHNle3ZhciBpPWEoZS5pbnNlcnR8fFwiaGVhZFwiKTtpZighaSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO2kuYXBwZW5kQ2hpbGQodCl9cmV0dXJuIHR9dmFyIGwsZj0obD1bXSxmdW5jdGlvbihlLHQpe3JldHVybiBsW2VdPXQsbC5maWx0ZXIoQm9vbGVhbikuam9pbihcIlxcblwiKX0pO2Z1bmN0aW9uIGQoZSx0LG4scil7dmFyIG89bj9cIlwiOnIubWVkaWE/XCJAbWVkaWEgXCIuY29uY2F0KHIubWVkaWEsXCIge1wiKS5jb25jYXQoci5jc3MsXCJ9XCIpOnIuY3NzO2lmKGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD1mKHQsbyk7ZWxzZXt2YXIgYT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvKSxpPWUuY2hpbGROb2RlcztpW3RdJiZlLnJlbW92ZUNoaWxkKGlbdF0pLGkubGVuZ3RoP2UuaW5zZXJ0QmVmb3JlKGEsaVt0XSk6ZS5hcHBlbmRDaGlsZChhKX19ZnVuY3Rpb24gcChlLHQsbil7dmFyIHI9bi5jc3Msbz1uLm1lZGlhLGE9bi5zb3VyY2VNYXA7aWYobz9lLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsbyk6ZS5yZW1vdmVBdHRyaWJ1dGUoXCJtZWRpYVwiKSxhJiZidG9hJiYocis9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShhKSkpKSxcIiAqL1wiKSksZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PXI7ZWxzZXtmb3IoO2UuZmlyc3RDaGlsZDspZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpO2UuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocikpfX12YXIgaD1udWxsLHY9MDtmdW5jdGlvbiB5KGUsdCl7dmFyIG4scixvO2lmKHQuc2luZ2xldG9uKXt2YXIgYT12Kys7bj1ofHwoaD1zKHQpKSxyPWQuYmluZChudWxsLG4sYSwhMSksbz1kLmJpbmQobnVsbCxuLGEsITApfWVsc2Ugbj1zKHQpLHI9cC5iaW5kKG51bGwsbix0KSxvPWZ1bmN0aW9uKCl7IWZ1bmN0aW9uKGUpe2lmKG51bGw9PT1lLnBhcmVudE5vZGUpcmV0dXJuITE7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfShuKX07cmV0dXJuIHIoZSksZnVuY3Rpb24odCl7aWYodCl7aWYodC5jc3M9PT1lLmNzcyYmdC5tZWRpYT09PWUubWVkaWEmJnQuc291cmNlTWFwPT09ZS5zb3VyY2VNYXApcmV0dXJuO3IoZT10KX1lbHNlIG8oKX19ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7KHQ9dHx8e30pLnNpbmdsZXRvbnx8XCJib29sZWFuXCI9PXR5cGVvZiB0LnNpbmdsZXRvbnx8KHQuc2luZ2xldG9uPW8oKSk7dmFyIG49dShlPWV8fFtdLHQpO3JldHVybiBmdW5jdGlvbihlKXtpZihlPWV8fFtdLFwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSl7Zm9yKHZhciByPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBvPWMobltyXSk7aVtvXS5yZWZlcmVuY2VzLS19Zm9yKHZhciBhPXUoZSx0KSxzPTA7czxuLmxlbmd0aDtzKyspe3ZhciBsPWMobltzXSk7MD09PWlbbF0ucmVmZXJlbmNlcyYmKGlbbF0udXBkYXRlcigpLGkuc3BsaWNlKGwsMSkpfW49YX19fX0sZnVuY3Rpb24oZSx0LG4peyh0PW4oNCkoITEpKS5wdXNoKFtlLmksXCIuY2UtcGFyYWdyYXBoIHtcXG4gICAgbGluZS1oZWlnaHQ6IDEuNmVtO1xcbiAgICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG4uY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OjpiZWZvcmV7XFxuICBjb250ZW50OiBhdHRyKGRhdGEtcGxhY2Vob2xkZXIpO1xcbiAgY29sb3I6ICM3MDc2ODQ7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuXFxuLyoqIFNob3cgcGxhY2Vob2xkZXIgYXQgdGhlIGZpcnN0IHBhcmFncmFwaCBpZiBFZGl0b3IgaXMgZW1wdHkgKi9cXG4uY29kZXgtZWRpdG9yLS1lbXB0eSAuY2UtYmxvY2s6Zmlyc3QtY2hpbGQgLmNlLXBhcmFncmFwaFtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTo6YmVmb3JlIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5jb2RleC1lZGl0b3ItLXRvb2xib3gtb3BlbmVkIC5jZS1ibG9jazpmaXJzdC1jaGlsZCAuY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OjpiZWZvcmUsXFxuLmNvZGV4LWVkaXRvci0tZW1wdHkgLmNlLWJsb2NrOmZpcnN0LWNoaWxkIC5jZS1wYXJhZ3JhcGhbZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6Zm9jdXM6OmJlZm9yZSB7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4uY2UtcGFyYWdyYXBoIHA6Zmlyc3Qtb2YtdHlwZXtcXG4gICAgbWFyZ2luLXRvcDogMDtcXG59XFxuXFxuLmNlLXBhcmFncmFwaCBwOmxhc3Qtb2YtdHlwZXtcXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcXG59XFxuXCIsXCJcIl0pLGUuZXhwb3J0cz10fSxmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiB0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKChmdW5jdGlvbih0KXt2YXIgbj1mdW5jdGlvbihlLHQpe3ZhciBuPWVbMV18fFwiXCIscj1lWzNdO2lmKCFyKXJldHVybiBuO2lmKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBvPShpPXIsYz1idG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShpKSkpKSx1PVwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGMpLFwiLyojIFwiLmNvbmNhdCh1LFwiICovXCIpKSxhPXIuc291cmNlcy5tYXAoKGZ1bmN0aW9uKGUpe3JldHVyblwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoci5zb3VyY2VSb290fHxcIlwiKS5jb25jYXQoZSxcIiAqL1wiKX0pKTtyZXR1cm5bbl0uY29uY2F0KGEpLmNvbmNhdChbb10pLmpvaW4oXCJcXG5cIil9dmFyIGksYyx1O3JldHVybltuXS5qb2luKFwiXFxuXCIpfSh0LGUpO3JldHVybiB0WzJdP1wiQG1lZGlhIFwiLmNvbmNhdCh0WzJdLFwiIHtcIikuY29uY2F0KG4sXCJ9XCIpOm59KSkuam9pbihcIlwiKX0sdC5pPWZ1bmN0aW9uKGUsbixyKXtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9W1tudWxsLGUsXCJcIl1dKTt2YXIgbz17fTtpZihyKWZvcih2YXIgYT0wO2E8dGhpcy5sZW5ndGg7YSsrKXt2YXIgaT10aGlzW2FdWzBdO251bGwhPWkmJihvW2ldPSEwKX1mb3IodmFyIGM9MDtjPGUubGVuZ3RoO2MrKyl7dmFyIHU9W10uY29uY2F0KGVbY10pO3ImJm9bdVswXV18fChuJiYodVsyXT91WzJdPVwiXCIuY29uY2F0KG4sXCIgYW5kIFwiKS5jb25jYXQodVsyXSk6dVsyXT1uKSx0LnB1c2godSkpfX0sdH19LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtuLnIodCksdC5kZWZhdWx0PSc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMC4yIC0wLjMgOSAxMS40XCIgd2lkdGg9XCIxMlwiIGhlaWdodD1cIjE0XCI+XFxuICA8cGF0aCBkPVwiTTAgMi43N1YuOTJBMSAxIDAgMDEuMi4yOEMuMzUuMS41NiAwIC44MyAwaDcuNjZjLjI4LjAxLjQ4LjEuNjMuMjguMTQuMTcuMjEuMzguMjEuNjR2MS44NWMwIC4yNi0uMDguNDgtLjIzLjY2LS4xNS4xNy0uMzcuMjYtLjY2LjI2LS4yOCAwLS41LS4wOS0uNjQtLjI2YTEgMSAwIDAxLS4yMS0uNjZWMS42OUg1LjZ2Ny41OGguNWMuMjUgMCAuNDUuMDguNi4yMy4xNy4xNi4yNS4zNS4yNS42cy0uMDguNDUtLjI0LjZhLjg3Ljg3IDAgMDEtLjYyLjIySDMuMjFhLjg3Ljg3IDAgMDEtLjYxLS4yMi43OC43OCAwIDAxLS4yNC0uNmMwLS4yNS4wOC0uNDQuMjQtLjZhLjg1Ljg1IDAgMDEuNjEtLjIzaC41VjEuN0gxLjczdjEuMDhjMCAuMjYtLjA4LjQ4LS4yMy42Ni0uMTUuMTctLjM3LjI2LS42Ni4yNi0uMjggMC0uNS0uMDktLjY0LS4yNkExIDEgMCAwMTAgMi43N3pcIi8+XFxuPC9zdmc+XFxuJ31dKX0pKTsiLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLlF1b3RlPWUoKTp0LlF1b3RlPWUoKX0od2luZG93LGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXt9O2Z1bmN0aW9uIG4ocil7aWYoZVtyXSlyZXR1cm4gZVtyXS5leHBvcnRzO3ZhciBvPWVbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiB0W3JdLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLG4pLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIG4ubT10LG4uYz1lLG4uZD1mdW5jdGlvbih0LGUscil7bi5vKHQsZSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2VudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5yPWZ1bmN0aW9uKHQpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LG4udD1mdW5jdGlvbih0LGUpe2lmKDEmZSYmKHQ9bih0KSksOCZlKXJldHVybiB0O2lmKDQmZSYmXCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJnQuX19lc01vZHVsZSlyZXR1cm4gdDt2YXIgcj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKG4ucihyKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTp0fSksMiZlJiZcInN0cmluZ1wiIT10eXBlb2YgdClmb3IodmFyIG8gaW4gdCluLmQocixvLGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfS5iaW5kKG51bGwsbykpO3JldHVybiByfSxuLm49ZnVuY3Rpb24odCl7dmFyIGU9dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHQuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIG4uZChlLFwiYVwiLGUpLGV9LG4ubz1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0sbi5wPVwiL1wiLG4obi5zPTApfShbZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKEFycmF5LmlzQXJyYXkodCkpe2Zvcih2YXIgZT0wLG49bmV3IEFycmF5KHQubGVuZ3RoKTtlPHQubGVuZ3RoO2UrKyluW2VdPXRbZV07cmV0dXJuIG59fSh0KXx8ZnVuY3Rpb24odCl7aWYoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdCh0KXx8XCJbb2JqZWN0IEFyZ3VtZW50c11cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSlyZXR1cm4gQXJyYXkuZnJvbSh0KX0odCl8fGZ1bmN0aW9uKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpfSgpfWZ1bmN0aW9uIG8odCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fWZ1bmN0aW9uIGkodCxlLG4pe3JldHVybiBlJiZvKHQucHJvdG90eXBlLGUpLG4mJm8odCxuKSx0fW4oMSkudG9TdHJpbmcoKTt2YXIgYT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7dmFyIG49ZS5kYXRhLHI9ZS5jb25maWcsbz1lLmFwaSxpPWUucmVhZE9ubHk7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyx0KTt2YXIgYT10LkFMSUdOTUVOVFMscz10LkRFRkFVTFRfQUxJR05NRU5UO3RoaXMuYXBpPW8sdGhpcy5yZWFkT25seT1pLHRoaXMucXVvdGVQbGFjZWhvbGRlcj1yLnF1b3RlUGxhY2Vob2xkZXJ8fHQuREVGQVVMVF9RVU9URV9QTEFDRUhPTERFUix0aGlzLmNhcHRpb25QbGFjZWhvbGRlcj1yLmNhcHRpb25QbGFjZWhvbGRlcnx8dC5ERUZBVUxUX0NBUFRJT05fUExBQ0VIT0xERVIsdGhpcy5kYXRhPXt0ZXh0Om4udGV4dHx8XCJcIixjYXB0aW9uOm4uY2FwdGlvbnx8XCJcIixhbGlnbm1lbnQ6T2JqZWN0LnZhbHVlcyhhKS5pbmNsdWRlcyhuLmFsaWdubWVudCkmJm4uYWxpZ25tZW50fHxyLmRlZmF1bHRBbGlnbm1lbnR8fHN9fXJldHVybiBpKHQsW3trZXk6XCJDU1NcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57YmFzZUNsYXNzOnRoaXMuYXBpLnN0eWxlcy5ibG9jayx3cmFwcGVyOlwiY2R4LXF1b3RlXCIsdGV4dDpcImNkeC1xdW90ZV9fdGV4dFwiLGlucHV0OnRoaXMuYXBpLnN0eWxlcy5pbnB1dCxjYXB0aW9uOlwiY2R4LXF1b3RlX19jYXB0aW9uXCIsc2V0dGluZ3NXcmFwcGVyOlwiY2R4LXF1b3RlLXNldHRpbmdzXCIsc2V0dGluZ3NCdXR0b246dGhpcy5hcGkuc3R5bGVzLnNldHRpbmdzQnV0dG9uLHNldHRpbmdzQnV0dG9uQWN0aXZlOnRoaXMuYXBpLnN0eWxlcy5zZXR0aW5nc0J1dHRvbkFjdGl2ZX19fSx7a2V5Olwic2V0dGluZ3NcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5be25hbWU6XCJsZWZ0XCIsaWNvbjonPHN2ZyB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTFcIiB2aWV3Qm94PVwiMCAwIDE2IDExXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiID48cGF0aCBkPVwiTTEuMDY5IDBIMTMuMzNhMS4wNjkgMS4wNjkgMCAwIDEgMCAyLjEzOEgxLjA3YTEuMDY5IDEuMDY5IDAgMSAxIDAtMi4xMzh6bTAgNC4yNzVIOS4wM2ExLjA2OSAxLjA2OSAwIDEgMSAwIDIuMTM3SDEuMDdhMS4wNjkgMS4wNjkgMCAxIDEgMC0yLjEzN3ptMCA0LjI3NWg5LjgxMmExLjA2OSAxLjA2OSAwIDAgMSAwIDIuMTM3SDEuMDdhMS4wNjkgMS4wNjkgMCAwIDEgMC0yLjEzN3pcIiAvPjwvc3ZnPid9LHtuYW1lOlwiY2VudGVyXCIsaWNvbjonPHN2ZyB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTFcIiB2aWV3Qm94PVwiMCAwIDE2IDExXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiID48cGF0aCBkPVwiTTEuMDY5IDBIMTMuMzNhMS4wNjkgMS4wNjkgMCAwIDEgMCAyLjEzOEgxLjA3YTEuMDY5IDEuMDY5IDAgMSAxIDAtMi4xMzh6bTMuMTUgNC4yNzVoNS45NjJhMS4wNjkgMS4wNjkgMCAwIDEgMCAyLjEzN0g0LjIyYTEuMDY5IDEuMDY5IDAgMSAxIDAtMi4xMzd6TTEuMDY5IDguNTVIMTMuMzNhMS4wNjkgMS4wNjkgMCAwIDEgMCAyLjEzN0gxLjA3YTEuMDY5IDEuMDY5IDAgMCAxIDAtMi4xMzd6XCIvPjwvc3ZnPid9XX19XSxbe2tleTpcImlzUmVhZE9ubHlTdXBwb3J0ZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH19LHtrZXk6XCJ0b29sYm94XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue2ljb246Jzxzdmcgd2lkdGg9XCIxNVwiIGhlaWdodD1cIjE0XCIgdmlld0JveD1cIjAgMCAxNSAxNFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTEzLjUzIDYuMTg1bC4wMjcuMDI1YTEuMTA5IDEuMTA5IDAgMCAxIDAgMS41NjhsLTUuNjQ0IDUuNjQ0YTEuMTA5IDEuMTA5IDAgMSAxLTEuNTY5LTEuNTY4bDQuODM4LTQuODM3TDYuMzk2IDIuMjNBMS4xMjUgMS4xMjUgMCAxIDEgNy45ODYuNjRsNS41MiA1LjUxOC4wMjUuMDI3em0tNS44MTUgMGwuMDI2LjAyNWExLjEwOSAxLjEwOSAwIDAgMSAwIDEuNTY4bC01LjY0NCA1LjY0NGExLjEwOSAxLjEwOSAwIDEgMS0xLjU2OC0xLjU2OGw0LjgzNy00LjgzN0wuNTggMi4yM0ExLjEyNSAxLjEyNSAwIDAgMSAyLjE3MS42NEw3LjY5IDYuMTU4bC4wMjUuMDI3elwiIC8+PC9zdmc+Jyx0aXRsZTpcIlF1b3RlXCJ9fX0se2tleTpcImNvbnRlbnRsZXNzXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuITB9fSx7a2V5OlwiZW5hYmxlTGluZUJyZWFrc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiEwfX0se2tleTpcIkRFRkFVTFRfUVVPVEVfUExBQ0VIT0xERVJcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIkVudGVyIGEgcXVvdGVcIn19LHtrZXk6XCJERUZBVUxUX0NBUFRJT05fUExBQ0VIT0xERVJcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIkVudGVyIGEgY2FwdGlvblwifX0se2tleTpcIkFMSUdOTUVOVFNcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57bGVmdDpcImxlZnRcIixjZW50ZXI6XCJjZW50ZXJcIn19fSx7a2V5OlwiREVGQVVMVF9BTElHTk1FTlRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdC5BTElHTk1FTlRTLmxlZnR9fSx7a2V5OlwiY29udmVyc2lvbkNvbmZpZ1wiLGdldDpmdW5jdGlvbigpe3JldHVybntpbXBvcnQ6XCJ0ZXh0XCIsZXhwb3J0OmZ1bmN0aW9uKHQpe3JldHVybiB0LmNhcHRpb24/XCJcIi5jb25jYXQodC50ZXh0LFwiIOKAlCBcIikuY29uY2F0KHQuY2FwdGlvbik6dC50ZXh0fX19fV0pLGkodCxbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fbWFrZShcImJsb2NrcXVvdGVcIixbdGhpcy5DU1MuYmFzZUNsYXNzLHRoaXMuQ1NTLndyYXBwZXJdKSxlPXRoaXMuX21ha2UoXCJkaXZcIixbdGhpcy5DU1MuaW5wdXQsdGhpcy5DU1MudGV4dF0se2NvbnRlbnRFZGl0YWJsZTohdGhpcy5yZWFkT25seSxpbm5lckhUTUw6dGhpcy5kYXRhLnRleHR9KSxuPXRoaXMuX21ha2UoXCJkaXZcIixbdGhpcy5DU1MuaW5wdXQsdGhpcy5DU1MuY2FwdGlvbl0se2NvbnRlbnRFZGl0YWJsZTohdGhpcy5yZWFkT25seSxpbm5lckhUTUw6dGhpcy5kYXRhLmNhcHRpb259KTtyZXR1cm4gZS5kYXRhc2V0LnBsYWNlaG9sZGVyPXRoaXMucXVvdGVQbGFjZWhvbGRlcixuLmRhdGFzZXQucGxhY2Vob2xkZXI9dGhpcy5jYXB0aW9uUGxhY2Vob2xkZXIsdC5hcHBlbmRDaGlsZChlKSx0LmFwcGVuZENoaWxkKG4pLHR9fSx7a2V5Olwic2F2ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQodGhpcy5DU1MudGV4dCkpLG49dC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdCh0aGlzLkNTUy5jYXB0aW9uKSk7cmV0dXJuIE9iamVjdC5hc3NpZ24odGhpcy5kYXRhLHt0ZXh0OmUuaW5uZXJIVE1MLGNhcHRpb246bi5pbm5lckhUTUx9KX19LHtrZXk6XCJyZW5kZXJTZXR0aW5nc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuX21ha2UoXCJkaXZcIixbdGhpcy5DU1Muc2V0dGluZ3NXcmFwcGVyXSx7fSk7cmV0dXJuIHRoaXMuc2V0dGluZ3MubWFwKGZ1bmN0aW9uKG4pe3ZhciByLG89dC5fbWFrZShcImRpdlwiLHQuQ1NTLnNldHRpbmdzQnV0dG9uLHtpbm5lckhUTUw6bi5pY29uLHRpdGxlOlwiXCIuY29uY2F0KChyPW4ubmFtZSxyWzBdLnRvVXBwZXJDYXNlKCkrci5zdWJzdHIoMSkpLFwiIGFsaWdubWVudFwiKX0pO3JldHVybiBvLmNsYXNzTGlzdC50b2dnbGUodC5DU1Muc2V0dGluZ3NCdXR0b25BY3RpdmUsbi5uYW1lPT09dC5kYXRhLmFsaWdubWVudCksZS5hcHBlbmRDaGlsZChvKSxvfSkuZm9yRWFjaChmdW5jdGlvbihlLG4scil7ZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixmdW5jdGlvbigpe3QuX3RvZ2dsZVR1bmUodC5zZXR0aW5nc1tuXS5uYW1lKSxyLmZvckVhY2goZnVuY3Rpb24oZSxuKXt2YXIgcj10LnNldHRpbmdzW25dLm5hbWU7ZS5jbGFzc0xpc3QudG9nZ2xlKHQuQ1NTLnNldHRpbmdzQnV0dG9uQWN0aXZlLHI9PT10LmRhdGEuYWxpZ25tZW50KX0pfSl9KSxlfX0se2tleTpcIl90b2dnbGVUdW5lXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5kYXRhLmFsaWdubWVudD10fX0se2tleTpcIl9tYWtlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGUsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbCxvPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fSxpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCk7QXJyYXkuaXNBcnJheShuKT8oZT1pLmNsYXNzTGlzdCkuYWRkLmFwcGx5KGUscihuKSk6biYmaS5jbGFzc0xpc3QuYWRkKG4pO2Zvcih2YXIgYSBpbiBvKWlbYV09b1thXTtyZXR1cm4gaX19XSxbe2tleTpcInNhbml0aXplXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJue3RleHQ6e2JyOiEwfSxjYXB0aW9uOnticjohMH0sYWxpZ25tZW50Ont9fX19XSksdH0oKTt0LmV4cG9ydHM9YX0sZnVuY3Rpb24odCxlLG4pe3ZhciByPW4oMik7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbdC5pLHIsXCJcIl1dKTt2YXIgbz17aG1yOiEwLHRyYW5zZm9ybTp2b2lkIDAsaW5zZXJ0SW50bzp2b2lkIDB9O24oNCkocixvKTtyLmxvY2FscyYmKHQuZXhwb3J0cz1yLmxvY2Fscyl9LGZ1bmN0aW9uKHQsZSxuKXsodC5leHBvcnRzPW4oMykoITEpKS5wdXNoKFt0LmksXCIuY2R4LXF1b3RlLWljb24gc3ZnIHtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XFxufVxcblxcbi5jZHgtcXVvdGUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uY2R4LXF1b3RlX190ZXh0IHtcXG4gIG1pbi1oZWlnaHQ6IDE1OHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuLmNkeC1xdW90ZV9fY2FwdGlvbiB7fVxcblxcbi5jZHgtcXVvdGUgW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTo6YmVmb3Jle1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29udGVudDogYXR0cihkYXRhLXBsYWNlaG9sZGVyKTtcXG4gIGNvbG9yOiAjNzA3Njg0O1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcbi5jZHgtcXVvdGUgW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTo6YmVmb3JlIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcblxcbi5jZHgtcXVvdGUgW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTpmb2N1czo6YmVmb3JlIHtcXG4gIG9wYWNpdHk6IDA7XFxufVxcblxcblxcbi5jZHgtcXVvdGUtc2V0dGluZ3Mge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLmNkeC1xdW90ZS1zZXR0aW5ncyAuY2R4LXNldHRpbmdzLWJ1dHRvbiB7XFxuICB3aWR0aDogNTAlO1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO3JldHVybiBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKGUpe3ZhciBuPWZ1bmN0aW9uKHQsZSl7dmFyIG49dFsxXXx8XCJcIixyPXRbM107aWYoIXIpcmV0dXJuIG47aWYoZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYSl7dmFyIG89KGE9cixcIi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShhKSkpKStcIiAqL1wiKSxpPXIuc291cmNlcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuXCIvKiMgc291cmNlVVJMPVwiK3Iuc291cmNlUm9vdCt0K1wiICovXCJ9KTtyZXR1cm5bbl0uY29uY2F0KGkpLmNvbmNhdChbb10pLmpvaW4oXCJcXG5cIil9dmFyIGE7cmV0dXJuW25dLmpvaW4oXCJcXG5cIil9KGUsdCk7cmV0dXJuIGVbMl0/XCJAbWVkaWEgXCIrZVsyXStcIntcIituK1wifVwiOm59KS5qb2luKFwiXCIpfSxlLmk9ZnVuY3Rpb24odCxuKXtcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9W1tudWxsLHQsXCJcIl1dKTtmb3IodmFyIHI9e30sbz0wO288dGhpcy5sZW5ndGg7bysrKXt2YXIgaT10aGlzW29dWzBdO1wibnVtYmVyXCI9PXR5cGVvZiBpJiYocltpXT0hMCl9Zm9yKG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGE9dFtvXTtcIm51bWJlclwiPT10eXBlb2YgYVswXSYmclthWzBdXXx8KG4mJiFhWzJdP2FbMl09bjpuJiYoYVsyXT1cIihcIithWzJdK1wiKSBhbmQgKFwiK24rXCIpXCIpLGUucHVzaChhKSl9fSxlfX0sZnVuY3Rpb24odCxlLG4pe3ZhciByLG8saT17fSxhPShyPWZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdyYmZG9jdW1lbnQmJmRvY3VtZW50LmFsbCYmIXdpbmRvdy5hdG9ifSxmdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1vJiYobz1yLmFwcGx5KHRoaXMsYXJndW1lbnRzKSksb30pLHM9ZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIHQoKTtpZih2b2lkIDA9PT1lW3RdKXt2YXIgbj1mdW5jdGlvbih0KXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KX0uY2FsbCh0aGlzLHQpO2lmKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCYmbiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCl0cnl7bj1uLmNvbnRlbnREb2N1bWVudC5oZWFkfWNhdGNoKHQpe249bnVsbH1lW3RdPW59cmV0dXJuIGVbdF19fSgpLGM9bnVsbCx1PTAsbD1bXSxmPW4oNSk7ZnVuY3Rpb24gcCh0LGUpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dLG89aVtyLmlkXTtpZihvKXtvLnJlZnMrKztmb3IodmFyIGE9MDthPG8ucGFydHMubGVuZ3RoO2ErKylvLnBhcnRzW2FdKHIucGFydHNbYV0pO2Zvcig7YTxyLnBhcnRzLmxlbmd0aDthKyspby5wYXJ0cy5wdXNoKG0oci5wYXJ0c1thXSxlKSl9ZWxzZXt2YXIgcz1bXTtmb3IoYT0wO2E8ci5wYXJ0cy5sZW5ndGg7YSsrKXMucHVzaChtKHIucGFydHNbYV0sZSkpO2lbci5pZF09e2lkOnIuaWQscmVmczoxLHBhcnRzOnN9fX19ZnVuY3Rpb24gZCh0LGUpe2Zvcih2YXIgbj1bXSxyPXt9LG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGk9dFtvXSxhPWUuYmFzZT9pWzBdK2UuYmFzZTppWzBdLHM9e2NzczppWzFdLG1lZGlhOmlbMl0sc291cmNlTWFwOmlbM119O3JbYV0/clthXS5wYXJ0cy5wdXNoKHMpOm4ucHVzaChyW2FdPXtpZDphLHBhcnRzOltzXX0pfXJldHVybiBufWZ1bmN0aW9uIGgodCxlKXt2YXIgbj1zKHQuaW5zZXJ0SW50byk7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7dmFyIHI9bFtsLmxlbmd0aC0xXTtpZihcInRvcFwiPT09dC5pbnNlcnRBdClyP3IubmV4dFNpYmxpbmc/bi5pbnNlcnRCZWZvcmUoZSxyLm5leHRTaWJsaW5nKTpuLmFwcGVuZENoaWxkKGUpOm4uaW5zZXJ0QmVmb3JlKGUsbi5maXJzdENoaWxkKSxsLnB1c2goZSk7ZWxzZSBpZihcImJvdHRvbVwiPT09dC5pbnNlcnRBdCluLmFwcGVuZENoaWxkKGUpO2Vsc2V7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHQuaW5zZXJ0QXR8fCF0Lmluc2VydEF0LmJlZm9yZSl0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTt2YXIgbz1zKHQuaW5zZXJ0SW50bytcIiBcIit0Lmluc2VydEF0LmJlZm9yZSk7bi5pbnNlcnRCZWZvcmUoZSxvKX19ZnVuY3Rpb24gZyh0KXtpZihudWxsPT09dC5wYXJlbnROb2RlKXJldHVybiExO3QucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KTt2YXIgZT1sLmluZGV4T2YodCk7ZT49MCYmbC5zcGxpY2UoZSwxKX1mdW5jdGlvbiB2KHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtyZXR1cm4gdm9pZCAwPT09dC5hdHRycy50eXBlJiYodC5hdHRycy50eXBlPVwidGV4dC9jc3NcIikseShlLHQuYXR0cnMpLGgodCxlKSxlfWZ1bmN0aW9uIHkodCxlKXtPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3Quc2V0QXR0cmlidXRlKG4sZVtuXSl9KX1mdW5jdGlvbiBtKHQsZSl7dmFyIG4scixvLGk7aWYoZS50cmFuc2Zvcm0mJnQuY3NzKXtpZighKGk9ZS50cmFuc2Zvcm0odC5jc3MpKSlyZXR1cm4gZnVuY3Rpb24oKXt9O3QuY3NzPWl9aWYoZS5zaW5nbGV0b24pe3ZhciBhPXUrKztuPWN8fChjPXYoZSkpLHI9dy5iaW5kKG51bGwsbixhLCExKSxvPXcuYmluZChudWxsLG4sYSwhMCl9ZWxzZSB0LnNvdXJjZU1hcCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBCbG9iJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hPyhuPWZ1bmN0aW9uKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO3JldHVybiB2b2lkIDA9PT10LmF0dHJzLnR5cGUmJih0LmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiKSx0LmF0dHJzLnJlbD1cInN0eWxlc2hlZXRcIix5KGUsdC5hdHRycyksaCh0LGUpLGV9KGUpLHI9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4uY3NzLG89bi5zb3VyY2VNYXAsaT12b2lkIDA9PT1lLmNvbnZlcnRUb0Fic29sdXRlVXJscyYmbzsoZS5jb252ZXJ0VG9BYnNvbHV0ZVVybHN8fGkpJiYocj1mKHIpKTtvJiYocis9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KG8pKSkpK1wiICovXCIpO3ZhciBhPW5ldyBCbG9iKFtyXSx7dHlwZTpcInRleHQvY3NzXCJ9KSxzPXQuaHJlZjt0LmhyZWY9VVJMLmNyZWF0ZU9iamVjdFVSTChhKSxzJiZVUkwucmV2b2tlT2JqZWN0VVJMKHMpfS5iaW5kKG51bGwsbixlKSxvPWZ1bmN0aW9uKCl7ZyhuKSxuLmhyZWYmJlVSTC5yZXZva2VPYmplY3RVUkwobi5ocmVmKX0pOihuPXYoZSkscj1mdW5jdGlvbih0LGUpe3ZhciBuPWUuY3NzLHI9ZS5tZWRpYTtyJiZ0LnNldEF0dHJpYnV0ZShcIm1lZGlhXCIscik7aWYodC5zdHlsZVNoZWV0KXQuc3R5bGVTaGVldC5jc3NUZXh0PW47ZWxzZXtmb3IoO3QuZmlyc3RDaGlsZDspdC5yZW1vdmVDaGlsZCh0LmZpcnN0Q2hpbGQpO3QuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobikpfX0uYmluZChudWxsLG4pLG89ZnVuY3Rpb24oKXtnKG4pfSk7cmV0dXJuIHIodCksZnVuY3Rpb24oZSl7aWYoZSl7aWYoZS5jc3M9PT10LmNzcyYmZS5tZWRpYT09PXQubWVkaWEmJmUuc291cmNlTWFwPT09dC5zb3VyY2VNYXApcmV0dXJuO3IodD1lKX1lbHNlIG8oKX19dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIERFQlVHJiZERUJVRyYmXCJvYmplY3RcIiE9dHlwZW9mIGRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTsoZT1lfHx7fSkuYXR0cnM9XCJvYmplY3RcIj09dHlwZW9mIGUuYXR0cnM/ZS5hdHRyczp7fSxlLnNpbmdsZXRvbnx8XCJib29sZWFuXCI9PXR5cGVvZiBlLnNpbmdsZXRvbnx8KGUuc2luZ2xldG9uPWEoKSksZS5pbnNlcnRJbnRvfHwoZS5pbnNlcnRJbnRvPVwiaGVhZFwiKSxlLmluc2VydEF0fHwoZS5pbnNlcnRBdD1cImJvdHRvbVwiKTt2YXIgbj1kKHQsZSk7cmV0dXJuIHAobixlKSxmdW5jdGlvbih0KXtmb3IodmFyIHI9W10sbz0wO288bi5sZW5ndGg7bysrKXt2YXIgYT1uW29dOyhzPWlbYS5pZF0pLnJlZnMtLSxyLnB1c2gocyl9dCYmcChkKHQsZSksZSk7Zm9yKG89MDtvPHIubGVuZ3RoO28rKyl7dmFyIHM7aWYoMD09PShzPXJbb10pLnJlZnMpe2Zvcih2YXIgYz0wO2M8cy5wYXJ0cy5sZW5ndGg7YysrKXMucGFydHNbY10oKTtkZWxldGUgaVtzLmlkXX19fX07dmFyIGIseD0oYj1bXSxmdW5jdGlvbih0LGUpe3JldHVybiBiW3RdPWUsYi5maWx0ZXIoQm9vbGVhbikuam9pbihcIlxcblwiKX0pO2Z1bmN0aW9uIHcodCxlLG4scil7dmFyIG89bj9cIlwiOnIuY3NzO2lmKHQuc3R5bGVTaGVldCl0LnN0eWxlU2hlZXQuY3NzVGV4dD14KGUsbyk7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvKSxhPXQuY2hpbGROb2RlczthW2VdJiZ0LnJlbW92ZUNoaWxkKGFbZV0pLGEubGVuZ3RoP3QuaW5zZXJ0QmVmb3JlKGksYVtlXSk6dC5hcHBlbmRDaGlsZChpKX19fSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZT1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubG9jYXRpb247aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7aWYoIXR8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXJldHVybiB0O3ZhciBuPWUucHJvdG9jb2wrXCIvL1wiK2UuaG9zdCxyPW4rZS5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sXCIvXCIpO3JldHVybiB0LnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLGZ1bmN0aW9uKHQsZSl7dmFyIG8saT1lLnRyaW0oKS5yZXBsYWNlKC9eXCIoLiopXCIkLyxmdW5jdGlvbih0LGUpe3JldHVybiBlfSkucmVwbGFjZSgvXicoLiopJyQvLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV9KTtyZXR1cm4vXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KGkpP3Q6KG89MD09PWkuaW5kZXhPZihcIi8vXCIpP2k6MD09PWkuaW5kZXhPZihcIi9cIik/bitpOnIraS5yZXBsYWNlKC9eXFwuXFwvLyxcIlwiKSxcInVybChcIitKU09OLnN0cmluZ2lmeShvKStcIilcIil9KX19XSl9KTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLlJhd1Rvb2w9dCgpOmUuUmF3VG9vbD10KCl9KHdpbmRvdywoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIG89dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsbiksby5sPSEwLG8uZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6cn0pfSxuLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0sbi50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1uKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciByPU9iamVjdC5jcmVhdGUobnVsbCk7aWYobi5yKHIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgbyBpbiBlKW4uZChyLG8sZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxvKSk7cmV0dXJuIHJ9LG4ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gbi5kKHQsXCJhXCIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9XCIvXCIsbihuLnM9MCl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7bi5yKHQpLG4uZCh0LFwiZGVmYXVsdFwiLChmdW5jdGlvbigpe3JldHVybiBpfSkpO24oMSk7ZnVuY3Rpb24gcihlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19ZnVuY3Rpb24gbyhlLHQsbil7cmV0dXJuIHQmJnIoZS5wcm90b3R5cGUsdCksbiYmcihlLG4pLGV9XG4vKipcbiAqIFJhdyBIVE1MIFRvb2wgZm9yIENvZGVYIEVkaXRvclxuICpcbiAqIEBhdXRob3IgQ29kZVggKHRlYW1AY29kZXguc28pXG4gKiBAY29weXJpZ2h0IENvZGVYIDIwMThcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovdmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciBuPXQuZGF0YSxyPXQuY29uZmlnLG89dC5hcGksaT10LnJlYWRPbmx5OyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9KHRoaXMsZSksdGhpcy5hcGk9byx0aGlzLnJlYWRPbmx5PWksdGhpcy5wbGFjZWhvbGRlcj1yLnBsYWNlaG9sZGVyfHxlLkRFRkFVTFRfUExBQ0VIT0xERVIsdGhpcy5DU1M9e2Jhc2VDbGFzczp0aGlzLmFwaS5zdHlsZXMuYmxvY2ssaW5wdXQ6dGhpcy5hcGkuc3R5bGVzLmlucHV0LHdyYXBwZXI6XCJjZS1yYXd0b29sXCIsdGV4dGFyZWE6XCJjZS1yYXd0b29sX190ZXh0YXJlYVwifSx0aGlzLmRhdGE9e2h0bWw6bi5odG1sfHxcIlwifSx0aGlzLnRleHRhcmVhPW51bGwsdGhpcy5yZXNpemVEZWJvdW5jZT1udWxsfXJldHVybiBvKGUsbnVsbCxbe2tleTpcImlzUmVhZE9ubHlTdXBwb3J0ZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4hMH19LHtrZXk6XCJkaXNwbGF5SW5Ub29sYm94XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuITB9fSx7a2V5OlwiZW5hYmxlTGluZUJyZWFrc1wiLGdldDpmdW5jdGlvbigpe3JldHVybiEwfX0se2tleTpcInRvb2xib3hcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57aWNvbjonPHN2ZyB3aWR0aD1cIjE5XCIgaGVpZ2h0PVwiMTNcIj48cGF0aCBkPVwiTTE4LjAwNCA1Ljc5NGMuMjQuNDIyLjE4Ljk2OC0uMTggMS4zMjhsLTQuOTQzIDQuOTQzYTEuMTA1IDEuMTA1IDAgMSAxLTEuNTYyLTEuNTYybDQuMTYyLTQuMTYyLTQuMTAzLTQuMTAzQTEuMTI1IDEuMTI1IDAgMSAxIDEyLjk3LjY0OGw0Ljc5NiA0Ljc5NmMuMTA0LjEwNC4xODQuMjIzLjIzOS4zNXptLTE1LjE0Mi41NDdsNC4xNjIgNC4xNjJhMS4xMDUgMS4xMDUgMCAxIDEtMS41NjIgMS41NjJMLjUxOSA3LjEyMmMtLjM2LS4zNi0uNDItLjkwNi0uMTgtMS4zMjhhMS4xMyAxLjEzIDAgMCAxIC4yMzktLjM1TDUuMzc0LjY0N2ExLjEyNSAxLjEyNSAwIDAgMSAxLjU5MSAxLjU5MUwyLjg2MiA2LjM0MXpcIi8+PC9zdmc+Jyx0aXRsZTpcIlJhdyBIVE1MXCJ9fX1dKSxvKGUsW3trZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiB0aGlzLnRleHRhcmVhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKSx0LmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYmFzZUNsYXNzLHRoaXMuQ1NTLndyYXBwZXIpLHRoaXMudGV4dGFyZWEuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy50ZXh0YXJlYSx0aGlzLkNTUy5pbnB1dCksdGhpcy50ZXh0YXJlYS50ZXh0Q29udGVudD10aGlzLmRhdGEuaHRtbCx0aGlzLnRleHRhcmVhLnBsYWNlaG9sZGVyPXRoaXMucGxhY2Vob2xkZXIsdGhpcy5yZWFkT25seT90aGlzLnRleHRhcmVhLmRpc2FibGVkPSEwOnRoaXMudGV4dGFyZWEuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsKGZ1bmN0aW9uKCl7ZS5vbklucHV0KCl9KSksdC5hcHBlbmRDaGlsZCh0aGlzLnRleHRhcmVhKSxzZXRUaW1lb3V0KChmdW5jdGlvbigpe2UucmVzaXplKCl9KSwxMDApLHR9fSx7a2V5Olwic2F2ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybntodG1sOmUucXVlcnlTZWxlY3RvcihcInRleHRhcmVhXCIpLnZhbHVlfX19LHtrZXk6XCJvbklucHV0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMucmVzaXplRGVib3VuY2UmJmNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZURlYm91bmNlKSx0aGlzLnJlc2l6ZURlYm91bmNlPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7ZS5yZXNpemUoKX0pLDIwMCl9fSx7a2V5OlwicmVzaXplXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnRleHRhcmVhLnN0eWxlLmhlaWdodD1cImF1dG9cIix0aGlzLnRleHRhcmVhLnN0eWxlLmhlaWdodD10aGlzLnRleHRhcmVhLnNjcm9sbEhlaWdodCtcInB4XCJ9fV0sW3trZXk6XCJERUZBVUxUX1BMQUNFSE9MREVSXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJFbnRlciBIVE1MIGNvZGVcIn19LHtrZXk6XCJzYW5pdGl6ZVwiLGdldDpmdW5jdGlvbigpe3JldHVybntodG1sOiEwfX19XSksZX0oKX0sZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4oMik7XCJzdHJpbmdcIj09dHlwZW9mIHImJihyPVtbZS5pLHIsXCJcIl1dKTt2YXIgbz17aG1yOiEwLHRyYW5zZm9ybTp2b2lkIDAsaW5zZXJ0SW50bzp2b2lkIDB9O24oNCkocixvKTtyLmxvY2FscyYmKGUuZXhwb3J0cz1yLmxvY2Fscyl9LGZ1bmN0aW9uKGUsdCxuKXsoZS5leHBvcnRzPW4oMykoITEpKS5wdXNoKFtlLmksXCIuY2UtcmF3dG9vbF9fdGV4dGFyZWEge1xcbiAgbWluLWhlaWdodDogMjAwcHg7XFxuICByZXNpemU6IHZlcnRpY2FsO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgYm9yZGVyOiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzFlMjEyODtcXG4gIGZvbnQtZmFtaWx5OiBNZW5sbywgTW9uYWNvLCBDb25zb2xhcywgQ291cmllciBOZXcsIG1vbm9zcGFjZTtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjY7XFxuICBsZXR0ZXItc3BhY2luZzogLTAuMnB4O1xcbiAgY29sb3I6ICNhMWE3YjY7XFxuICBvdmVyc2Nyb2xsLWJlaGF2aW9yOiBjb250YWluO1xcbn1cXG5cIixcIlwiXSl9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3JldHVybiB0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKChmdW5jdGlvbih0KXt2YXIgbj1mdW5jdGlvbihlLHQpe3ZhciBuPWVbMV18fFwiXCIscj1lWzNdO2lmKCFyKXJldHVybiBuO2lmKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGJ0b2Epe3ZhciBvPShhPXIsXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIrYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoYSkpKSkrXCIgKi9cIiksaT1yLnNvdXJjZXMubWFwKChmdW5jdGlvbihlKXtyZXR1cm5cIi8qIyBzb3VyY2VVUkw9XCIrci5zb3VyY2VSb290K2UrXCIgKi9cIn0pKTtyZXR1cm5bbl0uY29uY2F0KGkpLmNvbmNhdChbb10pLmpvaW4oXCJcXG5cIil9dmFyIGE7cmV0dXJuW25dLmpvaW4oXCJcXG5cIil9KHQsZSk7cmV0dXJuIHRbMl0/XCJAbWVkaWEgXCIrdFsyXStcIntcIituK1wifVwiOm59KSkuam9pbihcIlwiKX0sdC5pPWZ1bmN0aW9uKGUsbil7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPVtbbnVsbCxlLFwiXCJdXSk7Zm9yKHZhciByPXt9LG89MDtvPHRoaXMubGVuZ3RoO28rKyl7dmFyIGk9dGhpc1tvXVswXTtcIm51bWJlclwiPT10eXBlb2YgaSYmKHJbaV09ITApfWZvcihvPTA7bzxlLmxlbmd0aDtvKyspe3ZhciBhPWVbb107XCJudW1iZXJcIj09dHlwZW9mIGFbMF0mJnJbYVswXV18fChuJiYhYVsyXT9hWzJdPW46biYmKGFbMl09XCIoXCIrYVsyXStcIikgYW5kIChcIituK1wiKVwiKSx0LnB1c2goYSkpfX0sdH19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgcixvLGk9e30sYT0ocj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYn0sZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT09byYmKG89ci5hcHBseSh0aGlzLGFyZ3VtZW50cykpLG99KSxzPWZ1bmN0aW9uKGUpe3JldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpfSx1PWZ1bmN0aW9uKGUpe3ZhciB0PXt9O3JldHVybiBmdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKXJldHVybiBlKCk7aWYodm9pZCAwPT09dFtlXSl7dmFyIG49cy5jYWxsKHRoaXMsZSk7aWYod2luZG93LkhUTUxJRnJhbWVFbGVtZW50JiZuIGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KXRyeXtuPW4uY29udGVudERvY3VtZW50LmhlYWR9Y2F0Y2goZSl7bj1udWxsfXRbZV09bn1yZXR1cm4gdFtlXX19KCksYz1udWxsLGw9MCxmPVtdLHA9big1KTtmdW5jdGlvbiBkKGUsdCl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl0sbz1pW3IuaWRdO2lmKG8pe28ucmVmcysrO2Zvcih2YXIgYT0wO2E8by5wYXJ0cy5sZW5ndGg7YSsrKW8ucGFydHNbYV0oci5wYXJ0c1thXSk7Zm9yKDthPHIucGFydHMubGVuZ3RoO2ErKylvLnBhcnRzLnB1c2goZyhyLnBhcnRzW2FdLHQpKX1lbHNle3ZhciBzPVtdO2ZvcihhPTA7YTxyLnBhcnRzLmxlbmd0aDthKyspcy5wdXNoKGcoci5wYXJ0c1thXSx0KSk7aVtyLmlkXT17aWQ6ci5pZCxyZWZzOjEscGFydHM6c319fX1mdW5jdGlvbiBoKGUsdCl7Zm9yKHZhciBuPVtdLHI9e30sbz0wO288ZS5sZW5ndGg7bysrKXt2YXIgaT1lW29dLGE9dC5iYXNlP2lbMF0rdC5iYXNlOmlbMF0scz17Y3NzOmlbMV0sbWVkaWE6aVsyXSxzb3VyY2VNYXA6aVszXX07clthXT9yW2FdLnBhcnRzLnB1c2gocyk6bi5wdXNoKHJbYV09e2lkOmEscGFydHM6W3NdfSl9cmV0dXJuIG59ZnVuY3Rpb24gdihlLHQpe3ZhciBuPXUoZS5pbnNlcnRJbnRvKTtpZighbil0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTt2YXIgcj1mW2YubGVuZ3RoLTFdO2lmKFwidG9wXCI9PT1lLmluc2VydEF0KXI/ci5uZXh0U2libGluZz9uLmluc2VydEJlZm9yZSh0LHIubmV4dFNpYmxpbmcpOm4uYXBwZW5kQ2hpbGQodCk6bi5pbnNlcnRCZWZvcmUodCxuLmZpcnN0Q2hpbGQpLGYucHVzaCh0KTtlbHNlIGlmKFwiYm90dG9tXCI9PT1lLmluc2VydEF0KW4uYXBwZW5kQ2hpbGQodCk7ZWxzZXtpZihcIm9iamVjdFwiIT10eXBlb2YgZS5pbnNlcnRBdHx8IWUuaW5zZXJ0QXQuYmVmb3JlKXRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO3ZhciBvPXUoZS5pbnNlcnRJbnRvK1wiIFwiK2UuaW5zZXJ0QXQuYmVmb3JlKTtuLmluc2VydEJlZm9yZSh0LG8pfX1mdW5jdGlvbiBiKGUpe2lmKG51bGw9PT1lLnBhcmVudE5vZGUpcmV0dXJuITE7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpO3ZhciB0PWYuaW5kZXhPZihlKTt0Pj0wJiZmLnNwbGljZSh0LDEpfWZ1bmN0aW9uIHkoZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO3JldHVybiB2b2lkIDA9PT1lLmF0dHJzLnR5cGUmJihlLmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiKSxtKHQsZS5hdHRycyksdihlLHQpLHR9ZnVuY3Rpb24gbShlLHQpe09iamVjdC5rZXlzKHQpLmZvckVhY2goKGZ1bmN0aW9uKG4pe2Uuc2V0QXR0cmlidXRlKG4sdFtuXSl9KSl9ZnVuY3Rpb24gZyhlLHQpe3ZhciBuLHIsbyxpO2lmKHQudHJhbnNmb3JtJiZlLmNzcyl7aWYoIShpPXQudHJhbnNmb3JtKGUuY3NzKSkpcmV0dXJuIGZ1bmN0aW9uKCl7fTtlLmNzcz1pfWlmKHQuc2luZ2xldG9uKXt2YXIgYT1sKys7bj1jfHwoYz15KHQpKSxyPUwuYmluZChudWxsLG4sYSwhMSksbz1MLmJpbmQobnVsbCxuLGEsITApfWVsc2UgZS5zb3VyY2VNYXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgQmxvYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYT8obj1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtyZXR1cm4gdm9pZCAwPT09ZS5hdHRycy50eXBlJiYoZS5hdHRycy50eXBlPVwidGV4dC9jc3NcIiksZS5hdHRycy5yZWw9XCJzdHlsZXNoZWV0XCIsbSh0LGUuYXR0cnMpLHYoZSx0KSx0fSh0KSxyPWouYmluZChudWxsLG4sdCksbz1mdW5jdGlvbigpe2Iobiksbi5ocmVmJiZVUkwucmV2b2tlT2JqZWN0VVJMKG4uaHJlZil9KToobj15KHQpLHI9Uy5iaW5kKG51bGwsbiksbz1mdW5jdGlvbigpe2Iobil9KTtyZXR1cm4gcihlKSxmdW5jdGlvbih0KXtpZih0KXtpZih0LmNzcz09PWUuY3NzJiZ0Lm1lZGlhPT09ZS5tZWRpYSYmdC5zb3VyY2VNYXA9PT1lLnNvdXJjZU1hcClyZXR1cm47cihlPXQpfWVsc2UgbygpfX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgREVCVUcmJkRFQlVHJiZcIm9iamVjdFwiIT10eXBlb2YgZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpOyh0PXR8fHt9KS5hdHRycz1cIm9iamVjdFwiPT10eXBlb2YgdC5hdHRycz90LmF0dHJzOnt9LHQuc2luZ2xldG9ufHxcImJvb2xlYW5cIj09dHlwZW9mIHQuc2luZ2xldG9ufHwodC5zaW5nbGV0b249YSgpKSx0Lmluc2VydEludG98fCh0Lmluc2VydEludG89XCJoZWFkXCIpLHQuaW5zZXJ0QXR8fCh0Lmluc2VydEF0PVwiYm90dG9tXCIpO3ZhciBuPWgoZSx0KTtyZXR1cm4gZChuLHQpLGZ1bmN0aW9uKGUpe2Zvcih2YXIgcj1bXSxvPTA7bzxuLmxlbmd0aDtvKyspe3ZhciBhPW5bb107KHM9aVthLmlkXSkucmVmcy0tLHIucHVzaChzKX1lJiZkKGgoZSx0KSx0KTtmb3Iobz0wO288ci5sZW5ndGg7bysrKXt2YXIgcztpZigwPT09KHM9cltvXSkucmVmcyl7Zm9yKHZhciB1PTA7dTxzLnBhcnRzLmxlbmd0aDt1Kyspcy5wYXJ0c1t1XSgpO2RlbGV0ZSBpW3MuaWRdfX19fTt2YXIgeCx3PSh4PVtdLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHhbZV09dCx4LmZpbHRlcihCb29sZWFuKS5qb2luKFwiXFxuXCIpfSk7ZnVuY3Rpb24gTChlLHQsbixyKXt2YXIgbz1uP1wiXCI6ci5jc3M7aWYoZS5zdHlsZVNoZWV0KWUuc3R5bGVTaGVldC5jc3NUZXh0PXcodCxvKTtlbHNle3ZhciBpPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG8pLGE9ZS5jaGlsZE5vZGVzO2FbdF0mJmUucmVtb3ZlQ2hpbGQoYVt0XSksYS5sZW5ndGg/ZS5pbnNlcnRCZWZvcmUoaSxhW3RdKTplLmFwcGVuZENoaWxkKGkpfX1mdW5jdGlvbiBTKGUsdCl7dmFyIG49dC5jc3Mscj10Lm1lZGlhO2lmKHImJmUuc2V0QXR0cmlidXRlKFwibWVkaWFcIixyKSxlLnN0eWxlU2hlZXQpZS5zdHlsZVNoZWV0LmNzc1RleHQ9bjtlbHNle2Zvcig7ZS5maXJzdENoaWxkOyllLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKSl9fWZ1bmN0aW9uIGooZSx0LG4pe3ZhciByPW4uY3NzLG89bi5zb3VyY2VNYXAsaT12b2lkIDA9PT10LmNvbnZlcnRUb0Fic29sdXRlVXJscyYmbzsodC5jb252ZXJ0VG9BYnNvbHV0ZVVybHN8fGkpJiYocj1wKHIpKSxvJiYocis9XCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KG8pKSkpK1wiICovXCIpO3ZhciBhPW5ldyBCbG9iKFtyXSx7dHlwZTpcInRleHQvY3NzXCJ9KSxzPWUuaHJlZjtlLmhyZWY9VVJMLmNyZWF0ZU9iamVjdFVSTChhKSxzJiZVUkwucmV2b2tlT2JqZWN0VVJMKHMpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmxvY2F0aW9uO2lmKCF0KXRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO2lmKCFlfHxcInN0cmluZ1wiIT10eXBlb2YgZSlyZXR1cm4gZTt2YXIgbj10LnByb3RvY29sK1wiLy9cIit0Lmhvc3Qscj1uK3QucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLFwiL1wiKTtyZXR1cm4gZS5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwoZnVuY3Rpb24oZSx0KXt2YXIgbyxpPXQudHJpbSgpLnJlcGxhY2UoL15cIiguKilcIiQvLChmdW5jdGlvbihlLHQpe3JldHVybiB0fSkpLnJlcGxhY2UoL14nKC4qKSckLywoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdH0pKTtyZXR1cm4vXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KGkpP2U6KG89MD09PWkuaW5kZXhPZihcIi8vXCIpP2k6MD09PWkuaW5kZXhPZihcIi9cIik/bitpOnIraS5yZXBsYWNlKC9eXFwuXFwvLyxcIlwiKSxcInVybChcIitKU09OLnN0cmluZ2lmeShvKStcIilcIil9KSl9fV0pLmRlZmF1bHR9KSk7IiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5UYWJsZT1lKCk6dC5UYWJsZT1lKCl9KHdpbmRvdyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt2YXIgZT17fTtmdW5jdGlvbiBvKG4pe2lmKGVbbl0pcmV0dXJuIGVbbl0uZXhwb3J0czt2YXIgaT1lW25dPXtpOm4sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gdFtuXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxvKSxpLmw9ITAsaS5leHBvcnRzfXJldHVybiBvLm09dCxvLmM9ZSxvLmQ9ZnVuY3Rpb24odCxlLG4pe28ubyh0LGUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHtlbnVtZXJhYmxlOiEwLGdldDpufSl9LG8ucj1mdW5jdGlvbih0KXtcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxvLnQ9ZnVuY3Rpb24odCxlKXtpZigxJmUmJih0PW8odCkpLDgmZSlyZXR1cm4gdDtpZig0JmUmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0JiZ0Ll9fZXNNb2R1bGUpcmV0dXJuIHQ7dmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKTtpZihvLnIobiksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sXCJkZWZhdWx0XCIse2VudW1lcmFibGU6ITAsdmFsdWU6dH0pLDImZSYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpZm9yKHZhciBpIGluIHQpby5kKG4saSxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0uYmluZChudWxsLGkpKTtyZXR1cm4gbn0sby5uPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBvLmQoZSxcImFcIixlKSxlfSxvLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LG8ucD1cIlwiLG8oby5zPTMpfShbZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9W107cmV0dXJuIGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oZSl7dmFyIG89ZnVuY3Rpb24odCxlKXt2YXIgbz10WzFdfHxcIlwiLG49dFszXTtpZighbilyZXR1cm4gbztpZihlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBidG9hKXt2YXIgaT0obD1uLFwiLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiK2J0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGwpKSkpK1wiICovXCIpLHI9bi5zb3VyY2VzLm1hcChmdW5jdGlvbih0KXtyZXR1cm5cIi8qIyBzb3VyY2VVUkw9XCIrbi5zb3VyY2VSb290K3QrXCIgKi9cIn0pO3JldHVybltvXS5jb25jYXQocikuY29uY2F0KFtpXSkuam9pbihcIlxcblwiKX12YXIgbDtyZXR1cm5bb10uam9pbihcIlxcblwiKX0oZSx0KTtyZXR1cm4gZVsyXT9cIkBtZWRpYSBcIitlWzJdK1wie1wiK28rXCJ9XCI6b30pLmpvaW4oXCJcIil9LGUuaT1mdW5jdGlvbih0LG8pe1wic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1bW251bGwsdCxcIlwiXV0pO2Zvcih2YXIgbj17fSxpPTA7aTx0aGlzLmxlbmd0aDtpKyspe3ZhciByPXRoaXNbaV1bMF07XCJudW1iZXJcIj09dHlwZW9mIHImJihuW3JdPSEwKX1mb3IoaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgbD10W2ldO1wibnVtYmVyXCI9PXR5cGVvZiBsWzBdJiZuW2xbMF1dfHwobyYmIWxbMl0/bFsyXT1vOm8mJihsWzJdPVwiKFwiK2xbMl0rXCIpIGFuZCAoXCIrbytcIilcIiksZS5wdXNoKGwpKX19LGV9fSxmdW5jdGlvbih0LGUsbyl7dmFyIG4saSxyPXt9LGw9KG49ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93JiZkb2N1bWVudCYmZG9jdW1lbnQuYWxsJiYhd2luZG93LmF0b2J9LGZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PWkmJihpPW4uYXBwbHkodGhpcyxhcmd1bWVudHMpKSxpfSkscz1mdW5jdGlvbih0KXt2YXIgZT17fTtyZXR1cm4gZnVuY3Rpb24odCxvKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0KXJldHVybiB0KCk7aWYodm9pZCAwPT09ZVt0XSl7dmFyIG49ZnVuY3Rpb24odCxlKXtyZXR1cm4gZT9lLnF1ZXJ5U2VsZWN0b3IodCk6ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KX0uY2FsbCh0aGlzLHQsbyk7aWYod2luZG93LkhUTUxJRnJhbWVFbGVtZW50JiZuIGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KXRyeXtuPW4uY29udGVudERvY3VtZW50LmhlYWR9Y2F0Y2godCl7bj1udWxsfWVbdF09bn1yZXR1cm4gZVt0XX19KCksYT1udWxsLGM9MCxoPVtdLGQ9byg2KTtmdW5jdGlvbiB1KHQsZSl7Zm9yKHZhciBvPTA7bzx0Lmxlbmd0aDtvKyspe3ZhciBuPXRbb10saT1yW24uaWRdO2lmKGkpe2kucmVmcysrO2Zvcih2YXIgbD0wO2w8aS5wYXJ0cy5sZW5ndGg7bCsrKWkucGFydHNbbF0obi5wYXJ0c1tsXSk7Zm9yKDtsPG4ucGFydHMubGVuZ3RoO2wrKylpLnBhcnRzLnB1c2goZyhuLnBhcnRzW2xdLGUpKX1lbHNle3ZhciBzPVtdO2ZvcihsPTA7bDxuLnBhcnRzLmxlbmd0aDtsKyspcy5wdXNoKGcobi5wYXJ0c1tsXSxlKSk7cltuLmlkXT17aWQ6bi5pZCxyZWZzOjEscGFydHM6c319fX1mdW5jdGlvbiBmKHQsZSl7Zm9yKHZhciBvPVtdLG49e30saT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgcj10W2ldLGw9ZS5iYXNlP3JbMF0rZS5iYXNlOnJbMF0scz17Y3NzOnJbMV0sbWVkaWE6clsyXSxzb3VyY2VNYXA6clszXX07bltsXT9uW2xdLnBhcnRzLnB1c2gocyk6by5wdXNoKG5bbF09e2lkOmwscGFydHM6W3NdfSl9cmV0dXJuIG99ZnVuY3Rpb24gcCh0LGUpe3ZhciBvPXModC5pbnNlcnRJbnRvKTtpZighbyl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTt2YXIgbj1oW2gubGVuZ3RoLTFdO2lmKFwidG9wXCI9PT10Lmluc2VydEF0KW4/bi5uZXh0U2libGluZz9vLmluc2VydEJlZm9yZShlLG4ubmV4dFNpYmxpbmcpOm8uYXBwZW5kQ2hpbGQoZSk6by5pbnNlcnRCZWZvcmUoZSxvLmZpcnN0Q2hpbGQpLGgucHVzaChlKTtlbHNlIGlmKFwiYm90dG9tXCI9PT10Lmluc2VydEF0KW8uYXBwZW5kQ2hpbGQoZSk7ZWxzZXtpZihcIm9iamVjdFwiIT10eXBlb2YgdC5pbnNlcnRBdHx8IXQuaW5zZXJ0QXQuYmVmb3JlKXRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO3ZhciBpPXModC5pbnNlcnRBdC5iZWZvcmUsbyk7by5pbnNlcnRCZWZvcmUoZSxpKX19ZnVuY3Rpb24gXyh0KXtpZihudWxsPT09dC5wYXJlbnROb2RlKXJldHVybiExO3QucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KTt2YXIgZT1oLmluZGV4T2YodCk7ZT49MCYmaC5zcGxpY2UoZSwxKX1mdW5jdGlvbiBiKHQpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtpZih2b2lkIDA9PT10LmF0dHJzLnR5cGUmJih0LmF0dHJzLnR5cGU9XCJ0ZXh0L2Nzc1wiKSx2b2lkIDA9PT10LmF0dHJzLm5vbmNlKXt2YXIgbj1mdW5jdGlvbigpezA7cmV0dXJuIG8ubmN9KCk7biYmKHQuYXR0cnMubm9uY2U9bil9cmV0dXJuIHYoZSx0LmF0dHJzKSxwKHQsZSksZX1mdW5jdGlvbiB2KHQsZSl7T2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihvKXt0LnNldEF0dHJpYnV0ZShvLGVbb10pfSl9ZnVuY3Rpb24gZyh0LGUpe3ZhciBvLG4saSxyO2lmKGUudHJhbnNmb3JtJiZ0LmNzcyl7aWYoIShyPVwiZnVuY3Rpb25cIj09dHlwZW9mIGUudHJhbnNmb3JtP2UudHJhbnNmb3JtKHQuY3NzKTplLnRyYW5zZm9ybS5kZWZhdWx0KHQuY3NzKSkpcmV0dXJuIGZ1bmN0aW9uKCl7fTt0LmNzcz1yfWlmKGUuc2luZ2xldG9uKXt2YXIgbD1jKys7bz1hfHwoYT1iKGUpKSxuPXcuYmluZChudWxsLG8sbCwhMSksaT13LmJpbmQobnVsbCxvLGwsITApfWVsc2UgdC5zb3VyY2VNYXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2YgQmxvYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYnRvYT8obz1mdW5jdGlvbih0KXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtyZXR1cm4gdm9pZCAwPT09dC5hdHRycy50eXBlJiYodC5hdHRycy50eXBlPVwidGV4dC9jc3NcIiksdC5hdHRycy5yZWw9XCJzdHlsZXNoZWV0XCIsdihlLHQuYXR0cnMpLHAodCxlKSxlfShlKSxuPWZ1bmN0aW9uKHQsZSxvKXt2YXIgbj1vLmNzcyxpPW8uc291cmNlTWFwLHI9dm9pZCAwPT09ZS5jb252ZXJ0VG9BYnNvbHV0ZVVybHMmJmk7KGUuY29udmVydFRvQWJzb2x1dGVVcmxzfHxyKSYmKG49ZChuKSk7aSYmKG4rPVwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIitidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShpKSkpKStcIiAqL1wiKTt2YXIgbD1uZXcgQmxvYihbbl0se3R5cGU6XCJ0ZXh0L2Nzc1wifSkscz10LmhyZWY7dC5ocmVmPVVSTC5jcmVhdGVPYmplY3RVUkwobCkscyYmVVJMLnJldm9rZU9iamVjdFVSTChzKX0uYmluZChudWxsLG8sZSksaT1mdW5jdGlvbigpe18obyksby5ocmVmJiZVUkwucmV2b2tlT2JqZWN0VVJMKG8uaHJlZil9KToobz1iKGUpLG49ZnVuY3Rpb24odCxlKXt2YXIgbz1lLmNzcyxuPWUubWVkaWE7biYmdC5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLG4pO2lmKHQuc3R5bGVTaGVldCl0LnN0eWxlU2hlZXQuY3NzVGV4dD1vO2Vsc2V7Zm9yKDt0LmZpcnN0Q2hpbGQ7KXQucmVtb3ZlQ2hpbGQodC5maXJzdENoaWxkKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG8pKX19LmJpbmQobnVsbCxvKSxpPWZ1bmN0aW9uKCl7XyhvKX0pO3JldHVybiBuKHQpLGZ1bmN0aW9uKGUpe2lmKGUpe2lmKGUuY3NzPT09dC5jc3MmJmUubWVkaWE9PT10Lm1lZGlhJiZlLnNvdXJjZU1hcD09PXQuc291cmNlTWFwKXJldHVybjtuKHQ9ZSl9ZWxzZSBpKCl9fXQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBERUJVRyYmREVCVUcmJlwib2JqZWN0XCIhPXR5cGVvZiBkb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7KGU9ZXx8e30pLmF0dHJzPVwib2JqZWN0XCI9PXR5cGVvZiBlLmF0dHJzP2UuYXR0cnM6e30sZS5zaW5nbGV0b258fFwiYm9vbGVhblwiPT10eXBlb2YgZS5zaW5nbGV0b258fChlLnNpbmdsZXRvbj1sKCkpLGUuaW5zZXJ0SW50b3x8KGUuaW5zZXJ0SW50bz1cImhlYWRcIiksZS5pbnNlcnRBdHx8KGUuaW5zZXJ0QXQ9XCJib3R0b21cIik7dmFyIG89Zih0LGUpO3JldHVybiB1KG8sZSksZnVuY3Rpb24odCl7Zm9yKHZhciBuPVtdLGk9MDtpPG8ubGVuZ3RoO2krKyl7dmFyIGw9b1tpXTsocz1yW2wuaWRdKS5yZWZzLS0sbi5wdXNoKHMpfXQmJnUoZih0LGUpLGUpO2ZvcihpPTA7aTxuLmxlbmd0aDtpKyspe3ZhciBzO2lmKDA9PT0ocz1uW2ldKS5yZWZzKXtmb3IodmFyIGE9MDthPHMucGFydHMubGVuZ3RoO2ErKylzLnBhcnRzW2FdKCk7ZGVsZXRlIHJbcy5pZF19fX19O3ZhciBtLHk9KG09W10sZnVuY3Rpb24odCxlKXtyZXR1cm4gbVt0XT1lLG0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIil9KTtmdW5jdGlvbiB3KHQsZSxvLG4pe3ZhciBpPW8/XCJcIjpuLmNzcztpZih0LnN0eWxlU2hlZXQpdC5zdHlsZVNoZWV0LmNzc1RleHQ9eShlLGkpO2Vsc2V7dmFyIHI9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoaSksbD10LmNoaWxkTm9kZXM7bFtlXSYmdC5yZW1vdmVDaGlsZChsW2VdKSxsLmxlbmd0aD90Lmluc2VydEJlZm9yZShyLGxbZV0pOnQuYXBwZW5kQ2hpbGQocil9fX0sZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9Jzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiPjxjaXJjbGUgY3g9XCIxMFwiIGN5PVwiMTBcIiByPVwiMTBcIiBmaWxsPVwiIzM4OEFFNVwiPjwvY2lyY2xlPjxwYXRoIGZpbGw9XCIjRkZGXCIgZD1cIk0xMC45IDkuMWgzLjdhLjkuOSAwIDEgMSAwIDEuOGgtMy43djMuN2EuOS45IDAgMSAxLTEuOCAwdi0zLjdINS40YS45LjkgMCAwIDEgMC0xLjhoMy43VjUuNGEuOS45IDAgMCAxIDEuOCAwdjMuN3pcIj48L3BhdGg+PC9zdmc+J30sZnVuY3Rpb24odCxlLG8pe2NvbnN0IG49bygxMikuVGFibGVDb25zdHJ1Y3RvcixpPW8oMTEpLHI9e2lucHV0OlwidGMtdGFibGVfX2lucFwifTt0LmV4cG9ydHM9Y2xhc3N7c3RhdGljIGdldCBpc1JlYWRPbmx5U3VwcG9ydGVkKCl7cmV0dXJuITB9c3RhdGljIGdldCBlbmFibGVMaW5lQnJlYWtzKCl7cmV0dXJuITB9c3RhdGljIGdldCB0b29sYm94KCl7cmV0dXJue2ljb246aSx0aXRsZTpcIlRhYmxlXCJ9fWNvbnN0cnVjdG9yKHtkYXRhOnQsY29uZmlnOmUsYXBpOm8scmVhZE9ubHk6aX0pe3RoaXMuYXBpPW8sdGhpcy5yZWFkT25seT1pLHRoaXMuX3RhYmxlQ29uc3RydWN0b3I9bmV3IG4odCxlLG8saSl9cmVuZGVyKCl7cmV0dXJuIHRoaXMuX3RhYmxlQ29uc3RydWN0b3IuaHRtbEVsZW1lbnR9c2F2ZSh0KXtjb25zdCBlPVtdLG89dC5xdWVyeVNlbGVjdG9yKFwidGFibGVcIikucm93cztmb3IobGV0IHQ9MDt0PG8ubGVuZ3RoO3QrKyl7Y29uc3Qgbj1vW3RdLGk9QXJyYXkuZnJvbShuLmNlbGxzKS5tYXAodD0+dC5xdWVyeVNlbGVjdG9yKFwiLlwiK3IuaW5wdXQpKTtpLmV2ZXJ5KHRoaXMuX2lzRW1wdHkpfHxlLnB1c2goaS5tYXAodD0+dC5pbm5lckhUTUwpKX1yZXR1cm57Y29udGVudDplfX1faXNFbXB0eSh0KXtyZXR1cm4hdC50ZXh0Q29udGVudC50cmltKCl9fX0sZnVuY3Rpb24odCxlLG8pe3ZhciBuPW8oNSk7XCJzdHJpbmdcIj09dHlwZW9mIG4mJihuPVtbdC5pLG4sXCJcIl1dKTt2YXIgaT17aG1yOiEwLHRyYW5zZm9ybTp2b2lkIDAsaW5zZXJ0SW50bzp2b2lkIDB9O28oMSkobixpKTtuLmxvY2FscyYmKHQuZXhwb3J0cz1uLmxvY2Fscyl9LGZ1bmN0aW9uKHQsZSxvKXsodC5leHBvcnRzPW8oMCkoITEpKS5wdXNoKFt0LmksXCIudGMtZWRpdG9ye3BhZGRpbmc6MTBweDtwb3NpdGlvbjpyZWxhdGl2ZTtib3gtc2l6aW5nOmNvbnRlbnQtYm94O3dpZHRoOjEwMCU7bGVmdDotMTBweH1cIixcIlwiXSl9LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5sb2NhdGlvbjtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtpZighdHx8XCJzdHJpbmdcIiE9dHlwZW9mIHQpcmV0dXJuIHQ7dmFyIG89ZS5wcm90b2NvbCtcIi8vXCIrZS5ob3N0LG49bytlLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLyxcIi9cIik7cmV0dXJuIHQucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksZnVuY3Rpb24odCxlKXt2YXIgaSxyPWUudHJpbSgpLnJlcGxhY2UoL15cIiguKilcIiQvLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV9KS5yZXBsYWNlKC9eJyguKiknJC8sZnVuY3Rpb24odCxlKXtyZXR1cm4gZX0pO3JldHVybi9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3Qocik/dDooaT0wPT09ci5pbmRleE9mKFwiLy9cIik/cjowPT09ci5pbmRleE9mKFwiL1wiKT9vK3I6bityLnJlcGxhY2UoL15cXC5cXC8vLFwiXCIpLFwidXJsKFwiK0pTT04uc3RyaW5naWZ5KGkpK1wiKVwiKX0pfX0sZnVuY3Rpb24odCxlLG8pe3ZhciBuPW8oOCk7XCJzdHJpbmdcIj09dHlwZW9mIG4mJihuPVtbdC5pLG4sXCJcIl1dKTt2YXIgaT17aG1yOiEwLHRyYW5zZm9ybTp2b2lkIDAsaW5zZXJ0SW50bzp2b2lkIDB9O28oMSkobixpKTtuLmxvY2FscyYmKHQuZXhwb3J0cz1uLmxvY2Fscyl9LGZ1bmN0aW9uKHQsZSxvKXsodC5leHBvcnRzPW8oMCkoITEpKS5wdXNoKFt0LmksXCIudGMtdG9vbGJhcntiYWNrZ3JvdW5kOiMzNjhiZTY7fS50Yy10b29sYmFyLS1oaWRkZW57dmlzaWJpbGl0eTpoaWRkZW59LnRjLXRvb2xiYXItLWhvcnt3aWR0aDoxMDAlO2hlaWdodDoyMXB4O2ZsZXgtZGlyZWN0aW9uOnJvdztsZWZ0OjA7dG9wOjFweH0udGMtdG9vbGJhci0taG9yLC50Yy10b29sYmFyLS12ZXJ7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwMH0udGMtdG9vbGJhci0tdmVye2hlaWdodDoxMDAlO3dpZHRoOjIxcHg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3RvcDowO2xlZnQ6LTFweH0udGMtdG9vbGJhcl9fcGx1c3toZWlnaHQ6MjFweDt3aWR0aDoyMXB4O21hcmdpbi10b3A6MDt9LnRjLXRvb2xiYXJfX3BsdXMtLWhvcnttYXJnaW4tbGVmdDotMTBweH0udGMtdG9vbGJhcl9fcGx1cy0tdmVye21hcmdpbi10b3A6LTEwcHh9LnRjLXRvb2xiYXJfX3NoaW5lLWxpbmUtLWhvcnttaW4taGVpZ2h0OjFweDt3aWR0aDoxMDAlfS50Yy10b29sYmFyX19zaGluZS1saW5lLS12ZXJ7bWluLXdpZHRoOjFweDtoZWlnaHQ6MTAwJX1cIixcIlwiXSl9LGZ1bmN0aW9uKHQsZSxvKXt2YXIgbj1vKDEwKTtcInN0cmluZ1wiPT10eXBlb2YgbiYmKG49W1t0LmksbixcIlwiXV0pO3ZhciBpPXtobXI6ITAsdHJhbnNmb3JtOnZvaWQgMCxpbnNlcnRJbnRvOnZvaWQgMH07bygxKShuLGkpO24ubG9jYWxzJiYodC5leHBvcnRzPW4ubG9jYWxzKX0sZnVuY3Rpb24odCxlLG8peyh0LmV4cG9ydHM9bygwKSghMSkpLnB1c2goW3QuaSxcIi50Yy10YWJsZXt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTt0YWJsZS1sYXlvdXQ6Zml4ZWQ7fS50Yy10YWJsZV9fd3JhcHtib3JkZXI6MXB4IHNvbGlkICNkYmRiZTI7Ym9yZGVyLXJhZGl1czozcHg7cG9zaXRpb246cmVsYXRpdmU7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtib3gtc2l6aW5nOmJvcmRlci1ib3h9LnRjLXRhYmxlX19jZWxse2JvcmRlcjoxcHggc29saWQgI2RiZGJlMjtwYWRkaW5nOjA7dmVydGljYWwtYWxpZ246dG9wfS50Yy10YWJsZV9fYXJlYXtwYWRkaW5nOjEwcHg7aGVpZ2h0OjEwMCV9LnRjLXRhYmxlX19pbnB7b3V0bGluZTpub25lO2ZsZXgtZ3JvdzoxMDA7bWluLWhlaWdodDoxLjVlbTtoZWlnaHQ6MTAwJTtvdmVyZmxvdzpoaWRkZW59LnRjLXRhYmxlIHRib2R5IHRyOmZpcnN0LWNoaWxkIHRke2JvcmRlci10b3A6bm9uZX0udGMtdGFibGUgdGJvZHkgdHI6bGFzdC1jaGlsZCB0ZHtib3JkZXItYm90dG9tOm5vbmV9LnRjLXRhYmxlIHRib2R5IHRyIHRkOmxhc3QtY2hpbGR7Ym9yZGVyLXJpZ2h0Om5vbmV9LnRjLXRhYmxlIHRib2R5IHRyIHRkOmZpcnN0LWNoaWxke2JvcmRlci1sZWZ0Om5vbmV9XCIsXCJcIl0pfSxmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0nPHN2ZyB3aWR0aD1cIjE4XCIgaGVpZ2h0PVwiMTRcIj48cGF0aCBkPVwiTTIuODMzIDh2MS45NWExLjcgMS43IDAgMCAwIDEuNyAxLjdoMy40NVY4aC01LjE1em0wLTJoNS4xNVYyLjM1aC0zLjQ1YTEuNyAxLjcgMCAwIDAtMS43IDEuN1Y2em0xMi4zIDJoLTUuMTV2My42NWgzLjQ1YTEuNyAxLjcgMCAwIDAgMS43LTEuN1Y4em0wLTJWNC4wNWExLjcgMS43IDAgMCAwLTEuNy0xLjdoLTMuNDVWNmg1LjE1ek00LjUzMy4xaDguOWEzLjk1IDMuOTUgMCAwIDEgMy45NSAzLjk1djUuOWEzLjk1IDMuOTUgMCAwIDEtMy45NSAzLjk1aC04LjlhMy45NSAzLjk1IDAgMCAxLTMuOTUtMy45NXYtNS45QTMuOTUgMy45NSAwIDAgMSA0LjUzMy4xelwiPjwvcGF0aD48L3N2Zz4nfSxmdW5jdGlvbih0LGUsbyl7XCJ1c2Ugc3RyaWN0XCI7by5yKGUpO28oNCk7ZnVuY3Rpb24gbih0KXtyZXR1cm4hKG51bGw9PXQpfWZ1bmN0aW9uIGkodCxlPW51bGwsbz1udWxsLGk9bnVsbCl7Y29uc3Qgcj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KHQpO2lmKG4oZSkpZm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0KyspbihlW3RdKSYmci5jbGFzc0xpc3QuYWRkKGVbdF0pO2lmKG4obykpZm9yKGxldCB0IGluIG8pci5zZXRBdHRyaWJ1dGUodCxvW3RdKTtpZihuKGkpKWZvcihsZXQgdD0wO3Q8aS5sZW5ndGg7dCsrKW4oaVt0XSkmJnIuYXBwZW5kQ2hpbGQoaVt0XSk7cmV0dXJuIHJ9ZnVuY3Rpb24gcih0KXtjb25zdCBlPXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7cmV0dXJue3kxOk1hdGguZmxvb3IoZS50b3Ard2luZG93LnBhZ2VZT2Zmc2V0KSx4MTpNYXRoLmZsb29yKGUubGVmdCt3aW5kb3cucGFnZVhPZmZzZXQpLHgyOk1hdGguZmxvb3IoZS5yaWdodCt3aW5kb3cucGFnZVhPZmZzZXQpLHkyOk1hdGguZmxvb3IoZS5ib3R0b20rd2luZG93LnBhZ2VZT2Zmc2V0KX19ZnVuY3Rpb24gbCh0LGUsbyl7bGV0IG47cmV0dXJuIGUtdC54MT49LTEmJmUtdC54MTw9MTEmJihuPVwibGVmdFwiKSx0LngyLWU+PS0xJiZ0LngyLWU8PTExJiYobj1cInJpZ2h0XCIpLG8tdC55MT49LTEmJm8tdC55MTw9MTEmJihuPVwidG9wXCIpLHQueTItbz49LTEmJnQueTItbzw9MTEmJihuPVwiYm90dG9tXCIpLG59byg3KTt2YXIgcz1vKDIpLGE9by5uKHMpO2NvbnN0IGM9e2hpZ2hsaWdodGluZ0xpbmU6XCJ0Yy10b29sYmFyXCIsaGlkZGVuOlwidGMtdG9vbGJhci0taGlkZGVuXCIsaG9yaXpvbnRhbFRvb2xCYXI6XCJ0Yy10b29sYmFyLS1ob3JcIixob3Jpem9udGFsSGlnaGxpZ2h0aW5nTGluZTpcInRjLXRvb2xiYXJfX3NoaW5lLWxpbmUtLWhvclwiLHZlcnRpY2FsVG9vbEJhcjpcInRjLXRvb2xiYXItLXZlclwiLHZlcnRpY2FsSGlnaGxpZ2h0aW5nTGluZTpcInRjLXRvb2xiYXJfX3NoaW5lLWxpbmUtLXZlclwiLHBsdXNCdXR0b246XCJ0Yy10b29sYmFyX19wbHVzXCIsaG9yaXpvbnRhbFBsdXNCdXR0b246XCJ0Yy10b29sYmFyX19wbHVzLS1ob3JcIix2ZXJ0aWNhbFBsdXNCdXR0b246XCJ0Yy10b29sYmFyX19wbHVzLS12ZXJcIixhcmVhOlwidGMtdGFibGVfX2FyZWFcIn07Y2xhc3MgaHtjb25zdHJ1Y3Rvcigpe3RoaXMuX3BsdXNCdXR0b249dGhpcy5fZ2VuZXJhdGVQbHVzQnV0dG9uKCksdGhpcy5faGlnaGxpZ2h0aW5nTGluZT10aGlzLl9nZW5lcmF0ZUhpZ2hsaWdodGluZ0xpbmUoKSx0aGlzLl90b29sYmFyPXRoaXMuX2dlbmVyYXRlVG9vbEJhcihbdGhpcy5fcGx1c0J1dHRvbix0aGlzLl9oaWdobGlnaHRpbmdMaW5lXSl9aGlkZSgpe3RoaXMuX3Rvb2xiYXIuY2xhc3NMaXN0LmFkZChjLmhpZGRlbil9c2hvdygpe3RoaXMuX3Rvb2xiYXIuY2xhc3NMaXN0LnJlbW92ZShjLmhpZGRlbiksdGhpcy5faGlnaGxpZ2h0aW5nTGluZS5jbGFzc0xpc3QucmVtb3ZlKGMuaGlkZGVuKX1oaWRlTGluZSgpe3RoaXMuX2hpZ2hsaWdodGluZ0xpbmUuY2xhc3NMaXN0LmFkZChjLmhpZGRlbil9Z2V0IGh0bWxFbGVtZW50KCl7cmV0dXJuIHRoaXMuX3Rvb2xiYXJ9X2dlbmVyYXRlUGx1c0J1dHRvbigpe2NvbnN0IHQ9aShcImRpdlwiLFtjLnBsdXNCdXR0b25dKTtyZXR1cm4gdC5pbm5lckhUTUw9YS5hLHQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdD0+e3Quc3RvcFByb3BhZ2F0aW9uKCk7Y29uc3QgZT1uZXcgQ3VzdG9tRXZlbnQoXCJjbGlja1wiLHtkZXRhaWw6e3g6dC5wYWdlWCx5OnQucGFnZVl9LGJ1YmJsZXM6ITB9KTt0aGlzLl90b29sYmFyLmRpc3BhdGNoRXZlbnQoZSl9KSx0fV9nZW5lcmF0ZUhpZ2hsaWdodGluZ0xpbmUoKXtjb25zdCB0PWkoXCJkaXZcIixbYy5oaWdobGlnaHRpbmdMaW5lXSk7cmV0dXJuIHQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdD0+e3Quc3RvcFByb3BhZ2F0aW9uKCk7Y29uc3QgZT1uZXcgQ3VzdG9tRXZlbnQoXCJjbGlja1wiLHtidWJibGVzOiEwfSk7dGhpcy5fdG9vbGJhci5kaXNwYXRjaEV2ZW50KGUpfSksdH1fZ2VuZXJhdGVUb29sQmFyKHQpe2NvbnN0IGU9aShcImRpdlwiLFtjLmhpZGRlbl0sbnVsbCx0KTtyZXR1cm4gZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLHQ9Pnt0aGlzLl9yZWNhbGNNb3VzZVBvcyh0KX0pLGV9X3JlY2FsY01vdXNlUG9zKHQpe3RoaXMuaGlkZSgpO2NvbnN0IGU9ZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0LnBhZ2VYLHQucGFnZVkpO2lmKG51bGwhPT1lJiZlLmNsYXNzTGlzdC5jb250YWlucyhjLmFyZWEpKXtjb25zdCBvPW5ldyBNb3VzZUV2ZW50KFwibW91c2VvdmVyXCIse2NsaWVudFg6dC5wYWdlWCxjbGllbnRZOnQucGFnZVl9KTtlLmRpc3BhdGNoRXZlbnQobyl9fX1jbGFzcyBkIGV4dGVuZHMgaHtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5fdG9vbGJhci5jbGFzc0xpc3QuYWRkKGMuaG9yaXpvbnRhbFRvb2xCYXIpLHRoaXMuX3BsdXNCdXR0b24uY2xhc3NMaXN0LmFkZChjLmhvcml6b250YWxQbHVzQnV0dG9uKSx0aGlzLl9oaWdobGlnaHRpbmdMaW5lLmNsYXNzTGlzdC5hZGQoYy5ob3Jpem9udGFsSGlnaGxpZ2h0aW5nTGluZSl9c2hvd0luKHQpe2NvbnN0IGU9TWF0aC5mbG9vcihOdW1iZXIucGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5fdG9vbGJhcikuaGVpZ2h0KS8yKTt0aGlzLl90b29sYmFyLnN0eWxlLnRvcD10LWUrXCJweFwiLHRoaXMuc2hvdygpfX1jbGFzcyB1IGV4dGVuZHMgaHtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5fdG9vbGJhci5jbGFzc0xpc3QuYWRkKGMudmVydGljYWxUb29sQmFyKSx0aGlzLl9wbHVzQnV0dG9uLmNsYXNzTGlzdC5hZGQoYy52ZXJ0aWNhbFBsdXNCdXR0b24pLHRoaXMuX2hpZ2hsaWdodGluZ0xpbmUuY2xhc3NMaXN0LmFkZChjLnZlcnRpY2FsSGlnaGxpZ2h0aW5nTGluZSl9c2hvd0luKHQpe2NvbnN0IGU9TWF0aC5mbG9vcihOdW1iZXIucGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5fdG9vbGJhcikud2lkdGgpLzIpO3RoaXMuX3Rvb2xiYXIuc3R5bGUubGVmdD10LWUrXCJweFwiLHRoaXMuc2hvdygpfX1vKDkpO2NvbnN0IGY9e3RhYmxlOlwidGMtdGFibGVcIixpbnB1dEZpZWxkOlwidGMtdGFibGVfX2lucFwiLGNlbGw6XCJ0Yy10YWJsZV9fY2VsbFwiLHdyYXBwZXI6XCJ0Yy10YWJsZV9fd3JhcFwiLGFyZWE6XCJ0Yy10YWJsZV9fYXJlYVwifTtjbGFzcyBwe2NvbnN0cnVjdG9yKHQpe3RoaXMucmVhZE9ubHk9dCx0aGlzLl9udW1iZXJPZkNvbHVtbnM9MCx0aGlzLl9udW1iZXJPZlJvd3M9MCx0aGlzLl9lbGVtZW50PXRoaXMuX2NyZWF0ZVRhYmxlV3JhcHBlcigpLHRoaXMuX3RhYmxlPXRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcInRhYmxlXCIpLHRoaXMucmVhZE9ubHl8fHRoaXMuX2hhbmdFdmVudHMoKX1hZGRDb2x1bW4odD0tMSl7dGhpcy5fbnVtYmVyT2ZDb2x1bW5zKys7Y29uc3QgZT10aGlzLl90YWJsZS5yb3dzO2ZvcihsZXQgbz0wO288ZS5sZW5ndGg7bysrKXtjb25zdCBuPWVbb10uaW5zZXJ0Q2VsbCh0KTt0aGlzLl9maWxsQ2VsbChuKX19YWRkUm93KHQ9LTEpe3RoaXMuX251bWJlck9mUm93cysrO2NvbnN0IGU9dGhpcy5fdGFibGUuaW5zZXJ0Um93KHQpO3JldHVybiB0aGlzLl9maWxsUm93KGUpLGV9Z2V0IGh0bWxFbGVtZW50KCl7cmV0dXJuIHRoaXMuX2VsZW1lbnR9Z2V0IGJvZHkoKXtyZXR1cm4gdGhpcy5fdGFibGV9Z2V0IHNlbGVjdGVkQ2VsbCgpe3JldHVybiB0aGlzLl9zZWxlY3RlZENlbGx9X2NyZWF0ZVRhYmxlV3JhcHBlcigpe3JldHVybiBpKFwiZGl2XCIsW2Yud3JhcHBlcl0sbnVsbCxbaShcInRhYmxlXCIsW2YudGFibGVdKV0pfV9jcmVhdGVDb250ZW50ZWRpdGFibGVBcmVhKCl7cmV0dXJuIGkoXCJkaXZcIixbZi5pbnB1dEZpZWxkXSx7Y29udGVudGVkaXRhYmxlOiF0aGlzLnJlYWRPbmx5fSl9X2ZpbGxDZWxsKHQpe3QuY2xhc3NMaXN0LmFkZChmLmNlbGwpO2NvbnN0IGU9dGhpcy5fY3JlYXRlQ29udGVudGVkaXRhYmxlQXJlYSgpO3QuYXBwZW5kQ2hpbGQoaShcImRpdlwiLFtmLmFyZWFdLG51bGwsW2VdKSl9X2ZpbGxSb3codCl7Zm9yKGxldCBlPTA7ZTx0aGlzLl9udW1iZXJPZkNvbHVtbnM7ZSsrKXtjb25zdCBlPXQuaW5zZXJ0Q2VsbCgpO3RoaXMuX2ZpbGxDZWxsKGUpfX1faGFuZ0V2ZW50cygpe3RoaXMuX3RhYmxlLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLHQ9Pnt0aGlzLl9mb2N1c0VkaXRGaWVsZCh0KX0sITApLHRoaXMuX3RhYmxlLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsdD0+e3RoaXMuX2JsdXJFZGl0RmllbGQodCl9LCEwKSx0aGlzLl90YWJsZS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHQ9Pnt0aGlzLl9wcmVzc2VkRW50ZXJJbkVkaXRGaWVsZCh0KX0pLHRoaXMuX3RhYmxlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHQ9Pnt0aGlzLl9jbGlja2VkT25DZWxsKHQpfSksdGhpcy5fdGFibGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLHQ9Pnt0aGlzLl9tb3VzZUVudGVySW5EZXRlY3RBcmVhKHQpLHQuc3RvcFByb3BhZ2F0aW9uKCl9LCEwKX1fZm9jdXNFZGl0RmllbGQodCl7dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKGYuaW5wdXRGaWVsZCkmJih0aGlzLl9zZWxlY3RlZENlbGw9dC50YXJnZXQuY2xvc2VzdChcIi5cIitmLmNlbGwpKX1fYmx1ckVkaXRGaWVsZCh0KXt0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoZi5pbnB1dEZpZWxkKSYmKHRoaXMuX3NlbGVjdGVkQ2VsbD1udWxsKX1fcHJlc3NlZEVudGVySW5FZGl0RmllbGQodCl7dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKGYuaW5wdXRGaWVsZCkmJigxMyE9PXQua2V5Q29kZXx8dC5zaGlmdEtleXx8dC5wcmV2ZW50RGVmYXVsdCgpKX1fY2xpY2tlZE9uQ2VsbCh0KXtpZighdC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKGYuY2VsbCkpcmV0dXJuO3QudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoXCIuXCIrZi5pbnB1dEZpZWxkKS5mb2N1cygpfV9tb3VzZUVudGVySW5EZXRlY3RBcmVhKHQpe2lmKCF0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoZi5hcmVhKSlyZXR1cm47Y29uc3QgZT1sKHIodC50YXJnZXQuY2xvc2VzdChcIlREXCIpKSx0LnBhZ2VYLHQucGFnZVkpO3QudGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwibW91c2VJbkFjdGl2YXRpbmdBcmVhXCIse2RldGFpbDp7c2lkZTplfSxidWJibGVzOiEwfSkpfX1vLmQoZSxcIlRhYmxlQ29uc3RydWN0b3JcIixmdW5jdGlvbigpe3JldHVybiBifSk7Y29uc3QgXz17ZWRpdG9yOlwidGMtZWRpdG9yXCIsdG9vbEJhckhvcjpcInRjLXRvb2xiYXItLWhvclwiLHRvb2xCYXJWZXI6XCJ0Yy10b29sYmFyLS12ZXJcIixpbnB1dEZpZWxkOlwidGMtdGFibGVfX2lucFwifTtjbGFzcyBie2NvbnN0cnVjdG9yKHQsZSxvLG4pe3RoaXMucmVhZE9ubHk9bix0aGlzLl90YWJsZT1uZXcgcChuKTtjb25zdCByPXRoaXMuX3Jlc2l6ZVRhYmxlKHQsZSk7dGhpcy5fZmlsbFRhYmxlKHQsciksdGhpcy5fY29udGFpbmVyPWkoXCJkaXZcIixbXy5lZGl0b3Isby5zdHlsZXMuYmxvY2tdLG51bGwsW3RoaXMuX3RhYmxlLmh0bWxFbGVtZW50XSksdGhpcy5fdmVydGljYWxUb29sQmFyPW5ldyB1LHRoaXMuX2hvcml6b250YWxUb29sQmFyPW5ldyBkLHRoaXMuX3RhYmxlLmh0bWxFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2hvcml6b250YWxUb29sQmFyLmh0bWxFbGVtZW50KSx0aGlzLl90YWJsZS5odG1sRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl92ZXJ0aWNhbFRvb2xCYXIuaHRtbEVsZW1lbnQpLHRoaXMuX2hvdmVyZWRDZWxsPW51bGwsdGhpcy5fYWN0aXZhdGVkVG9vbEJhcj1udWxsLHRoaXMuX2hvdmVyZWRDZWxsU2lkZT1udWxsLHRoaXMuX3BsdXNCdXREZWxheT1udWxsLHRoaXMuX3Rvb2xiYXJTaG93RGVsYXk9bnVsbCx0aGlzLnJlYWRPbmx5fHx0aGlzLl9oYW5nRXZlbnRzKCl9Z2V0IGh0bWxFbGVtZW50KCl7cmV0dXJuIHRoaXMuX2NvbnRhaW5lcn1fZmlsbFRhYmxlKHQsZSl7aWYodm9pZCAwIT09dC5jb250ZW50KWZvcihsZXQgbz0wO288ZS5yb3dzJiZvPHQuY29udGVudC5sZW5ndGg7bysrKWZvcihsZXQgbj0wO248ZS5jb2xzJiZuPHQuY29udGVudFtvXS5sZW5ndGg7bisrKXt0aGlzLl90YWJsZS5ib2R5LnJvd3Nbb10uY2VsbHNbbl0ucXVlcnlTZWxlY3RvcihcIi5cIitfLmlucHV0RmllbGQpLmlubmVySFRNTD10LmNvbnRlbnRbb11bbl19fV9yZXNpemVUYWJsZSh0LGUpe2NvbnN0IG89QXJyYXkuaXNBcnJheSh0LmNvbnRlbnQpLG49ISFvJiZ0LmNvbnRlbnQubGVuZ3RoLGk9bz90LmNvbnRlbnQubGVuZ3RoOnZvaWQgMCxyPW4/dC5jb250ZW50WzBdLmxlbmd0aDp2b2lkIDAsbD1OdW1iZXIucGFyc2VJbnQoZS5yb3dzKSxzPU51bWJlci5wYXJzZUludChlLmNvbHMpLGE9IWlzTmFOKGwpJiZsPjA/bDp2b2lkIDAsYz0haXNOYU4ocykmJnM+MD9zOnZvaWQgMCxoPWl8fGF8fDIsZD1yfHxjfHwyO2ZvcihsZXQgdD0wO3Q8aDt0KyspdGhpcy5fdGFibGUuYWRkUm93KCk7Zm9yKGxldCB0PTA7dDxkO3QrKyl0aGlzLl90YWJsZS5hZGRDb2x1bW4oKTtyZXR1cm57cm93czpoLGNvbHM6ZH19X3Nob3dUb29sQmFyKHQsZSl7dGhpcy5faGlkZVRvb2xCYXIoKSx0aGlzLl9hY3RpdmF0ZWRUb29sQmFyPXQsdC5zaG93SW4oZSl9X2hpZGVUb29sQmFyKCl7bnVsbCE9PXRoaXMuX2FjdGl2YXRlZFRvb2xCYXImJnRoaXMuX2FjdGl2YXRlZFRvb2xCYXIuaGlkZSgpfV9oYW5nRXZlbnRzKCl7dGhpcy5fY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZUluQWN0aXZhdGluZ0FyZWFcIix0PT57dGhpcy5fdG9vbGJhckNhbGxpbmcodCl9KSx0aGlzLl9jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdD0+e3RoaXMuX2NsaWNrVG9vbGJhcih0KX0pLHRoaXMuX2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwoKT0+e3RoaXMuX2hpZGVUb29sQmFyKCl9KSx0aGlzLl9jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0PT57dGhpcy5fY29udGFpbmVyS2V5ZG93bih0KX0pLHRoaXMuX2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIix0PT57dGhpcy5fbGVhdmVEZXRlY3RBcmVhKHQpfSksdGhpcy5fY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIix0PT57dGhpcy5fbW91c2VFbnRlckluRGV0ZWN0QXJlYSh0KX0pfV9tb3VzZUluQWN0aXZhdGluZ0FyZWFMaXN0ZW5lcih0KXt0aGlzLl9ob3ZlcmVkQ2VsbFNpZGU9dC5kZXRhaWwuc2lkZTtjb25zdCBlPXIodC50YXJnZXQpLG89cih0aGlzLl90YWJsZS5odG1sRWxlbWVudCk7aWYodGhpcy5faG92ZXJlZENlbGw9dC50YXJnZXQuY2xvc2VzdChcIlREXCIpLG51bGw9PT10aGlzLl9ob3ZlcmVkQ2VsbCl7Y29uc3QgdD0xMTt0aGlzLl9ob3ZlcmVkQ2VsbD10aGlzLl9jb250YWluZXIsZS54MSs9dCxlLnkxKz10LGUueDItPXQsZS55Mi09dH1cInRvcFwiPT09dGhpcy5faG92ZXJlZENlbGxTaWRlJiZ0aGlzLl9zaG93VG9vbEJhcih0aGlzLl9ob3Jpem9udGFsVG9vbEJhcixlLnkxLW8ueTEtMiksXCJib3R0b21cIj09PXRoaXMuX2hvdmVyZWRDZWxsU2lkZSYmdGhpcy5fc2hvd1Rvb2xCYXIodGhpcy5faG9yaXpvbnRhbFRvb2xCYXIsZS55Mi1vLnkxLTEpLFwibGVmdFwiPT09dGhpcy5faG92ZXJlZENlbGxTaWRlJiZ0aGlzLl9zaG93VG9vbEJhcih0aGlzLl92ZXJ0aWNhbFRvb2xCYXIsZS54MS1vLngxLTIpLFwicmlnaHRcIj09PXRoaXMuX2hvdmVyZWRDZWxsU2lkZSYmdGhpcy5fc2hvd1Rvb2xCYXIodGhpcy5fdmVydGljYWxUb29sQmFyLGUueDItby54MS0xKX1faXNUb29sYmFyKHQpe3JldHVybiEoIXQuY2xvc2VzdChcIi5cIitfLnRvb2xCYXJIb3IpJiYhdC5jbG9zZXN0KFwiLlwiK18udG9vbEJhclZlcikpfV9sZWF2ZURldGVjdEFyZWEodCl7dGhpcy5faXNUb29sYmFyKHQucmVsYXRlZFRhcmdldCl8fChjbGVhclRpbWVvdXQodGhpcy5fdG9vbGJhclNob3dEZWxheSksdGhpcy5faGlkZVRvb2xCYXIoKSl9X3Rvb2xiYXJDYWxsaW5nKHQpe3RoaXMuX2lzVG9vbGJhcih0LnRhcmdldCl8fChjbGVhclRpbWVvdXQodGhpcy5fdG9vbGJhclNob3dEZWxheSksdGhpcy5fdG9vbGJhclNob3dEZWxheT1zZXRUaW1lb3V0KCgpPT57dGhpcy5fbW91c2VJbkFjdGl2YXRpbmdBcmVhTGlzdGVuZXIodCl9LDEyNSkpfV9jbGlja1Rvb2xiYXIodCl7aWYoIXRoaXMuX2lzVG9vbGJhcih0LnRhcmdldCkpcmV0dXJuO2xldCBlO2lmKHRoaXMuX2FjdGl2YXRlZFRvb2xCYXI9PT10aGlzLl9ob3Jpem9udGFsVG9vbEJhcj8odGhpcy5fYWRkUm93KCksZT1cInlcIik6KHRoaXMuX2FkZENvbHVtbigpLGU9XCJ4XCIpLGlzTmFOKHQuZGV0YWlsKSYmbnVsbCE9PXQuZGV0YWlsKXtjb25zdCBvPXIodGhpcy5fdGFibGUuaHRtbEVsZW1lbnQpO2xldCBuO249XCJ4XCI9PT1lP3QuZGV0YWlsLngtby54MTp0LmRldGFpbC55LW8ueTEsdGhpcy5fZGVsYXlBZGRCdXR0b25Gb3JNdWx0aUNsaWNraW5nTmVhck1vdXNlKG4pfWVsc2UgdGhpcy5faGlkZVRvb2xCYXIoKX1fY29udGFpbmVyS2V5ZG93bih0KXsxMz09PXQua2V5Q29kZSYmdGhpcy5fY29udGFpbmVyRW50ZXJQcmVzc2VkKHQpfV9kZWxheUFkZEJ1dHRvbkZvck11bHRpQ2xpY2tpbmdOZWFyTW91c2UodCl7dGhpcy5fc2hvd1Rvb2xCYXIodGhpcy5fYWN0aXZhdGVkVG9vbEJhcix0KSx0aGlzLl9hY3RpdmF0ZWRUb29sQmFyLmhpZGVMaW5lKCksY2xlYXJUaW1lb3V0KHRoaXMuX3BsdXNCdXREZWxheSksdGhpcy5fcGx1c0J1dERlbGF5PXNldFRpbWVvdXQoKCk9Pnt0aGlzLl9oaWRlVG9vbEJhcigpfSw1MDApfV9nZXRIb3ZlcmVkU2lkZU9mQ29udGFpbmVyKCl7cmV0dXJuIHRoaXMuX2hvdmVyZWRDZWxsPT09dGhpcy5fY29udGFpbmVyP3RoaXMuX2lzQm90dG9tT3JSaWdodCgpPzA6LTE6MX1faXNCb3R0b21PclJpZ2h0KCl7cmV0dXJuXCJib3R0b21cIj09PXRoaXMuX2hvdmVyZWRDZWxsU2lkZXx8XCJyaWdodFwiPT09dGhpcy5faG92ZXJlZENlbGxTaWRlfV9hZGRSb3coKXtjb25zdCB0PXRoaXMuX2hvdmVyZWRDZWxsLmNsb3Nlc3QoXCJUUlwiKTtsZXQgZT10aGlzLl9nZXRIb3ZlcmVkU2lkZU9mQ29udGFpbmVyKCk7MT09PWUmJihlPXQuc2VjdGlvblJvd0luZGV4LGUrPXRoaXMuX2lzQm90dG9tT3JSaWdodCgpKSx0aGlzLl90YWJsZS5hZGRSb3coZSl9X2FkZENvbHVtbigpe2xldCB0PXRoaXMuX2dldEhvdmVyZWRTaWRlT2ZDb250YWluZXIoKTsxPT09dCYmKHQ9dGhpcy5faG92ZXJlZENlbGwuY2VsbEluZGV4LHQrPXRoaXMuX2lzQm90dG9tT3JSaWdodCgpKSx0aGlzLl90YWJsZS5hZGRDb2x1bW4odCl9X2NvbnRhaW5lckVudGVyUHJlc3NlZCh0KXtpZihudWxsPT09dGhpcy5fdGFibGUuc2VsZWN0ZWRDZWxsfHx0LnNoaWZ0S2V5KXJldHVybjtjb25zdCBlPXRoaXMuX3RhYmxlLnNlbGVjdGVkQ2VsbC5jbG9zZXN0KFwiVFJcIik7bGV0IG89dGhpcy5fZ2V0SG92ZXJlZFNpZGVPZkNvbnRhaW5lcigpOzE9PT1vJiYobz1lLnNlY3Rpb25Sb3dJbmRleCsxKSx0aGlzLl90YWJsZS5hZGRSb3cobykuY2VsbHNbMF0uY2xpY2soKX1fbW91c2VFbnRlckluRGV0ZWN0QXJlYSh0KXtsZXQgZT1sKHIodGhpcy5fY29udGFpbmVyKSx0LnBhZ2VYLHQucGFnZVkpO3QudGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwibW91c2VJbkFjdGl2YXRpbmdBcmVhXCIse2RldGFpbDp7c2lkZTplfSxidWJibGVzOiEwfSkpfX19XSl9KTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgREVGQVVMVF9TSVpFID0gMjQ7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBfcmVmJGZpbGwgPSBfcmVmLmZpbGwsXG4gICAgICBmaWxsID0gX3JlZiRmaWxsID09PSB1bmRlZmluZWQgPyAnY3VycmVudENvbG9yJyA6IF9yZWYkZmlsbCxcbiAgICAgIF9yZWYkd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgd2lkdGggPSBfcmVmJHdpZHRoID09PSB1bmRlZmluZWQgPyBERUZBVUxUX1NJWkUgOiBfcmVmJHdpZHRoLFxuICAgICAgX3JlZiRoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIGhlaWdodCA9IF9yZWYkaGVpZ2h0ID09PSB1bmRlZmluZWQgPyBERUZBVUxUX1NJWkUgOiBfcmVmJGhlaWdodCxcbiAgICAgIF9yZWYkc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgc3R5bGUgPSBfcmVmJHN0eWxlID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkc3R5bGUsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ2ZpbGwnLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ3N0eWxlJ10pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnc3ZnJyxcbiAgICBfZXh0ZW5kcyh7XG4gICAgICB2aWV3Qm94OiAnMCAwICcgKyBERUZBVUxUX1NJWkUgKyAnICcgKyBERUZBVUxUX1NJWkUsXG4gICAgICBzdHlsZTogX2V4dGVuZHMoeyBmaWxsOiBmaWxsLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0sIHN0eWxlKVxuICAgIH0sIHByb3BzKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00yMSw3TDksMTlMMy41LDEzLjVMNC45MSwxMi4wOUw5LDE2LjE3TDE5LjU5LDUuNTlMMjEsN1onIH0pXG4gICk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBERUZBVUxUX1NJWkUgPSAyNDtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIF9yZWYkZmlsbCA9IF9yZWYuZmlsbCxcbiAgICAgIGZpbGwgPSBfcmVmJGZpbGwgPT09IHVuZGVmaW5lZCA/ICdjdXJyZW50Q29sb3InIDogX3JlZiRmaWxsLFxuICAgICAgX3JlZiR3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICB3aWR0aCA9IF9yZWYkd2lkdGggPT09IHVuZGVmaW5lZCA/IERFRkFVTFRfU0laRSA6IF9yZWYkd2lkdGgsXG4gICAgICBfcmVmJGhlaWdodCA9IF9yZWYuaGVpZ2h0LFxuICAgICAgaGVpZ2h0ID0gX3JlZiRoZWlnaHQgPT09IHVuZGVmaW5lZCA/IERFRkFVTFRfU0laRSA6IF9yZWYkaGVpZ2h0LFxuICAgICAgX3JlZiRzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYkc3R5bGUgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRzdHlsZSxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsnZmlsbCcsICd3aWR0aCcsICdoZWlnaHQnLCAnc3R5bGUnXSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdzdmcnLFxuICAgIF9leHRlbmRzKHtcbiAgICAgIHZpZXdCb3g6ICcwIDAgJyArIERFRkFVTFRfU0laRSArICcgJyArIERFRkFVTFRfU0laRSxcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7IGZpbGw6IGZpbGwsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSwgc3R5bGUpXG4gICAgfSwgcHJvcHMpLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTEyLDE4LjE3TDguODMsMTVMNy40MiwxNi40MUwxMiwyMUwxNi41OSwxNi40MUwxNS4xNywxNU0xMiw1LjgzTDE1LjE3LDlMMTYuNTgsNy41OUwxMiwzTDcuNDEsNy41OUw4LjgzLDlMMTIsNS44M1onIH0pXG4gICk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgKHV0aWxzLmlzQmxvYihyZXF1ZXN0RGF0YSkgfHwgdXRpbHMuaXNGaWxlKHJlcXVlc3REYXRhKSkgJiZcbiAgICAgIHJlcXVlc3REYXRhLnR5cGVcbiAgICApIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcih0aW1lb3V0RXJyb3JNZXNzYWdlLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdmFyIHZhbHVlRnJvbUNvbmZpZzJLZXlzID0gWyd1cmwnLCAnbWV0aG9kJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknLCAncGFyYW1zJ107XG4gIHZhciBkZWZhdWx0VG9Db25maWcyS2V5cyA9IFtcbiAgICAnYmFzZVVSTCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3RpbWVvdXRNZXNzYWdlJywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJywgJ2RlY29tcHJlc3MnLFxuICAgICdtYXhDb250ZW50TGVuZ3RoJywgJ21heEJvZHlMZW5ndGgnLCAnbWF4UmVkaXJlY3RzJywgJ3RyYW5zcG9ydCcsICdodHRwQWdlbnQnLFxuICAgICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJywgJ3NvY2tldFBhdGgnLCAncmVzcG9uc2VFbmNvZGluZydcbiAgXTtcbiAgdmFyIGRpcmVjdE1lcmdlS2V5cyA9IFsndmFsaWRhdGVTdGF0dXMnXTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBtZXJnZURlZXBQcm9wZXJ0aWVzKTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChkaXJlY3RNZXJnZUtleXMsIGZ1bmN0aW9uIG1lcmdlKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBheGlvc0tleXMgPSB2YWx1ZUZyb21Db25maWcyS2V5c1xuICAgIC5jb25jYXQobWVyZ2VEZWVwUHJvcGVydGllc0tleXMpXG4gICAgLmNvbmNhdChkZWZhdWx0VG9Db25maWcyS2V5cylcbiAgICAuY29uY2F0KGRpcmVjdE1lcmdlS2V5cyk7XG5cbiAgdmFyIG90aGVyS2V5cyA9IE9iamVjdFxuICAgIC5rZXlzKGNvbmZpZzEpXG4gICAgLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICogQHJldHVybiB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQk9NKGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT01cbn07XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFWaWV3O1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgbGlzdENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVDbGVhcicpLFxuICAgIGxpc3RDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZURlbGV0ZScpLFxuICAgIGxpc3RDYWNoZUdldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUdldCcpLFxuICAgIGxpc3RDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUhhcycpLFxuICAgIGxpc3RDYWNoZVNldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBtYXBDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVDbGVhcicpLFxuICAgIG1hcENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVEZWxldGUnKSxcbiAgICBtYXBDYWNoZUdldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlR2V0JyksXG4gICAgbWFwQ2FjaGVIYXMgPSByZXF1aXJlKCcuL19tYXBDYWNoZUhhcycpLFxuICAgIG1hcENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwQ2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyksXG4gICAgc2V0Q2FjaGVBZGQgPSByZXF1aXJlKCcuL19zZXRDYWNoZUFkZCcpLFxuICAgIHNldENhY2hlSGFzID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVIYXMnKTtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldENhY2hlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCIvKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlFYWNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RmlsdGVyO1xuIiwidmFyIGJhc2VUaW1lcyA9IHJlcXVpcmUoJy4vX2Jhc2VUaW1lcycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUxpa2VLZXlzO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsInZhciBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NpZ25NZXJnZVZhbHVlO1xuIiwidmFyIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc2lnblZhbHVlO1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzc29jSW5kZXhPZjtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ247XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbkluO1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduVmFsdWU7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbicpLFxuICAgIGJhc2VBc3NpZ25JbiA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25JbicpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBjb3B5U3ltYm9scyA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzJyksXG4gICAgY29weVN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzSW4nKSxcbiAgICBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpLFxuICAgIGdldEFsbEtleXNJbiA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXNJbicpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGluaXRDbG9uZUFycmF5ID0gcmVxdWlyZSgnLi9faW5pdENsb25lQXJyYXknKSxcbiAgICBpbml0Q2xvbmVCeVRhZyA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZUJ5VGFnJyksXG4gICAgaW5pdENsb25lT2JqZWN0ID0gcmVxdWlyZSgnLi9faW5pdENsb25lT2JqZWN0JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzTWFwID0gcmVxdWlyZSgnLi9pc01hcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU2V0ID0gcmVxdWlyZSgnLi9pc1NldCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ2xvbmU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICB9XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUNyZWF0ZTtcbiIsInZhciBiYXNlRm9yT3duID0gcmVxdWlyZSgnLi9fYmFzZUZvck93bicpLFxuICAgIGNyZWF0ZUJhc2VFYWNoID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUVhY2gnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqL1xudmFyIGJhc2VFYWNoID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93bik7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUVhY2g7XG4iLCJ2YXIgY3JlYXRlQmFzZUZvciA9IHJlcXVpcmUoJy4vX2NyZWF0ZUJhc2VGb3InKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3I7XG4iLCJ2YXIgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRm9yT3duO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0QWxsS2V5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSGFzSW47XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0FyZ3VtZW50cztcbiIsInZhciBiYXNlSXNFcXVhbERlZXAgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbERlZXAnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIGVxdWFsQnlUYWcgPSByZXF1aXJlKCcuL19lcXVhbEJ5VGFnJyksXG4gICAgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9fZXF1YWxPYmplY3RzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsRGVlcDtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXA7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gIWxlbmd0aDtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTWF0Y2g7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1NldDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNUeXBlZEFycmF5O1xuIiwidmFyIGJhc2VNYXRjaGVzID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXMnKSxcbiAgICBiYXNlTWF0Y2hlc1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eScpLFxuICAgIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBwcm9wZXJ0eSA9IHJlcXVpcmUoJy4vcHJvcGVydHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXRlcmF0ZWU7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1Byb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2lzUHJvdG90eXBlJyksXG4gICAgbmF0aXZlS2V5c0luID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5c0luJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXNJbjtcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hcDtcbiIsInZhciBiYXNlSXNNYXRjaCA9IHJlcXVpcmUoJy4vX2Jhc2VJc01hdGNoJyksXG4gICAgZ2V0TWF0Y2hEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWF0Y2hEYXRhJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlcztcbiIsInZhciBiYXNlSXNFcXVhbCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsJyksXG4gICAgZ2V0ID0gcmVxdWlyZSgnLi9nZXQnKSxcbiAgICBoYXNJbiA9IHJlcXVpcmUoJy4vaGFzSW4nKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXRjaGVzUHJvcGVydHk7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBiYXNlTWVyZ2VEZWVwID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlRGVlcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZTtcbiIsInZhciBhc3NpZ25NZXJnZVZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduTWVyZ2VWYWx1ZScpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjbG9uZVR5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19jbG9uZVR5cGVkQXJyYXknKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2VPYmplY3QgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlT2JqZWN0JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUGxhaW5PYmplY3QgPSByZXF1aXJlKCcuL2lzUGxhaW5PYmplY3QnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpLFxuICAgIHNhZmVHZXQgPSByZXF1aXJlKCcuL19zYWZlR2V0JyksXG4gICAgdG9QbGFpbk9iamVjdCA9IHJlcXVpcmUoJy4vdG9QbGFpbk9iamVjdCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgaWYgKHN0YWNrZWQpIHtcbiAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICA6IHVuZGVmaW5lZDtcblxuICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmIChpc0NvbW1vbikge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IGlzRnVuY3Rpb24ob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNDb21tb24pIHtcbiAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIHN0YWNrWydkZWxldGUnXShzcmNWYWx1ZSk7XG4gIH1cbiAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZURlZXA7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VQcm9wZXJ0eTtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHlEZWVwO1xuIiwidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIG92ZXJSZXN0ID0gcmVxdWlyZSgnLi9fb3ZlclJlc3QnKSxcbiAgICBzZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFRvU3RyaW5nJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VSZXN0O1xuIiwidmFyIGNvbnN0YW50ID0gcmVxdWlyZSgnLi9jb25zdGFudCcpLFxuICAgIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNldFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICByZXR1cm4gY2FjaGUuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FjaGVIYXM7XG4iLCJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgY2FzdCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlIDogaWRlbnRpdHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdEZ1bmN0aW9uO1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgc3RyaW5nVG9QYXRoID0gcmVxdWlyZSgnLi9fc3RyaW5nVG9QYXRoJyksXG4gICAgdG9TdHJpbmcgPSByZXF1aXJlKCcuL3RvU3RyaW5nJyk7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FzdFBhdGg7XG4iLCJ2YXIgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lQXJyYXlCdWZmZXI7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUJ1ZmZlcjtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICovXG5mdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lRGF0YVZpZXc7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lUmVnRXhwO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVTeW1ib2w7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVR5cGVkQXJyYXk7XG4iLCIvKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5QXJyYXk7XG4iLCJ2YXIgYXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25WYWx1ZScpLFxuICAgIGJhc2VBc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25WYWx1ZScpO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5T2JqZWN0O1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKTtcblxuLyoqXG4gKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlTeW1ib2xzO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAgZ2V0U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9sc0luJyk7XG5cbi8qKlxuICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzSW4oc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5U3ltYm9sc0luO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsInZhciBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgIGxlbmd0aCA9IDE7XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFzc2lnbmVyO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VFYWNoO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydHk7XG4iLCJ2YXIgU2V0Q2FjaGUgPSByZXF1aXJlKCcuL19TZXRDYWNoZScpLFxuICAgIGFycmF5U29tZSA9IHJlcXVpcmUoJy4vX2FycmF5U29tZScpLFxuICAgIGNhY2hlSGFzID0gcmVxdWlyZSgnLi9fY2FjaGVIYXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKGFyclN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQXJyYXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwidmFyIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5cztcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9sc0luJyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzSW47XG4iLCJ2YXIgaXNLZXlhYmxlID0gcmVxdWlyZSgnLi9faXNLZXlhYmxlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXBEYXRhO1xuIiwidmFyIGlzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX2lzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWF0Y2hEYXRhO1xuIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UHJvdG90eXBlO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwidmFyIGFycmF5RmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXlGaWx0ZXInKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9scztcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKG9iamVjdCkge1xuICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0U3ltYm9sc0luO1xuIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgfVxuICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUGF0aDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoRGVsZXRlO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEdldDtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hIYXM7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hTZXQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgaWYgKGxlbmd0aCAmJiB0eXBlb2YgYXJyYXlbMF0gPT0gJ3N0cmluZycgJiYgaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgJ2luZGV4JykpIHtcbiAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZUFycmF5O1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyksXG4gICAgY2xvbmVEYXRhVmlldyA9IHJlcXVpcmUoJy4vX2Nsb25lRGF0YVZpZXcnKSxcbiAgICBjbG9uZVJlZ0V4cCA9IHJlcXVpcmUoJy4vX2Nsb25lUmVnRXhwJyksXG4gICAgY2xvbmVTeW1ib2wgPSByZXF1aXJlKCcuL19jbG9uZVN5bWJvbCcpLFxuICAgIGNsb25lVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Nsb25lVHlwZWRBcnJheScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbml0Q2xvbmVCeVRhZztcbiIsInZhciBiYXNlQ3JlYXRlID0gcmVxdWlyZSgnLi9fYmFzZUNyZWF0ZScpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZU9iamVjdDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIiwidmFyIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICApIHtcbiAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0l0ZXJhdGVlQ2FsbDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG4iLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1Byb3RvdHlwZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaWN0Q29tcGFyYWJsZTtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZURlbGV0ZTtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZVNldDtcbiIsInZhciBIYXNoID0gcmVxdWlyZSgnLi9fSGFzaCcpLFxuICAgIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVDbGVhcjtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVHZXQ7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUhhcztcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcFRvQXJyYXk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgbWF0Y2hlc1Byb3BlcnR5YCBmb3Igc291cmNlIHZhbHVlcyBzdWl0YWJsZVxuICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4iLCJ2YXIgbWVtb2l6ZSA9IHJlcXVpcmUoJy4vbWVtb2l6ZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZUNhcHBlZDtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG4iLCJ2YXIgb3ZlckFyZyA9IHJlcXVpcmUoJy4vX292ZXJBcmcnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXM7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVLZXlzSW47XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9iamVjdFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlckFyZztcbiIsInZhciBhcHBseSA9IHJlcXVpcmUoJy4vX2FwcGx5Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3ZlclJlc3Q7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzYWZlR2V0O1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgYmFzZVNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVNldFRvU3RyaW5nJyksXG4gICAgc2hvcnRPdXQgPSByZXF1aXJlKCcuL19zaG9ydE91dCcpO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvU3RyaW5nO1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3J0T3V0O1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrSGFzO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tTZXQ7XG4iLCJ2YXIgbWVtb2l6ZUNhcHBlZCA9IHJlcXVpcmUoJy4vX21lbW9pemVDYXBwZWQnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvUGF0aDtcbiIsInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9LZXk7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZURlZXA7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25zdGFudDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBub3cgPSByZXF1aXJlKCcuL25vdycpLFxuICAgIHRvTnVtYmVyID0gcmVxdWlyZSgnLi90b051bWJlcicpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgdGltZVdhaXRpbmcgPSB3YWl0IC0gdGltZVNpbmNlTGFzdENhbGw7XG5cbiAgICByZXR1cm4gbWF4aW5nXG4gICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICA6IHRpbWVXYWl0aW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAvLyB0cmFpbGluZyBlZGdlLCB0aGUgc3lzdGVtIHRpbWUgaGFzIGdvbmUgYmFja3dhcmRzIGFuZCB3ZSdyZSB0cmVhdGluZ1xuICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgKHRpbWVTaW5jZUxhc3RDYWxsIDwgMCkgfHwgKG1heGluZyAmJiB0aW1lU2luY2VMYXN0SW52b2tlID49IG1heFdhaXQpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpO1xuICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgfVxuICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAvLyBPbmx5IGludm9rZSBpZiB3ZSBoYXZlIGBsYXN0QXJnc2Agd2hpY2ggbWVhbnMgYGZ1bmNgIGhhcyBiZWVuXG4gICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICByZXR1cm4gaW52b2tlRnVuYyh0aW1lKTtcbiAgICB9XG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIGlmICh0aW1lcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB9XG4gICAgbGFzdEludm9rZVRpbWUgPSAwO1xuICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgaWYgKGlzSW52b2tpbmcpIHtcbiAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICB9XG4gICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWJvdW5jZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mb3JFYWNoJyk7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyksXG4gICAgY2FzdEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fY2FzdEZ1bmN0aW9uJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAqIHByb3BlcnR5IGFyZSBpdGVyYXRlZCBsaWtlIGFycmF5cy4gVG8gYXZvaWQgdGhpcyBiZWhhdmlvciB1c2UgYF8uZm9ySW5gXG4gKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBhbGlhcyBlYWNoXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAqXG4gKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICovXG5mdW5jdGlvbiBmb3JFYWNoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBjYXN0RnVuY3Rpb24oaXRlcmF0ZWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuIiwidmFyIGJhc2VGb3JPd24gPSByZXF1aXJlKCcuL19iYXNlRm9yT3duJyksXG4gICAgY2FzdEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fY2FzdEZ1bmN0aW9uJyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjMuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5mb3JPd25SaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICovXG5mdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBjYXN0RnVuY3Rpb24oaXRlcmF0ZWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb3JPd247XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldDtcbiIsInZhciBiYXNlSGFzSW4gPSByZXF1aXJlKCcuL19iYXNlSGFzSW4nKSxcbiAgICBoYXNQYXRoID0gcmVxdWlyZSgnLi9faGFzUGF0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzSW47XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlkZW50aXR5O1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZU9iamVjdDtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCJ2YXIgYmFzZUlzTWFwID0gcmVxdWlyZSgnLi9fYmFzZUlzTWFwJyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc01hcChuZXcgTWFwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFwO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBnZXRQcm90b3R5cGUgPSByZXF1aXJlKCcuL19nZXRQcm90b3R5cGUnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQbGFpbk9iamVjdDtcbiIsInZhciBiYXNlSXNTZXQgPSByZXF1aXJlKCcuL19iYXNlSXNTZXQnKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU2V0KG5ldyBTZXQpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTZXQ7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTdHJpbmcoMSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpbmc7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1VuZGVmaW5lZCh2b2lkIDApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNVbmRlZmluZWQobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1VuZGVmaW5lZDtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzSW4gPSByZXF1aXJlKCcuL19iYXNlS2V5c0luJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZU1hcCA9IHJlcXVpcmUoJy4vX2Jhc2VNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gKlxuICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gKiBgc2FtcGxlU2l6ZWAsIGBzbGljZWAsIGBzb21lYCwgYHNvcnRCeWAsIGBzcGxpdGAsIGB0YWtlYCwgYHRha2VSaWdodGAsXG4gKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICogICByZXR1cm4gbiAqIG47XG4gKiB9XG4gKlxuICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF1cbiAqXG4gKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcgfVxuICogXTtcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gKi9cbmZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwidmFyIGJhc2VNZXJnZSA9IHJlcXVpcmUoJy4vX2Jhc2VNZXJnZScpLFxuICAgIGNyZWF0ZUFzc2lnbmVyID0gcmVxdWlyZSgnLi9fY3JlYXRlQXNzaWduZXInKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuNS4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7XG4gKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gKiB9O1xuICpcbiAqIHZhciBvdGhlciA9IHtcbiAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAqIH07XG4gKlxuICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAqL1xudmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2U7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSB0aW1lc3RhbXAgb2YgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIGVsYXBzZWQgc2luY2VcbiAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBEYXRlXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAqIH0sIF8ubm93KCkpO1xuICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAqL1xudmFyIG5vdyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBub3c7XG4iLCJ2YXIgYmFzZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5JyksXG4gICAgYmFzZVByb3BlcnR5RGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eURlZXAnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvcGVydHk7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCJ2YXIgZGVib3VuY2UgPSByZXF1aXJlKCcuL2RlYm91bmNlJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogVXNlZCB0byBtYXRjaCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbSA9IC9eXFxzK3xcXHMrJC9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmFkIHNpZ25lZCBoZXhhZGVjaW1hbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNCaW5hcnkgPSAvXjBiWzAxXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlSXNPY3RhbCA9IC9eMG9bMC03XSskL2k7XG5cbi8qKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB3aXRob3V0IGEgZGVwZW5kZW5jeSBvbiBgcm9vdGAuICovXG52YXIgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b051bWJlcjtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1BsYWluT2JqZWN0O1xuIiwidmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG4iLCIoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgfSBlbHNlIHtcbiAgICByb290Lm1hdGVyaWFsQ29sb3JzID0gZmFjdG9yeSgpO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcInJlZFwiOntcIjUwXCI6XCIjZmZlYmVlXCIsXCIxMDBcIjpcIiNmZmNkZDJcIixcIjIwMFwiOlwiI2VmOWE5YVwiLFwiMzAwXCI6XCIjZTU3MzczXCIsXCI0MDBcIjpcIiNlZjUzNTBcIixcIjUwMFwiOlwiI2Y0NDMzNlwiLFwiNjAwXCI6XCIjZTUzOTM1XCIsXCI3MDBcIjpcIiNkMzJmMmZcIixcIjgwMFwiOlwiI2M2MjgyOFwiLFwiOTAwXCI6XCIjYjcxYzFjXCIsXCJhMTAwXCI6XCIjZmY4YTgwXCIsXCJhMjAwXCI6XCIjZmY1MjUyXCIsXCJhNDAwXCI6XCIjZmYxNzQ0XCIsXCJhNzAwXCI6XCIjZDUwMDAwXCJ9LFwicGlua1wiOntcIjUwXCI6XCIjZmNlNGVjXCIsXCIxMDBcIjpcIiNmOGJiZDBcIixcIjIwMFwiOlwiI2Y0OGZiMVwiLFwiMzAwXCI6XCIjZjA2MjkyXCIsXCI0MDBcIjpcIiNlYzQwN2FcIixcIjUwMFwiOlwiI2U5MWU2M1wiLFwiNjAwXCI6XCIjZDgxYjYwXCIsXCI3MDBcIjpcIiNjMjE4NWJcIixcIjgwMFwiOlwiI2FkMTQ1N1wiLFwiOTAwXCI6XCIjODgwZTRmXCIsXCJhMTAwXCI6XCIjZmY4MGFiXCIsXCJhMjAwXCI6XCIjZmY0MDgxXCIsXCJhNDAwXCI6XCIjZjUwMDU3XCIsXCJhNzAwXCI6XCIjYzUxMTYyXCJ9LFwicHVycGxlXCI6e1wiNTBcIjpcIiNmM2U1ZjVcIixcIjEwMFwiOlwiI2UxYmVlN1wiLFwiMjAwXCI6XCIjY2U5M2Q4XCIsXCIzMDBcIjpcIiNiYTY4YzhcIixcIjQwMFwiOlwiI2FiNDdiY1wiLFwiNTAwXCI6XCIjOWMyN2IwXCIsXCI2MDBcIjpcIiM4ZTI0YWFcIixcIjcwMFwiOlwiIzdiMWZhMlwiLFwiODAwXCI6XCIjNmExYjlhXCIsXCI5MDBcIjpcIiM0YTE0OGNcIixcImExMDBcIjpcIiNlYTgwZmNcIixcImEyMDBcIjpcIiNlMDQwZmJcIixcImE0MDBcIjpcIiNkNTAwZjlcIixcImE3MDBcIjpcIiNhYTAwZmZcIn0sXCJkZWVwUHVycGxlXCI6e1wiNTBcIjpcIiNlZGU3ZjZcIixcIjEwMFwiOlwiI2QxYzRlOVwiLFwiMjAwXCI6XCIjYjM5ZGRiXCIsXCIzMDBcIjpcIiM5NTc1Y2RcIixcIjQwMFwiOlwiIzdlNTdjMlwiLFwiNTAwXCI6XCIjNjczYWI3XCIsXCI2MDBcIjpcIiM1ZTM1YjFcIixcIjcwMFwiOlwiIzUxMmRhOFwiLFwiODAwXCI6XCIjNDUyN2EwXCIsXCI5MDBcIjpcIiMzMTFiOTJcIixcImExMDBcIjpcIiNiMzg4ZmZcIixcImEyMDBcIjpcIiM3YzRkZmZcIixcImE0MDBcIjpcIiM2NTFmZmZcIixcImE3MDBcIjpcIiM2MjAwZWFcIn0sXCJpbmRpZ29cIjp7XCI1MFwiOlwiI2U4ZWFmNlwiLFwiMTAwXCI6XCIjYzVjYWU5XCIsXCIyMDBcIjpcIiM5ZmE4ZGFcIixcIjMwMFwiOlwiIzc5ODZjYlwiLFwiNDAwXCI6XCIjNWM2YmMwXCIsXCI1MDBcIjpcIiMzZjUxYjVcIixcIjYwMFwiOlwiIzM5NDlhYlwiLFwiNzAwXCI6XCIjMzAzZjlmXCIsXCI4MDBcIjpcIiMyODM1OTNcIixcIjkwMFwiOlwiIzFhMjM3ZVwiLFwiYTEwMFwiOlwiIzhjOWVmZlwiLFwiYTIwMFwiOlwiIzUzNmRmZVwiLFwiYTQwMFwiOlwiIzNkNWFmZVwiLFwiYTcwMFwiOlwiIzMwNGZmZVwifSxcImJsdWVcIjp7XCI1MFwiOlwiI2UzZjJmZFwiLFwiMTAwXCI6XCIjYmJkZWZiXCIsXCIyMDBcIjpcIiM5MGNhZjlcIixcIjMwMFwiOlwiIzY0YjVmNlwiLFwiNDAwXCI6XCIjNDJhNWY1XCIsXCI1MDBcIjpcIiMyMTk2ZjNcIixcIjYwMFwiOlwiIzFlODhlNVwiLFwiNzAwXCI6XCIjMTk3NmQyXCIsXCI4MDBcIjpcIiMxNTY1YzBcIixcIjkwMFwiOlwiIzBkNDdhMVwiLFwiYTEwMFwiOlwiIzgyYjFmZlwiLFwiYTIwMFwiOlwiIzQ0OGFmZlwiLFwiYTQwMFwiOlwiIzI5NzlmZlwiLFwiYTcwMFwiOlwiIzI5NjJmZlwifSxcImxpZ2h0Qmx1ZVwiOntcIjUwXCI6XCIjZTFmNWZlXCIsXCIxMDBcIjpcIiNiM2U1ZmNcIixcIjIwMFwiOlwiIzgxZDRmYVwiLFwiMzAwXCI6XCIjNGZjM2Y3XCIsXCI0MDBcIjpcIiMyOWI2ZjZcIixcIjUwMFwiOlwiIzAzYTlmNFwiLFwiNjAwXCI6XCIjMDM5YmU1XCIsXCI3MDBcIjpcIiMwMjg4ZDFcIixcIjgwMFwiOlwiIzAyNzdiZFwiLFwiOTAwXCI6XCIjMDE1NzliXCIsXCJhMTAwXCI6XCIjODBkOGZmXCIsXCJhMjAwXCI6XCIjNDBjNGZmXCIsXCJhNDAwXCI6XCIjMDBiMGZmXCIsXCJhNzAwXCI6XCIjMDA5MWVhXCJ9LFwiY3lhblwiOntcIjUwXCI6XCIjZTBmN2ZhXCIsXCIxMDBcIjpcIiNiMmViZjJcIixcIjIwMFwiOlwiIzgwZGVlYVwiLFwiMzAwXCI6XCIjNGRkMGUxXCIsXCI0MDBcIjpcIiMyNmM2ZGFcIixcIjUwMFwiOlwiIzAwYmNkNFwiLFwiNjAwXCI6XCIjMDBhY2MxXCIsXCI3MDBcIjpcIiMwMDk3YTdcIixcIjgwMFwiOlwiIzAwODM4ZlwiLFwiOTAwXCI6XCIjMDA2MDY0XCIsXCJhMTAwXCI6XCIjODRmZmZmXCIsXCJhMjAwXCI6XCIjMThmZmZmXCIsXCJhNDAwXCI6XCIjMDBlNWZmXCIsXCJhNzAwXCI6XCIjMDBiOGQ0XCJ9LFwidGVhbFwiOntcIjUwXCI6XCIjZTBmMmYxXCIsXCIxMDBcIjpcIiNiMmRmZGJcIixcIjIwMFwiOlwiIzgwY2JjNFwiLFwiMzAwXCI6XCIjNGRiNmFjXCIsXCI0MDBcIjpcIiMyNmE2OWFcIixcIjUwMFwiOlwiIzAwOTY4OFwiLFwiNjAwXCI6XCIjMDA4OTdiXCIsXCI3MDBcIjpcIiMwMDc5NmJcIixcIjgwMFwiOlwiIzAwNjk1Y1wiLFwiOTAwXCI6XCIjMDA0ZDQwXCIsXCJhMTAwXCI6XCIjYTdmZmViXCIsXCJhMjAwXCI6XCIjNjRmZmRhXCIsXCJhNDAwXCI6XCIjMWRlOWI2XCIsXCJhNzAwXCI6XCIjMDBiZmE1XCJ9LFwiZ3JlZW5cIjp7XCI1MFwiOlwiI2U4ZjVlOVwiLFwiMTAwXCI6XCIjYzhlNmM5XCIsXCIyMDBcIjpcIiNhNWQ2YTdcIixcIjMwMFwiOlwiIzgxYzc4NFwiLFwiNDAwXCI6XCIjNjZiYjZhXCIsXCI1MDBcIjpcIiM0Y2FmNTBcIixcIjYwMFwiOlwiIzQzYTA0N1wiLFwiNzAwXCI6XCIjMzg4ZTNjXCIsXCI4MDBcIjpcIiMyZTdkMzJcIixcIjkwMFwiOlwiIzFiNWUyMFwiLFwiYTEwMFwiOlwiI2I5ZjZjYVwiLFwiYTIwMFwiOlwiIzY5ZjBhZVwiLFwiYTQwMFwiOlwiIzAwZTY3NlwiLFwiYTcwMFwiOlwiIzAwYzg1M1wifSxcImxpZ2h0R3JlZW5cIjp7XCI1MFwiOlwiI2YxZjhlOVwiLFwiMTAwXCI6XCIjZGNlZGM4XCIsXCIyMDBcIjpcIiNjNWUxYTVcIixcIjMwMFwiOlwiI2FlZDU4MVwiLFwiNDAwXCI6XCIjOWNjYzY1XCIsXCI1MDBcIjpcIiM4YmMzNGFcIixcIjYwMFwiOlwiIzdjYjM0MlwiLFwiNzAwXCI6XCIjNjg5ZjM4XCIsXCI4MDBcIjpcIiM1NThiMmZcIixcIjkwMFwiOlwiIzMzNjkxZVwiLFwiYTEwMFwiOlwiI2NjZmY5MFwiLFwiYTIwMFwiOlwiI2IyZmY1OVwiLFwiYTQwMFwiOlwiIzc2ZmYwM1wiLFwiYTcwMFwiOlwiIzY0ZGQxN1wifSxcImxpbWVcIjp7XCI1MFwiOlwiI2Y5ZmJlN1wiLFwiMTAwXCI6XCIjZjBmNGMzXCIsXCIyMDBcIjpcIiNlNmVlOWNcIixcIjMwMFwiOlwiI2RjZTc3NVwiLFwiNDAwXCI6XCIjZDRlMTU3XCIsXCI1MDBcIjpcIiNjZGRjMzlcIixcIjYwMFwiOlwiI2MwY2EzM1wiLFwiNzAwXCI6XCIjYWZiNDJiXCIsXCI4MDBcIjpcIiM5ZTlkMjRcIixcIjkwMFwiOlwiIzgyNzcxN1wiLFwiYTEwMFwiOlwiI2Y0ZmY4MVwiLFwiYTIwMFwiOlwiI2VlZmY0MVwiLFwiYTQwMFwiOlwiI2M2ZmYwMFwiLFwiYTcwMFwiOlwiI2FlZWEwMFwifSxcInllbGxvd1wiOntcIjUwXCI6XCIjZmZmZGU3XCIsXCIxMDBcIjpcIiNmZmY5YzRcIixcIjIwMFwiOlwiI2ZmZjU5ZFwiLFwiMzAwXCI6XCIjZmZmMTc2XCIsXCI0MDBcIjpcIiNmZmVlNThcIixcIjUwMFwiOlwiI2ZmZWIzYlwiLFwiNjAwXCI6XCIjZmRkODM1XCIsXCI3MDBcIjpcIiNmYmMwMmRcIixcIjgwMFwiOlwiI2Y5YTgyNVwiLFwiOTAwXCI6XCIjZjU3ZjE3XCIsXCJhMTAwXCI6XCIjZmZmZjhkXCIsXCJhMjAwXCI6XCIjZmZmZjAwXCIsXCJhNDAwXCI6XCIjZmZlYTAwXCIsXCJhNzAwXCI6XCIjZmZkNjAwXCJ9LFwiYW1iZXJcIjp7XCI1MFwiOlwiI2ZmZjhlMVwiLFwiMTAwXCI6XCIjZmZlY2IzXCIsXCIyMDBcIjpcIiNmZmUwODJcIixcIjMwMFwiOlwiI2ZmZDU0ZlwiLFwiNDAwXCI6XCIjZmZjYTI4XCIsXCI1MDBcIjpcIiNmZmMxMDdcIixcIjYwMFwiOlwiI2ZmYjMwMFwiLFwiNzAwXCI6XCIjZmZhMDAwXCIsXCI4MDBcIjpcIiNmZjhmMDBcIixcIjkwMFwiOlwiI2ZmNmYwMFwiLFwiYTEwMFwiOlwiI2ZmZTU3ZlwiLFwiYTIwMFwiOlwiI2ZmZDc0MFwiLFwiYTQwMFwiOlwiI2ZmYzQwMFwiLFwiYTcwMFwiOlwiI2ZmYWIwMFwifSxcIm9yYW5nZVwiOntcIjUwXCI6XCIjZmZmM2UwXCIsXCIxMDBcIjpcIiNmZmUwYjJcIixcIjIwMFwiOlwiI2ZmY2M4MFwiLFwiMzAwXCI6XCIjZmZiNzRkXCIsXCI0MDBcIjpcIiNmZmE3MjZcIixcIjUwMFwiOlwiI2ZmOTgwMFwiLFwiNjAwXCI6XCIjZmI4YzAwXCIsXCI3MDBcIjpcIiNmNTdjMDBcIixcIjgwMFwiOlwiI2VmNmMwMFwiLFwiOTAwXCI6XCIjZTY1MTAwXCIsXCJhMTAwXCI6XCIjZmZkMTgwXCIsXCJhMjAwXCI6XCIjZmZhYjQwXCIsXCJhNDAwXCI6XCIjZmY5MTAwXCIsXCJhNzAwXCI6XCIjZmY2ZDAwXCJ9LFwiZGVlcE9yYW5nZVwiOntcIjUwXCI6XCIjZmJlOWU3XCIsXCIxMDBcIjpcIiNmZmNjYmNcIixcIjIwMFwiOlwiI2ZmYWI5MVwiLFwiMzAwXCI6XCIjZmY4YTY1XCIsXCI0MDBcIjpcIiNmZjcwNDNcIixcIjUwMFwiOlwiI2ZmNTcyMlwiLFwiNjAwXCI6XCIjZjQ1MTFlXCIsXCI3MDBcIjpcIiNlNjRhMTlcIixcIjgwMFwiOlwiI2Q4NDMxNVwiLFwiOTAwXCI6XCIjYmYzNjBjXCIsXCJhMTAwXCI6XCIjZmY5ZTgwXCIsXCJhMjAwXCI6XCIjZmY2ZTQwXCIsXCJhNDAwXCI6XCIjZmYzZDAwXCIsXCJhNzAwXCI6XCIjZGQyYzAwXCJ9LFwiYnJvd25cIjp7XCI1MFwiOlwiI2VmZWJlOVwiLFwiMTAwXCI6XCIjZDdjY2M4XCIsXCIyMDBcIjpcIiNiY2FhYTRcIixcIjMwMFwiOlwiI2ExODg3ZlwiLFwiNDAwXCI6XCIjOGQ2ZTYzXCIsXCI1MDBcIjpcIiM3OTU1NDhcIixcIjYwMFwiOlwiIzZkNGM0MVwiLFwiNzAwXCI6XCIjNWQ0MDM3XCIsXCI4MDBcIjpcIiM0ZTM0MmVcIixcIjkwMFwiOlwiIzNlMjcyM1wifSxcImdyZXlcIjp7XCI1MFwiOlwiI2ZhZmFmYVwiLFwiMTAwXCI6XCIjZjVmNWY1XCIsXCIyMDBcIjpcIiNlZWVlZWVcIixcIjMwMFwiOlwiI2UwZTBlMFwiLFwiNDAwXCI6XCIjYmRiZGJkXCIsXCI1MDBcIjpcIiM5ZTllOWVcIixcIjYwMFwiOlwiIzc1NzU3NVwiLFwiNzAwXCI6XCIjNjE2MTYxXCIsXCI4MDBcIjpcIiM0MjQyNDJcIixcIjkwMFwiOlwiIzIxMjEyMVwifSxcImJsdWVHcmV5XCI6e1wiNTBcIjpcIiNlY2VmZjFcIixcIjEwMFwiOlwiI2NmZDhkY1wiLFwiMjAwXCI6XCIjYjBiZWM1XCIsXCIzMDBcIjpcIiM5MGE0YWVcIixcIjQwMFwiOlwiIzc4OTA5Y1wiLFwiNTAwXCI6XCIjNjA3ZDhiXCIsXCI2MDBcIjpcIiM1NDZlN2FcIixcIjcwMFwiOlwiIzQ1NWE2NFwiLFwiODAwXCI6XCIjMzc0NzRmXCIsXCI5MDBcIjpcIiMyNjMyMzhcIn0sXCJkYXJrVGV4dFwiOntcInByaW1hcnlcIjpcInJnYmEoMCwgMCwgMCwgMC44NylcIixcInNlY29uZGFyeVwiOlwicmdiYSgwLCAwLCAwLCAwLjU0KVwiLFwiZGlzYWJsZWRcIjpcInJnYmEoMCwgMCwgMCwgMC4zOClcIixcImRpdmlkZXJzXCI6XCJyZ2JhKDAsIDAsIDAsIDAuMTIpXCJ9LFwibGlnaHRUZXh0XCI6e1wicHJpbWFyeVwiOlwicmdiYSgyNTUsIDI1NSwgMjU1LCAxKVwiLFwic2Vjb25kYXJ5XCI6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNylcIixcImRpc2FibGVkXCI6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSlcIixcImRpdmlkZXJzXCI6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpXCJ9LFwiZGFya0ljb25zXCI6e1wiYWN0aXZlXCI6XCJyZ2JhKDAsIDAsIDAsIDAuNTQpXCIsXCJpbmFjdGl2ZVwiOlwicmdiYSgwLCAwLCAwLCAwLjM4KVwifSxcImxpZ2h0SWNvbnNcIjp7XCJhY3RpdmVcIjpcInJnYmEoMjU1LCAyNTUsIDI1NSwgMSlcIixcImluYWN0aXZlXCI6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSlcIn0sXCJ3aGl0ZVwiOlwiI2ZmZmZmZlwiLFwiYmxhY2tcIjpcIiMwMDAwMDBcIn07XG59KTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG4gIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCB0aGUgdmFsdWVzIG1hdGNoIHdpdGggdGhlIHR5cGUgc3BlY3MuXG4gKiBFcnJvciBtZXNzYWdlcyBhcmUgbWVtb3JpemVkIGFuZCB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdHlwZVNwZWNzIE1hcCBvZiBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyBSdW50aW1lIHZhbHVlcyB0aGF0IG5lZWQgdG8gYmUgdHlwZS1jaGVja2VkXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHs/RnVuY3Rpb259IGdldFN0YWNrIFJldHVybnMgdGhlIGNvbXBvbmVudCBzdGFjay5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbiwgY29tcG9uZW50TmFtZSwgZ2V0U3RhY2spIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG4gICAgICBpZiAoaGFzKHR5cGVTcGVjcywgdHlwZVNwZWNOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoXG4gICAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogJyArIGxvY2F0aW9uICsgJyB0eXBlIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgJyArXG4gICAgICAgICAgICAgICdpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UsIGJ1dCByZWNlaXZlZCBgJyArIHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSArICdgLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJyArXG4gICAgICAgICAgICBsb2NhdGlvbiArICcgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgK1xuICAgICAgICAgICAgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICcgKyB0eXBlb2YgZXJyb3IgKyAnLiAnICtcbiAgICAgICAgICAgICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgK1xuICAgICAgICAgICAgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciBzdGFjayA9IGdldFN0YWNrID8gZ2V0U3RhY2soKSA6ICcnO1xuXG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ZhaWxlZCAnICsgbG9jYXRpb24gKyAnIHR5cGU6ICcgKyBlcnJvci5tZXNzYWdlICsgKHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXNldHMgd2FybmluZyBjYWNoZSB3aGVuIHRlc3RpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2hlY2tQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrUHJvcFR5cGVzO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcbnZhciBjaGVja1Byb3BUeXBlcyA9IHJlcXVpcmUoJy4vY2hlY2tQcm9wVHlwZXMnKTtcblxudmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbnZhciBwcmludFdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgLyogZ2xvYmFsIFN5bWJvbCAqL1xuICB2YXIgSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG4gIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuXG4gICAqXG4gICAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICAgKlxuICAgKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICAgKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpO1xuICAgKiAgICAgICAuLi5cbiAgICogICAgIH1cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gICAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAgICogc3VwcGxpZWQgdG8gUmVhY3QgY29tcG9uZW50cy4gRXhhbXBsZSB1c2FnZTpcbiAgICpcbiAgICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICAgKiAgIHZhciBNeUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAqICAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICAgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLFxuICAgKlxuICAgKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gICAqICAgICAgIGNhdGVnb3J5OiBQcm9wcy5vbmVPZihbJ05ld3MnLCdQaG90b3MnXSkuaXNSZXF1aXJlZCxcbiAgICpcbiAgICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gICAqICAgICAgIGRpYWxvZzogUHJvcHMuaW5zdGFuY2VPZihEaWFsb2cpLmlzUmVxdWlyZWRcbiAgICogICAgIH0sXG4gICAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gICAqXG4gICAqICAgdHlwZSA6PSBhcnJheXxib29sfGZ1bmN8b2JqZWN0fG51bWJlcnxzdHJpbmd8b25lT2YoWy4uLl0pfGluc3RhbmNlT2YoLi4uKVxuICAgKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAgICpcbiAgICogRWFjaCBhbmQgZXZlcnkgZGVjbGFyYXRpb24gcHJvZHVjZXMgYSBmdW5jdGlvbiB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZS4gVGhpc1xuICAgKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqICB2YXIgTXlMaW5rID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgKiAgICBwcm9wVHlwZXM6IHtcbiAgICogICAgICAvLyBBbiBvcHRpb25hbCBzdHJpbmcgb3IgVVJJIHByb3AgbmFtZWQgXCJocmVmXCIuXG4gICAqICAgICAgaHJlZjogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAqICAgICAgICAgICAgIShwcm9wVmFsdWUgaW5zdGFuY2VvZiBVUkkpKSB7XG4gICAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICtcbiAgICogICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAqICAgICAgICAgICk7XG4gICAqICAgICAgICB9XG4gICAqICAgICAgfVxuICAgKiAgICB9LFxuICAgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn1cbiAgICogIH0pO1xuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cbiAgdmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcbiAgICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICAgIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICAgIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuICAgIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICAgIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuICAgIHN5bWJvbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N5bWJvbCcpLFxuXG4gICAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICAgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgICBlbGVtZW50VHlwZTogY3JlYXRlRWxlbWVudFR5cGVUeXBlQ2hlY2tlcigpLFxuICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gICAgbm9kZTogY3JlYXRlTm9kZUNoZWNrZXIoKSxcbiAgICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICAgIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcixcbiAgICBleGFjdDogY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcixcbiAgfTtcblxuICAvKipcbiAgICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAgICovXG4gIC8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlKi9cbiAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG4gIH1cbiAgLyplc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSovXG5cbiAgLyoqXG4gICAqIFdlIHVzZSBhbiBFcnJvci1saWtlIG9iamVjdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhcyBwZW9wbGUgbWF5IGNhbGxcbiAgICogUHJvcFR5cGVzIGRpcmVjdGx5IGFuZCBpbnNwZWN0IHRoZWlyIG91dHB1dC4gSG93ZXZlciwgd2UgZG9uJ3QgdXNlIHJlYWxcbiAgICogRXJyb3JzIGFueW1vcmUuIFdlIGRvbid0IGluc3BlY3QgdGhlaXIgc3RhY2sgYW55d2F5LCBhbmQgY3JlYXRpbmcgdGhlbVxuICAgKiBpcyBwcm9oaWJpdGl2ZWx5IGV4cGVuc2l2ZSBpZiB0aGV5IGFyZSBjcmVhdGVkIHRvbyBvZnRlbiwgc3VjaCBhcyB3aGF0XG4gICAqIGhhcHBlbnMgaW4gb25lT2ZUeXBlKCkgZm9yIGFueSB0eXBlIGJlZm9yZSB0aGUgb25lIHRoYXQgbWF0Y2hlZC5cbiAgICovXG4gIGZ1bmN0aW9uIFByb3BUeXBlRXJyb3IobWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5zdGFjayA9ICcnO1xuICB9XG4gIC8vIE1ha2UgYGluc3RhbmNlb2YgRXJyb3JgIHN0aWxsIHdvcmsgZm9yIHJldHVybmVkIGVycm9ycy5cbiAgUHJvcFR5cGVFcnJvci5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlID0ge307XG4gICAgICB2YXIgbWFudWFsUHJvcFR5cGVXYXJuaW5nQ291bnQgPSAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgIHByb3BGdWxsTmFtZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICAgICAgaWYgKHNlY3JldCAhPT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgICAgaWYgKHRocm93T25EaXJlY3RBY2Nlc3MpIHtcbiAgICAgICAgICAvLyBOZXcgYmVoYXZpb3Igb25seSBmb3IgdXNlcnMgb2YgYHByb3AtdHlwZXNgIHBhY2thZ2VcbiAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgICAgICAgJ1VzZSBgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKClgIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAgICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICAgICAgICApO1xuICAgICAgICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vIE9sZCBiZWhhdmlvciBmb3IgcGVvcGxlIHVzaW5nIFJlYWN0LlByb3BUeXBlc1xuICAgICAgICAgIHZhciBjYWNoZUtleSA9IGNvbXBvbmVudE5hbWUgKyAnOicgKyBwcm9wTmFtZTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldICYmXG4gICAgICAgICAgICAvLyBBdm9pZCBzcGFtbWluZyB0aGUgY29uc29sZSBiZWNhdXNlIHRoZXkgYXJlIG9mdGVuIG5vdCBhY3Rpb25hYmxlIGV4Y2VwdCBmb3IgbGliIGF1dGhvcnNcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50IDwgM1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgICAnWW91IGFyZSBtYW51YWxseSBjYWxsaW5nIGEgUmVhY3QuUHJvcFR5cGVzIHZhbGlkYXRpb24gJyArXG4gICAgICAgICAgICAgICdmdW5jdGlvbiBmb3IgdGhlIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgcHJvcCBvbiBgJyArIGNvbXBvbmVudE5hbWUgICsgJ2AuIFRoaXMgaXMgZGVwcmVjYXRlZCAnICtcbiAgICAgICAgICAgICAgJ2FuZCB3aWxsIHRocm93IGluIHRoZSBzdGFuZGFsb25lIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICAgICAgICAgJ1lvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8gYSB0aGlyZC1wYXJ0eSBQcm9wVHlwZXMgJyArXG4gICAgICAgICAgICAgICdsaWJyYXJ5LiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWRvbnQtY2FsbC1wcm9wdHlwZXMgJyArICdmb3IgZGV0YWlscy4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkICcgKyAoJ2luIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGBudWxsYC4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gICAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG5cbiAgICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICAgIC8vIGBwcm9wVmFsdWVgIGJlaW5nIGluc3RhbmNlIG9mLCBzYXksIGRhdGUvcmVnZXhwLCBwYXNzIHRoZSAnb2JqZWN0J1xuICAgICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW5cbiAgICAgICAgLy8gJ29mIHR5cGUgYG9iamVjdGAnLlxuICAgICAgICB2YXIgcHJlY2lzZVR5cGUgPSBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByZWNpc2VUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdgJyArIGV4cGVjdGVkVHlwZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGwpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignUHJvcGVydHkgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiBjb21wb25lbnQgYCcgKyBjb21wb25lbnROYW1lICsgJ2AgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIGFycmF5T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gYXJyYXkuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJ1snICsgaSArICddJywgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRUeXBlVHlwZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgaWYgKCFSZWFjdElzLmlzVmFsaWRFbGVtZW50VHlwZShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudCB0eXBlLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcihleHBlY3RlZENsYXNzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzKSkge1xuICAgICAgICB2YXIgZXhwZWN0ZWRDbGFzc05hbWUgPSBleHBlY3RlZENsYXNzLm5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgICB2YXIgYWN0dWFsQ2xhc3NOYW1lID0gZ2V0Q2xhc3NOYW1lKHByb3BzW3Byb3BOYW1lXSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIGFjdHVhbENsYXNzTmFtZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnaW5zdGFuY2Ugb2YgYCcgKyBleHBlY3RlZENsYXNzTmFtZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRW51bVR5cGVDaGVja2VyKGV4cGVjdGVkVmFsdWVzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVmFsdWVzKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnRzIHN1cHBsaWVkIHRvIG9uZU9mLCBleHBlY3RlZCBhbiBhcnJheSwgZ290ICcgKyBhcmd1bWVudHMubGVuZ3RoICsgJyBhcmd1bWVudHMuICcgK1xuICAgICAgICAgICAgJ0EgY29tbW9uIG1pc3Rha2UgaXMgdG8gd3JpdGUgb25lT2YoeCwgeSwgeikgaW5zdGVhZCBvZiBvbmVPZihbeCwgeSwgel0pLidcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByaW50V2FybmluZygnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gYXJyYXkuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uVGhhdFJldHVybnNOdWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzKHByb3BWYWx1ZSwgZXhwZWN0ZWRWYWx1ZXNbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzLCBmdW5jdGlvbiByZXBsYWNlcihrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciB0eXBlID0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBTdHJpbmcocHJvcFZhbHVlKSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBvbmUgb2YgJyArIHZhbHVlc1N0cmluZyArICcuJykpO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBvYmplY3RPZi4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBvYmplY3QuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgICBpZiAoaGFzKHByb3BWYWx1ZSwga2V5KSkge1xuICAgICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJy4nICsga2V5LCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlVW5pb25UeXBlQ2hlY2tlcihhcnJheU9mVHlwZUNoZWNrZXJzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5T2ZUeXBlQ2hlY2tlcnMpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcHJpbnRXYXJuaW5nKCdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZSwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJykgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gZW1wdHlGdW5jdGlvblRoYXRSZXR1cm5zTnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgY2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcmludFdhcm5pbmcoXG4gICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLiBFeHBlY3RlZCBhbiBhcnJheSBvZiBjaGVjayBmdW5jdGlvbnMsIGJ1dCAnICtcbiAgICAgICAgICAncmVjZWl2ZWQgJyArIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyhjaGVja2VyKSArICcgYXQgaW5kZXggJyArIGkgKyAnLidcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb25UaGF0UmV0dXJuc051bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKSk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICghaXNOb2RlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBgb2JqZWN0YC4nKSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlIGAnICsgcHJvcFR5cGUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYG9iamVjdGAuJykpO1xuICAgICAgfVxuICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb21cbiAgICAgIC8vIHByb3BzLlxuICAgICAgdmFyIGFsbEtleXMgPSBhc3NpZ24oe30sIHByb3BzW3Byb3BOYW1lXSwgc2hhcGVUeXBlcyk7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKFxuICAgICAgICAgICAgJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIGtleSBgJyArIGtleSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLicgK1xuICAgICAgICAgICAgJ1xcbkJhZCBvYmplY3Q6ICcgKyBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsICcgICcpICtcbiAgICAgICAgICAgICdcXG5WYWxpZCBrZXlzOiAnICsgIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHNoYXBlVHlwZXMpLCBudWxsLCAnICAnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IGlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHtcbiAgICAvLyBOYXRpdmUgU3ltYm9sLlxuICAgIGlmIChwcm9wVHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIGZhbHN5IHZhbHVlIGNhbid0IGJlIGEgU3ltYm9sXG4gICAgaWYgKCFwcm9wVmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddID09PSAnU3ltYm9sJ1xuICAgIGlmIChwcm9wVmFsdWVbJ0BAdG9TdHJpbmdUYWcnXSA9PT0gJ1N5bWJvbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIGZvciBub24tc3BlYyBjb21wbGlhbnQgU3ltYm9scyB3aGljaCBhcmUgcG9seWZpbGxlZC5cbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBwcm9wVmFsdWUgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbiAgZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ2FycmF5JztcbiAgICB9XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgLy8gT2xkIHdlYmtpdHMgKGF0IGxlYXN0IHVudGlsIEFuZHJvaWQgNC4wKSByZXR1cm4gJ2Z1bmN0aW9uJyByYXRoZXIgdGhhblxuICAgICAgLy8gJ29iamVjdCcgZm9yIHR5cGVvZiBhIFJlZ0V4cC4gV2UnbGwgbm9ybWFsaXplIHRoaXMgaGVyZSBzbyB0aGF0IC9ibGEvXG4gICAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICAgIHJldHVybiAnb2JqZWN0JztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ3N5bWJvbCc7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZTtcbiAgfVxuXG4gIC8vIFRoaXMgaGFuZGxlcyBtb3JlIHR5cGVzIHRoYW4gYGdldFByb3BUeXBlYC4gT25seSB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAgLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG4gIGZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyB8fCBwcm9wVmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnJyArIHByb3BWYWx1ZTtcbiAgICB9XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gJ2RhdGUnO1xuICAgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmV0dXJuICdyZWdleHAnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cblxuICAvLyBSZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgcG9zdGZpeGVkIHRvIGEgd2FybmluZyBhYm91dCBhbiBpbnZhbGlkIHR5cGUuXG4gIC8vIEZvciBleGFtcGxlLCBcInVuZGVmaW5lZFwiIG9yIFwib2YgdHlwZSBhcnJheVwiXG4gIGZ1bmN0aW9uIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyh2YWx1ZSkge1xuICAgIHZhciB0eXBlID0gZ2V0UHJlY2lzZVR5cGUodmFsdWUpO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcmV0dXJuICdhbiAnICsgdHlwZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICBjYXNlICdyZWdleHAnOlxuICAgICAgICByZXR1cm4gJ2EgJyArIHR5cGU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm5zIGNsYXNzIG5hbWUgb2YgdGhlIG9iamVjdCwgaWYgYW55LlxuICBmdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcFZhbHVlKSB7XG4gICAgaWYgKCFwcm9wVmFsdWUuY29uc3RydWN0b3IgfHwgIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgICByZXR1cm4gQU5PTllNT1VTO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGNoZWNrUHJvcFR5cGVzO1xuICBSZWFjdFByb3BUeXBlcy5yZXNldFdhcm5pbmdDYWNoZSA9IGNoZWNrUHJvcFR5cGVzLnJlc2V0V2FybmluZ0NhY2hlO1xuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFscGhhUGlja2VyID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9BbHBoYVBvaW50ZXIgPSByZXF1aXJlKCcuL0FscGhhUG9pbnRlcicpO1xuXG52YXIgX0FscGhhUG9pbnRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BbHBoYVBvaW50ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQWxwaGFQaWNrZXIgPSBleHBvcnRzLkFscGhhUGlja2VyID0gZnVuY3Rpb24gQWxwaGFQaWNrZXIoX3JlZikge1xuICB2YXIgcmdiID0gX3JlZi5yZ2IsXG4gICAgICBoc2wgPSBfcmVmLmhzbCxcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0LFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb24sXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICByZW5kZXJlcnMgPSBfcmVmLnJlbmRlcmVycyxcbiAgICAgIHBvaW50ZXIgPSBfcmVmLnBvaW50ZXIsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgfSxcbiAgICAgIGFscGhhOiB7XG4gICAgICAgIHJhZGl1czogJzJweCcsXG4gICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIsIGNsYXNzTmFtZTogJ2FscGhhLXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5BbHBoYSwgX2V4dGVuZHMoe30sIHN0eWxlcy5hbHBoYSwge1xuICAgICAgcmdiOiByZ2IsXG4gICAgICBoc2w6IGhzbCxcbiAgICAgIHBvaW50ZXI6IHBvaW50ZXIsXG4gICAgICByZW5kZXJlcnM6IHJlbmRlcmVycyxcbiAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgfSkpXG4gICk7XG59O1xuXG5BbHBoYVBpY2tlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHdpZHRoOiAnMzE2cHgnLFxuICBoZWlnaHQ6ICcxNnB4JyxcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gIHBvaW50ZXI6IF9BbHBoYVBvaW50ZXIyLmRlZmF1bHRcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY29tbW9uLkNvbG9yV3JhcCkoQWxwaGFQaWNrZXIpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQWxwaGFQb2ludGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEFscGhhUG9pbnRlciA9IGV4cG9ydHMuQWxwaGFQb2ludGVyID0gZnVuY3Rpb24gQWxwaGFQb2ludGVyKF9yZWYpIHtcbiAgdmFyIGRpcmVjdGlvbiA9IF9yZWYuZGlyZWN0aW9uO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgd2lkdGg6ICcxOHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMThweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtOXB4LCAtMXB4KScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYigyNDgsIDI0OCwgMjQ4KScsXG4gICAgICAgIGJveFNoYWRvdzogJzAgMXB4IDRweCAwIHJnYmEoMCwgMCwgMCwgMC4zNyknXG4gICAgICB9XG4gICAgfSxcbiAgICAndmVydGljYWwnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC0zcHgsIC05cHgpJ1xuICAgICAgfVxuICAgIH1cbiAgfSwgeyB2ZXJ0aWNhbDogZGlyZWN0aW9uID09PSAndmVydGljYWwnIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnBpY2tlciB9KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEFscGhhUG9pbnRlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkJsb2NrID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfbWVyZ2UgPSByZXF1aXJlKCdsb2Rhc2gvbWVyZ2UnKTtcblxudmFyIF9tZXJnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZSk7XG5cbnZhciBfY29sb3IgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2NvbG9yJyk7XG5cbnZhciBjb2xvciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jb2xvcik7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbnZhciBfQmxvY2tTd2F0Y2hlcyA9IHJlcXVpcmUoJy4vQmxvY2tTd2F0Y2hlcycpO1xuXG52YXIgX0Jsb2NrU3dhdGNoZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQmxvY2tTd2F0Y2hlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBCbG9jayA9IGV4cG9ydHMuQmxvY2sgPSBmdW5jdGlvbiBCbG9jayhfcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICBjb2xvcnMgPSBfcmVmLmNvbG9ycyxcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIHRyaWFuZ2xlID0gX3JlZi50cmlhbmdsZSxcbiAgICAgIF9yZWYkc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICBwYXNzZWRTdHlsZXMgPSBfcmVmJHN0eWxlcyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHN0eWxlcyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgdHJhbnNwYXJlbnQgPSBoZXggPT09ICd0cmFuc3BhcmVudCc7XG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoaGV4Q29kZSwgZSkge1xuICAgIGNvbG9yLmlzVmFsaWRIZXgoaGV4Q29kZSkgJiYgb25DaGFuZ2Uoe1xuICAgICAgaGV4OiBoZXhDb2RlLFxuICAgICAgc291cmNlOiAnaGV4J1xuICAgIH0sIGUpO1xuICB9O1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSgoMCwgX21lcmdlMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBjYXJkOiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICBib3hTaGFkb3c6ICcwIDFweCByZ2JhKDAsMCwwLC4xKScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzZweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgaGVhZDoge1xuICAgICAgICBoZWlnaHQ6ICcxMTBweCcsXG4gICAgICAgIGJhY2tncm91bmQ6IGhleCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNnB4IDZweCAwIDAnLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgYm9keToge1xuICAgICAgICBwYWRkaW5nOiAnMTBweCdcbiAgICAgIH0sXG4gICAgICBsYWJlbDoge1xuICAgICAgICBmb250U2l6ZTogJzE4cHgnLFxuICAgICAgICBjb2xvcjogY29sb3IuZ2V0Q29udHJhc3RpbmdDb2xvcihoZXgpLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIHdpZHRoOiAnMHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMHB4JyxcbiAgICAgICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgICAgIGJvcmRlcldpZHRoOiAnMCAxMHB4IDEwcHggMTBweCcsXG4gICAgICAgIGJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgJyArIGhleCArICcgdHJhbnNwYXJlbnQnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnLTEwcHgnLFxuICAgICAgICBsZWZ0OiAnNTAlJyxcbiAgICAgICAgbWFyZ2luTGVmdDogJy0xMHB4J1xuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgIGNvbG9yOiAnIzY2NicsXG4gICAgICAgIGJvcmRlcjogJzBweCcsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgaGVpZ2h0OiAnMjJweCcsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjZGRkJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgICAgcGFkZGluZzogJzAgN3B4JyxcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdoaWRlLXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpLCB7ICdoaWRlLXRyaWFuZ2xlJzogdHJpYW5nbGUgPT09ICdoaWRlJyB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmNhcmQsIGNsYXNzTmFtZTogJ2Jsb2NrLXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy50cmlhbmdsZSB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmhlYWQgfSxcbiAgICAgIHRyYW5zcGFyZW50ICYmIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uQ2hlY2tib2FyZCwgeyBib3JkZXJSYWRpdXM6ICc2cHggNnB4IDAgMCcgfSksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICBoZXhcbiAgICAgIClcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuYm9keSB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Jsb2NrU3dhdGNoZXMyLmRlZmF1bHQsIHsgY29sb3JzOiBjb2xvcnMsIG9uQ2xpY2s6IGhhbmRsZUNoYW5nZSwgb25Td2F0Y2hIb3Zlcjogb25Td2F0Y2hIb3ZlciB9KSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0IH0sXG4gICAgICAgIHZhbHVlOiBoZXgsXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgIH0pXG4gICAgKVxuICApO1xufTtcblxuQmxvY2sucHJvcFR5cGVzID0ge1xuICB3aWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcl0pLFxuICBjb2xvcnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyksXG4gIHRyaWFuZ2xlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsndG9wJywgJ2hpZGUnXSksXG4gIHN0eWxlczogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn07XG5cbkJsb2NrLmRlZmF1bHRQcm9wcyA9IHtcbiAgd2lkdGg6IDE3MCxcbiAgY29sb3JzOiBbJyNEOUUzRjAnLCAnI0Y0NzM3MycsICcjNjk3Njg5JywgJyMzN0Q2N0EnLCAnIzJDQ0NFNCcsICcjNTU1NTU1JywgJyNkY2U3NzUnLCAnI2ZmOGE2NScsICcjYmE2OGM4J10sXG4gIHRyaWFuZ2xlOiAndG9wJyxcbiAgc3R5bGVzOiB7fVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShCbG9jayk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5CbG9ja1N3YXRjaGVzID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tYXAgPSByZXF1aXJlKCdsb2Rhc2gvbWFwJyk7XG5cbnZhciBfbWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcCk7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBCbG9ja1N3YXRjaGVzID0gZXhwb3J0cy5CbG9ja1N3YXRjaGVzID0gZnVuY3Rpb24gQmxvY2tTd2F0Y2hlcyhfcmVmKSB7XG4gIHZhciBjb2xvcnMgPSBfcmVmLmNvbG9ycyxcbiAgICAgIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBzd2F0Y2hlczoge1xuICAgICAgICBtYXJnaW5SaWdodDogJy0xMHB4J1xuICAgICAgfSxcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICB3aWR0aDogJzIycHgnLFxuICAgICAgICBoZWlnaHQ6ICcyMnB4JyxcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICcxMHB4JyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnMTBweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzRweCdcbiAgICAgIH0sXG4gICAgICBjbGVhcjoge1xuICAgICAgICBjbGVhcjogJ2JvdGgnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLnN3YXRjaGVzIH0sXG4gICAgKDAsIF9tYXAyLmRlZmF1bHQpKGNvbG9ycywgZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLlN3YXRjaCwge1xuICAgICAgICBrZXk6IGMsXG4gICAgICAgIGNvbG9yOiBjLFxuICAgICAgICBzdHlsZTogc3R5bGVzLnN3YXRjaCxcbiAgICAgICAgb25DbGljazogb25DbGljayxcbiAgICAgICAgb25Ib3Zlcjogb25Td2F0Y2hIb3ZlcixcbiAgICAgICAgZm9jdXNTdHlsZToge1xuICAgICAgICAgIGJveFNoYWRvdzogJzAgMCA0cHggJyArIGNcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5jbGVhciB9KVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQmxvY2tTd2F0Y2hlczsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNocm9tZSA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX21lcmdlID0gcmVxdWlyZSgnbG9kYXNoL21lcmdlJyk7XG5cbnZhciBfbWVyZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVyZ2UpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG52YXIgX0Nocm9tZUZpZWxkcyA9IHJlcXVpcmUoJy4vQ2hyb21lRmllbGRzJyk7XG5cbnZhciBfQ2hyb21lRmllbGRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Nocm9tZUZpZWxkcyk7XG5cbnZhciBfQ2hyb21lUG9pbnRlciA9IHJlcXVpcmUoJy4vQ2hyb21lUG9pbnRlcicpO1xuXG52YXIgX0Nocm9tZVBvaW50ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2hyb21lUG9pbnRlcik7XG5cbnZhciBfQ2hyb21lUG9pbnRlckNpcmNsZSA9IHJlcXVpcmUoJy4vQ2hyb21lUG9pbnRlckNpcmNsZScpO1xuXG52YXIgX0Nocm9tZVBvaW50ZXJDaXJjbGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2hyb21lUG9pbnRlckNpcmNsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBDaHJvbWUgPSBleHBvcnRzLkNocm9tZSA9IGZ1bmN0aW9uIENocm9tZShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBkaXNhYmxlQWxwaGEgPSBfcmVmLmRpc2FibGVBbHBoYSxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaHNsID0gX3JlZi5oc2wsXG4gICAgICBoc3YgPSBfcmVmLmhzdixcbiAgICAgIGhleCA9IF9yZWYuaGV4LFxuICAgICAgcmVuZGVyZXJzID0gX3JlZi5yZW5kZXJlcnMsXG4gICAgICBfcmVmJHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgcGFzc2VkU3R5bGVzID0gX3JlZiRzdHlsZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRzdHlsZXMsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWUsXG4gICAgICBkZWZhdWx0VmlldyA9IF9yZWYuZGVmYXVsdFZpZXc7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKCgwLCBfbWVyZ2UyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAwIDJweCByZ2JhKDAsMCwwLC4zKSwgMCA0cHggOHB4IHJnYmEoMCwwLDAsLjMpJyxcbiAgICAgICAgYm94U2l6aW5nOiAnaW5pdGlhbCcsXG4gICAgICAgIGZvbnRGYW1pbHk6ICdNZW5sbydcbiAgICAgIH0sXG4gICAgICBzYXR1cmF0aW9uOiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHBhZGRpbmdCb3R0b206ICc1NSUnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMnB4IDJweCAwIDAnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0sXG4gICAgICBTYXR1cmF0aW9uOiB7XG4gICAgICAgIHJhZGl1czogJzJweCAycHggMCAwJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgcGFkZGluZzogJzE2cHggMTZweCAxMnB4J1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgICAgfSxcbiAgICAgIGNvbG9yOiB7XG4gICAgICAgIHdpZHRoOiAnMzJweCdcbiAgICAgIH0sXG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgbWFyZ2luVG9wOiAnNnB4JyxcbiAgICAgICAgd2lkdGg6ICcxNnB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMTZweCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzhweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0sXG4gICAgICBhY3RpdmU6IHtcbiAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggcmdiYSgwLDAsMCwuMSknLFxuICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgnICsgcmdiLnIgKyAnLCAnICsgcmdiLmcgKyAnLCAnICsgcmdiLmIgKyAnLCAnICsgcmdiLmEgKyAnKScsXG4gICAgICAgIHpJbmRleDogJzInXG4gICAgICB9LFxuICAgICAgdG9nZ2xlczoge1xuICAgICAgICBmbGV4OiAnMSdcbiAgICAgIH0sXG4gICAgICBodWU6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTBweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBtYXJnaW5Cb3R0b206ICc4cHgnXG4gICAgICB9LFxuICAgICAgSHVlOiB7XG4gICAgICAgIHJhZGl1czogJzJweCdcbiAgICAgIH0sXG4gICAgICBhbHBoYToge1xuICAgICAgICBoZWlnaHQ6ICcxMHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBBbHBoYToge1xuICAgICAgICByYWRpdXM6ICcycHgnXG4gICAgICB9XG4gICAgfSxcbiAgICAnZGlzYWJsZUFscGhhJzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgd2lkdGg6ICcyMnB4J1xuICAgICAgfSxcbiAgICAgIGFscGhhOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIGh1ZToge1xuICAgICAgICBtYXJnaW5Cb3R0b206ICcwcHgnXG4gICAgICB9LFxuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIHdpZHRoOiAnMTBweCcsXG4gICAgICAgIGhlaWdodDogJzEwcHgnLFxuICAgICAgICBtYXJnaW5Ub3A6ICcwcHgnXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpLCB7IGRpc2FibGVBbHBoYTogZGlzYWJsZUFscGhhIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMucGlja2VyLCBjbGFzc05hbWU6ICdjaHJvbWUtcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnNhdHVyYXRpb24gfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uU2F0dXJhdGlvbiwge1xuICAgICAgICBzdHlsZTogc3R5bGVzLlNhdHVyYXRpb24sXG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBoc3Y6IGhzdixcbiAgICAgICAgcG9pbnRlcjogX0Nocm9tZVBvaW50ZXJDaXJjbGUyLmRlZmF1bHQsXG4gICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuYm9keSB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuY29udHJvbHMsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuY29sb3IgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnN3YXRjaCB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5hY3RpdmUgfSksXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkNoZWNrYm9hcmQsIHsgcmVuZGVyZXJzOiByZW5kZXJlcnMgfSlcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy50b2dnbGVzIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5odWUgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uSHVlLCB7XG4gICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuSHVlLFxuICAgICAgICAgICAgICBoc2w6IGhzbCxcbiAgICAgICAgICAgICAgcG9pbnRlcjogX0Nocm9tZVBvaW50ZXIyLmRlZmF1bHQsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuYWxwaGEgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uQWxwaGEsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5BbHBoYSxcbiAgICAgICAgICAgICAgcmdiOiByZ2IsXG4gICAgICAgICAgICAgIGhzbDogaHNsLFxuICAgICAgICAgICAgICBwb2ludGVyOiBfQ2hyb21lUG9pbnRlcjIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgcmVuZGVyZXJzOiByZW5kZXJlcnMsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ2hyb21lRmllbGRzMi5kZWZhdWx0LCB7XG4gICAgICAgIHJnYjogcmdiLFxuICAgICAgICBoc2w6IGhzbCxcbiAgICAgICAgaGV4OiBoZXgsXG4gICAgICAgIHZpZXc6IGRlZmF1bHRWaWV3LFxuICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgICAgIGRpc2FibGVBbHBoYTogZGlzYWJsZUFscGhhXG4gICAgICB9KVxuICAgIClcbiAgKTtcbn07XG5cbkNocm9tZS5wcm9wVHlwZXMgPSB7XG4gIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXSksXG4gIGRpc2FibGVBbHBoYTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICBkZWZhdWx0VmlldzogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbXCJoZXhcIiwgXCJyZ2JcIiwgXCJoc2xcIl0pXG59O1xuXG5DaHJvbWUuZGVmYXVsdFByb3BzID0ge1xuICB3aWR0aDogMjI1LFxuICBkaXNhYmxlQWxwaGE6IGZhbHNlLFxuICBzdHlsZXM6IHt9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NvbW1vbi5Db2xvcldyYXApKENocm9tZSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5DaHJvbWVGaWVsZHMgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NvbG9yID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9jb2xvcicpO1xuXG52YXIgY29sb3IgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfY29sb3IpO1xuXG52YXIgX2lzVW5kZWZpbmVkID0gcmVxdWlyZSgnbG9kYXNoL2lzVW5kZWZpbmVkJyk7XG5cbnZhciBfaXNVbmRlZmluZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNVbmRlZmluZWQpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG52YXIgX1VuZm9sZE1vcmVIb3Jpem9udGFsSWNvbiA9IHJlcXVpcmUoJ0BpY29ucy9tYXRlcmlhbC9VbmZvbGRNb3JlSG9yaXpvbnRhbEljb24nKTtcblxudmFyIF9VbmZvbGRNb3JlSG9yaXpvbnRhbEljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVW5mb2xkTW9yZUhvcml6b250YWxJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby1kaWQtbW91bnQtc2V0LXN0YXRlLCBuby1wYXJhbS1yZWFzc2lnbiAqL1xuXG52YXIgQ2hyb21lRmllbGRzID0gZXhwb3J0cy5DaHJvbWVGaWVsZHMgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQ2hyb21lRmllbGRzLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDaHJvbWVGaWVsZHMocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hyb21lRmllbGRzKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDaHJvbWVGaWVsZHMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDaHJvbWVGaWVsZHMpKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLnRvZ2dsZVZpZXdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLnZpZXcgPT09ICdoZXgnKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmlldzogJ3JnYicgfSk7XG4gICAgICB9IGVsc2UgaWYgKF90aGlzLnN0YXRlLnZpZXcgPT09ICdyZ2InKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmlldzogJ2hzbCcgfSk7XG4gICAgICB9IGVsc2UgaWYgKF90aGlzLnN0YXRlLnZpZXcgPT09ICdoc2wnKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5oc2wuYSA9PT0gMSkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgdmlldzogJ2hleCcgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyB2aWV3OiAncmdiJyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZGF0YSwgZSkge1xuICAgICAgaWYgKGRhdGEuaGV4KSB7XG4gICAgICAgIGNvbG9yLmlzVmFsaWRIZXgoZGF0YS5oZXgpICYmIF90aGlzLnByb3BzLm9uQ2hhbmdlKHtcbiAgICAgICAgICBoZXg6IGRhdGEuaGV4LFxuICAgICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgICAgfSwgZSk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGEuciB8fCBkYXRhLmcgfHwgZGF0YS5iKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKHtcbiAgICAgICAgICByOiBkYXRhLnIgfHwgX3RoaXMucHJvcHMucmdiLnIsXG4gICAgICAgICAgZzogZGF0YS5nIHx8IF90aGlzLnByb3BzLnJnYi5nLFxuICAgICAgICAgIGI6IGRhdGEuYiB8fCBfdGhpcy5wcm9wcy5yZ2IuYixcbiAgICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICAgIH0sIGUpO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLmEpIHtcbiAgICAgICAgaWYgKGRhdGEuYSA8IDApIHtcbiAgICAgICAgICBkYXRhLmEgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuYSA+IDEpIHtcbiAgICAgICAgICBkYXRhLmEgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2Uoe1xuICAgICAgICAgIGg6IF90aGlzLnByb3BzLmhzbC5oLFxuICAgICAgICAgIHM6IF90aGlzLnByb3BzLmhzbC5zLFxuICAgICAgICAgIGw6IF90aGlzLnByb3BzLmhzbC5sLFxuICAgICAgICAgIGE6IE1hdGgucm91bmQoZGF0YS5hICogMTAwKSAvIDEwMCxcbiAgICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICAgIH0sIGUpO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLmggfHwgZGF0YS5zIHx8IGRhdGEubCkge1xuICAgICAgICAvLyBSZW1vdmUgYW55IG9jY3VyYW5jZXMgb2YgJyUnLlxuICAgICAgICBpZiAodHlwZW9mIGRhdGEucyA9PT0gJ3N0cmluZycgJiYgZGF0YS5zLmluY2x1ZGVzKCclJykpIHtcbiAgICAgICAgICBkYXRhLnMgPSBkYXRhLnMucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRhdGEubCA9PT0gJ3N0cmluZycgJiYgZGF0YS5sLmluY2x1ZGVzKCclJykpIHtcbiAgICAgICAgICBkYXRhLmwgPSBkYXRhLmwucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIHN0b3JlIEhTTCBhcyBhIHVuaXQgaW50ZXJ2YWwgc28gd2UgbmVlZCB0byBvdmVycmlkZSB0aGUgMSBpbnB1dCB0byAwLjAxXG4gICAgICAgIGlmIChkYXRhLnMgPT0gMSkge1xuICAgICAgICAgIGRhdGEucyA9IDAuMDE7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5sID09IDEpIHtcbiAgICAgICAgICBkYXRhLmwgPSAwLjAxO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2Uoe1xuICAgICAgICAgIGg6IGRhdGEuaCB8fCBfdGhpcy5wcm9wcy5oc2wuaCxcbiAgICAgICAgICBzOiBOdW1iZXIoISgwLCBfaXNVbmRlZmluZWQyLmRlZmF1bHQpKGRhdGEucykgPyBkYXRhLnMgOiBfdGhpcy5wcm9wcy5oc2wucyksXG4gICAgICAgICAgbDogTnVtYmVyKCEoMCwgX2lzVW5kZWZpbmVkMi5kZWZhdWx0KShkYXRhLmwpID8gZGF0YS5sIDogX3RoaXMucHJvcHMuaHNsLmwpLFxuICAgICAgICAgIHNvdXJjZTogJ2hzbCdcbiAgICAgICAgfSwgZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnNob3dIaWdobGlnaHQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5jdXJyZW50VGFyZ2V0LnN0eWxlLmJhY2tncm91bmQgPSAnI2VlZSc7XG4gICAgfTtcblxuICAgIF90aGlzLmhpZGVIaWdobGlnaHQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5jdXJyZW50VGFyZ2V0LnN0eWxlLmJhY2tncm91bmQgPSAndHJhbnNwYXJlbnQnO1xuICAgIH07XG5cbiAgICBpZiAocHJvcHMuaHNsLmEgIT09IDEgJiYgcHJvcHMudmlldyA9PT0gXCJoZXhcIikge1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIHZpZXc6IFwicmdiXCJcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICB2aWV3OiBwcm9wcy52aWV3XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2hyb21lRmllbGRzLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICAgICAnZGVmYXVsdCc6IHtcbiAgICAgICAgICB3cmFwOiB7XG4gICAgICAgICAgICBwYWRkaW5nVG9wOiAnMTZweCcsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpZWxkczoge1xuICAgICAgICAgICAgZmxleDogJzEnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgbWFyZ2luTGVmdDogJy02cHgnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaWVsZDoge1xuICAgICAgICAgICAgcGFkZGluZ0xlZnQ6ICc2cHgnLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYWxwaGE6IHtcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiAnNnB4JyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvZ2dsZToge1xuICAgICAgICAgICAgd2lkdGg6ICczMnB4JyxcbiAgICAgICAgICAgIHRleHRBbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpY29uOiB7XG4gICAgICAgICAgICBtYXJnaW5SaWdodDogJy00cHgnLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAnMTJweCcsXG4gICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpY29uSGlnaGxpZ2h0OiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMjRweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICcyOHB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjZWVlJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgICAgICB0b3A6ICcxMHB4JyxcbiAgICAgICAgICAgIGxlZnQ6ICcxMnB4JyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgICAgICBjb2xvcjogJyMzMzMnLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzJweCcsXG4gICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjZGFkYWRhJyxcbiAgICAgICAgICAgIGhlaWdodDogJzIxcHgnLFxuICAgICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICcxMXB4JyxcbiAgICAgICAgICAgIGNvbG9yOiAnIzk2OTY5NicsXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICAgIG1hcmdpblRvcDogJzEycHgnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdmc6IHtcbiAgICAgICAgICAgIGZpbGw6ICcjMzMzJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMjRweCcsXG4gICAgICAgICAgICBoZWlnaHQ6ICcyNHB4JyxcbiAgICAgICAgICAgIGJvcmRlcjogJzFweCB0cmFuc3BhcmVudCBzb2xpZCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1cHgnXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnZGlzYWJsZUFscGhhJzoge1xuICAgICAgICAgIGFscGhhOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuXG4gICAgICB2YXIgZmllbGRzID0gdm9pZCAwO1xuICAgICAgaWYgKHRoaXMuc3RhdGUudmlldyA9PT0gJ2hleCcpIHtcbiAgICAgICAgZmllbGRzID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkcywgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZCB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgICAgICAgbGFiZWw6ICdoZXgnLCB2YWx1ZTogdGhpcy5wcm9wcy5oZXgsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUudmlldyA9PT0gJ3JnYicpIHtcbiAgICAgICAgZmllbGRzID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkcywgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZCB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgICAgICAgbGFiZWw6ICdyJyxcbiAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMucmdiLnIsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGQgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiAnZycsXG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnJnYi5nLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICAgICAgICBsYWJlbDogJ2InLFxuICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yZ2IuYixcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5hbHBoYSB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgICAgICAgbGFiZWw6ICdhJyxcbiAgICAgICAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMucmdiLmEsXG4gICAgICAgICAgICAgIGFycm93T2Zmc2V0OiAwLjAxLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnZpZXcgPT09ICdoc2wnKSB7XG4gICAgICAgIGZpZWxkcyA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZHMsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuZmllbGQgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiAnaCcsXG4gICAgICAgICAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKHRoaXMucHJvcHMuaHNsLmgpLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICAgICAgICBsYWJlbDogJ3MnLFxuICAgICAgICAgICAgICB2YWx1ZTogTWF0aC5yb3VuZCh0aGlzLnByb3BzLmhzbC5zICogMTAwKSArICclJyxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZCB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQsIGxhYmVsOiBzdHlsZXMubGFiZWwgfSxcbiAgICAgICAgICAgICAgbGFiZWw6ICdsJyxcbiAgICAgICAgICAgICAgdmFsdWU6IE1hdGgucm91bmQodGhpcy5wcm9wcy5oc2wubCAqIDEwMCkgKyAnJScsXG4gICAgICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuYWxwaGEgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgICAgIGxhYmVsOiAnYScsXG4gICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhzbC5hLFxuICAgICAgICAgICAgICBhcnJvd09mZnNldDogMC4wMSxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMuaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLndyYXAsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgICAgICBmaWVsZHMsXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy50b2dnbGUgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmljb24sIG9uQ2xpY2s6IHRoaXMudG9nZ2xlVmlld3MsIHJlZjogZnVuY3Rpb24gcmVmKGljb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmljb24gPSBpY29uO1xuICAgICAgICAgICAgICB9IH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVW5mb2xkTW9yZUhvcml6b250YWxJY29uMi5kZWZhdWx0LCB7XG4gICAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuc3ZnLFxuICAgICAgICAgICAgICBvbk1vdXNlT3ZlcjogdGhpcy5zaG93SGlnaGxpZ2h0LFxuICAgICAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuc2hvd0hpZ2hsaWdodCxcbiAgICAgICAgICAgICAgb25Nb3VzZU91dDogdGhpcy5oaWRlSGlnaGxpZ2h0XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHN0YXRlKSB7XG4gICAgICBpZiAobmV4dFByb3BzLmhzbC5hICE9PSAxICYmIHN0YXRlLnZpZXcgPT09ICdoZXgnKSB7XG4gICAgICAgIHJldHVybiB7IHZpZXc6ICdyZ2InIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2hyb21lRmllbGRzO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuQ2hyb21lRmllbGRzLmRlZmF1bHRQcm9wcyA9IHtcbiAgdmlldzogXCJoZXhcIlxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ2hyb21lRmllbGRzOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ2hyb21lUG9pbnRlciA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBDaHJvbWVQb2ludGVyID0gZXhwb3J0cy5DaHJvbWVQb2ludGVyID0gZnVuY3Rpb24gQ2hyb21lUG9pbnRlcigpIHtcbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogJzEycHgnLFxuICAgICAgICBoZWlnaHQ6ICcxMnB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNnB4JyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC02cHgsIC0xcHgpJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiKDI0OCwgMjQ4LCAyNDgpJyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjM3KSdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnBpY2tlciB9KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENocm9tZVBvaW50ZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5DaHJvbWVQb2ludGVyQ2lyY2xlID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIENocm9tZVBvaW50ZXJDaXJjbGUgPSBleHBvcnRzLkNocm9tZVBvaW50ZXJDaXJjbGUgPSBmdW5jdGlvbiBDaHJvbWVQb2ludGVyQ2lyY2xlKCkge1xuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiAnMTJweCcsXG4gICAgICAgIGhlaWdodDogJzEycHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc2cHgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggI2ZmZicsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNnB4LCAtNnB4KSdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnBpY2tlciB9KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IENocm9tZVBvaW50ZXJDaXJjbGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5DaXJjbGUgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tYXAgPSByZXF1aXJlKCdsb2Rhc2gvbWFwJyk7XG5cbnZhciBfbWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcCk7XG5cbnZhciBfbWVyZ2UgPSByZXF1aXJlKCdsb2Rhc2gvbWVyZ2UnKTtcblxudmFyIF9tZXJnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZSk7XG5cbnZhciBfbWF0ZXJpYWxDb2xvcnMgPSByZXF1aXJlKCdtYXRlcmlhbC1jb2xvcnMnKTtcblxudmFyIG1hdGVyaWFsID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX21hdGVyaWFsQ29sb3JzKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9DaXJjbGVTd2F0Y2ggPSByZXF1aXJlKCcuL0NpcmNsZVN3YXRjaCcpO1xuXG52YXIgX0NpcmNsZVN3YXRjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DaXJjbGVTd2F0Y2gpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQ2lyY2xlID0gZXhwb3J0cy5DaXJjbGUgPSBmdW5jdGlvbiBDaXJjbGUoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGNvbG9ycyA9IF9yZWYuY29sb3JzLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICBjaXJjbGVTaXplID0gX3JlZi5jaXJjbGVTaXplLFxuICAgICAgX3JlZiRzdHlsZXMgPSBfcmVmLnN0eWxlcyxcbiAgICAgIHBhc3NlZFN0eWxlcyA9IF9yZWYkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkc3R5bGVzLFxuICAgICAgY2lyY2xlU3BhY2luZyA9IF9yZWYuY2lyY2xlU3BhY2luZyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoKDAsIF9tZXJnZTIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgY2FyZDoge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IC1jaXJjbGVTcGFjaW5nLFxuICAgICAgICBtYXJnaW5Cb3R0b206IC1jaXJjbGVTcGFjaW5nXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpKTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGhleENvZGUsIGUpIHtcbiAgICByZXR1cm4gb25DaGFuZ2UoeyBoZXg6IGhleENvZGUsIHNvdXJjZTogJ2hleCcgfSwgZSk7XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5jYXJkLCBjbGFzc05hbWU6ICdjaXJjbGUtcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICAoMCwgX21hcDIuZGVmYXVsdCkoY29sb3JzLCBmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DaXJjbGVTd2F0Y2gyLmRlZmF1bHQsIHtcbiAgICAgICAga2V5OiBjLFxuICAgICAgICBjb2xvcjogYyxcbiAgICAgICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgICAgICBvblN3YXRjaEhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgICBhY3RpdmU6IGhleCA9PT0gYy50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBjaXJjbGVTaXplOiBjaXJjbGVTaXplLFxuICAgICAgICBjaXJjbGVTcGFjaW5nOiBjaXJjbGVTcGFjaW5nXG4gICAgICB9KTtcbiAgICB9KVxuICApO1xufTtcblxuQ2lyY2xlLnByb3BUeXBlcyA9IHtcbiAgd2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKSxcbiAgY2lyY2xlU2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGNpcmNsZVNwYWNpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBzdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59O1xuXG5DaXJjbGUuZGVmYXVsdFByb3BzID0ge1xuICB3aWR0aDogMjUyLFxuICBjaXJjbGVTaXplOiAyOCxcbiAgY2lyY2xlU3BhY2luZzogMTQsXG4gIGNvbG9yczogW21hdGVyaWFsLnJlZFsnNTAwJ10sIG1hdGVyaWFsLnBpbmtbJzUwMCddLCBtYXRlcmlhbC5wdXJwbGVbJzUwMCddLCBtYXRlcmlhbC5kZWVwUHVycGxlWyc1MDAnXSwgbWF0ZXJpYWwuaW5kaWdvWyc1MDAnXSwgbWF0ZXJpYWwuYmx1ZVsnNTAwJ10sIG1hdGVyaWFsLmxpZ2h0Qmx1ZVsnNTAwJ10sIG1hdGVyaWFsLmN5YW5bJzUwMCddLCBtYXRlcmlhbC50ZWFsWyc1MDAnXSwgbWF0ZXJpYWwuZ3JlZW5bJzUwMCddLCBtYXRlcmlhbC5saWdodEdyZWVuWyc1MDAnXSwgbWF0ZXJpYWwubGltZVsnNTAwJ10sIG1hdGVyaWFsLnllbGxvd1snNTAwJ10sIG1hdGVyaWFsLmFtYmVyWyc1MDAnXSwgbWF0ZXJpYWwub3JhbmdlWyc1MDAnXSwgbWF0ZXJpYWwuZGVlcE9yYW5nZVsnNTAwJ10sIG1hdGVyaWFsLmJyb3duWyc1MDAnXSwgbWF0ZXJpYWwuYmx1ZUdyZXlbJzUwMCddXSxcbiAgc3R5bGVzOiB7fVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShDaXJjbGUpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ2lyY2xlU3dhdGNoID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIENpcmNsZVN3YXRjaCA9IGV4cG9ydHMuQ2lyY2xlU3dhdGNoID0gZnVuY3Rpb24gQ2lyY2xlU3dhdGNoKF9yZWYpIHtcbiAgdmFyIGNvbG9yID0gX3JlZi5jb2xvcixcbiAgICAgIG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgaG92ZXIgPSBfcmVmLmhvdmVyLFxuICAgICAgYWN0aXZlID0gX3JlZi5hY3RpdmUsXG4gICAgICBjaXJjbGVTaXplID0gX3JlZi5jaXJjbGVTaXplLFxuICAgICAgY2lyY2xlU3BhY2luZyA9IF9yZWYuY2lyY2xlU3BhY2luZztcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIHdpZHRoOiBjaXJjbGVTaXplLFxuICAgICAgICBoZWlnaHQ6IGNpcmNsZVNpemUsXG4gICAgICAgIG1hcmdpblJpZ2h0OiBjaXJjbGVTcGFjaW5nLFxuICAgICAgICBtYXJnaW5Cb3R0b206IGNpcmNsZVNwYWNpbmcsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJzEwMG1zIHRyYW5zZm9ybSBlYXNlJ1xuICAgICAgfSxcbiAgICAgIFN3YXRjaDoge1xuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAnICsgKGNpcmNsZVNpemUgLyAyICsgMSkgKyAncHggJyArIGNvbG9yLFxuICAgICAgICB0cmFuc2l0aW9uOiAnMTAwbXMgYm94LXNoYWRvdyBlYXNlJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2hvdmVyJzoge1xuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEuMiknXG4gICAgICB9XG4gICAgfSxcbiAgICAnYWN0aXZlJzoge1xuICAgICAgU3dhdGNoOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDNweCAnICsgY29sb3JcbiAgICAgIH1cbiAgICB9XG4gIH0sIHsgaG92ZXI6IGhvdmVyLCBhY3RpdmU6IGFjdGl2ZSB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLnN3YXRjaCB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uU3dhdGNoLCB7XG4gICAgICBzdHlsZTogc3R5bGVzLlN3YXRjaCxcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgZm9jdXNTdHlsZTogeyBib3hTaGFkb3c6IHN0eWxlcy5Td2F0Y2guYm94U2hhZG93ICsgJywgMCAwIDVweCAnICsgY29sb3IgfVxuICAgIH0pXG4gICk7XG59O1xuXG5DaXJjbGVTd2F0Y2guZGVmYXVsdFByb3BzID0ge1xuICBjaXJjbGVTaXplOiAyOCxcbiAgY2lyY2xlU3BhY2luZzogMTRcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfcmVhY3Rjc3MuaGFuZGxlSG92ZXIpKENpcmNsZVN3YXRjaCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5BbHBoYSA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfYWxwaGEgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2FscGhhJyk7XG5cbnZhciBhbHBoYSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9hbHBoYSk7XG5cbnZhciBfQ2hlY2tib2FyZCA9IHJlcXVpcmUoJy4vQ2hlY2tib2FyZCcpO1xuXG52YXIgX0NoZWNrYm9hcmQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2hlY2tib2FyZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEFscGhhID0gZXhwb3J0cy5BbHBoYSA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIF9pbmhlcml0cyhBbHBoYSwgX3JlZik7XG5cbiAgZnVuY3Rpb24gQWxwaGEoKSB7XG4gICAgdmFyIF9yZWYyO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbHBoYSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmMiA9IEFscGhhLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQWxwaGEpKS5jYWxsLmFwcGx5KF9yZWYyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBjaGFuZ2UgPSBhbHBoYS5jYWxjdWxhdGVDaGFuZ2UoZSwgX3RoaXMucHJvcHMuaHNsLCBfdGhpcy5wcm9wcy5kaXJlY3Rpb24sIF90aGlzLnByb3BzLmEsIF90aGlzLmNvbnRhaW5lcik7XG4gICAgICBjaGFuZ2UgJiYgdHlwZW9mIF90aGlzLnByb3BzLm9uQ2hhbmdlID09PSAnZnVuY3Rpb24nICYmIF90aGlzLnByb3BzLm9uQ2hhbmdlKGNoYW5nZSwgZSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIF90aGlzLmhhbmRsZUNoYW5nZShlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBfdGhpcy5oYW5kbGVDaGFuZ2UpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9LCBfdGhpcy51bmJpbmRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBfdGhpcy5oYW5kbGVDaGFuZ2UpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBfdGhpcy5oYW5kbGVNb3VzZVVwKTtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBbHBoYSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgcmdiID0gdGhpcy5wcm9wcy5yZ2I7XG4gICAgICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICAgICAnZGVmYXVsdCc6IHtcbiAgICAgICAgICBhbHBoYToge1xuICAgICAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiB0aGlzLnByb3BzLnJhZGl1c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hlY2tib2FyZDoge1xuICAgICAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiB0aGlzLnByb3BzLnJhZGl1c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZ3JhZGllbnQ6IHtcbiAgICAgICAgICAgIGFic29sdXRlOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICdsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsIHJnYmEoJyArIHJnYi5yICsgJywnICsgcmdiLmcgKyAnLCcgKyByZ2IuYiArICcsIDApIDAlLFxcbiAgICAgICAgICAgcmdiYSgnICsgcmdiLnIgKyAnLCcgKyByZ2IuZyArICcsJyArIHJnYi5iICsgJywgMSkgMTAwJSknLFxuICAgICAgICAgICAgYm94U2hhZG93OiB0aGlzLnByb3BzLnNoYWRvdyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogdGhpcy5wcm9wcy5yYWRpdXNcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbnRhaW5lcjoge1xuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIG1hcmdpbjogJzAgM3B4J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcG9pbnRlcjoge1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBsZWZ0OiByZ2IuYSAqIDEwMCArICclJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2xpZGVyOiB7XG4gICAgICAgICAgICB3aWR0aDogJzRweCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICcxcHgnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnOHB4JyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzAgMCAycHggcmdiYSgwLCAwLCAwLCAuNiknLFxuICAgICAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAnMXB4JyxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTJweCknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndmVydGljYWwnOiB7XG4gICAgICAgICAgZ3JhZGllbnQ6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICdsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCByZ2JhKCcgKyByZ2IuciArICcsJyArIHJnYi5nICsgJywnICsgcmdiLmIgKyAnLCAwKSAwJSxcXG4gICAgICAgICAgIHJnYmEoJyArIHJnYi5yICsgJywnICsgcmdiLmcgKyAnLCcgKyByZ2IuYiArICcsIDEpIDEwMCUpJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcG9pbnRlcjoge1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHRvcDogcmdiLmEgKiAxMDAgKyAnJSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdvdmVyd3JpdGUnOiBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcy5zdHlsZSlcbiAgICAgIH0sIHtcbiAgICAgICAgdmVydGljYWw6IHRoaXMucHJvcHMuZGlyZWN0aW9uID09PSAndmVydGljYWwnLFxuICAgICAgICBvdmVyd3JpdGU6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuYWxwaGEgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNoZWNrYm9hcmQgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ2hlY2tib2FyZDIuZGVmYXVsdCwgeyByZW5kZXJlcnM6IHRoaXMucHJvcHMucmVuZGVyZXJzIH0pXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuZ3JhZGllbnQgfSksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuY29udGFpbmVyLFxuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcbiAgICAgICAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMucG9pbnRlciB9LFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5wb2ludGVyID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5wb2ludGVyLCB0aGlzLnByb3BzKSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuc2xpZGVyIH0pXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBbHBoYTtcbn0oX3JlYWN0LlB1cmVDb21wb25lbnQgfHwgX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEFscGhhOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ2hlY2tib2FyZCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfY2hlY2tib2FyZCA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvY2hlY2tib2FyZCcpO1xuXG52YXIgY2hlY2tib2FyZCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jaGVja2JvYXJkKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIENoZWNrYm9hcmQgPSBleHBvcnRzLkNoZWNrYm9hcmQgPSBmdW5jdGlvbiBDaGVja2JvYXJkKF9yZWYpIHtcbiAgdmFyIHdoaXRlID0gX3JlZi53aGl0ZSxcbiAgICAgIGdyZXkgPSBfcmVmLmdyZXksXG4gICAgICBzaXplID0gX3JlZi5zaXplLFxuICAgICAgcmVuZGVyZXJzID0gX3JlZi5yZW5kZXJlcnMsXG4gICAgICBib3JkZXJSYWRpdXMgPSBfcmVmLmJvcmRlclJhZGl1cyxcbiAgICAgIGJveFNoYWRvdyA9IF9yZWYuYm94U2hhZG93LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBncmlkOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBib3hTaGFkb3c6IGJveFNoYWRvdyxcbiAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAndXJsKCcgKyBjaGVja2JvYXJkLmdldCh3aGl0ZSwgZ3JleSwgc2l6ZSwgcmVuZGVyZXJzLmNhbnZhcykgKyAnKSBjZW50ZXIgbGVmdCdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGRyZW4pID8gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe30sIGNoaWxkcmVuLnByb3BzLCB7IHN0eWxlOiBfZXh0ZW5kcyh7fSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUsIHN0eWxlcy5ncmlkKSB9KSkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmdyaWQgfSk7XG59O1xuXG5DaGVja2JvYXJkLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2l6ZTogOCxcbiAgd2hpdGU6ICd0cmFuc3BhcmVudCcsXG4gIGdyZXk6ICdyZ2JhKDAsMCwwLC4wOCknLFxuICByZW5kZXJlcnM6IHt9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDaGVja2JvYXJkOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ29sb3JXcmFwID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfZGVib3VuY2UgPSByZXF1aXJlKCdsb2Rhc2gvZGVib3VuY2UnKTtcblxudmFyIF9kZWJvdW5jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWJvdW5jZSk7XG5cbnZhciBfY29sb3IgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2NvbG9yJyk7XG5cbnZhciBjb2xvciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jb2xvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIENvbG9yV3JhcCA9IGV4cG9ydHMuQ29sb3JXcmFwID0gZnVuY3Rpb24gQ29sb3JXcmFwKFBpY2tlcikge1xuICB2YXIgQ29sb3JQaWNrZXIgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgIF9pbmhlcml0cyhDb2xvclBpY2tlciwgX3JlZik7XG5cbiAgICBmdW5jdGlvbiBDb2xvclBpY2tlcihwcm9wcykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbG9yUGlja2VyKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENvbG9yUGlja2VyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sb3JQaWNrZXIpKS5jYWxsKHRoaXMpKTtcblxuICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIHZhciBpc1ZhbGlkQ29sb3IgPSBjb2xvci5zaW1wbGVDaGVja0ZvclZhbGlkQ29sb3IoZGF0YSk7XG4gICAgICAgIGlmIChpc1ZhbGlkQ29sb3IpIHtcbiAgICAgICAgICB2YXIgY29sb3JzID0gY29sb3IudG9TdGF0ZShkYXRhLCBkYXRhLmggfHwgX3RoaXMuc3RhdGUub2xkSHVlKTtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShjb2xvcnMpO1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlQ29tcGxldGUgJiYgX3RoaXMuZGVib3VuY2UoX3RoaXMucHJvcHMub25DaGFuZ2VDb21wbGV0ZSwgY29sb3JzLCBldmVudCk7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25DaGFuZ2UgJiYgX3RoaXMucHJvcHMub25DaGFuZ2UoY29sb3JzLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLmhhbmRsZVN3YXRjaEhvdmVyID0gZnVuY3Rpb24gKGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIHZhciBpc1ZhbGlkQ29sb3IgPSBjb2xvci5zaW1wbGVDaGVja0ZvclZhbGlkQ29sb3IoZGF0YSk7XG4gICAgICAgIGlmIChpc1ZhbGlkQ29sb3IpIHtcbiAgICAgICAgICB2YXIgY29sb3JzID0gY29sb3IudG9TdGF0ZShkYXRhLCBkYXRhLmggfHwgX3RoaXMuc3RhdGUub2xkSHVlKTtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vblN3YXRjaEhvdmVyICYmIF90aGlzLnByb3BzLm9uU3dhdGNoSG92ZXIoY29sb3JzLCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLnN0YXRlID0gX2V4dGVuZHMoe30sIGNvbG9yLnRvU3RhdGUocHJvcHMuY29sb3IsIDApKTtcblxuICAgICAgX3RoaXMuZGVib3VuY2UgPSAoMCwgX2RlYm91bmNlMi5kZWZhdWx0KShmdW5jdGlvbiAoZm4sIGRhdGEsIGV2ZW50KSB7XG4gICAgICAgIGZuKGRhdGEsIGV2ZW50KTtcbiAgICAgIH0sIDEwMCk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENvbG9yUGlja2VyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBvcHRpb25hbEV2ZW50cyA9IHt9O1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vblN3YXRjaEhvdmVyKSB7XG4gICAgICAgICAgb3B0aW9uYWxFdmVudHMub25Td2F0Y2hIb3ZlciA9IHRoaXMuaGFuZGxlU3dhdGNoSG92ZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUGlja2VyLCBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSwge1xuICAgICAgICAgIG9uQ2hhbmdlOiB0aGlzLmhhbmRsZUNoYW5nZVxuICAgICAgICB9LCBvcHRpb25hbEV2ZW50cykpO1xuICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAga2V5OiAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBzdGF0ZSkge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbG9yLnRvU3RhdGUobmV4dFByb3BzLmNvbG9yLCBzdGF0ZS5vbGRIdWUpKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29sb3JQaWNrZXI7XG4gIH0oX3JlYWN0LlB1cmVDb21wb25lbnQgfHwgX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgQ29sb3JQaWNrZXIucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIFBpY2tlci5wcm9wVHlwZXMpO1xuXG4gIENvbG9yUGlja2VyLmRlZmF1bHRQcm9wcyA9IF9leHRlbmRzKHt9LCBQaWNrZXIuZGVmYXVsdFByb3BzLCB7XG4gICAgY29sb3I6IHtcbiAgICAgIGg6IDI1MCxcbiAgICAgIHM6IDAuNTAsXG4gICAgICBsOiAwLjIwLFxuICAgICAgYTogMVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIENvbG9yUGlja2VyO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29sb3JXcmFwOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRWRpdGFibGVJbnB1dCA9IHVuZGVmaW5lZDtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIERFRkFVTFRfQVJST1dfT0ZGU0VUID0gMTtcblxudmFyIFVQX0tFWV9DT0RFID0gMzg7XG52YXIgRE9XTl9LRVlfQ09ERSA9IDQwO1xudmFyIFZBTElEX0tFWV9DT0RFUyA9IFtVUF9LRVlfQ09ERSwgRE9XTl9LRVlfQ09ERV07XG52YXIgaXNWYWxpZEtleUNvZGUgPSBmdW5jdGlvbiBpc1ZhbGlkS2V5Q29kZShrZXlDb2RlKSB7XG4gIHJldHVybiBWQUxJRF9LRVlfQ09ERVMuaW5kZXhPZihrZXlDb2RlKSA+IC0xO1xufTtcbnZhciBnZXROdW1iZXJWYWx1ZSA9IGZ1bmN0aW9uIGdldE51bWJlclZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiBOdW1iZXIoU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC8lL2csICcnKSk7XG59O1xuXG52YXIgaWRDb3VudGVyID0gMTtcblxudmFyIEVkaXRhYmxlSW5wdXQgPSBleHBvcnRzLkVkaXRhYmxlSW5wdXQgPSBmdW5jdGlvbiAoX3JlZikge1xuICBfaW5oZXJpdHMoRWRpdGFibGVJbnB1dCwgX3JlZik7XG5cbiAgZnVuY3Rpb24gRWRpdGFibGVJbnB1dChwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFZGl0YWJsZUlucHV0KTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChFZGl0YWJsZUlucHV0Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoRWRpdGFibGVJbnB1dCkpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5ibHVyVmFsdWUpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyB2YWx1ZTogX3RoaXMuc3RhdGUuYmx1clZhbHVlLCBibHVyVmFsdWU6IG51bGwgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5zZXRVcGRhdGVkVmFsdWUoZS50YXJnZXQudmFsdWUsIGUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIC8vIEluIGNhc2UgYGUudGFyZ2V0LnZhbHVlYCBpcyBhIHBlcmNlbnRhZ2UgcmVtb3ZlIHRoZSBgJWAgY2hhcmFjdGVyXG4gICAgICAvLyBhbmQgdXBkYXRlIGFjY29yZGluZ2x5IHdpdGggYSBwZXJjZW50YWdlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2FzZXNhbmRiZXJnL3JlYWN0LWNvbG9yL2lzc3Vlcy8zODNcbiAgICAgIHZhciB2YWx1ZSA9IGdldE51bWJlclZhbHVlKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgIGlmICghaXNOYU4odmFsdWUpICYmIGlzVmFsaWRLZXlDb2RlKGUua2V5Q29kZSkpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IF90aGlzLmdldEFycm93T2Zmc2V0KCk7XG4gICAgICAgIHZhciB1cGRhdGVkVmFsdWUgPSBlLmtleUNvZGUgPT09IFVQX0tFWV9DT0RFID8gdmFsdWUgKyBvZmZzZXQgOiB2YWx1ZSAtIG9mZnNldDtcblxuICAgICAgICBfdGhpcy5zZXRVcGRhdGVkVmFsdWUodXBkYXRlZFZhbHVlLCBlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRHJhZyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZHJhZ0xhYmVsKSB7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IE1hdGgucm91bmQoX3RoaXMucHJvcHMudmFsdWUgKyBlLm1vdmVtZW50WCk7XG4gICAgICAgIGlmIChuZXdWYWx1ZSA+PSAwICYmIG5ld1ZhbHVlIDw9IF90aGlzLnByb3BzLmRyYWdNYXgpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZSAmJiBfdGhpcy5wcm9wcy5vbkNoYW5nZShfdGhpcy5nZXRWYWx1ZU9iamVjdFdpdGhMYWJlbChuZXdWYWx1ZSksIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlRG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMuZHJhZ0xhYmVsKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXMuaGFuZGxlRHJhZyhlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzLmhhbmRsZURyYWcpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgX3RoaXMuaGFuZGxlRHJhZyk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZhbHVlOiBTdHJpbmcocHJvcHMudmFsdWUpLnRvVXBwZXJDYXNlKCksXG4gICAgICBibHVyVmFsdWU6IFN0cmluZyhwcm9wcy52YWx1ZSkudG9VcHBlckNhc2UoKVxuICAgIH07XG5cbiAgICBfdGhpcy5pbnB1dElkID0gJ3JjLWVkaXRhYmxlLWlucHV0LScgKyBpZENvdW50ZXIrKztcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRWRpdGFibGVJbnB1dCwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSB0aGlzLnN0YXRlLnZhbHVlICYmIChwcmV2UHJvcHMudmFsdWUgIT09IHRoaXMucHJvcHMudmFsdWUgfHwgcHJldlN0YXRlLnZhbHVlICE9PSB0aGlzLnN0YXRlLnZhbHVlKSkge1xuICAgICAgICBpZiAodGhpcy5pbnB1dCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBibHVyVmFsdWU6IFN0cmluZyh0aGlzLnByb3BzLnZhbHVlKS50b1VwcGVyQ2FzZSgpIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogU3RyaW5nKHRoaXMucHJvcHMudmFsdWUpLnRvVXBwZXJDYXNlKCksIGJsdXJWYWx1ZTogIXRoaXMuc3RhdGUuYmx1clZhbHVlICYmIFN0cmluZyh0aGlzLnByb3BzLnZhbHVlKS50b1VwcGVyQ2FzZSgpIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRWYWx1ZU9iamVjdFdpdGhMYWJlbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlT2JqZWN0V2l0aExhYmVsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCB0aGlzLnByb3BzLmxhYmVsLCB2YWx1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0QXJyb3dPZmZzZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBcnJvd09mZnNldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmFycm93T2Zmc2V0IHx8IERFRkFVTFRfQVJST1dfT0ZGU0VUO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFVwZGF0ZWRWYWx1ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFVwZGF0ZWRWYWx1ZSh2YWx1ZSwgZSkge1xuICAgICAgdmFyIG9uQ2hhbmdlVmFsdWUgPSB0aGlzLnByb3BzLmxhYmVsID8gdGhpcy5nZXRWYWx1ZU9iamVjdFdpdGhMYWJlbCh2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiYgdGhpcy5wcm9wcy5vbkNoYW5nZShvbkNoYW5nZVZhbHVlLCBlKTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHZhbHVlOiB2YWx1ZSB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAgICAgJ2RlZmF1bHQnOiB7XG4gICAgICAgICAgd3JhcDoge1xuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICd1c2VyLW92ZXJyaWRlJzoge1xuICAgICAgICAgIHdyYXA6IHRoaXMucHJvcHMuc3R5bGUgJiYgdGhpcy5wcm9wcy5zdHlsZS53cmFwID8gdGhpcy5wcm9wcy5zdHlsZS53cmFwIDoge30sXG4gICAgICAgICAgaW5wdXQ6IHRoaXMucHJvcHMuc3R5bGUgJiYgdGhpcy5wcm9wcy5zdHlsZS5pbnB1dCA/IHRoaXMucHJvcHMuc3R5bGUuaW5wdXQgOiB7fSxcbiAgICAgICAgICBsYWJlbDogdGhpcy5wcm9wcy5zdHlsZSAmJiB0aGlzLnByb3BzLnN0eWxlLmxhYmVsID8gdGhpcy5wcm9wcy5zdHlsZS5sYWJlbCA6IHt9XG4gICAgICAgIH0sXG4gICAgICAgICdkcmFnTGFiZWwtdHJ1ZSc6IHtcbiAgICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgY3Vyc29yOiAnZXctcmVzaXplJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICAndXNlci1vdmVycmlkZSc6IHRydWVcbiAgICAgIH0sIHRoaXMucHJvcHMpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMud3JhcCB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7XG4gICAgICAgICAgaWQ6IHRoaXMuaW5wdXRJZCxcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLmlucHV0LFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLmlucHV0ID0gaW5wdXQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IHRoaXMucHJvcHMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgc3BlbGxDaGVjazogJ2ZhbHNlJ1xuICAgICAgICB9KSxcbiAgICAgICAgdGhpcy5wcm9wcy5sYWJlbCAmJiAhdGhpcy5wcm9wcy5oaWRlTGFiZWwgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGh0bWxGb3I6IHRoaXMuaW5wdXRJZCxcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMubGFiZWwsXG4gICAgICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd25cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRoaXMucHJvcHMubGFiZWxcbiAgICAgICAgKSA6IG51bGxcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEVkaXRhYmxlSW5wdXQ7XG59KF9yZWFjdC5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBFZGl0YWJsZUlucHV0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuSHVlID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9odWUgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2h1ZScpO1xuXG52YXIgaHVlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2h1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEh1ZSA9IGV4cG9ydHMuSHVlID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgX2luaGVyaXRzKEh1ZSwgX3JlZik7XG5cbiAgZnVuY3Rpb24gSHVlKCkge1xuICAgIHZhciBfcmVmMjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSHVlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYyID0gSHVlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoSHVlKSkuY2FsbC5hcHBseShfcmVmMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY2hhbmdlID0gaHVlLmNhbGN1bGF0ZUNoYW5nZShlLCBfdGhpcy5wcm9wcy5kaXJlY3Rpb24sIF90aGlzLnByb3BzLmhzbCwgX3RoaXMuY29udGFpbmVyKTtcbiAgICAgIGNoYW5nZSAmJiB0eXBlb2YgX3RoaXMucHJvcHMub25DaGFuZ2UgPT09ICdmdW5jdGlvbicgJiYgX3RoaXMucHJvcHMub25DaGFuZ2UoY2hhbmdlLCBlKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlKGUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzLmhhbmRsZUNoYW5nZSk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEh1ZSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy51bmJpbmRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VuYmluZEV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5iaW5kRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVDaGFuZ2UpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzJGRpcmVjdGlvbiA9IHRoaXMucHJvcHMuZGlyZWN0aW9uLFxuICAgICAgICAgIGRpcmVjdGlvbiA9IF9wcm9wcyRkaXJlY3Rpb24gPT09IHVuZGVmaW5lZCA/ICdob3Jpem9udGFsJyA6IF9wcm9wcyRkaXJlY3Rpb247XG5cblxuICAgICAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAgICAgJ2RlZmF1bHQnOiB7XG4gICAgICAgICAgaHVlOiB7XG4gICAgICAgICAgICBhYnNvbHV0ZTogJzBweCAwcHggMHB4IDBweCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IHRoaXMucHJvcHMucmFkaXVzLFxuICAgICAgICAgICAgYm94U2hhZG93OiB0aGlzLnByb3BzLnNoYWRvd1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29udGFpbmVyOiB7XG4gICAgICAgICAgICBwYWRkaW5nOiAnMCAycHgnLFxuICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogdGhpcy5wcm9wcy5yYWRpdXNcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBvaW50ZXI6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgbGVmdDogdGhpcy5wcm9wcy5oc2wuaCAqIDEwMCAvIDM2MCArICclJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2xpZGVyOiB7XG4gICAgICAgICAgICBtYXJnaW5Ub3A6ICcxcHgnLFxuICAgICAgICAgICAgd2lkdGg6ICc0cHgnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnMXB4JyxcbiAgICAgICAgICAgIGhlaWdodDogJzhweCcsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICcwIDAgMnB4IHJnYmEoMCwgMCwgMCwgLjYpJyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTJweCknXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndmVydGljYWwnOiB7XG4gICAgICAgICAgcG9pbnRlcjoge1xuICAgICAgICAgICAgbGVmdDogJzBweCcsXG4gICAgICAgICAgICB0b3A6IC0odGhpcy5wcm9wcy5oc2wuaCAqIDEwMCAvIDM2MCkgKyAxMDAgKyAnJSdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIHsgdmVydGljYWw6IGRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJyB9KTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmh1ZSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICdodWUtJyArIGRpcmVjdGlvbixcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuY29udGFpbmVyLFxuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoY29udGFpbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcbiAgICAgICAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ3N0eWxlJyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAnXFxuICAgICAgICAgICAgLmh1ZS1ob3Jpem9udGFsIHtcXG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2YwMCAwJSwgI2ZmMCAxNyUsICMwZjBcXG4gICAgICAgICAgICAgICAgMzMlLCAjMGZmIDUwJSwgIzAwZiA2NyUsICNmMGYgODMlLCAjZjAwIDEwMCUpO1xcbiAgICAgICAgICAgICAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmMDAgMCUsICNmZjBcXG4gICAgICAgICAgICAgICAgMTclLCAjMGYwIDMzJSwgIzBmZiA1MCUsICMwMGYgNjclLCAjZjBmIDgzJSwgI2YwMCAxMDAlKTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgLmh1ZS12ZXJ0aWNhbCB7XFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gdG9wLCAjZjAwIDAlLCAjZmYwIDE3JSwgIzBmMCAzMyUsXFxuICAgICAgICAgICAgICAgICMwZmYgNTAlLCAjMDBmIDY3JSwgI2YwZiA4MyUsICNmMDAgMTAwJSk7XFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0byB0b3AsICNmMDAgMCUsICNmZjAgMTclLFxcbiAgICAgICAgICAgICAgICAjMGYwIDMzJSwgIzBmZiA1MCUsICMwMGYgNjclLCAjZjBmIDgzJSwgI2YwMCAxMDAlKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICdcbiAgICAgICAgICApLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMucG9pbnRlciB9LFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5wb2ludGVyID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGhpcy5wcm9wcy5wb2ludGVyLCB0aGlzLnByb3BzKSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuc2xpZGVyIH0pXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBIdWU7XG59KF9yZWFjdC5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBIdWU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5SYWlzZWQgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tZXJnZSA9IHJlcXVpcmUoJ2xvZGFzaC9tZXJnZScpO1xuXG52YXIgX21lcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lcmdlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFJhaXNlZCA9IGV4cG9ydHMuUmFpc2VkID0gZnVuY3Rpb24gUmFpc2VkKF9yZWYpIHtcbiAgdmFyIHpEZXB0aCA9IF9yZWYuekRlcHRoLFxuICAgICAgcmFkaXVzID0gX3JlZi5yYWRpdXMsXG4gICAgICBiYWNrZ3JvdW5kID0gX3JlZi5iYWNrZ3JvdW5kLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgX3JlZiRzdHlsZXMgPSBfcmVmLnN0eWxlcyxcbiAgICAgIHBhc3NlZFN0eWxlcyA9IF9yZWYkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkc3R5bGVzO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSgoMCwgX21lcmdlMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICB3cmFwOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgICAgfSxcbiAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBiZzoge1xuICAgICAgICBhYnNvbHV0ZTogJzBweCAwcHggMHB4IDBweCcsXG4gICAgICAgIGJveFNoYWRvdzogJzAgJyArIHpEZXB0aCArICdweCAnICsgekRlcHRoICogNCArICdweCByZ2JhKDAsMCwwLC4yNCknLFxuICAgICAgICBib3JkZXJSYWRpdXM6IHJhZGl1cyxcbiAgICAgICAgYmFja2dyb3VuZDogYmFja2dyb3VuZFxuICAgICAgfVxuICAgIH0sXG4gICAgJ3pEZXB0aC0wJzoge1xuICAgICAgYmc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgJ3pEZXB0aC0xJzoge1xuICAgICAgYmc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnMCAycHggMTBweCByZ2JhKDAsMCwwLC4xMiksIDAgMnB4IDVweCByZ2JhKDAsMCwwLC4xNiknXG4gICAgICB9XG4gICAgfSxcbiAgICAnekRlcHRoLTInOiB7XG4gICAgICBiZzoge1xuICAgICAgICBib3hTaGFkb3c6ICcwIDZweCAyMHB4IHJnYmEoMCwwLDAsLjE5KSwgMCA4cHggMTdweCByZ2JhKDAsMCwwLC4yKSdcbiAgICAgIH1cbiAgICB9LFxuICAgICd6RGVwdGgtMyc6IHtcbiAgICAgIGJnOiB7XG4gICAgICAgIGJveFNoYWRvdzogJzAgMTdweCA1MHB4IHJnYmEoMCwwLDAsLjE5KSwgMCAxMnB4IDE1cHggcmdiYSgwLDAsMCwuMjQpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3pEZXB0aC00Jzoge1xuICAgICAgYmc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnMCAyNXB4IDU1cHggcmdiYSgwLDAsMCwuMjEpLCAwIDE2cHggMjhweCByZ2JhKDAsMCwwLC4yMiknXG4gICAgICB9XG4gICAgfSxcbiAgICAnekRlcHRoLTUnOiB7XG4gICAgICBiZzoge1xuICAgICAgICBib3hTaGFkb3c6ICcwIDQwcHggNzdweCByZ2JhKDAsMCwwLC4yMiksIDAgMjdweCAyNHB4IHJnYmEoMCwwLDAsLjIpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3NxdWFyZSc6IHtcbiAgICAgIGJnOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogJzAnXG4gICAgICB9XG4gICAgfSxcbiAgICAnY2lyY2xlJzoge1xuICAgICAgYmc6IHtcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJ1xuICAgICAgfVxuICAgIH1cbiAgfSwgcGFzc2VkU3R5bGVzKSwgeyAnekRlcHRoLTEnOiB6RGVwdGggPT09IDEgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy53cmFwIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5iZyB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbnRlbnQgfSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKVxuICApO1xufTtcblxuUmFpc2VkLnByb3BUeXBlcyA9IHtcbiAgYmFja2dyb3VuZDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHpEZXB0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbMCwgMSwgMiwgMywgNCwgNV0pLFxuICByYWRpdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBzdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59O1xuXG5SYWlzZWQuZGVmYXVsdFByb3BzID0ge1xuICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gIHpEZXB0aDogMSxcbiAgcmFkaXVzOiAyLFxuICBzdHlsZXM6IHt9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBSYWlzZWQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TYXR1cmF0aW9uID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF90aHJvdHRsZSA9IHJlcXVpcmUoJ2xvZGFzaC90aHJvdHRsZScpO1xuXG52YXIgX3Rocm90dGxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Rocm90dGxlKTtcblxudmFyIF9zYXR1cmF0aW9uID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9zYXR1cmF0aW9uJyk7XG5cbnZhciBzYXR1cmF0aW9uID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3NhdHVyYXRpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBTYXR1cmF0aW9uID0gZXhwb3J0cy5TYXR1cmF0aW9uID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgX2luaGVyaXRzKFNhdHVyYXRpb24sIF9yZWYpO1xuXG4gIGZ1bmN0aW9uIFNhdHVyYXRpb24ocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2F0dXJhdGlvbik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2F0dXJhdGlvbi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNhdHVyYXRpb24pKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgdHlwZW9mIF90aGlzLnByb3BzLm9uQ2hhbmdlID09PSAnZnVuY3Rpb24nICYmIF90aGlzLnRocm90dGxlKF90aGlzLnByb3BzLm9uQ2hhbmdlLCBzYXR1cmF0aW9uLmNhbGN1bGF0ZUNoYW5nZShlLCBfdGhpcy5wcm9wcy5oc2wsIF90aGlzLmNvbnRhaW5lciksIGUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlKGUpO1xuICAgICAgdmFyIHJlbmRlcldpbmRvdyA9IF90aGlzLmdldENvbnRhaW5lclJlbmRlcldpbmRvdygpO1xuICAgICAgcmVuZGVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzLmhhbmRsZUNoYW5nZSk7XG4gICAgICByZW5kZXJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMudGhyb3R0bGUgPSAoMCwgX3Rocm90dGxlMi5kZWZhdWx0KShmdW5jdGlvbiAoZm4sIGRhdGEsIGUpIHtcbiAgICAgIGZuKGRhdGEsIGUpO1xuICAgIH0sIDUwKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2F0dXJhdGlvbiwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy50aHJvdHRsZS5jYW5jZWwoKTtcbiAgICAgIHRoaXMudW5iaW5kRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRDb250YWluZXJSZW5kZXJXaW5kb3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb250YWluZXJSZW5kZXJXaW5kb3coKSB7XG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG5cbiAgICAgIHZhciByZW5kZXJXaW5kb3cgPSB3aW5kb3c7XG4gICAgICB3aGlsZSAoIXJlbmRlcldpbmRvdy5kb2N1bWVudC5jb250YWlucyhjb250YWluZXIpICYmIHJlbmRlcldpbmRvdy5wYXJlbnQgIT09IHJlbmRlcldpbmRvdykge1xuICAgICAgICByZW5kZXJXaW5kb3cgPSByZW5kZXJXaW5kb3cucGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlbmRlcldpbmRvdztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1bmJpbmRFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVuYmluZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIHJlbmRlcldpbmRvdyA9IHRoaXMuZ2V0Q29udGFpbmVyUmVuZGVyV2luZG93KCk7XG4gICAgICByZW5kZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVDaGFuZ2UpO1xuICAgICAgcmVuZGVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLnN0eWxlIHx8IHt9LFxuICAgICAgICAgIGNvbG9yID0gX3JlZjIuY29sb3IsXG4gICAgICAgICAgd2hpdGUgPSBfcmVmMi53aGl0ZSxcbiAgICAgICAgICBibGFjayA9IF9yZWYyLmJsYWNrLFxuICAgICAgICAgIHBvaW50ZXIgPSBfcmVmMi5wb2ludGVyLFxuICAgICAgICAgIGNpcmNsZSA9IF9yZWYyLmNpcmNsZTtcblxuICAgICAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAgICAgJ2RlZmF1bHQnOiB7XG4gICAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICAgIGFic29sdXRlOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICdoc2woJyArIHRoaXMucHJvcHMuaHNsLmggKyAnLDEwMCUsIDUwJSknLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiB0aGlzLnByb3BzLnJhZGl1c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgd2hpdGU6IHtcbiAgICAgICAgICAgIGFic29sdXRlOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogdGhpcy5wcm9wcy5yYWRpdXNcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJsYWNrOiB7XG4gICAgICAgICAgICBhYnNvbHV0ZTogJzBweCAwcHggMHB4IDBweCcsXG4gICAgICAgICAgICBib3hTaGFkb3c6IHRoaXMucHJvcHMuc2hhZG93LFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiB0aGlzLnByb3BzLnJhZGl1c1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcG9pbnRlcjoge1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6IC0odGhpcy5wcm9wcy5oc3YudiAqIDEwMCkgKyAxMDAgKyAnJScsXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLnByb3BzLmhzdi5zICogMTAwICsgJyUnLFxuICAgICAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNpcmNsZToge1xuICAgICAgICAgICAgd2lkdGg6ICc0cHgnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnNHB4JyxcbiAgICAgICAgICAgIGJveFNoYWRvdzogJzAgMCAwIDEuNXB4ICNmZmYsIGluc2V0IDAgMCAxcHggMXB4IHJnYmEoMCwwLDAsLjMpLFxcbiAgICAgICAgICAgIDAgMCAxcHggMnB4IHJnYmEoMCwwLDAsLjQpJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgICAgICBjdXJzb3I6ICdoYW5kJyxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtMnB4LCAtMnB4KSdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdjdXN0b20nOiB7XG4gICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgIHdoaXRlOiB3aGl0ZSxcbiAgICAgICAgICBibGFjazogYmxhY2ssXG4gICAgICAgICAgcG9pbnRlcjogcG9pbnRlcixcbiAgICAgICAgICBjaXJjbGU6IGNpcmNsZVxuICAgICAgICB9XG4gICAgICB9LCB7ICdjdXN0b20nOiAhIXRoaXMucHJvcHMuc3R5bGUgfSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLmNvbG9yLFxuICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGNvbnRhaW5lcikge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvbk1vdXNlRG93bjogdGhpcy5oYW5kbGVNb3VzZURvd24sXG4gICAgICAgICAgb25Ub3VjaE1vdmU6IHRoaXMuaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVDaGFuZ2VcbiAgICAgICAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3N0eWxlJyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgICdcXG4gICAgICAgICAgLnNhdHVyYXRpb24td2hpdGUge1xcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IC13ZWJraXQtbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjZmZmLCByZ2JhKDI1NSwyNTUsMjU1LDApKTtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZmYsIHJnYmEoMjU1LDI1NSwyNTUsMCkpO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIC5zYXR1cmF0aW9uLWJsYWNrIHtcXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0byB0b3AsICMwMDAsIHJnYmEoMCwwLDAsMCkpO1xcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byB0b3AsICMwMDAsIHJnYmEoMCwwLDAsMCkpO1xcbiAgICAgICAgICB9XFxuICAgICAgICAnXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy53aGl0ZSwgY2xhc3NOYW1lOiAnc2F0dXJhdGlvbi13aGl0ZScgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmJsYWNrLCBjbGFzc05hbWU6ICdzYXR1cmF0aW9uLWJsYWNrJyB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnBvaW50ZXIgfSxcbiAgICAgICAgICAgIHRoaXMucHJvcHMucG9pbnRlciA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMucG9pbnRlciwgdGhpcy5wcm9wcykgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmNpcmNsZSB9KVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2F0dXJhdGlvbjtcbn0oX3JlYWN0LlB1cmVDb21wb25lbnQgfHwgX3JlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNhdHVyYXRpb247IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Td2F0Y2ggPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2ludGVyYWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9pbnRlcmFjdGlvbicpO1xuXG52YXIgX0NoZWNrYm9hcmQgPSByZXF1aXJlKCcuL0NoZWNrYm9hcmQnKTtcblxudmFyIF9DaGVja2JvYXJkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NoZWNrYm9hcmQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgRU5URVIgPSAxMztcblxudmFyIFN3YXRjaCA9IGV4cG9ydHMuU3dhdGNoID0gZnVuY3Rpb24gU3dhdGNoKF9yZWYpIHtcbiAgdmFyIGNvbG9yID0gX3JlZi5jb2xvcixcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIF9yZWYkb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIG9uQ2xpY2sgPSBfcmVmJG9uQ2xpY2sgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uICgpIHt9IDogX3JlZiRvbkNsaWNrLFxuICAgICAgb25Ib3ZlciA9IF9yZWYub25Ib3ZlcixcbiAgICAgIF9yZWYkdGl0bGUgPSBfcmVmLnRpdGxlLFxuICAgICAgdGl0bGUgPSBfcmVmJHRpdGxlID09PSB1bmRlZmluZWQgPyBjb2xvciA6IF9yZWYkdGl0bGUsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBmb2N1cyA9IF9yZWYuZm9jdXMsXG4gICAgICBfcmVmJGZvY3VzU3R5bGUgPSBfcmVmLmZvY3VzU3R5bGUsXG4gICAgICBmb2N1c1N0eWxlID0gX3JlZiRmb2N1c1N0eWxlID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkZm9jdXNTdHlsZTtcblxuICB2YXIgdHJhbnNwYXJlbnQgPSBjb2xvciA9PT0gJ3RyYW5zcGFyZW50JztcbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICBkZWZhdWx0OiB7XG4gICAgICBzd2F0Y2g6IF9leHRlbmRzKHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG91dGxpbmU6ICdub25lJ1xuICAgICAgfSwgc3R5bGUsIGZvY3VzID8gZm9jdXNTdHlsZSA6IHt9KVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZSkge1xuICAgIHJldHVybiBvbkNsaWNrKGNvbG9yLCBlKTtcbiAgfTtcbiAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpIHtcbiAgICByZXR1cm4gZS5rZXlDb2RlID09PSBFTlRFUiAmJiBvbkNsaWNrKGNvbG9yLCBlKTtcbiAgfTtcbiAgdmFyIGhhbmRsZUhvdmVyID0gZnVuY3Rpb24gaGFuZGxlSG92ZXIoZSkge1xuICAgIHJldHVybiBvbkhvdmVyKGNvbG9yLCBlKTtcbiAgfTtcblxuICB2YXIgb3B0aW9uYWxFdmVudHMgPSB7fTtcbiAgaWYgKG9uSG92ZXIpIHtcbiAgICBvcHRpb25hbEV2ZW50cy5vbk1vdXNlT3ZlciA9IGhhbmRsZUhvdmVyO1xuICB9XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIF9leHRlbmRzKHtcbiAgICAgIHN0eWxlOiBzdHlsZXMuc3dhdGNoLFxuICAgICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgICB0aXRsZTogdGl0bGUsXG4gICAgICB0YWJJbmRleDogMCxcbiAgICAgIG9uS2V5RG93bjogaGFuZGxlS2V5RG93blxuICAgIH0sIG9wdGlvbmFsRXZlbnRzKSxcbiAgICBjaGlsZHJlbixcbiAgICB0cmFuc3BhcmVudCAmJiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ2hlY2tib2FyZDIuZGVmYXVsdCwge1xuICAgICAgYm9yZGVyUmFkaXVzOiBzdHlsZXMuc3dhdGNoLmJvcmRlclJhZGl1cyxcbiAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCByZ2JhKDAsMCwwLDAuMSknXG4gICAgfSlcbiAgKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfaW50ZXJhY3Rpb24uaGFuZGxlRm9jdXMpKFN3YXRjaCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX0FscGhhID0gcmVxdWlyZSgnLi9BbHBoYScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0FscGhhJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQWxwaGEpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0NoZWNrYm9hcmQgPSByZXF1aXJlKCcuL0NoZWNrYm9hcmQnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdDaGVja2JvYXJkJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2hlY2tib2FyZCkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfRWRpdGFibGVJbnB1dCA9IHJlcXVpcmUoJy4vRWRpdGFibGVJbnB1dCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0VkaXRhYmxlSW5wdXQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FZGl0YWJsZUlucHV0KS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9IdWUgPSByZXF1aXJlKCcuL0h1ZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0h1ZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0h1ZSkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfUmFpc2VkID0gcmVxdWlyZSgnLi9SYWlzZWQnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdSYWlzZWQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SYWlzZWQpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1NhdHVyYXRpb24gPSByZXF1aXJlKCcuL1NhdHVyYXRpb24nKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTYXR1cmF0aW9uJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2F0dXJhdGlvbikuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ29sb3JXcmFwID0gcmVxdWlyZSgnLi9Db2xvcldyYXAnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdDb2xvcldyYXAnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db2xvcldyYXApLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1N3YXRjaCA9IHJlcXVpcmUoJy4vU3dhdGNoJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU3dhdGNoJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3dhdGNoKS5kZWZhdWx0O1xuICB9XG59KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkNvbXBhY3QgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tYXAgPSByZXF1aXJlKCdsb2Rhc2gvbWFwJyk7XG5cbnZhciBfbWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcCk7XG5cbnZhciBfbWVyZ2UgPSByZXF1aXJlKCdsb2Rhc2gvbWVyZ2UnKTtcblxudmFyIF9tZXJnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZSk7XG5cbnZhciBfY29sb3IgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2NvbG9yJyk7XG5cbnZhciBjb2xvciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jb2xvcik7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbnZhciBfQ29tcGFjdENvbG9yID0gcmVxdWlyZSgnLi9Db21wYWN0Q29sb3InKTtcblxudmFyIF9Db21wYWN0Q29sb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29tcGFjdENvbG9yKTtcblxudmFyIF9Db21wYWN0RmllbGRzID0gcmVxdWlyZSgnLi9Db21wYWN0RmllbGRzJyk7XG5cbnZhciBfQ29tcGFjdEZpZWxkczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db21wYWN0RmllbGRzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIENvbXBhY3QgPSBleHBvcnRzLkNvbXBhY3QgPSBmdW5jdGlvbiBDb21wYWN0KF9yZWYpIHtcbiAgdmFyIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXIsXG4gICAgICBjb2xvcnMgPSBfcmVmLmNvbG9ycyxcbiAgICAgIGhleCA9IF9yZWYuaGV4LFxuICAgICAgcmdiID0gX3JlZi5yZ2IsXG4gICAgICBfcmVmJHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgcGFzc2VkU3R5bGVzID0gX3JlZiRzdHlsZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRzdHlsZXMsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKCgwLCBfbWVyZ2UyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIENvbXBhY3Q6IHtcbiAgICAgICAgYmFja2dyb3VuZDogJyNmNmY2ZjYnLFxuICAgICAgICByYWRpdXM6ICc0cHgnXG4gICAgICB9LFxuICAgICAgY29tcGFjdDoge1xuICAgICAgICBwYWRkaW5nVG9wOiAnNXB4JyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICc1cHgnLFxuICAgICAgICBib3hTaXppbmc6ICdpbml0aWFsJyxcbiAgICAgICAgd2lkdGg6ICcyNDBweCdcbiAgICAgIH0sXG4gICAgICBjbGVhcjoge1xuICAgICAgICBjbGVhcjogJ2JvdGgnXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpKTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGRhdGEsIGUpIHtcbiAgICBpZiAoZGF0YS5oZXgpIHtcbiAgICAgIGNvbG9yLmlzVmFsaWRIZXgoZGF0YS5oZXgpICYmIG9uQ2hhbmdlKHtcbiAgICAgICAgaGV4OiBkYXRhLmhleCxcbiAgICAgICAgc291cmNlOiAnaGV4J1xuICAgICAgfSwgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uQ2hhbmdlKGRhdGEsIGUpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX2NvbW1vbi5SYWlzZWQsXG4gICAgeyBzdHlsZTogc3R5bGVzLkNvbXBhY3QsIHN0eWxlczogcGFzc2VkU3R5bGVzIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb21wYWN0LCBjbGFzc05hbWU6ICdjb21wYWN0LXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIG51bGwsXG4gICAgICAgICgwLCBfbWFwMi5kZWZhdWx0KShjb2xvcnMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Db21wYWN0Q29sb3IyLmRlZmF1bHQsIHtcbiAgICAgICAgICAgIGtleTogYyxcbiAgICAgICAgICAgIGNvbG9yOiBjLFxuICAgICAgICAgICAgYWN0aXZlOiBjLnRvTG93ZXJDYXNlKCkgPT09IGhleCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgICAgIG9uU3dhdGNoSG92ZXI6IG9uU3dhdGNoSG92ZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuY2xlYXIgfSlcbiAgICAgICksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ29tcGFjdEZpZWxkczIuZGVmYXVsdCwgeyBoZXg6IGhleCwgcmdiOiByZ2IsIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UgfSlcbiAgICApXG4gICk7XG59O1xuXG5Db21wYWN0LnByb3BUeXBlcyA9IHtcbiAgY29sb3JzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcpLFxuICBzdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59O1xuXG5Db21wYWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3JzOiBbJyM0RDRENEQnLCAnIzk5OTk5OScsICcjRkZGRkZGJywgJyNGNDRFM0InLCAnI0ZFOTIwMCcsICcjRkNEQzAwJywgJyNEQkRGMDAnLCAnI0E0REQwMCcsICcjNjhDQ0NBJywgJyM3M0Q4RkYnLCAnI0FFQTFGRicsICcjRkRBMUZGJywgJyMzMzMzMzMnLCAnIzgwODA4MCcsICcjY2NjY2NjJywgJyNEMzMxMTUnLCAnI0UyNzMwMCcsICcjRkNDNDAwJywgJyNCMEJDMDAnLCAnIzY4QkMwMCcsICcjMTZBNUE1JywgJyMwMDlDRTAnLCAnIzdCNjRGRicsICcjRkEyOEZGJywgJyMwMDAwMDAnLCAnIzY2NjY2NicsICcjQjNCM0IzJywgJyM5RjA1MDAnLCAnI0M0NTEwMCcsICcjRkI5RTAwJywgJyM4MDg5MDAnLCAnIzE5NEQzMycsICcjMEM3OTdEJywgJyMwMDYyQjEnLCAnIzY1MzI5NCcsICcjQUIxNDlFJ10sXG4gIHN0eWxlczoge31cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY29tbW9uLkNvbG9yV3JhcCkoQ29tcGFjdCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Db21wYWN0Q29sb3IgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NvbG9yID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9jb2xvcicpO1xuXG52YXIgY29sb3JVdGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jb2xvcik7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBDb21wYWN0Q29sb3IgPSBleHBvcnRzLkNvbXBhY3RDb2xvciA9IGZ1bmN0aW9uIENvbXBhY3RDb2xvcihfcmVmKSB7XG4gIHZhciBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBfcmVmJG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvbkNsaWNrID0gX3JlZiRvbkNsaWNrID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25DbGljayxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXIsXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IsXG4gICAgICAgIHdpZHRoOiAnMTVweCcsXG4gICAgICAgIGhlaWdodDogJzE1cHgnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBtYXJnaW5SaWdodDogJzVweCcsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogJzVweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfSxcbiAgICAgIGRvdDoge1xuICAgICAgICBhYnNvbHV0ZTogJzVweCA1cHggNXB4IDVweCcsXG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yVXRpbHMuZ2V0Q29udHJhc3RpbmdDb2xvcihjb2xvciksXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIG9wYWNpdHk6ICcwJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2FjdGl2ZSc6IHtcbiAgICAgIGRvdDoge1xuICAgICAgICBvcGFjaXR5OiAnMSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdjb2xvci0jRkZGRkZGJzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4ICNkZGQnXG4gICAgICB9LFxuICAgICAgZG90OiB7XG4gICAgICAgIGJhY2tncm91bmQ6ICcjMDAwJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3RyYW5zcGFyZW50Jzoge1xuICAgICAgZG90OiB7XG4gICAgICAgIGJhY2tncm91bmQ6ICcjMDAwJ1xuICAgICAgfVxuICAgIH1cbiAgfSwgeyBhY3RpdmU6IGFjdGl2ZSwgJ2NvbG9yLSNGRkZGRkYnOiBjb2xvciA9PT0gJyNGRkZGRkYnLCAndHJhbnNwYXJlbnQnOiBjb2xvciA9PT0gJ3RyYW5zcGFyZW50JyB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX2NvbW1vbi5Td2F0Y2gsXG4gICAge1xuICAgICAgc3R5bGU6IHN0eWxlcy5jb2xvcixcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgZm9jdXNTdHlsZTogeyBib3hTaGFkb3c6ICcwIDAgNHB4ICcgKyBjb2xvciB9XG4gICAgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmRvdCB9KVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29tcGFjdENvbG9yOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQ29tcGFjdEZpZWxkcyA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBDb21wYWN0RmllbGRzID0gZXhwb3J0cy5Db21wYWN0RmllbGRzID0gZnVuY3Rpb24gQ29tcGFjdEZpZWxkcyhfcmVmKSB7XG4gIHZhciBoZXggPSBfcmVmLmhleCxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnNnB4JyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnNXB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBhY3RpdmU6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogJzZweCcsXG4gICAgICAgIGxlZnQ6ICc1cHgnLFxuICAgICAgICBoZWlnaHQ6ICc5cHgnLFxuICAgICAgICB3aWR0aDogJzlweCcsXG4gICAgICAgIGJhY2tncm91bmQ6IGhleFxuICAgICAgfSxcbiAgICAgIEhFWHdyYXA6IHtcbiAgICAgICAgZmxleDogJzYnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIEhFWGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnODAlJyxcbiAgICAgICAgcGFkZGluZzogJzBweCcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnMjAlJyxcbiAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICBjb2xvcjogJyMzMzMnLFxuICAgICAgICBoZWlnaHQ6ICcxNnB4J1xuICAgICAgfSxcbiAgICAgIEhFWGxhYmVsOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIFJHQndyYXA6IHtcbiAgICAgICAgZmxleDogJzMnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIFJHQmlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnNzAlJyxcbiAgICAgICAgcGFkZGluZzogJzBweCcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnMzAlJyxcbiAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICBjb2xvcjogJyMzMzMnLFxuICAgICAgICBoZWlnaHQ6ICcxNnB4J1xuICAgICAgfSxcbiAgICAgIFJHQmxhYmVsOiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICczcHgnLFxuICAgICAgICBsZWZ0OiAnMHB4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzE2cHgnLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgY29sb3I6ICcjOTk5J1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhLCBlKSB7XG4gICAgaWYgKGRhdGEuciB8fCBkYXRhLmcgfHwgZGF0YS5iKSB7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIHI6IGRhdGEuciB8fCByZ2IucixcbiAgICAgICAgZzogZGF0YS5nIHx8IHJnYi5nLFxuICAgICAgICBiOiBkYXRhLmIgfHwgcmdiLmIsXG4gICAgICAgIHNvdXJjZTogJ3JnYidcbiAgICAgIH0sIGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIGhleDogZGF0YS5oZXgsXG4gICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgIH0sIGUpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmZpZWxkcywgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5hY3RpdmUgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuSEVYd3JhcCwgaW5wdXQ6IHN0eWxlcy5IRVhpbnB1dCwgbGFiZWw6IHN0eWxlcy5IRVhsYWJlbCB9LFxuICAgICAgbGFiZWw6ICdoZXgnLFxuICAgICAgdmFsdWU6IGhleCxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICBsYWJlbDogJ3InLFxuICAgICAgdmFsdWU6IHJnYi5yLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLlJHQndyYXAsIGlucHV0OiBzdHlsZXMuUkdCaW5wdXQsIGxhYmVsOiBzdHlsZXMuUkdCbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAnZycsXG4gICAgICB2YWx1ZTogcmdiLmcsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgbGFiZWw6ICdiJyxcbiAgICAgIHZhbHVlOiByZ2IuYixcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICB9KVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29tcGFjdEZpZWxkczsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkdpdGh1YiA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX21hcCA9IHJlcXVpcmUoJ2xvZGFzaC9tYXAnKTtcblxudmFyIF9tYXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWFwKTtcblxudmFyIF9tZXJnZSA9IHJlcXVpcmUoJ2xvZGFzaC9tZXJnZScpO1xuXG52YXIgX21lcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lcmdlKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9HaXRodWJTd2F0Y2ggPSByZXF1aXJlKCcuL0dpdGh1YlN3YXRjaCcpO1xuXG52YXIgX0dpdGh1YlN3YXRjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9HaXRodWJTd2F0Y2gpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgR2l0aHViID0gZXhwb3J0cy5HaXRodWIgPSBmdW5jdGlvbiBHaXRodWIoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgY29sb3JzID0gX3JlZi5jb2xvcnMsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgdHJpYW5nbGUgPSBfcmVmLnRyaWFuZ2xlLFxuICAgICAgX3JlZiRzdHlsZXMgPSBfcmVmLnN0eWxlcyxcbiAgICAgIHBhc3NlZFN0eWxlcyA9IF9yZWYkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkc3R5bGVzLFxuICAgICAgX3JlZiRjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkY2xhc3NOYW1lO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSgoMCwgX21lcmdlMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBjYXJkOiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgcmdiYSgwLDAsMCwwLjIpJyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAzcHggMTJweCByZ2JhKDAsMCwwLDAuMTUpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHBhZGRpbmc6ICc1cHgnLFxuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGZsZXhXcmFwOiAnd3JhcCdcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgYm9yZGVyOiAnN3B4IHNvbGlkIHRyYW5zcGFyZW50JyxcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6ICcjZmZmJ1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlU2hhZG93OiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBib3JkZXI6ICc4cHggc29saWQgdHJhbnNwYXJlbnQnLFxuICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogJ3JnYmEoMCwwLDAsMC4xNSknXG4gICAgICB9XG4gICAgfSxcbiAgICAnaGlkZS10cmlhbmdsZSc6IHtcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlU2hhZG93OiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3RvcC1sZWZ0LXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgdG9wOiAnLTE0cHgnLFxuICAgICAgICBsZWZ0OiAnMTBweCdcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZVNoYWRvdzoge1xuICAgICAgICB0b3A6ICctMTZweCcsXG4gICAgICAgIGxlZnQ6ICc5cHgnXG4gICAgICB9XG4gICAgfSxcbiAgICAndG9wLXJpZ2h0LXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgdG9wOiAnLTE0cHgnLFxuICAgICAgICByaWdodDogJzEwcHgnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgdG9wOiAnLTE2cHgnLFxuICAgICAgICByaWdodDogJzlweCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdib3R0b20tbGVmdC10cmlhbmdsZSc6IHtcbiAgICAgIHRyaWFuZ2xlOiB7XG4gICAgICAgIHRvcDogJzM1cHgnLFxuICAgICAgICBsZWZ0OiAnMTBweCcsXG4gICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlU2hhZG93OiB7XG4gICAgICAgIHRvcDogJzM3cHgnLFxuICAgICAgICBsZWZ0OiAnOXB4JyxcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDE4MGRlZyknXG4gICAgICB9XG4gICAgfSxcbiAgICAnYm90dG9tLXJpZ2h0LXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgdG9wOiAnMzVweCcsXG4gICAgICAgIHJpZ2h0OiAnMTBweCcsXG4gICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlU2hhZG93OiB7XG4gICAgICAgIHRvcDogJzM3cHgnLFxuICAgICAgICByaWdodDogJzlweCcsXG4gICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xuICAgICAgfVxuICAgIH1cbiAgfSwgcGFzc2VkU3R5bGVzKSwge1xuICAgICdoaWRlLXRyaWFuZ2xlJzogdHJpYW5nbGUgPT09ICdoaWRlJyxcbiAgICAndG9wLWxlZnQtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ3RvcC1sZWZ0JyxcbiAgICAndG9wLXJpZ2h0LXRyaWFuZ2xlJzogdHJpYW5nbGUgPT09ICd0b3AtcmlnaHQnLFxuICAgICdib3R0b20tbGVmdC10cmlhbmdsZSc6IHRyaWFuZ2xlID09PSAnYm90dG9tLWxlZnQnLFxuICAgICdib3R0b20tcmlnaHQtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ2JvdHRvbS1yaWdodCdcbiAgfSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShoZXgsIGUpIHtcbiAgICByZXR1cm4gb25DaGFuZ2UoeyBoZXg6IGhleCwgc291cmNlOiAnaGV4JyB9LCBlKTtcbiAgfTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmNhcmQsIGNsYXNzTmFtZTogJ2dpdGh1Yi1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMudHJpYW5nbGVTaGFkb3cgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy50cmlhbmdsZSB9KSxcbiAgICAoMCwgX21hcDIuZGVmYXVsdCkoY29sb3JzLCBmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9HaXRodWJTd2F0Y2gyLmRlZmF1bHQsIHtcbiAgICAgICAgY29sb3I6IGMsXG4gICAgICAgIGtleTogYyxcbiAgICAgICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgICAgICBvblN3YXRjaEhvdmVyOiBvblN3YXRjaEhvdmVyXG4gICAgICB9KTtcbiAgICB9KVxuICApO1xufTtcblxuR2l0aHViLnByb3BUeXBlcyA9IHtcbiAgd2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKSxcbiAgY29sb3JzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcpLFxuICB0cmlhbmdsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ2hpZGUnLCAndG9wLWxlZnQnLCAndG9wLXJpZ2h0JywgJ2JvdHRvbS1sZWZ0JywgJ2JvdHRvbS1yaWdodCddKSxcbiAgc3R5bGVzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufTtcblxuR2l0aHViLmRlZmF1bHRQcm9wcyA9IHtcbiAgd2lkdGg6IDIwMCxcbiAgY29sb3JzOiBbJyNCODAwMDAnLCAnI0RCM0UwMCcsICcjRkNDQjAwJywgJyMwMDhCMDInLCAnIzAwNkI3NicsICcjMTI3M0RFJywgJyMwMDREQ0YnLCAnIzUzMDBFQicsICcjRUI5Njk0JywgJyNGQUQwQzMnLCAnI0ZFRjNCRCcsICcjQzFFMUM1JywgJyNCRURBREMnLCAnI0M0REVGNicsICcjQkVEM0YzJywgJyNENEM0RkInXSxcbiAgdHJpYW5nbGU6ICd0b3AtbGVmdCcsXG4gIHN0eWxlczoge31cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY29tbW9uLkNvbG9yV3JhcCkoR2l0aHViKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkdpdGh1YlN3YXRjaCA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBHaXRodWJTd2F0Y2ggPSBleHBvcnRzLkdpdGh1YlN3YXRjaCA9IGZ1bmN0aW9uIEdpdGh1YlN3YXRjaChfcmVmKSB7XG4gIHZhciBob3ZlciA9IF9yZWYuaG92ZXIsXG4gICAgICBjb2xvciA9IF9yZWYuY29sb3IsXG4gICAgICBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcjtcblxuICB2YXIgaG92ZXJTd2F0Y2ggPSB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgekluZGV4OiAnMicsXG4gICAgb3V0bGluZTogJzJweCBzb2xpZCAjZmZmJyxcbiAgICBib3hTaGFkb3c6ICcwIDAgNXB4IDJweCByZ2JhKDAsMCwwLDAuMjUpJ1xuICB9O1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgd2lkdGg6ICcyNXB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMjVweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdob3Zlcic6IHtcbiAgICAgIHN3YXRjaDogaG92ZXJTd2F0Y2hcbiAgICB9XG4gIH0sIHsgaG92ZXI6IGhvdmVyIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5Td2F0Y2gsIHtcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgZm9jdXNTdHlsZTogaG92ZXJTd2F0Y2hcbiAgICB9KVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9yZWFjdGNzcy5oYW5kbGVIb3ZlcikoR2l0aHViU3dhdGNoKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkdvb2dsZSA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX21lcmdlID0gcmVxdWlyZSgnbG9kYXNoL21lcmdlJyk7XG5cbnZhciBfbWVyZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVyZ2UpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG52YXIgX0dvb2dsZVBvaW50ZXJDaXJjbGUgPSByZXF1aXJlKCcuL0dvb2dsZVBvaW50ZXJDaXJjbGUnKTtcblxudmFyIF9Hb29nbGVQb2ludGVyQ2lyY2xlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0dvb2dsZVBvaW50ZXJDaXJjbGUpO1xuXG52YXIgX0dvb2dsZVBvaW50ZXIgPSByZXF1aXJlKCcuL0dvb2dsZVBvaW50ZXInKTtcblxudmFyIF9Hb29nbGVQb2ludGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0dvb2dsZVBvaW50ZXIpO1xuXG52YXIgX0dvb2dsZUZpZWxkcyA9IHJlcXVpcmUoJy4vR29vZ2xlRmllbGRzJyk7XG5cbnZhciBfR29vZ2xlRmllbGRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0dvb2dsZUZpZWxkcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBHb29nbGUgPSBleHBvcnRzLkdvb2dsZSA9IGZ1bmN0aW9uIEdvb2dsZShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICByZ2IgPSBfcmVmLnJnYixcbiAgICAgIGhzbCA9IF9yZWYuaHNsLFxuICAgICAgaHN2ID0gX3JlZi5oc3YsXG4gICAgICBoZXggPSBfcmVmLmhleCxcbiAgICAgIGhlYWRlciA9IF9yZWYuaGVhZGVyLFxuICAgICAgX3JlZiRzdHlsZXMgPSBfcmVmLnN0eWxlcyxcbiAgICAgIHBhc3NlZFN0eWxlcyA9IF9yZWYkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkc3R5bGVzLFxuICAgICAgX3JlZiRjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkY2xhc3NOYW1lO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSgoMCwgX21lcmdlMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjZGZlMWU1JyxcbiAgICAgICAgYm94U2l6aW5nOiAnaW5pdGlhbCcsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4IDhweCAwcHggMHB4J1xuICAgICAgfSxcbiAgICAgIGhlYWQ6IHtcbiAgICAgICAgaGVpZ2h0OiAnNTdweCcsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHBhZGRpbmdUb3A6ICcxNnB4JyxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogJzE2cHgnLFxuICAgICAgICBwYWRkaW5nTGVmdDogJzE2cHgnLFxuICAgICAgICBmb250U2l6ZTogJzIwcHgnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgZm9udEZhbWlseTogJ1JvYm90by1SZWd1bGFyLEhlbHZldGljYU5ldWUsQXJpYWwsc2Fucy1zZXJpZidcbiAgICAgIH0sXG4gICAgICBzYXR1cmF0aW9uOiB7XG4gICAgICAgIHdpZHRoOiAnNzAlJyxcbiAgICAgICAgcGFkZGluZzogJzBweCcsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0sXG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgd2lkdGg6ICczMCUnLFxuICAgICAgICBoZWlnaHQ6ICcyMjhweCcsXG4gICAgICAgIHBhZGRpbmc6ICcwcHgnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgnICsgcmdiLnIgKyAnLCAnICsgcmdiLmcgKyAnLCAnICsgcmdiLmIgKyAnLCAxKScsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0sXG4gICAgICBib2R5OiB7XG4gICAgICAgIG1hcmdpbjogJ2F1dG8nLFxuICAgICAgICB3aWR0aDogJzk1JSdcbiAgICAgIH0sXG4gICAgICBjb250cm9sczoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBoZWlnaHQ6ICc1MnB4JyxcbiAgICAgICAgcGFkZGluZ1RvcDogJzIycHgnXG4gICAgICB9LFxuICAgICAgY29sb3I6IHtcbiAgICAgICAgd2lkdGg6ICczMnB4J1xuICAgICAgfSxcbiAgICAgIGh1ZToge1xuICAgICAgICBoZWlnaHQ6ICc4cHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgbWFyZ2luOiAnMHB4IDE2cHggMHB4IDE2cHgnLFxuICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICB9LFxuICAgICAgSHVlOiB7XG4gICAgICAgIHJhZGl1czogJzJweCdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHBhc3NlZFN0eWxlcykpO1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLnBpY2tlciwgY2xhc3NOYW1lOiAnZ29vZ2xlLXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5oZWFkIH0sXG4gICAgICBoZWFkZXJcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc2F0dXJhdGlvbiB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5TYXR1cmF0aW9uLCB7XG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBoc3Y6IGhzdixcbiAgICAgICAgcG9pbnRlcjogX0dvb2dsZVBvaW50ZXJDaXJjbGUyLmRlZmF1bHQsXG4gICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuYm9keSB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuY29udHJvbHMsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaHVlIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5IdWUsIHtcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZXMuSHVlLFxuICAgICAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgICAgICByYWRpdXM6ICc0cHgnLFxuICAgICAgICAgICAgcG9pbnRlcjogX0dvb2dsZVBvaW50ZXIyLmRlZmF1bHQsXG4gICAgICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2VcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0dvb2dsZUZpZWxkczIuZGVmYXVsdCwge1xuICAgICAgICByZ2I6IHJnYixcbiAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgIGhleDogaGV4LFxuICAgICAgICBoc3Y6IGhzdixcbiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gICAgICB9KVxuICAgIClcbiAgKTtcbn07XG5cbkdvb2dsZS5wcm9wVHlwZXMgPSB7XG4gIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXSksXG4gIHN0eWxlczogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIGhlYWRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcblxufTtcblxuR29vZ2xlLmRlZmF1bHRQcm9wcyA9IHtcbiAgd2lkdGg6IDY1MixcbiAgc3R5bGVzOiB7fSxcbiAgaGVhZGVyOiAnQ29sb3IgcGlja2VyJ1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShHb29nbGUpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuR29vZ2xlRmllbGRzID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb2xvciA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvY29sb3InKTtcblxudmFyIGNvbG9yID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2NvbG9yKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEdvb2dsZUZpZWxkcyA9IGV4cG9ydHMuR29vZ2xlRmllbGRzID0gZnVuY3Rpb24gR29vZ2xlRmllbGRzKF9yZWYpIHtcbiAgdmFyIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaHNsID0gX3JlZi5oc2wsXG4gICAgICBoZXggPSBfcmVmLmhleCxcbiAgICAgIGhzdiA9IF9yZWYuaHN2O1xuXG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhLCBlKSB7XG4gICAgaWYgKGRhdGEuaGV4KSB7XG4gICAgICBjb2xvci5pc1ZhbGlkSGV4KGRhdGEuaGV4KSAmJiBvbkNoYW5nZSh7XG4gICAgICAgIGhleDogZGF0YS5oZXgsXG4gICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgIH0sIGUpO1xuICAgIH0gZWxzZSBpZiAoZGF0YS5yZ2IpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBkYXRhLnJnYi5zcGxpdCgnLCcpO1xuICAgICAgY29sb3IuaXN2YWxpZENvbG9yU3RyaW5nKGRhdGEucmdiLCAncmdiJykgJiYgb25DaGFuZ2Uoe1xuICAgICAgICByOiB2YWx1ZXNbMF0sXG4gICAgICAgIGc6IHZhbHVlc1sxXSxcbiAgICAgICAgYjogdmFsdWVzWzJdLFxuICAgICAgICBhOiAxLFxuICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICB9LCBlKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEuaHN2KSB7XG4gICAgICB2YXIgX3ZhbHVlcyA9IGRhdGEuaHN2LnNwbGl0KCcsJyk7XG4gICAgICBpZiAoY29sb3IuaXN2YWxpZENvbG9yU3RyaW5nKGRhdGEuaHN2LCAnaHN2JykpIHtcbiAgICAgICAgX3ZhbHVlc1syXSA9IF92YWx1ZXNbMl0ucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgX3ZhbHVlc1sxXSA9IF92YWx1ZXNbMV0ucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgX3ZhbHVlc1swXSA9IF92YWx1ZXNbMF0ucmVwbGFjZSgnwrAnLCAnJyk7XG4gICAgICAgIGlmIChfdmFsdWVzWzFdID09IDEpIHtcbiAgICAgICAgICBfdmFsdWVzWzFdID0gMC4wMTtcbiAgICAgICAgfSBlbHNlIGlmIChfdmFsdWVzWzJdID09IDEpIHtcbiAgICAgICAgICBfdmFsdWVzWzJdID0gMC4wMTtcbiAgICAgICAgfVxuICAgICAgICBvbkNoYW5nZSh7XG4gICAgICAgICAgaDogTnVtYmVyKF92YWx1ZXNbMF0pLFxuICAgICAgICAgIHM6IE51bWJlcihfdmFsdWVzWzFdKSxcbiAgICAgICAgICB2OiBOdW1iZXIoX3ZhbHVlc1syXSksXG4gICAgICAgICAgc291cmNlOiAnaHN2J1xuICAgICAgICB9LCBlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGEuaHNsKSB7XG4gICAgICB2YXIgX3ZhbHVlczIgPSBkYXRhLmhzbC5zcGxpdCgnLCcpO1xuICAgICAgaWYgKGNvbG9yLmlzdmFsaWRDb2xvclN0cmluZyhkYXRhLmhzbCwgJ2hzbCcpKSB7XG4gICAgICAgIF92YWx1ZXMyWzJdID0gX3ZhbHVlczJbMl0ucmVwbGFjZSgnJScsICcnKTtcbiAgICAgICAgX3ZhbHVlczJbMV0gPSBfdmFsdWVzMlsxXS5yZXBsYWNlKCclJywgJycpO1xuICAgICAgICBfdmFsdWVzMlswXSA9IF92YWx1ZXMyWzBdLnJlcGxhY2UoJ8KwJywgJycpO1xuICAgICAgICBpZiAoaHN2VmFsdWVbMV0gPT0gMSkge1xuICAgICAgICAgIGhzdlZhbHVlWzFdID0gMC4wMTtcbiAgICAgICAgfSBlbHNlIGlmIChoc3ZWYWx1ZVsyXSA9PSAxKSB7XG4gICAgICAgICAgaHN2VmFsdWVbMl0gPSAwLjAxO1xuICAgICAgICB9XG4gICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICBoOiBOdW1iZXIoX3ZhbHVlczJbMF0pLFxuICAgICAgICAgIHM6IE51bWJlcihfdmFsdWVzMlsxXSksXG4gICAgICAgICAgdjogTnVtYmVyKF92YWx1ZXMyWzJdKSxcbiAgICAgICAgICBzb3VyY2U6ICdoc2wnXG4gICAgICAgIH0sIGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgd3JhcDoge1xuICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgIGhlaWdodDogJzEwMHB4JyxcbiAgICAgICAgbWFyZ2luVG9wOiAnNHB4J1xuICAgICAgfSxcbiAgICAgIGZpZWxkczoge1xuICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICB9LFxuICAgICAgY29sdW1uOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6ICcxMHB4JyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nXG4gICAgICB9LFxuICAgICAgZG91YmxlOiB7XG4gICAgICAgIHBhZGRpbmc6ICcwcHggNC40cHgnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogJzM4cHgnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgcGFkZGluZzogJzRweCAxMCUgM3B4JyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNkYWRjZTAnLFxuICAgICAgICBmb250U2l6ZTogJzExcHgnLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiAnbG93ZXJjYXNlJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgICBmb250RmFtaWx5OiAnUm9ib3RvLEFyaWFsLHNhbnMtc2VyaWYnXG4gICAgICB9LFxuICAgICAgaW5wdXQyOiB7XG4gICAgICAgIGhlaWdodDogJzM4cHgnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgI2RhZGNlMCcsXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICBmb250U2l6ZTogJzExcHgnLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiAnbG93ZXJjYXNlJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcbiAgICAgICAgb3V0bGluZTogJ25vbmUnLFxuICAgICAgICBwYWRkaW5nTGVmdDogJzEwcHgnLFxuICAgICAgICBmb250RmFtaWx5OiAnUm9ib3RvLEFyaWFsLHNhbnMtc2VyaWYnXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogJyNmZmYnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICAgIGNvbG9yOiAnIzNjNDA0MycsXG4gICAgICAgIHdpZHRoOiAnMzVweCcsXG4gICAgICAgIHRvcDogJy02cHgnLFxuICAgICAgICBsZWZ0OiAnMCcsXG4gICAgICAgIHJpZ2h0OiAnMCcsXG4gICAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICdhdXRvJyxcbiAgICAgICAgZm9udEZhbWlseTogJ1JvYm90byxBcmlhbCxzYW5zLXNlcmlmJ1xuICAgICAgfSxcbiAgICAgIGxhYmVsMjoge1xuICAgICAgICBsZWZ0OiAnMTBweCcsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGZvbnRTaXplOiAnMTJweCcsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICBjb2xvcjogJyMzYzQwNDMnLFxuICAgICAgICB3aWR0aDogJzMycHgnLFxuICAgICAgICB0b3A6ICctNnB4JyxcbiAgICAgICAgZm9udEZhbWlseTogJ1JvYm90byxBcmlhbCxzYW5zLXNlcmlmJ1xuICAgICAgfSxcbiAgICAgIHNpbmdsZToge1xuICAgICAgICBmbGV4R3JvdzogJzEnLFxuICAgICAgICBtYXJnaW46ICcwcHggNC40cHgnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2YXIgcmdiVmFsdWUgPSByZ2IuciArICcsICcgKyByZ2IuZyArICcsICcgKyByZ2IuYjtcbiAgdmFyIGhzbFZhbHVlID0gTWF0aC5yb3VuZChoc2wuaCkgKyAnXFx4QjAsICcgKyBNYXRoLnJvdW5kKGhzbC5zICogMTAwKSArICclLCAnICsgTWF0aC5yb3VuZChoc2wubCAqIDEwMCkgKyAnJSc7XG4gIHZhciBoc3ZWYWx1ZSA9IE1hdGgucm91bmQoaHN2LmgpICsgJ1xceEIwLCAnICsgTWF0aC5yb3VuZChoc3YucyAqIDEwMCkgKyAnJSwgJyArIE1hdGgucm91bmQoaHN2LnYgKiAxMDApICsgJyUnO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMud3JhcCwgY2xhc3NOYW1lOiAnZmxleGJveC1maXgnIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZHMgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmRvdWJsZSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgICAgbGFiZWw6ICdoZXgnLFxuICAgICAgICAgIHZhbHVlOiBoZXgsXG4gICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbHVtbiB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc2luZ2xlIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0MiwgbGFiZWw6IHN0eWxlcy5sYWJlbDIgfSxcbiAgICAgICAgICAgIGxhYmVsOiAncmdiJyxcbiAgICAgICAgICAgIHZhbHVlOiByZ2JWYWx1ZSxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc2luZ2xlIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0MiwgbGFiZWw6IHN0eWxlcy5sYWJlbDIgfSxcbiAgICAgICAgICAgIGxhYmVsOiAnaHN2JyxcbiAgICAgICAgICAgIHZhbHVlOiBoc3ZWYWx1ZSxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc2luZ2xlIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0MiwgbGFiZWw6IHN0eWxlcy5sYWJlbDIgfSxcbiAgICAgICAgICAgIGxhYmVsOiAnaHNsJyxcbiAgICAgICAgICAgIHZhbHVlOiBoc2xWYWx1ZSxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gR29vZ2xlRmllbGRzOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuR29vZ2xlUG9pbnRlciA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgR29vZ2xlUG9pbnRlciA9IGV4cG9ydHMuR29vZ2xlUG9pbnRlciA9IGZ1bmN0aW9uIEdvb2dsZVBvaW50ZXIocHJvcHMpIHtcbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogJzIwcHgnLFxuICAgICAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMjJweCcsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtMTBweCwgLTdweCknLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnaHNsKCcgKyBNYXRoLnJvdW5kKHByb3BzLmhzbC5oKSArICcsIDEwMCUsIDUwJSknLFxuICAgICAgICBib3JkZXI6ICcycHggd2hpdGUgc29saWQnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIgfSk7XG59O1xuXG5Hb29nbGVQb2ludGVyLnByb3BUeXBlcyA9IHtcbiAgaHNsOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBsOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBhOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxuICB9KVxufTtcblxuR29vZ2xlUG9pbnRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGhzbDogeyBhOiAxLCBoOiAyNDkuOTQsIGw6IDAuMiwgczogMC41MCB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBHb29nbGVQb2ludGVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuR29vZ2xlUG9pbnRlckNpcmNsZSA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgR29vZ2xlUG9pbnRlckNpcmNsZSA9IGV4cG9ydHMuR29vZ2xlUG9pbnRlckNpcmNsZSA9IGZ1bmN0aW9uIEdvb2dsZVBvaW50ZXJDaXJjbGUocHJvcHMpIHtcbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogJzIwcHgnLFxuICAgICAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMjJweCcsXG4gICAgICAgIGJvcmRlcjogJzJweCAjZmZmIHNvbGlkJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC0xMnB4LCAtMTNweCknLFxuICAgICAgICBiYWNrZ3JvdW5kOiAnaHNsKCcgKyBNYXRoLnJvdW5kKHByb3BzLmhzbC5oKSArICcsICcgKyBNYXRoLnJvdW5kKHByb3BzLmhzbC5zICogMTAwKSArICclLCAnICsgTWF0aC5yb3VuZChwcm9wcy5oc2wubCAqIDEwMCkgKyAnJSknXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIgfSk7XG59O1xuXG5Hb29nbGVQb2ludGVyQ2lyY2xlLnByb3BUeXBlcyA9IHtcbiAgaHNsOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnNoYXBlKHtcbiAgICBoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBsOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBhOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxuICB9KVxufTtcblxuR29vZ2xlUG9pbnRlckNpcmNsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGhzbDogeyBhOiAxLCBoOiAyNDkuOTQsIGw6IDAuMiwgczogMC41MCB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBHb29nbGVQb2ludGVyQ2lyY2xlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuSHVlUGlja2VyID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbnZhciBfbWVyZ2UgPSByZXF1aXJlKCdsb2Rhc2gvbWVyZ2UnKTtcblxudmFyIF9tZXJnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZSk7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbnZhciBfSHVlUG9pbnRlciA9IHJlcXVpcmUoJy4vSHVlUG9pbnRlcicpO1xuXG52YXIgX0h1ZVBvaW50ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSHVlUG9pbnRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBIdWVQaWNrZXIgPSBleHBvcnRzLkh1ZVBpY2tlciA9IGZ1bmN0aW9uIEh1ZVBpY2tlcihfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIGhzbCA9IF9yZWYuaHNsLFxuICAgICAgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb24sXG4gICAgICBwb2ludGVyID0gX3JlZi5wb2ludGVyLFxuICAgICAgX3JlZiRzdHlsZXMgPSBfcmVmLnN0eWxlcyxcbiAgICAgIHBhc3NlZFN0eWxlcyA9IF9yZWYkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9yZWYkc3R5bGVzLFxuICAgICAgX3JlZiRjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYkY2xhc3NOYW1lID09PSB1bmRlZmluZWQgPyAnJyA6IF9yZWYkY2xhc3NOYW1lO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSgoMCwgX21lcmdlMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBwaWNrZXI6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0sXG4gICAgICBodWU6IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4J1xuICAgICAgfVxuICAgIH1cbiAgfSwgcGFzc2VkU3R5bGVzKSk7XG5cbiAgLy8gT3ZlcndyaXRlIHRvIHByb3ZpZGUgcHVyZSBodWUgY29sb3JcbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhKSB7XG4gICAgcmV0dXJuIG9uQ2hhbmdlKHsgYTogMSwgaDogZGF0YS5oLCBsOiAwLjUsIHM6IDEgfSk7XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIsIGNsYXNzTmFtZTogJ2h1ZS1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uSHVlLCBfZXh0ZW5kcyh7fSwgc3R5bGVzLmh1ZSwge1xuICAgICAgaHNsOiBoc2wsXG4gICAgICBwb2ludGVyOiBwb2ludGVyLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgfSkpXG4gICk7XG59O1xuXG5IdWVQaWNrZXIucHJvcFR5cGVzID0ge1xuICBzdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59O1xuSHVlUGlja2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgd2lkdGg6ICczMTZweCcsXG4gIGhlaWdodDogJzE2cHgnLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgcG9pbnRlcjogX0h1ZVBvaW50ZXIyLmRlZmF1bHQsXG4gIHN0eWxlczoge31cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY29tbW9uLkNvbG9yV3JhcCkoSHVlUGlja2VyKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNsaWRlclBvaW50ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU2xpZGVyUG9pbnRlciA9IGV4cG9ydHMuU2xpZGVyUG9pbnRlciA9IGZ1bmN0aW9uIFNsaWRlclBvaW50ZXIoX3JlZikge1xuICB2YXIgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb247XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB3aWR0aDogJzE4cHgnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC05cHgsIC0xcHgpJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiKDI0OCwgMjQ4LCAyNDgpJyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjM3KSdcbiAgICAgIH1cbiAgICB9LFxuICAgICd2ZXJ0aWNhbCc6IHtcbiAgICAgIHBpY2tlcjoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTNweCwgLTlweCknXG4gICAgICB9XG4gICAgfVxuICB9LCB7IHZlcnRpY2FsOiBkaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMucGlja2VyIH0pO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2xpZGVyUG9pbnRlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk1hdGVyaWFsID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tZXJnZSA9IHJlcXVpcmUoJ2xvZGFzaC9tZXJnZScpO1xuXG52YXIgX21lcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lcmdlKTtcblxudmFyIF9jb2xvciA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvY29sb3InKTtcblxudmFyIGNvbG9yID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2NvbG9yKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE1hdGVyaWFsID0gZXhwb3J0cy5NYXRlcmlhbCA9IGZ1bmN0aW9uIE1hdGVyaWFsKF9yZWYpIHtcbiAgdmFyIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIGhleCA9IF9yZWYuaGV4LFxuICAgICAgcmdiID0gX3JlZi5yZ2IsXG4gICAgICBfcmVmJHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgcGFzc2VkU3R5bGVzID0gX3JlZiRzdHlsZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRzdHlsZXMsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKCgwLCBfbWVyZ2UyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIG1hdGVyaWFsOiB7XG4gICAgICAgIHdpZHRoOiAnOThweCcsXG4gICAgICAgIGhlaWdodDogJzk4cHgnLFxuICAgICAgICBwYWRkaW5nOiAnMTZweCcsXG4gICAgICAgIGZvbnRGYW1pbHk6ICdSb2JvdG8nXG4gICAgICB9LFxuICAgICAgSEVYd3JhcDoge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIEhFWGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIG1hcmdpblRvcDogJzEycHgnLFxuICAgICAgICBmb250U2l6ZTogJzE1cHgnLFxuICAgICAgICBjb2xvcjogJyMzMzMnLFxuICAgICAgICBwYWRkaW5nOiAnMHB4JyxcbiAgICAgICAgYm9yZGVyOiAnMHB4JyxcbiAgICAgICAgYm9yZGVyQm90dG9tOiAnMnB4IHNvbGlkICcgKyBoZXgsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgaGVpZ2h0OiAnMzBweCdcbiAgICAgIH0sXG4gICAgICBIRVhsYWJlbDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnMHB4JyxcbiAgICAgICAgbGVmdDogJzBweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgIGNvbG9yOiAnIzk5OTk5OScsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICdjYXBpdGFsaXplJ1xuICAgICAgfSxcbiAgICAgIEhleDoge1xuICAgICAgICBzdHlsZToge31cbiAgICAgIH0sXG4gICAgICBSR0J3cmFwOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICB9LFxuICAgICAgUkdCaW5wdXQ6IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgbWFyZ2luVG9wOiAnMTJweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMTVweCcsXG4gICAgICAgIGNvbG9yOiAnIzMzMycsXG4gICAgICAgIHBhZGRpbmc6ICcwcHgnLFxuICAgICAgICBib3JkZXI6ICcwcHgnLFxuICAgICAgICBib3JkZXJCb3R0b206ICcxcHggc29saWQgI2VlZScsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgaGVpZ2h0OiAnMzBweCdcbiAgICAgIH0sXG4gICAgICBSR0JsYWJlbDoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnMHB4JyxcbiAgICAgICAgbGVmdDogJzBweCcsXG4gICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgIGNvbG9yOiAnIzk5OTk5OScsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICdjYXBpdGFsaXplJ1xuICAgICAgfSxcbiAgICAgIHNwbGl0OiB7XG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICctMTBweCcsXG4gICAgICAgIHBhZGRpbmdUb3A6ICcxMXB4J1xuICAgICAgfSxcbiAgICAgIHRoaXJkOiB7XG4gICAgICAgIGZsZXg6ICcxJyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAnMTBweCdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHBhc3NlZFN0eWxlcykpO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZGF0YSwgZSkge1xuICAgIGlmIChkYXRhLmhleCkge1xuICAgICAgY29sb3IuaXNWYWxpZEhleChkYXRhLmhleCkgJiYgb25DaGFuZ2Uoe1xuICAgICAgICBoZXg6IGRhdGEuaGV4LFxuICAgICAgICBzb3VyY2U6ICdoZXgnXG4gICAgICB9LCBlKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEuciB8fCBkYXRhLmcgfHwgZGF0YS5iKSB7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIHI6IGRhdGEuciB8fCByZ2IucixcbiAgICAgICAgZzogZGF0YS5nIHx8IHJnYi5nLFxuICAgICAgICBiOiBkYXRhLmIgfHwgcmdiLmIsXG4gICAgICAgIHNvdXJjZTogJ3JnYidcbiAgICAgIH0sIGUpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX2NvbW1vbi5SYWlzZWQsXG4gICAgeyBzdHlsZXM6IHBhc3NlZFN0eWxlcyB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMubWF0ZXJpYWwsIGNsYXNzTmFtZTogJ21hdGVyaWFsLXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLkhFWHdyYXAsIGlucHV0OiBzdHlsZXMuSEVYaW5wdXQsIGxhYmVsOiBzdHlsZXMuSEVYbGFiZWwgfSxcbiAgICAgICAgbGFiZWw6ICdoZXgnLFxuICAgICAgICB2YWx1ZTogaGV4LFxuICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgICB9KSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLnNwbGl0LCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnRoaXJkIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgICAgICAgbGFiZWw6ICdyJywgdmFsdWU6IHJnYi5yLFxuICAgICAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgICAgIH0pXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy50aGlyZCB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLlJHQndyYXAsIGlucHV0OiBzdHlsZXMuUkdCaW5wdXQsIGxhYmVsOiBzdHlsZXMuUkdCbGFiZWwgfSxcbiAgICAgICAgICAgIGxhYmVsOiAnZycsXG4gICAgICAgICAgICB2YWx1ZTogcmdiLmcsXG4gICAgICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnRoaXJkIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICAgICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgICAgICAgbGFiZWw6ICdiJyxcbiAgICAgICAgICAgIHZhbHVlOiByZ2IuYixcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShNYXRlcmlhbCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QaG90b3Nob3AgPSB1bmRlZmluZWQ7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tZXJnZSA9IHJlcXVpcmUoJ2xvZGFzaC9tZXJnZScpO1xuXG52YXIgX21lcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lcmdlKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9QaG90b3Nob3BGaWVsZHMgPSByZXF1aXJlKCcuL1Bob3Rvc2hvcEZpZWxkcycpO1xuXG52YXIgX1Bob3Rvc2hvcEZpZWxkczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QaG90b3Nob3BGaWVsZHMpO1xuXG52YXIgX1Bob3Rvc2hvcFBvaW50ZXJDaXJjbGUgPSByZXF1aXJlKCcuL1Bob3Rvc2hvcFBvaW50ZXJDaXJjbGUnKTtcblxudmFyIF9QaG90b3Nob3BQb2ludGVyQ2lyY2xlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Bob3Rvc2hvcFBvaW50ZXJDaXJjbGUpO1xuXG52YXIgX1Bob3Rvc2hvcFBvaW50ZXIgPSByZXF1aXJlKCcuL1Bob3Rvc2hvcFBvaW50ZXInKTtcblxudmFyIF9QaG90b3Nob3BQb2ludGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Bob3Rvc2hvcFBvaW50ZXIpO1xuXG52YXIgX1Bob3Rvc2hvcEJ1dHRvbiA9IHJlcXVpcmUoJy4vUGhvdG9zaG9wQnV0dG9uJyk7XG5cbnZhciBfUGhvdG9zaG9wQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Bob3Rvc2hvcEJ1dHRvbik7XG5cbnZhciBfUGhvdG9zaG9wUHJldmlld3MgPSByZXF1aXJlKCcuL1Bob3Rvc2hvcFByZXZpZXdzJyk7XG5cbnZhciBfUGhvdG9zaG9wUHJldmlld3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGhvdG9zaG9wUHJldmlld3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBQaG90b3Nob3AgPSBleHBvcnRzLlBob3Rvc2hvcCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQaG90b3Nob3AsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBob3Rvc2hvcChwcm9wcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQaG90b3Nob3ApO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBob3Rvc2hvcC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBob3Rvc2hvcCkpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjdXJyZW50Q29sb3I6IHByb3BzLmhleFxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBob3Rvc2hvcCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBfcHJvcHMkc3R5bGVzID0gX3Byb3BzLnN0eWxlcyxcbiAgICAgICAgICBwYXNzZWRTdHlsZXMgPSBfcHJvcHMkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9wcm9wcyRzdHlsZXMsXG4gICAgICAgICAgX3Byb3BzJGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcHJvcHMkY2xhc3NOYW1lO1xuXG4gICAgICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoKDAsIF9tZXJnZTIuZGVmYXVsdCkoe1xuICAgICAgICAnZGVmYXVsdCc6IHtcbiAgICAgICAgICBwaWNrZXI6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjRENEQ0RDJyxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICcwIDAgMCAxcHggcmdiYSgwLDAsMCwuMjUpLCAwIDhweCAxNnB4IHJnYmEoMCwwLDAsLjE1KScsXG4gICAgICAgICAgICBib3hTaXppbmc6ICdpbml0aWFsJyxcbiAgICAgICAgICAgIHdpZHRoOiAnNTEzcHgnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBoZWFkOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6ICdsaW5lYXItZ3JhZGllbnQoLTE4MGRlZywgI0YwRjBGMCAwJSwgI0Q0RDRENCAxMDAlKScsXG4gICAgICAgICAgICBib3JkZXJCb3R0b206ICcxcHggc29saWQgI0IxQjFCMScsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDFweCAwIDAgcmdiYSgyNTUsMjU1LDI1NSwuMiksIGluc2V0IDAgLTFweCAwIDAgcmdiYSgwLDAsMCwuMDIpJyxcbiAgICAgICAgICAgIGhlaWdodDogJzIzcHgnLFxuICAgICAgICAgICAgbGluZUhlaWdodDogJzI0cHgnLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4IDRweCAwIDAnLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICAgICAgICAgIGNvbG9yOiAnIzRENEQ0RCcsXG4gICAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgICAgICAgfSxcbiAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICBwYWRkaW5nOiAnMTVweCAxNXB4IDAnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzYXR1cmF0aW9uOiB7XG4gICAgICAgICAgICB3aWR0aDogJzI1NnB4JyxcbiAgICAgICAgICAgIGhlaWdodDogJzI1NnB4JyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgYm9yZGVyOiAnMnB4IHNvbGlkICNCM0IzQjMnLFxuICAgICAgICAgICAgYm9yZGVyQm90dG9tOiAnMnB4IHNvbGlkICNGMEYwRjAnLFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBodWU6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMjU2cHgnLFxuICAgICAgICAgICAgd2lkdGg6ICcxOXB4JyxcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6ICcxMHB4JyxcbiAgICAgICAgICAgIGJvcmRlcjogJzJweCBzb2xpZCAjQjNCM0IzJyxcbiAgICAgICAgICAgIGJvcmRlckJvdHRvbTogJzJweCBzb2xpZCAjRjBGMEYwJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgICAgIHdpZHRoOiAnMTgwcHgnLFxuICAgICAgICAgICAgbWFyZ2luTGVmdDogJzEwcHgnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b3A6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJldmlld3M6IHtcbiAgICAgICAgICAgIHdpZHRoOiAnNjBweCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFjdGlvbnM6IHtcbiAgICAgICAgICAgIGZsZXg6ICcxJyxcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6ICcyMHB4J1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgcGFzc2VkU3R5bGVzKSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIsIGNsYXNzTmFtZTogJ3Bob3Rvc2hvcC1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaGVhZCB9LFxuICAgICAgICAgIHRoaXMucHJvcHMuaGVhZGVyXG4gICAgICAgICksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy5ib2R5LCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLnNhdHVyYXRpb24gfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uU2F0dXJhdGlvbiwge1xuICAgICAgICAgICAgICBoc2w6IHRoaXMucHJvcHMuaHNsLFxuICAgICAgICAgICAgICBoc3Y6IHRoaXMucHJvcHMuaHN2LFxuICAgICAgICAgICAgICBwb2ludGVyOiBfUGhvdG9zaG9wUG9pbnRlckNpcmNsZTIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMucHJvcHMub25DaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmh1ZSB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5IdWUsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICAgICAgICAgICAgICBoc2w6IHRoaXMucHJvcHMuaHNsLFxuICAgICAgICAgICAgICBwb2ludGVyOiBfUGhvdG9zaG9wUG9pbnRlcjIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMucHJvcHMub25DaGFuZ2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbnRyb2xzIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsgc3R5bGU6IHN0eWxlcy50b3AsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMucHJldmlld3MgfSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUGhvdG9zaG9wUHJldmlld3MyLmRlZmF1bHQsIHtcbiAgICAgICAgICAgICAgICAgIHJnYjogdGhpcy5wcm9wcy5yZ2IsXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Q29sb3I6IHRoaXMuc3RhdGUuY3VycmVudENvbG9yXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmFjdGlvbnMgfSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUGhvdG9zaG9wQnV0dG9uMi5kZWZhdWx0LCB7IGxhYmVsOiAnT0snLCBvbkNsaWNrOiB0aGlzLnByb3BzLm9uQWNjZXB0LCBhY3RpdmU6IHRydWUgfSksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Bob3Rvc2hvcEJ1dHRvbjIuZGVmYXVsdCwgeyBsYWJlbDogJ0NhbmNlbCcsIG9uQ2xpY2s6IHRoaXMucHJvcHMub25DYW5jZWwgfSksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Bob3Rvc2hvcEZpZWxkczIuZGVmYXVsdCwge1xuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMucHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgICAgICAgICByZ2I6IHRoaXMucHJvcHMucmdiLFxuICAgICAgICAgICAgICAgICAgaHN2OiB0aGlzLnByb3BzLmhzdixcbiAgICAgICAgICAgICAgICAgIGhleDogdGhpcy5wcm9wcy5oZXhcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQaG90b3Nob3A7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5QaG90b3Nob3AucHJvcFR5cGVzID0ge1xuICBoZWFkZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBzdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59O1xuXG5QaG90b3Nob3AuZGVmYXVsdFByb3BzID0ge1xuICBoZWFkZXI6ICdDb2xvciBQaWNrZXInLFxuICBzdHlsZXM6IHt9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NvbW1vbi5Db2xvcldyYXApKFBob3Rvc2hvcCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QaG90b3Nob3BCdXR0b24gPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUGhvdG9zaG9wQnV0dG9uID0gZXhwb3J0cy5QaG90b3Nob3BCdXR0b24gPSBmdW5jdGlvbiBQaG90b3Nob3BCdXR0b24oX3JlZikge1xuICB2YXIgb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIGxhYmVsID0gX3JlZi5sYWJlbCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGFjdGl2ZSA9IF9yZWYuYWN0aXZlO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBidXR0b246IHtcbiAgICAgICAgYmFja2dyb3VuZEltYWdlOiAnbGluZWFyLWdyYWRpZW50KC0xODBkZWcsICNGRkZGRkYgMCUsICNFNkU2RTYgMTAwJSknLFxuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgIzg3ODc4NycsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCcsXG4gICAgICAgIGhlaWdodDogJzIwcHgnLFxuICAgICAgICBib3hTaGFkb3c6ICcwIDFweCAwIDAgI0VBRUFFQScsXG4gICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgIGNvbG9yOiAnIzAwMCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyMHB4JyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnMTBweCcsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgICB9XG4gICAgfSxcbiAgICAnYWN0aXZlJzoge1xuICAgICAgYnV0dG9uOiB7XG4gICAgICAgIGJveFNoYWRvdzogJzAgMCAwIDFweCAjODc4Nzg3J1xuICAgICAgfVxuICAgIH1cbiAgfSwgeyBhY3RpdmU6IGFjdGl2ZSB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgeyBzdHlsZTogc3R5bGVzLmJ1dHRvbiwgb25DbGljazogb25DbGljayB9LFxuICAgIGxhYmVsIHx8IGNoaWxkcmVuXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQaG90b3Nob3BCdXR0b247IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QaG90b3Nob3BQaWNrZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NvbG9yID0gcmVxdWlyZSgnLi4vLi4vaGVscGVycy9jb2xvcicpO1xuXG52YXIgY29sb3IgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfY29sb3IpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUGhvdG9zaG9wUGlja2VyID0gZXhwb3J0cy5QaG90b3Nob3BQaWNrZXIgPSBmdW5jdGlvbiBQaG90b3Nob3BQaWNrZXIoX3JlZikge1xuICB2YXIgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgcmdiID0gX3JlZi5yZ2IsXG4gICAgICBoc3YgPSBfcmVmLmhzdixcbiAgICAgIGhleCA9IF9yZWYuaGV4O1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogJzVweCcsXG4gICAgICAgIHBhZGRpbmdCb3R0b206ICc5cHgnLFxuICAgICAgICB3aWR0aDogJzgwcHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIGRpdmlkZXI6IHtcbiAgICAgICAgaGVpZ2h0OiAnNXB4J1xuICAgICAgfSxcbiAgICAgIFJHQndyYXA6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBSR0JpbnB1dDoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAnNDAlJyxcbiAgICAgICAgd2lkdGg6ICc0MCUnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICM4ODg4ODgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDFweCAxcHggcmdiYSgwLDAsMCwuMSksIDAgMXB4IDAgMCAjRUNFQ0VDJyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnNXB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICczcHgnLFxuICAgICAgICBtYXJnaW5SaWdodDogJzEwcHgnXG4gICAgICB9LFxuICAgICAgUkdCbGFiZWw6IHtcbiAgICAgICAgbGVmdDogJzBweCcsXG4gICAgICAgIHRvcDogJzBweCcsXG4gICAgICAgIHdpZHRoOiAnMzRweCcsXG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnLFxuICAgICAgICBmb250U2l6ZTogJzEzcHgnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzIycHgnLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgfSxcbiAgICAgIEhFWHdyYXA6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBIRVhpbnB1dDoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAnMjAlJyxcbiAgICAgICAgd2lkdGg6ICc4MCUnLFxuICAgICAgICBoZWlnaHQ6ICcxOHB4JyxcbiAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICM4ODg4ODgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDFweCAxcHggcmdiYSgwLDAsMCwuMSksIDAgMXB4IDAgMCAjRUNFQ0VDJyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnNnB4JyxcbiAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICczcHgnXG4gICAgICB9LFxuICAgICAgSEVYbGFiZWw6IHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogJzBweCcsXG4gICAgICAgIGxlZnQ6ICcwcHgnLFxuICAgICAgICB3aWR0aDogJzE0cHgnLFxuICAgICAgICB0ZXh0VHJhbnNmb3JtOiAndXBwZXJjYXNlJyxcbiAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICAgICAgaGVpZ2h0OiAnMThweCcsXG4gICAgICAgIGxpbmVIZWlnaHQ6ICcyMnB4J1xuICAgICAgfSxcbiAgICAgIGZpZWxkU3ltYm9sczoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAnNXB4JyxcbiAgICAgICAgcmlnaHQ6ICctN3B4JyxcbiAgICAgICAgZm9udFNpemU6ICcxM3B4J1xuICAgICAgfSxcbiAgICAgIHN5bWJvbDoge1xuICAgICAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICAgICAgbGluZUhlaWdodDogJzIycHgnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnN3B4J1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShkYXRhLCBlKSB7XG4gICAgaWYgKGRhdGFbJyMnXSkge1xuICAgICAgY29sb3IuaXNWYWxpZEhleChkYXRhWycjJ10pICYmIG9uQ2hhbmdlKHtcbiAgICAgICAgaGV4OiBkYXRhWycjJ10sXG4gICAgICAgIHNvdXJjZTogJ2hleCdcbiAgICAgIH0sIGUpO1xuICAgIH0gZWxzZSBpZiAoZGF0YS5yIHx8IGRhdGEuZyB8fCBkYXRhLmIpIHtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgcjogZGF0YS5yIHx8IHJnYi5yLFxuICAgICAgICBnOiBkYXRhLmcgfHwgcmdiLmcsXG4gICAgICAgIGI6IGRhdGEuYiB8fCByZ2IuYixcbiAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgfSwgZSk7XG4gICAgfSBlbHNlIGlmIChkYXRhLmggfHwgZGF0YS5zIHx8IGRhdGEudikge1xuICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICBoOiBkYXRhLmggfHwgaHN2LmgsXG4gICAgICAgIHM6IGRhdGEucyB8fCBoc3YucyxcbiAgICAgICAgdjogZGF0YS52IHx8IGhzdi52LFxuICAgICAgICBzb3VyY2U6ICdoc3YnXG4gICAgICB9LCBlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZHMgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICBsYWJlbDogJ2gnLFxuICAgICAgdmFsdWU6IE1hdGgucm91bmQoaHN2LmgpLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLlJHQndyYXAsIGlucHV0OiBzdHlsZXMuUkdCaW5wdXQsIGxhYmVsOiBzdHlsZXMuUkdCbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAncycsXG4gICAgICB2YWx1ZTogTWF0aC5yb3VuZChoc3YucyAqIDEwMCksXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgbGFiZWw6ICd2JyxcbiAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKGhzdi52ICogMTAwKSxcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmRpdmlkZXIgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5FZGl0YWJsZUlucHV0LCB7XG4gICAgICBzdHlsZTogeyB3cmFwOiBzdHlsZXMuUkdCd3JhcCwgaW5wdXQ6IHN0eWxlcy5SR0JpbnB1dCwgbGFiZWw6IHN0eWxlcy5SR0JsYWJlbCB9LFxuICAgICAgbGFiZWw6ICdyJyxcbiAgICAgIHZhbHVlOiByZ2IucixcbiAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2VcbiAgICB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgIHN0eWxlOiB7IHdyYXA6IHN0eWxlcy5SR0J3cmFwLCBpbnB1dDogc3R5bGVzLlJHQmlucHV0LCBsYWJlbDogc3R5bGVzLlJHQmxhYmVsIH0sXG4gICAgICBsYWJlbDogJ2cnLFxuICAgICAgdmFsdWU6IHJnYi5nLFxuICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLlJHQndyYXAsIGlucHV0OiBzdHlsZXMuUkdCaW5wdXQsIGxhYmVsOiBzdHlsZXMuUkdCbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAnYicsXG4gICAgICB2YWx1ZTogcmdiLmIsXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5kaXZpZGVyIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgc3R5bGU6IHsgd3JhcDogc3R5bGVzLkhFWHdyYXAsIGlucHV0OiBzdHlsZXMuSEVYaW5wdXQsIGxhYmVsOiBzdHlsZXMuSEVYbGFiZWwgfSxcbiAgICAgIGxhYmVsOiAnIycsXG4gICAgICB2YWx1ZTogaGV4LnJlcGxhY2UoJyMnLCAnJyksXG4gICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgfSksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZFN5bWJvbHMgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLnN5bWJvbCB9LFxuICAgICAgICAnXFx4QjAnXG4gICAgICApLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuc3ltYm9sIH0sXG4gICAgICAgICclJ1xuICAgICAgKSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLnN5bWJvbCB9LFxuICAgICAgICAnJSdcbiAgICAgIClcbiAgICApXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQaG90b3Nob3BQaWNrZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QaG90b3Nob3BQb2ludGVyQ2lyY2xlID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBob3Rvc2hvcFBvaW50ZXJDaXJjbGUgPSBleHBvcnRzLlBob3Rvc2hvcFBvaW50ZXJDaXJjbGUgPSBmdW5jdGlvbiBQaG90b3Nob3BQb2ludGVyQ2lyY2xlKCkge1xuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgICAgIGJvcmRlcldpZHRoOiAnNHB4IDAgNHB4IDZweCcsXG4gICAgICAgIGJvcmRlckNvbG9yOiAndHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgI2ZmZicsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6ICcxcHgnLFxuICAgICAgICBsZWZ0OiAnMXB4J1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlQm9yZGVyOiB7XG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgICBib3JkZXJXaWR0aDogJzVweCAwIDVweCA4cHgnLFxuICAgICAgICBib3JkZXJDb2xvcjogJ3RyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICM1NTUnXG4gICAgICB9LFxuXG4gICAgICBsZWZ0OiB7XG4gICAgICAgIEV4dGVuZDogJ3RyaWFuZ2xlQm9yZGVyJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC0xM3B4LCAtNHB4KSdcbiAgICAgIH0sXG4gICAgICBsZWZ0SW5zaWRlOiB7XG4gICAgICAgIEV4dGVuZDogJ3RyaWFuZ2xlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC04cHgsIC01cHgpJ1xuICAgICAgfSxcblxuICAgICAgcmlnaHQ6IHtcbiAgICAgICAgRXh0ZW5kOiAndHJpYW5nbGVCb3JkZXInLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMjBweCwgLTE0cHgpIHJvdGF0ZSgxODBkZWcpJ1xuICAgICAgfSxcbiAgICAgIHJpZ2h0SW5zaWRlOiB7XG4gICAgICAgIEV4dGVuZDogJ3RyaWFuZ2xlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC04cHgsIC01cHgpJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5wb2ludGVyIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5sZWZ0IH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmxlZnRJbnNpZGUgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMucmlnaHQgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMucmlnaHRJbnNpZGUgfSlcbiAgICApXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQaG90b3Nob3BQb2ludGVyQ2lyY2xlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUGhvdG9zaG9wUG9pbnRlckNpcmNsZSA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBQaG90b3Nob3BQb2ludGVyQ2lyY2xlID0gZXhwb3J0cy5QaG90b3Nob3BQb2ludGVyQ2lyY2xlID0gZnVuY3Rpb24gUGhvdG9zaG9wUG9pbnRlckNpcmNsZShfcmVmKSB7XG4gIHZhciBoc2wgPSBfcmVmLmhzbDtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiAnMTJweCcsXG4gICAgICAgIGhlaWdodDogJzEycHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc2cHgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggI2ZmZicsXG4gICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNnB4LCAtNnB4KSdcbiAgICAgIH1cbiAgICB9LFxuICAgICdibGFjay1vdXRsaW5lJzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjMDAwJ1xuICAgICAgfVxuICAgIH1cbiAgfSwgeyAnYmxhY2stb3V0bGluZSc6IGhzbC5sID4gMC41IH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnBpY2tlciB9KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBob3Rvc2hvcFBvaW50ZXJDaXJjbGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QaG90b3Nob3BQcmV2aWV3cyA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBQaG90b3Nob3BQcmV2aWV3cyA9IGV4cG9ydHMuUGhvdG9zaG9wUHJldmlld3MgPSBmdW5jdGlvbiBQaG90b3Nob3BQcmV2aWV3cyhfcmVmKSB7XG4gIHZhciByZ2IgPSBfcmVmLnJnYixcbiAgICAgIGN1cnJlbnRDb2xvciA9IF9yZWYuY3VycmVudENvbG9yO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBzd2F0Y2hlczoge1xuICAgICAgICBib3JkZXI6ICcxcHggc29saWQgI0IzQjNCMycsXG4gICAgICAgIGJvcmRlckJvdHRvbTogJzFweCBzb2xpZCAjRjBGMEYwJyxcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnMnB4JyxcbiAgICAgICAgbWFyZ2luVG9wOiAnMXB4J1xuICAgICAgfSxcbiAgICAgIG5ldzoge1xuICAgICAgICBoZWlnaHQ6ICczNHB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogJ3JnYignICsgcmdiLnIgKyAnLCcgKyByZ2IuZyArICcsICcgKyByZ2IuYiArICcpJyxcbiAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMXB4IDAgMCAjMDAwLCBpbnNldCAtMXB4IDAgMCAjMDAwLCBpbnNldCAwIDFweCAwICMwMDAnXG4gICAgICB9LFxuICAgICAgY3VycmVudDoge1xuICAgICAgICBoZWlnaHQ6ICczNHB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogY3VycmVudENvbG9yLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAxcHggMCAwICMwMDAsIGluc2V0IC0xcHggMCAwICMwMDAsIGluc2V0IDAgLTFweCAwICMwMDAnXG4gICAgICB9LFxuICAgICAgbGFiZWw6IHtcbiAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgY29sb3I6ICcjMDAwJyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIG51bGwsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgJ25ldydcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoZXMgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMubmV3IH0pLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5jdXJyZW50IH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAnY3VycmVudCdcbiAgICApXG4gICk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBQaG90b3Nob3BQcmV2aWV3czsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNrZXRjaCA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX21lcmdlID0gcmVxdWlyZSgnbG9kYXNoL21lcmdlJyk7XG5cbnZhciBfbWVyZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVyZ2UpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG52YXIgX1NrZXRjaEZpZWxkcyA9IHJlcXVpcmUoJy4vU2tldGNoRmllbGRzJyk7XG5cbnZhciBfU2tldGNoRmllbGRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NrZXRjaEZpZWxkcyk7XG5cbnZhciBfU2tldGNoUHJlc2V0Q29sb3JzID0gcmVxdWlyZSgnLi9Ta2V0Y2hQcmVzZXRDb2xvcnMnKTtcblxudmFyIF9Ta2V0Y2hQcmVzZXRDb2xvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2tldGNoUHJlc2V0Q29sb3JzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFNrZXRjaCA9IGV4cG9ydHMuU2tldGNoID0gZnVuY3Rpb24gU2tldGNoKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICBoc3YgPSBfcmVmLmhzdixcbiAgICAgIGhzbCA9IF9yZWYuaHNsLFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGRpc2FibGVBbHBoYSA9IF9yZWYuZGlzYWJsZUFscGhhLFxuICAgICAgcHJlc2V0Q29sb3JzID0gX3JlZi5wcmVzZXRDb2xvcnMsXG4gICAgICByZW5kZXJlcnMgPSBfcmVmLnJlbmRlcmVycyxcbiAgICAgIF9yZWYkc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICBwYXNzZWRTdHlsZXMgPSBfcmVmJHN0eWxlcyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHN0eWxlcyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoKDAsIF9tZXJnZTIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0JzogX2V4dGVuZHMoe1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgcGFkZGluZzogJzEwcHggMTBweCAwJyxcbiAgICAgICAgYm94U2l6aW5nOiAnaW5pdGlhbCcsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjE1KSwgMCA4cHggMTZweCByZ2JhKDAsMCwwLC4xNSknXG4gICAgICB9LFxuICAgICAgc2F0dXJhdGlvbjoge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnNzUlJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIFNhdHVyYXRpb246IHtcbiAgICAgICAgcmFkaXVzOiAnM3B4JyxcbiAgICAgICAgc2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjE1KSwgaW5zZXQgMCAwIDRweCByZ2JhKDAsMCwwLC4yNSknXG4gICAgICB9LFxuICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgICB9LFxuICAgICAgc2xpZGVyczoge1xuICAgICAgICBwYWRkaW5nOiAnNHB4IDAnLFxuICAgICAgICBmbGV4OiAnMSdcbiAgICAgIH0sXG4gICAgICBjb2xvcjoge1xuICAgICAgICB3aWR0aDogJzI0cHgnLFxuICAgICAgICBoZWlnaHQ6ICcyNHB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIG1hcmdpblRvcDogJzRweCcsXG4gICAgICAgIG1hcmdpbkxlZnQ6ICc0cHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICczcHgnXG4gICAgICB9LFxuICAgICAgYWN0aXZlQ29sb3I6IHtcbiAgICAgICAgYWJzb2x1dGU6ICcwcHggMHB4IDBweCAwcHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgnICsgcmdiLnIgKyAnLCcgKyByZ2IuZyArICcsJyArIHJnYi5iICsgJywnICsgcmdiLmEgKyAnKScsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCByZ2JhKDAsMCwwLC4xNSksIGluc2V0IDAgMCA0cHggcmdiYSgwLDAsMCwuMjUpJ1xuICAgICAgfSxcbiAgICAgIGh1ZToge1xuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTBweCcsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgfSxcbiAgICAgIEh1ZToge1xuICAgICAgICByYWRpdXM6ICcycHgnLFxuICAgICAgICBzaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggcmdiYSgwLDAsMCwuMTUpLCBpbnNldCAwIDAgNHB4IHJnYmEoMCwwLDAsLjI1KSdcbiAgICAgIH0sXG5cbiAgICAgIGFscGhhOiB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBoZWlnaHQ6ICcxMHB4JyxcbiAgICAgICAgbWFyZ2luVG9wOiAnNHB4JyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICB9LFxuICAgICAgQWxwaGE6IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4JyxcbiAgICAgICAgc2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4IHJnYmEoMCwwLDAsLjE1KSwgaW5zZXQgMCAwIDRweCByZ2JhKDAsMCwwLC4yNSknXG4gICAgICB9XG4gICAgfSwgcGFzc2VkU3R5bGVzKSxcbiAgICAnZGlzYWJsZUFscGhhJzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTBweCdcbiAgICAgIH0sXG4gICAgICBodWU6IHtcbiAgICAgICAgaGVpZ2h0OiAnMTBweCdcbiAgICAgIH0sXG4gICAgICBhbHBoYToge1xuICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgIH1cbiAgICB9XG4gIH0sIHBhc3NlZFN0eWxlcyksIHsgZGlzYWJsZUFscGhhOiBkaXNhYmxlQWxwaGEgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIsIGNsYXNzTmFtZTogJ3NrZXRjaC1waWNrZXIgJyArIGNsYXNzTmFtZSB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc2F0dXJhdGlvbiB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5TYXR1cmF0aW9uLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMuU2F0dXJhdGlvbixcbiAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgIGhzdjogaHN2LFxuICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2VcbiAgICAgIH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmNvbnRyb2xzLCBjbGFzc05hbWU6ICdmbGV4Ym94LWZpeCcgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLnNsaWRlcnMgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmh1ZSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uSHVlLCB7XG4gICAgICAgICAgICBzdHlsZTogc3R5bGVzLkh1ZSxcbiAgICAgICAgICAgIGhzbDogaHNsLFxuICAgICAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogc3R5bGVzLmFscGhhIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5BbHBoYSwge1xuICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5BbHBoYSxcbiAgICAgICAgICAgIHJnYjogcmdiLFxuICAgICAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgICAgICByZW5kZXJlcnM6IHJlbmRlcmVycyxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBvbkNoYW5nZVxuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5jb2xvciB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkNoZWNrYm9hcmQsIG51bGwpLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmFjdGl2ZUNvbG9yIH0pXG4gICAgICApXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2tldGNoRmllbGRzMi5kZWZhdWx0LCB7XG4gICAgICByZ2I6IHJnYixcbiAgICAgIGhzbDogaHNsLFxuICAgICAgaGV4OiBoZXgsXG4gICAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgICBkaXNhYmxlQWxwaGE6IGRpc2FibGVBbHBoYVxuICAgIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ta2V0Y2hQcmVzZXRDb2xvcnMyLmRlZmF1bHQsIHtcbiAgICAgIGNvbG9yczogcHJlc2V0Q29sb3JzLFxuICAgICAgb25DbGljazogb25DaGFuZ2UsXG4gICAgICBvblN3YXRjaEhvdmVyOiBvblN3YXRjaEhvdmVyXG4gICAgfSlcbiAgKTtcbn07XG5cblNrZXRjaC5wcm9wVHlwZXMgPSB7XG4gIGRpc2FibGVBbHBoYTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICB3aWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcl0pLFxuICBzdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59O1xuXG5Ta2V0Y2guZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlQWxwaGE6IGZhbHNlLFxuICB3aWR0aDogMjAwLFxuICBzdHlsZXM6IHt9LFxuICBwcmVzZXRDb2xvcnM6IFsnI0QwMDIxQicsICcjRjVBNjIzJywgJyNGOEU3MUMnLCAnIzhCNTcyQScsICcjN0VEMzIxJywgJyM0MTc1MDUnLCAnI0JEMTBFMCcsICcjOTAxM0ZFJywgJyM0QTkwRTInLCAnIzUwRTNDMicsICcjQjhFOTg2JywgJyMwMDAwMDAnLCAnIzRBNEE0QScsICcjOUI5QjlCJywgJyNGRkZGRkYnXVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShTa2V0Y2gpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU2tldGNoRmllbGRzID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb2xvciA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvY29sb3InKTtcblxudmFyIGNvbG9yID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2NvbG9yKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxudmFyIFNrZXRjaEZpZWxkcyA9IGV4cG9ydHMuU2tldGNoRmllbGRzID0gZnVuY3Rpb24gU2tldGNoRmllbGRzKF9yZWYpIHtcbiAgdmFyIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIHJnYiA9IF9yZWYucmdiLFxuICAgICAgaHNsID0gX3JlZi5oc2wsXG4gICAgICBoZXggPSBfcmVmLmhleCxcbiAgICAgIGRpc2FibGVBbHBoYSA9IF9yZWYuZGlzYWJsZUFscGhhO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBwYWRkaW5nVG9wOiAnNHB4J1xuICAgICAgfSxcbiAgICAgIHNpbmdsZToge1xuICAgICAgICBmbGV4OiAnMScsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAnNnB4J1xuICAgICAgfSxcbiAgICAgIGFscGhhOiB7XG4gICAgICAgIGZsZXg6ICcxJyxcbiAgICAgICAgcGFkZGluZ0xlZnQ6ICc2cHgnXG4gICAgICB9LFxuICAgICAgZG91YmxlOiB7XG4gICAgICAgIGZsZXg6ICcyJ1xuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnODAlJyxcbiAgICAgICAgcGFkZGluZzogJzRweCAxMCUgM3B4JyxcbiAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgIGJveFNoYWRvdzogJ2luc2V0IDAgMCAwIDFweCAjY2NjJyxcbiAgICAgICAgZm9udFNpemU6ICcxMXB4J1xuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgICAgIGNvbG9yOiAnIzIyMicsXG4gICAgICAgIHBhZGRpbmdUb3A6ICczcHgnLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnNHB4JyxcbiAgICAgICAgdGV4dFRyYW5zZm9ybTogJ2NhcGl0YWxpemUnXG4gICAgICB9XG4gICAgfSxcbiAgICAnZGlzYWJsZUFscGhhJzoge1xuICAgICAgYWxwaGE6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9LCB7IGRpc2FibGVBbHBoYTogZGlzYWJsZUFscGhhIH0pO1xuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZGF0YSwgZSkge1xuICAgIGlmIChkYXRhLmhleCkge1xuICAgICAgY29sb3IuaXNWYWxpZEhleChkYXRhLmhleCkgJiYgb25DaGFuZ2Uoe1xuICAgICAgICBoZXg6IGRhdGEuaGV4LFxuICAgICAgICBzb3VyY2U6ICdoZXgnXG4gICAgICB9LCBlKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEuciB8fCBkYXRhLmcgfHwgZGF0YS5iKSB7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIHI6IGRhdGEuciB8fCByZ2IucixcbiAgICAgICAgZzogZGF0YS5nIHx8IHJnYi5nLFxuICAgICAgICBiOiBkYXRhLmIgfHwgcmdiLmIsXG4gICAgICAgIGE6IHJnYi5hLFxuICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICB9LCBlKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEuYSkge1xuICAgICAgaWYgKGRhdGEuYSA8IDApIHtcbiAgICAgICAgZGF0YS5hID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5hID4gMTAwKSB7XG4gICAgICAgIGRhdGEuYSA9IDEwMDtcbiAgICAgIH1cblxuICAgICAgZGF0YS5hIC89IDEwMDtcbiAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgaDogaHNsLmgsXG4gICAgICAgIHM6IGhzbC5zLFxuICAgICAgICBsOiBoc2wubCxcbiAgICAgICAgYTogZGF0YS5hLFxuICAgICAgICBzb3VyY2U6ICdyZ2InXG4gICAgICB9LCBlKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5maWVsZHMsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuZG91YmxlIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICBsYWJlbDogJ2hleCcsXG4gICAgICAgIHZhbHVlOiBoZXgucmVwbGFjZSgnIycsICcnKSxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICAgICAgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc2luZ2xlIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICBsYWJlbDogJ3InLFxuICAgICAgICB2YWx1ZTogcmdiLnIsXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgIGRyYWdMYWJlbDogJ3RydWUnLFxuICAgICAgICBkcmFnTWF4OiAnMjU1J1xuICAgICAgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc2luZ2xlIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICBsYWJlbDogJ2cnLFxuICAgICAgICB2YWx1ZTogcmdiLmcsXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgIGRyYWdMYWJlbDogJ3RydWUnLFxuICAgICAgICBkcmFnTWF4OiAnMjU1J1xuICAgICAgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc2luZ2xlIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgc3R5bGU6IHsgaW5wdXQ6IHN0eWxlcy5pbnB1dCwgbGFiZWw6IHN0eWxlcy5sYWJlbCB9LFxuICAgICAgICBsYWJlbDogJ2InLFxuICAgICAgICB2YWx1ZTogcmdiLmIsXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgIGRyYWdMYWJlbDogJ3RydWUnLFxuICAgICAgICBkcmFnTWF4OiAnMjU1J1xuICAgICAgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuYWxwaGEgfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uRWRpdGFibGVJbnB1dCwge1xuICAgICAgICBzdHlsZTogeyBpbnB1dDogc3R5bGVzLmlucHV0LCBsYWJlbDogc3R5bGVzLmxhYmVsIH0sXG4gICAgICAgIGxhYmVsOiAnYScsXG4gICAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKHJnYi5hICogMTAwKSxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgZHJhZ0xhYmVsOiAndHJ1ZScsXG4gICAgICAgIGRyYWdNYXg6ICcxMDAnXG4gICAgICB9KVxuICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNrZXRjaEZpZWxkczsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNrZXRjaFByZXNldENvbG9ycyA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU2tldGNoUHJlc2V0Q29sb3JzID0gZXhwb3J0cy5Ta2V0Y2hQcmVzZXRDb2xvcnMgPSBmdW5jdGlvbiBTa2V0Y2hQcmVzZXRDb2xvcnMoX3JlZikge1xuICB2YXIgY29sb3JzID0gX3JlZi5jb2xvcnMsXG4gICAgICBfcmVmJG9uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICBvbkNsaWNrID0gX3JlZiRvbkNsaWNrID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25DbGljayxcbiAgICAgIG9uU3dhdGNoSG92ZXIgPSBfcmVmLm9uU3dhdGNoSG92ZXI7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICBtYXJnaW46ICcwIC0xMHB4JyxcbiAgICAgICAgcGFkZGluZzogJzEwcHggMCAwIDEwcHgnLFxuICAgICAgICBib3JkZXJUb3A6ICcxcHggc29saWQgI2VlZScsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBzd2F0Y2hXcmFwOiB7XG4gICAgICAgIHdpZHRoOiAnMTZweCcsXG4gICAgICAgIGhlaWdodDogJzE2cHgnLFxuICAgICAgICBtYXJnaW46ICcwIDEwcHggMTBweCAwJ1xuICAgICAgfSxcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICBib3JkZXJSYWRpdXM6ICczcHgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggcmdiYSgwLDAsMCwuMTUpJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ25vLXByZXNldHMnOiB7XG4gICAgICBjb2xvcnM6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgJ25vLXByZXNldHMnOiAhY29sb3JzIHx8ICFjb2xvcnMubGVuZ3RoXG4gIH0pO1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGhleCwgZSkge1xuICAgIG9uQ2xpY2soe1xuICAgICAgaGV4OiBoZXgsXG4gICAgICBzb3VyY2U6ICdoZXgnXG4gICAgfSwgZSk7XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5jb2xvcnMsIGNsYXNzTmFtZTogJ2ZsZXhib3gtZml4JyB9LFxuICAgIGNvbG9ycy5tYXAoZnVuY3Rpb24gKGNvbG9yT2JqT3JTdHJpbmcpIHtcbiAgICAgIHZhciBjID0gdHlwZW9mIGNvbG9yT2JqT3JTdHJpbmcgPT09ICdzdHJpbmcnID8geyBjb2xvcjogY29sb3JPYmpPclN0cmluZyB9IDogY29sb3JPYmpPclN0cmluZztcbiAgICAgIHZhciBrZXkgPSAnJyArIGMuY29sb3IgKyAoYy50aXRsZSB8fCAnJyk7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGtleToga2V5LCBzdHlsZTogc3R5bGVzLnN3YXRjaFdyYXAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5Td2F0Y2gsIF9leHRlbmRzKHt9LCBjLCB7XG4gICAgICAgICAgc3R5bGU6IHN0eWxlcy5zd2F0Y2gsXG4gICAgICAgICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgICAgICAgb25Ib3Zlcjogb25Td2F0Y2hIb3ZlcixcbiAgICAgICAgICBmb2N1c1N0eWxlOiB7XG4gICAgICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggcmdiYSgwLDAsMCwuMTUpLCAwIDAgNHB4ICcgKyBjLmNvbG9yXG4gICAgICAgICAgfVxuICAgICAgICB9KSlcbiAgICAgICk7XG4gICAgfSlcbiAgKTtcbn07XG5cblNrZXRjaFByZXNldENvbG9ycy5wcm9wVHlwZXMgPSB7XG4gIGNvbG9yczogX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHRpdGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9KV0pKS5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTa2V0Y2hQcmVzZXRDb2xvcnM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TbGlkZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tZXJnZSA9IHJlcXVpcmUoJ2xvZGFzaC9tZXJnZScpO1xuXG52YXIgX21lcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lcmdlKTtcblxudmFyIF9jb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcblxudmFyIF9TbGlkZXJTd2F0Y2hlcyA9IHJlcXVpcmUoJy4vU2xpZGVyU3dhdGNoZXMnKTtcblxudmFyIF9TbGlkZXJTd2F0Y2hlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TbGlkZXJTd2F0Y2hlcyk7XG5cbnZhciBfU2xpZGVyUG9pbnRlciA9IHJlcXVpcmUoJy4vU2xpZGVyUG9pbnRlcicpO1xuXG52YXIgX1NsaWRlclBvaW50ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2xpZGVyUG9pbnRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTbGlkZXIgPSBleHBvcnRzLlNsaWRlciA9IGZ1bmN0aW9uIFNsaWRlcihfcmVmKSB7XG4gIHZhciBoc2wgPSBfcmVmLmhzbCxcbiAgICAgIG9uQ2hhbmdlID0gX3JlZi5vbkNoYW5nZSxcbiAgICAgIHBvaW50ZXIgPSBfcmVmLnBvaW50ZXIsXG4gICAgICBfcmVmJHN0eWxlcyA9IF9yZWYuc3R5bGVzLFxuICAgICAgcGFzc2VkU3R5bGVzID0gX3JlZiRzdHlsZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogX3JlZiRzdHlsZXMsXG4gICAgICBfcmVmJGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZiRjbGFzc05hbWUgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiRjbGFzc05hbWU7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKCgwLCBfbWVyZ2UyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIGh1ZToge1xuICAgICAgICBoZWlnaHQ6ICcxMnB4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0sXG4gICAgICBIdWU6IHtcbiAgICAgICAgcmFkaXVzOiAnMnB4J1xuICAgICAgfVxuICAgIH1cbiAgfSwgcGFzc2VkU3R5bGVzKSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy53cmFwIHx8IHt9LCBjbGFzc05hbWU6ICdzbGlkZXItcGlja2VyICcgKyBjbGFzc05hbWUgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmh1ZSB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2NvbW1vbi5IdWUsIHtcbiAgICAgICAgc3R5bGU6IHN0eWxlcy5IdWUsXG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBwb2ludGVyOiBwb2ludGVyLFxuICAgICAgICBvbkNoYW5nZTogb25DaGFuZ2VcbiAgICAgIH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnN3YXRjaGVzIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2xpZGVyU3dhdGNoZXMyLmRlZmF1bHQsIHsgaHNsOiBoc2wsIG9uQ2xpY2s6IG9uQ2hhbmdlIH0pXG4gICAgKVxuICApO1xufTtcblxuU2xpZGVyLnByb3BUeXBlcyA9IHtcbiAgc3R5bGVzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufTtcblNsaWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHBvaW50ZXI6IF9TbGlkZXJQb2ludGVyMi5kZWZhdWx0LFxuICBzdHlsZXM6IHt9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NvbW1vbi5Db2xvcldyYXApKFNsaWRlcik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TbGlkZXJQb2ludGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFNsaWRlclBvaW50ZXIgPSBleHBvcnRzLlNsaWRlclBvaW50ZXIgPSBmdW5jdGlvbiBTbGlkZXJQb2ludGVyKCkge1xuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiAnMTRweCcsXG4gICAgICAgIGhlaWdodDogJzE0cHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc2cHgnLFxuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTdweCwgLTFweCknLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2IoMjQ4LCAyNDgsIDI0OCknLFxuICAgICAgICBib3hTaGFkb3c6ICcwIDFweCA0cHggMCByZ2JhKDAsIDAsIDAsIDAuMzcpJ1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMucGlja2VyIH0pO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2xpZGVyUG9pbnRlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNsaWRlclN3YXRjaCA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Y3NzID0gcmVxdWlyZSgncmVhY3Rjc3MnKTtcblxudmFyIF9yZWFjdGNzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGNzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTbGlkZXJTd2F0Y2ggPSBleHBvcnRzLlNsaWRlclN3YXRjaCA9IGZ1bmN0aW9uIFNsaWRlclN3YXRjaChfcmVmKSB7XG4gIHZhciBoc2wgPSBfcmVmLmhzbCxcbiAgICAgIG9mZnNldCA9IF9yZWYub2Zmc2V0LFxuICAgICAgX3JlZiRvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25DbGljayA9IF9yZWYkb25DbGljayA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKCkge30gOiBfcmVmJG9uQ2xpY2ssXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZSxcbiAgICAgIGZpcnN0ID0gX3JlZi5maXJzdCxcbiAgICAgIGxhc3QgPSBfcmVmLmxhc3Q7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHN3YXRjaDoge1xuICAgICAgICBoZWlnaHQ6ICcxMnB4JyxcbiAgICAgICAgYmFja2dyb3VuZDogJ2hzbCgnICsgaHNsLmggKyAnLCA1MCUsICcgKyBvZmZzZXQgKiAxMDAgKyAnJSknLFxuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2ZpcnN0Jzoge1xuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCAwIDAgMnB4J1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2xhc3QnOiB7XG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMCAycHggMnB4IDAnXG4gICAgICB9XG4gICAgfSxcbiAgICAnYWN0aXZlJzoge1xuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWSgxLjgpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMy42cHgvMnB4J1xuICAgICAgfVxuICAgIH1cbiAgfSwgeyBhY3RpdmU6IGFjdGl2ZSwgZmlyc3Q6IGZpcnN0LCBsYXN0OiBsYXN0IH0pO1xuXG4gIHZhciBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICByZXR1cm4gb25DbGljayh7XG4gICAgICBoOiBoc2wuaCxcbiAgICAgIHM6IDAuNSxcbiAgICAgIGw6IG9mZnNldCxcbiAgICAgIHNvdXJjZTogJ2hzbCdcbiAgICB9LCBlKTtcbiAgfTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2gsIG9uQ2xpY2s6IGhhbmRsZUNsaWNrIH0pO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2xpZGVyU3dhdGNoOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU2xpZGVyU3dhdGNoZXMgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX1NsaWRlclN3YXRjaCA9IHJlcXVpcmUoJy4vU2xpZGVyU3dhdGNoJyk7XG5cbnZhciBfU2xpZGVyU3dhdGNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NsaWRlclN3YXRjaCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTbGlkZXJTd2F0Y2hlcyA9IGV4cG9ydHMuU2xpZGVyU3dhdGNoZXMgPSBmdW5jdGlvbiBTbGlkZXJTd2F0Y2hlcyhfcmVmKSB7XG4gIHZhciBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgaHNsID0gX3JlZi5oc2w7XG5cbiAgdmFyIHN0eWxlcyA9ICgwLCBfcmVhY3Rjc3MyLmRlZmF1bHQpKHtcbiAgICAnZGVmYXVsdCc6IHtcbiAgICAgIHN3YXRjaGVzOiB7XG4gICAgICAgIG1hcmdpblRvcDogJzIwcHgnXG4gICAgICB9LFxuICAgICAgc3dhdGNoOiB7XG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICB3aWR0aDogJzIwJScsXG4gICAgICAgIHBhZGRpbmdSaWdodDogJzFweCcsXG4gICAgICAgIGZsb2F0OiAnbGVmdCdcbiAgICAgIH0sXG4gICAgICBjbGVhcjoge1xuICAgICAgICBjbGVhcjogJ2JvdGgnXG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBBY2NlcHRpYmxlIGRpZmZlcmVuY2UgaW4gZmxvYXRpbmcgcG9pbnQgZXF1YWxpdHlcbiAgdmFyIGVwc2lsb24gPSAwLjE7XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2hlcyB9LFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2xpZGVyU3dhdGNoMi5kZWZhdWx0LCB7XG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBvZmZzZXQ6ICcuODAnLFxuICAgICAgICBhY3RpdmU6IE1hdGguYWJzKGhzbC5sIC0gMC44MCkgPCBlcHNpbG9uICYmIE1hdGguYWJzKGhzbC5zIC0gMC41MCkgPCBlcHNpbG9uLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICBmaXJzdDogdHJ1ZVxuICAgICAgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2xpZGVyU3dhdGNoMi5kZWZhdWx0LCB7XG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBvZmZzZXQ6ICcuNjUnLFxuICAgICAgICBhY3RpdmU6IE1hdGguYWJzKGhzbC5sIC0gMC42NSkgPCBlcHNpbG9uICYmIE1hdGguYWJzKGhzbC5zIC0gMC41MCkgPCBlcHNpbG9uLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrXG4gICAgICB9KVxuICAgICksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHN0eWxlcy5zd2F0Y2ggfSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TbGlkZXJTd2F0Y2gyLmRlZmF1bHQsIHtcbiAgICAgICAgaHNsOiBoc2wsXG4gICAgICAgIG9mZnNldDogJy41MCcsXG4gICAgICAgIGFjdGl2ZTogTWF0aC5hYnMoaHNsLmwgLSAwLjUwKSA8IGVwc2lsb24gJiYgTWF0aC5hYnMoaHNsLnMgLSAwLjUwKSA8IGVwc2lsb24sXG4gICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2tcbiAgICAgIH0pXG4gICAgKSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLnN3YXRjaCB9LFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NsaWRlclN3YXRjaDIuZGVmYXVsdCwge1xuICAgICAgICBoc2w6IGhzbCxcbiAgICAgICAgb2Zmc2V0OiAnLjM1JyxcbiAgICAgICAgYWN0aXZlOiBNYXRoLmFicyhoc2wubCAtIDAuMzUpIDwgZXBzaWxvbiAmJiBNYXRoLmFicyhoc2wucyAtIDAuNTApIDwgZXBzaWxvbixcbiAgICAgICAgb25DbGljazogb25DbGlja1xuICAgICAgfSlcbiAgICApLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuc3dhdGNoIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU2xpZGVyU3dhdGNoMi5kZWZhdWx0LCB7XG4gICAgICAgIGhzbDogaHNsLFxuICAgICAgICBvZmZzZXQ6ICcuMjAnLFxuICAgICAgICBhY3RpdmU6IE1hdGguYWJzKGhzbC5sIC0gMC4yMCkgPCBlcHNpbG9uICYmIE1hdGguYWJzKGhzbC5zIC0gMC41MCkgPCBlcHNpbG9uLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICBsYXN0OiB0cnVlXG4gICAgICB9KVxuICAgICksXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy5jbGVhciB9KVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU2xpZGVyU3dhdGNoZXM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Td2F0Y2hlcyA9IHVuZGVmaW5lZDtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdGNzcyA9IHJlcXVpcmUoJ3JlYWN0Y3NzJyk7XG5cbnZhciBfcmVhY3Rjc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rjc3MpO1xuXG52YXIgX21hcCA9IHJlcXVpcmUoJ2xvZGFzaC9tYXAnKTtcblxudmFyIF9tYXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWFwKTtcblxudmFyIF9tZXJnZSA9IHJlcXVpcmUoJ2xvZGFzaC9tZXJnZScpO1xuXG52YXIgX21lcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lcmdlKTtcblxudmFyIF9tYXRlcmlhbENvbG9ycyA9IHJlcXVpcmUoJ21hdGVyaWFsLWNvbG9ycycpO1xuXG52YXIgbWF0ZXJpYWwgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfbWF0ZXJpYWxDb2xvcnMpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG52YXIgX1N3YXRjaGVzR3JvdXAgPSByZXF1aXJlKCcuL1N3YXRjaGVzR3JvdXAnKTtcblxudmFyIF9Td2F0Y2hlc0dyb3VwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N3YXRjaGVzR3JvdXApO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU3dhdGNoZXMgPSBleHBvcnRzLlN3YXRjaGVzID0gZnVuY3Rpb24gU3dhdGNoZXMoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgY29sb3JzID0gX3JlZi5jb2xvcnMsXG4gICAgICBoZXggPSBfcmVmLmhleCxcbiAgICAgIF9yZWYkc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICBwYXNzZWRTdHlsZXMgPSBfcmVmJHN0eWxlcyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHN0eWxlcyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoKDAsIF9tZXJnZTIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgcGlja2VyOiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0sXG4gICAgICBvdmVyZmxvdzoge1xuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgb3ZlcmZsb3dZOiAnc2Nyb2xsJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgcGFkZGluZzogJzE2cHggMCA2cHggMTZweCdcbiAgICAgIH0sXG4gICAgICBjbGVhcjoge1xuICAgICAgICBjbGVhcjogJ2JvdGgnXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpKTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGRhdGEsIGUpIHtcbiAgICByZXR1cm4gb25DaGFuZ2UoeyBoZXg6IGRhdGEsIHNvdXJjZTogJ2hleCcgfSwgZSk7XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5waWNrZXIsIGNsYXNzTmFtZTogJ3N3YXRjaGVzLXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBfY29tbW9uLlJhaXNlZCxcbiAgICAgIG51bGwsXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5vdmVyZmxvdyB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBzdHlsZXMuYm9keSB9LFxuICAgICAgICAgICgwLCBfbWFwMi5kZWZhdWx0KShjb2xvcnMsIGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Td2F0Y2hlc0dyb3VwMi5kZWZhdWx0LCB7XG4gICAgICAgICAgICAgIGtleTogZ3JvdXAudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwLFxuICAgICAgICAgICAgICBhY3RpdmU6IGhleCxcbiAgICAgICAgICAgICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgICAgICAgICAgICBvblN3YXRjaEhvdmVyOiBvblN3YXRjaEhvdmVyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLmNsZWFyIH0pXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gICk7XG59O1xuXG5Td2F0Y2hlcy5wcm9wVHlwZXMgPSB7XG4gIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXSksXG4gIGhlaWdodDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcl0pLFxuICBjb2xvcnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcpKSxcbiAgc3R5bGVzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxuXG4gIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbn07U3dhdGNoZXMuZGVmYXVsdFByb3BzID0ge1xuICB3aWR0aDogMzIwLFxuICBoZWlnaHQ6IDI0MCxcbiAgY29sb3JzOiBbW21hdGVyaWFsLnJlZFsnOTAwJ10sIG1hdGVyaWFsLnJlZFsnNzAwJ10sIG1hdGVyaWFsLnJlZFsnNTAwJ10sIG1hdGVyaWFsLnJlZFsnMzAwJ10sIG1hdGVyaWFsLnJlZFsnMTAwJ11dLCBbbWF0ZXJpYWwucGlua1snOTAwJ10sIG1hdGVyaWFsLnBpbmtbJzcwMCddLCBtYXRlcmlhbC5waW5rWyc1MDAnXSwgbWF0ZXJpYWwucGlua1snMzAwJ10sIG1hdGVyaWFsLnBpbmtbJzEwMCddXSwgW21hdGVyaWFsLnB1cnBsZVsnOTAwJ10sIG1hdGVyaWFsLnB1cnBsZVsnNzAwJ10sIG1hdGVyaWFsLnB1cnBsZVsnNTAwJ10sIG1hdGVyaWFsLnB1cnBsZVsnMzAwJ10sIG1hdGVyaWFsLnB1cnBsZVsnMTAwJ11dLCBbbWF0ZXJpYWwuZGVlcFB1cnBsZVsnOTAwJ10sIG1hdGVyaWFsLmRlZXBQdXJwbGVbJzcwMCddLCBtYXRlcmlhbC5kZWVwUHVycGxlWyc1MDAnXSwgbWF0ZXJpYWwuZGVlcFB1cnBsZVsnMzAwJ10sIG1hdGVyaWFsLmRlZXBQdXJwbGVbJzEwMCddXSwgW21hdGVyaWFsLmluZGlnb1snOTAwJ10sIG1hdGVyaWFsLmluZGlnb1snNzAwJ10sIG1hdGVyaWFsLmluZGlnb1snNTAwJ10sIG1hdGVyaWFsLmluZGlnb1snMzAwJ10sIG1hdGVyaWFsLmluZGlnb1snMTAwJ11dLCBbbWF0ZXJpYWwuYmx1ZVsnOTAwJ10sIG1hdGVyaWFsLmJsdWVbJzcwMCddLCBtYXRlcmlhbC5ibHVlWyc1MDAnXSwgbWF0ZXJpYWwuYmx1ZVsnMzAwJ10sIG1hdGVyaWFsLmJsdWVbJzEwMCddXSwgW21hdGVyaWFsLmxpZ2h0Qmx1ZVsnOTAwJ10sIG1hdGVyaWFsLmxpZ2h0Qmx1ZVsnNzAwJ10sIG1hdGVyaWFsLmxpZ2h0Qmx1ZVsnNTAwJ10sIG1hdGVyaWFsLmxpZ2h0Qmx1ZVsnMzAwJ10sIG1hdGVyaWFsLmxpZ2h0Qmx1ZVsnMTAwJ11dLCBbbWF0ZXJpYWwuY3lhblsnOTAwJ10sIG1hdGVyaWFsLmN5YW5bJzcwMCddLCBtYXRlcmlhbC5jeWFuWyc1MDAnXSwgbWF0ZXJpYWwuY3lhblsnMzAwJ10sIG1hdGVyaWFsLmN5YW5bJzEwMCddXSwgW21hdGVyaWFsLnRlYWxbJzkwMCddLCBtYXRlcmlhbC50ZWFsWyc3MDAnXSwgbWF0ZXJpYWwudGVhbFsnNTAwJ10sIG1hdGVyaWFsLnRlYWxbJzMwMCddLCBtYXRlcmlhbC50ZWFsWycxMDAnXV0sIFsnIzE5NEQzMycsIG1hdGVyaWFsLmdyZWVuWyc3MDAnXSwgbWF0ZXJpYWwuZ3JlZW5bJzUwMCddLCBtYXRlcmlhbC5ncmVlblsnMzAwJ10sIG1hdGVyaWFsLmdyZWVuWycxMDAnXV0sIFttYXRlcmlhbC5saWdodEdyZWVuWyc5MDAnXSwgbWF0ZXJpYWwubGlnaHRHcmVlblsnNzAwJ10sIG1hdGVyaWFsLmxpZ2h0R3JlZW5bJzUwMCddLCBtYXRlcmlhbC5saWdodEdyZWVuWyczMDAnXSwgbWF0ZXJpYWwubGlnaHRHcmVlblsnMTAwJ11dLCBbbWF0ZXJpYWwubGltZVsnOTAwJ10sIG1hdGVyaWFsLmxpbWVbJzcwMCddLCBtYXRlcmlhbC5saW1lWyc1MDAnXSwgbWF0ZXJpYWwubGltZVsnMzAwJ10sIG1hdGVyaWFsLmxpbWVbJzEwMCddXSwgW21hdGVyaWFsLnllbGxvd1snOTAwJ10sIG1hdGVyaWFsLnllbGxvd1snNzAwJ10sIG1hdGVyaWFsLnllbGxvd1snNTAwJ10sIG1hdGVyaWFsLnllbGxvd1snMzAwJ10sIG1hdGVyaWFsLnllbGxvd1snMTAwJ11dLCBbbWF0ZXJpYWwuYW1iZXJbJzkwMCddLCBtYXRlcmlhbC5hbWJlclsnNzAwJ10sIG1hdGVyaWFsLmFtYmVyWyc1MDAnXSwgbWF0ZXJpYWwuYW1iZXJbJzMwMCddLCBtYXRlcmlhbC5hbWJlclsnMTAwJ11dLCBbbWF0ZXJpYWwub3JhbmdlWyc5MDAnXSwgbWF0ZXJpYWwub3JhbmdlWyc3MDAnXSwgbWF0ZXJpYWwub3JhbmdlWyc1MDAnXSwgbWF0ZXJpYWwub3JhbmdlWyczMDAnXSwgbWF0ZXJpYWwub3JhbmdlWycxMDAnXV0sIFttYXRlcmlhbC5kZWVwT3JhbmdlWyc5MDAnXSwgbWF0ZXJpYWwuZGVlcE9yYW5nZVsnNzAwJ10sIG1hdGVyaWFsLmRlZXBPcmFuZ2VbJzUwMCddLCBtYXRlcmlhbC5kZWVwT3JhbmdlWyczMDAnXSwgbWF0ZXJpYWwuZGVlcE9yYW5nZVsnMTAwJ11dLCBbbWF0ZXJpYWwuYnJvd25bJzkwMCddLCBtYXRlcmlhbC5icm93blsnNzAwJ10sIG1hdGVyaWFsLmJyb3duWyc1MDAnXSwgbWF0ZXJpYWwuYnJvd25bJzMwMCddLCBtYXRlcmlhbC5icm93blsnMTAwJ11dLCBbbWF0ZXJpYWwuYmx1ZUdyZXlbJzkwMCddLCBtYXRlcmlhbC5ibHVlR3JleVsnNzAwJ10sIG1hdGVyaWFsLmJsdWVHcmV5Wyc1MDAnXSwgbWF0ZXJpYWwuYmx1ZUdyZXlbJzMwMCddLCBtYXRlcmlhbC5ibHVlR3JleVsnMTAwJ11dLCBbJyMwMDAwMDAnLCAnIzUyNTI1MicsICcjOTY5Njk2JywgJyNEOUQ5RDknLCAnI0ZGRkZGRiddXSxcbiAgc3R5bGVzOiB7fVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9jb21tb24uQ29sb3JXcmFwKShTd2F0Y2hlcyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Td2F0Y2hlc0NvbG9yID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9jb2xvciA9IHJlcXVpcmUoJy4uLy4uL2hlbHBlcnMvY29sb3InKTtcblxudmFyIGNvbG9yVXRpbHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfY29sb3IpO1xuXG52YXIgX2NvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xuXG52YXIgX0NoZWNrSWNvbiA9IHJlcXVpcmUoJ0BpY29ucy9tYXRlcmlhbC9DaGVja0ljb24nKTtcblxudmFyIF9DaGVja0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2hlY2tJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFN3YXRjaGVzQ29sb3IgPSBleHBvcnRzLlN3YXRjaGVzQ29sb3IgPSBmdW5jdGlvbiBTd2F0Y2hlc0NvbG9yKF9yZWYpIHtcbiAgdmFyIGNvbG9yID0gX3JlZi5jb2xvcixcbiAgICAgIF9yZWYkb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIG9uQ2xpY2sgPSBfcmVmJG9uQ2xpY2sgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uICgpIHt9IDogX3JlZiRvbkNsaWNrLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGZpcnN0ID0gX3JlZi5maXJzdCxcbiAgICAgIGxhc3QgPSBfcmVmLmxhc3QsXG4gICAgICBhY3RpdmUgPSBfcmVmLmFjdGl2ZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgd2lkdGg6ICc0MHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMjRweCcsXG4gICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvcixcbiAgICAgICAgbWFyZ2luQm90dG9tOiAnMXB4J1xuICAgICAgfSxcbiAgICAgIGNoZWNrOiB7XG4gICAgICAgIGNvbG9yOiBjb2xvclV0aWxzLmdldENvbnRyYXN0aW5nQ29sb3IoY29sb3IpLFxuICAgICAgICBtYXJnaW5MZWZ0OiAnOHB4JyxcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICAnZmlyc3QnOiB7XG4gICAgICBjb2xvcjoge1xuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzJweCAycHggMCAwJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2xhc3QnOiB7XG4gICAgICBjb2xvcjoge1xuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzAgMCAycHggMnB4J1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2FjdGl2ZSc6IHtcbiAgICAgIGNoZWNrOiB7XG4gICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgIH1cbiAgICB9LFxuICAgICdjb2xvci0jRkZGRkZGJzoge1xuICAgICAgY29sb3I6IHtcbiAgICAgICAgYm94U2hhZG93OiAnaW5zZXQgMCAwIDAgMXB4ICNkZGQnXG4gICAgICB9LFxuICAgICAgY2hlY2s6IHtcbiAgICAgICAgY29sb3I6ICcjMzMzJ1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3RyYW5zcGFyZW50Jzoge1xuICAgICAgY2hlY2s6IHtcbiAgICAgICAgY29sb3I6ICcjMzMzJ1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGZpcnN0OiBmaXJzdCxcbiAgICBsYXN0OiBsYXN0LFxuICAgIGFjdGl2ZTogYWN0aXZlLFxuICAgICdjb2xvci0jRkZGRkZGJzogY29sb3IgPT09ICcjRkZGRkZGJyxcbiAgICAndHJhbnNwYXJlbnQnOiBjb2xvciA9PT0gJ3RyYW5zcGFyZW50J1xuICB9KTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX2NvbW1vbi5Td2F0Y2gsXG4gICAge1xuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgc3R5bGU6IHN0eWxlcy5jb2xvcixcbiAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICBvbkhvdmVyOiBvblN3YXRjaEhvdmVyLFxuICAgICAgZm9jdXNTdHlsZTogeyBib3hTaGFkb3c6ICcwIDAgNHB4ICcgKyBjb2xvciB9XG4gICAgfSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICdkaXYnLFxuICAgICAgeyBzdHlsZTogc3R5bGVzLmNoZWNrIH0sXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ2hlY2tJY29uMi5kZWZhdWx0LCBudWxsKVxuICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFN3YXRjaGVzQ29sb3I7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Td2F0Y2hlc0dyb3VwID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tYXAgPSByZXF1aXJlKCdsb2Rhc2gvbWFwJyk7XG5cbnZhciBfbWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcCk7XG5cbnZhciBfU3dhdGNoZXNDb2xvciA9IHJlcXVpcmUoJy4vU3dhdGNoZXNDb2xvcicpO1xuXG52YXIgX1N3YXRjaGVzQ29sb3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3dhdGNoZXNDb2xvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTd2F0Y2hlc0dyb3VwID0gZXhwb3J0cy5Td2F0Y2hlc0dyb3VwID0gZnVuY3Rpb24gU3dhdGNoZXNHcm91cChfcmVmKSB7XG4gIHZhciBvbkNsaWNrID0gX3JlZi5vbkNsaWNrLFxuICAgICAgb25Td2F0Y2hIb3ZlciA9IF9yZWYub25Td2F0Y2hIb3ZlcixcbiAgICAgIGdyb3VwID0gX3JlZi5ncm91cCxcbiAgICAgIGFjdGl2ZSA9IF9yZWYuYWN0aXZlO1xuXG4gIHZhciBzdHlsZXMgPSAoMCwgX3JlYWN0Y3NzMi5kZWZhdWx0KSh7XG4gICAgJ2RlZmF1bHQnOiB7XG4gICAgICBncm91cDoge1xuICAgICAgICBwYWRkaW5nQm90dG9tOiAnMTBweCcsXG4gICAgICAgIHdpZHRoOiAnNDBweCcsXG4gICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgIG1hcmdpblJpZ2h0OiAnMTBweCdcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7IHN0eWxlOiBzdHlsZXMuZ3JvdXAgfSxcbiAgICAoMCwgX21hcDIuZGVmYXVsdCkoZ3JvdXAsIGZ1bmN0aW9uIChjb2xvciwgaSkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Td2F0Y2hlc0NvbG9yMi5kZWZhdWx0LCB7XG4gICAgICAgIGtleTogY29sb3IsXG4gICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgYWN0aXZlOiBjb2xvci50b0xvd2VyQ2FzZSgpID09PSBhY3RpdmUsXG4gICAgICAgIGZpcnN0OiBpID09PSAwLFxuICAgICAgICBsYXN0OiBpID09PSBncm91cC5sZW5ndGggLSAxLFxuICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICBvblN3YXRjaEhvdmVyOiBvblN3YXRjaEhvdmVyXG4gICAgICB9KTtcbiAgICB9KVxuICApO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU3dhdGNoZXNHcm91cDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlR3aXR0ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3Rjc3MgPSByZXF1aXJlKCdyZWFjdGNzcycpO1xuXG52YXIgX3JlYWN0Y3NzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Y3NzKTtcblxudmFyIF9tYXAgPSByZXF1aXJlKCdsb2Rhc2gvbWFwJyk7XG5cbnZhciBfbWFwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hcCk7XG5cbnZhciBfbWVyZ2UgPSByZXF1aXJlKCdsb2Rhc2gvbWVyZ2UnKTtcblxudmFyIF9tZXJnZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZXJnZSk7XG5cbnZhciBfY29sb3IgPSByZXF1aXJlKCcuLi8uLi9oZWxwZXJzL2NvbG9yJyk7XG5cbnZhciBjb2xvciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jb2xvcik7XG5cbnZhciBfY29tbW9uID0gcmVxdWlyZSgnLi4vY29tbW9uJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBUd2l0dGVyID0gZXhwb3J0cy5Ud2l0dGVyID0gZnVuY3Rpb24gVHdpdHRlcihfcmVmKSB7XG4gIHZhciBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvblN3YXRjaEhvdmVyID0gX3JlZi5vblN3YXRjaEhvdmVyLFxuICAgICAgaGV4ID0gX3JlZi5oZXgsXG4gICAgICBjb2xvcnMgPSBfcmVmLmNvbG9ycyxcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIHRyaWFuZ2xlID0gX3JlZi50cmlhbmdsZSxcbiAgICAgIF9yZWYkc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICBwYXNzZWRTdHlsZXMgPSBfcmVmJHN0eWxlcyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJHN0eWxlcyxcbiAgICAgIF9yZWYkY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmJGNsYXNzTmFtZSA9PT0gdW5kZWZpbmVkID8gJycgOiBfcmVmJGNsYXNzTmFtZTtcblxuICB2YXIgc3R5bGVzID0gKDAsIF9yZWFjdGNzczIuZGVmYXVsdCkoKDAsIF9tZXJnZTIuZGVmYXVsdCkoe1xuICAgICdkZWZhdWx0Jzoge1xuICAgICAgY2FyZDoge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgYm9yZGVyOiAnMCBzb2xpZCByZ2JhKDAsMCwwLDAuMjUpJyxcbiAgICAgICAgYm94U2hhZG93OiAnMCAxcHggNHB4IHJnYmEoMCwwLDAsMC4yNSknLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgcGFkZGluZzogJzE1cHggOXB4IDlweCAxNXB4J1xuICAgICAgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIGZvbnRTaXplOiAnMThweCcsXG4gICAgICAgIGNvbG9yOiAnI2ZmZidcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB3aWR0aDogJzBweCcsXG4gICAgICAgIGhlaWdodDogJzBweCcsXG4gICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgICBib3JkZXJXaWR0aDogJzAgOXB4IDEwcHggOXB4JyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjZmZmIHRyYW5zcGFyZW50JyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgIH0sXG4gICAgICB0cmlhbmdsZVNoYWRvdzoge1xuICAgICAgICB3aWR0aDogJzBweCcsXG4gICAgICAgIGhlaWdodDogJzBweCcsXG4gICAgICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgICAgICBib3JkZXJXaWR0aDogJzAgOXB4IDEwcHggOXB4JyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCB0cmFuc3BhcmVudCByZ2JhKDAsMCwwLC4xKSB0cmFuc3BhcmVudCcsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICB9LFxuICAgICAgaGFzaDoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnI0YwRjBGMCcsXG4gICAgICAgIGhlaWdodDogJzMwcHgnLFxuICAgICAgICB3aWR0aDogJzMwcHgnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHggMCAwIDRweCcsXG4gICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgIGNvbG9yOiAnIzk4QTFBNCcsXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ1xuICAgICAgfSxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHdpZHRoOiAnMTAwcHgnLFxuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICBjb2xvcjogJyM2NjYnLFxuICAgICAgICBib3JkZXI6ICcwcHgnLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgIGhlaWdodDogJzI4cHgnLFxuICAgICAgICBib3hTaGFkb3c6ICdpbnNldCAwIDAgMCAxcHggI0YwRjBGMCcsXG4gICAgICAgIGJveFNpemluZzogJ2NvbnRlbnQtYm94JyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnMCA0cHggNHB4IDAnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgICBwYWRkaW5nTGVmdDogJzhweCdcbiAgICAgIH0sXG4gICAgICBzd2F0Y2g6IHtcbiAgICAgICAgd2lkdGg6ICczMHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMzBweCcsXG4gICAgICAgIGZsb2F0OiAnbGVmdCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgIG1hcmdpbjogJzAgNnB4IDZweCAwJ1xuICAgICAgfSxcbiAgICAgIGNsZWFyOiB7XG4gICAgICAgIGNsZWFyOiAnYm90aCdcbiAgICAgIH1cbiAgICB9LFxuICAgICdoaWRlLXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICAndG9wLWxlZnQtdHJpYW5nbGUnOiB7XG4gICAgICB0cmlhbmdsZToge1xuICAgICAgICB0b3A6ICctMTBweCcsXG4gICAgICAgIGxlZnQ6ICcxMnB4J1xuICAgICAgfSxcbiAgICAgIHRyaWFuZ2xlU2hhZG93OiB7XG4gICAgICAgIHRvcDogJy0xMXB4JyxcbiAgICAgICAgbGVmdDogJzEycHgnXG4gICAgICB9XG4gICAgfSxcbiAgICAndG9wLXJpZ2h0LXRyaWFuZ2xlJzoge1xuICAgICAgdHJpYW5nbGU6IHtcbiAgICAgICAgdG9wOiAnLTEwcHgnLFxuICAgICAgICByaWdodDogJzEycHgnXG4gICAgICB9LFxuICAgICAgdHJpYW5nbGVTaGFkb3c6IHtcbiAgICAgICAgdG9wOiAnLTExcHgnLFxuICAgICAgICByaWdodDogJzEycHgnXG4gICAgICB9XG4gICAgfVxuICB9LCBwYXNzZWRTdHlsZXMpLCB7XG4gICAgJ2hpZGUtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ2hpZGUnLFxuICAgICd0b3AtbGVmdC10cmlhbmdsZSc6IHRyaWFuZ2xlID09PSAndG9wLWxlZnQnLFxuICAgICd0b3AtcmlnaHQtdHJpYW5nbGUnOiB0cmlhbmdsZSA9PT0gJ3RvcC1yaWdodCdcbiAgfSk7XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShoZXhjb2RlLCBlKSB7XG4gICAgY29sb3IuaXNWYWxpZEhleChoZXhjb2RlKSAmJiBvbkNoYW5nZSh7XG4gICAgICBoZXg6IGhleGNvZGUsXG4gICAgICBzb3VyY2U6ICdoZXgnXG4gICAgfSwgZSk7XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgIHsgc3R5bGU6IHN0eWxlcy5jYXJkLCBjbGFzc05hbWU6ICd0d2l0dGVyLXBpY2tlciAnICsgY2xhc3NOYW1lIH0sXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgc3R5bGU6IHN0eWxlcy50cmlhbmdsZVNoYWRvdyB9KSxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBzdHlsZTogc3R5bGVzLnRyaWFuZ2xlIH0pLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ2RpdicsXG4gICAgICB7IHN0eWxlOiBzdHlsZXMuYm9keSB9LFxuICAgICAgKDAsIF9tYXAyLmRlZmF1bHQpKGNvbG9ycywgZnVuY3Rpb24gKGMsIGkpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jb21tb24uU3dhdGNoLCB7XG4gICAgICAgICAga2V5OiBpLFxuICAgICAgICAgIGNvbG9yOiBjLFxuICAgICAgICAgIGhleDogYyxcbiAgICAgICAgICBzdHlsZTogc3R5bGVzLnN3YXRjaCxcbiAgICAgICAgICBvbkNsaWNrOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgb25Ib3Zlcjogb25Td2F0Y2hIb3ZlcixcbiAgICAgICAgICBmb2N1c1N0eWxlOiB7XG4gICAgICAgICAgICBib3hTaGFkb3c6ICcwIDAgNHB4ICcgKyBjXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMuaGFzaCB9LFxuICAgICAgICAnIydcbiAgICAgICksXG4gICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY29tbW9uLkVkaXRhYmxlSW5wdXQsIHtcbiAgICAgICAgbGFiZWw6IG51bGwsXG4gICAgICAgIHN0eWxlOiB7IGlucHV0OiBzdHlsZXMuaW5wdXQgfSxcbiAgICAgICAgdmFsdWU6IGhleC5yZXBsYWNlKCcjJywgJycpLFxuICAgICAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlXG4gICAgICB9KSxcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHN0eWxlOiBzdHlsZXMuY2xlYXIgfSlcbiAgICApXG4gICk7XG59O1xuXG5Ud2l0dGVyLnByb3BUeXBlcyA9IHtcbiAgd2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJdKSxcbiAgdHJpYW5nbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydoaWRlJywgJ3RvcC1sZWZ0JywgJ3RvcC1yaWdodCddKSxcbiAgY29sb3JzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcpLFxuICBzdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59O1xuXG5Ud2l0dGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgd2lkdGg6IDI3NixcbiAgY29sb3JzOiBbJyNGRjY5MDAnLCAnI0ZDQjkwMCcsICcjN0JEQ0I1JywgJyMwMEQwODQnLCAnIzhFRDFGQycsICcjMDY5M0UzJywgJyNBQkI4QzMnLCAnI0VCMTQ0QycsICcjRjc4REE3JywgJyM5OTAwRUYnXSxcbiAgdHJpYW5nbGU6ICd0b3AtbGVmdCcsXG4gIHN0eWxlczoge31cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfY29tbW9uLkNvbG9yV3JhcCkoVHdpdHRlcik7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIGNhbGN1bGF0ZUNoYW5nZSA9IGV4cG9ydHMuY2FsY3VsYXRlQ2hhbmdlID0gZnVuY3Rpb24gY2FsY3VsYXRlQ2hhbmdlKGUsIGhzbCwgZGlyZWN0aW9uLCBpbml0aWFsQSwgY29udGFpbmVyKSB7XG4gIHZhciBjb250YWluZXJXaWR0aCA9IGNvbnRhaW5lci5jbGllbnRXaWR0aDtcbiAgdmFyIGNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gdHlwZW9mIGUucGFnZVggPT09ICdudW1iZXInID8gZS5wYWdlWCA6IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgdmFyIHkgPSB0eXBlb2YgZS5wYWdlWSA9PT0gJ251bWJlcicgPyBlLnBhZ2VZIDogZS50b3VjaGVzWzBdLnBhZ2VZO1xuICB2YXIgbGVmdCA9IHggLSAoY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQpO1xuICB2YXIgdG9wID0geSAtIChjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0KTtcblxuICBpZiAoZGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgdmFyIGEgPSB2b2lkIDA7XG4gICAgaWYgKHRvcCA8IDApIHtcbiAgICAgIGEgPSAwO1xuICAgIH0gZWxzZSBpZiAodG9wID4gY29udGFpbmVySGVpZ2h0KSB7XG4gICAgICBhID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IE1hdGgucm91bmQodG9wICogMTAwIC8gY29udGFpbmVySGVpZ2h0KSAvIDEwMDtcbiAgICB9XG5cbiAgICBpZiAoaHNsLmEgIT09IGEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGg6IGhzbC5oLFxuICAgICAgICBzOiBoc2wucyxcbiAgICAgICAgbDogaHNsLmwsXG4gICAgICAgIGE6IGEsXG4gICAgICAgIHNvdXJjZTogJ3JnYidcbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBfYSA9IHZvaWQgMDtcbiAgICBpZiAobGVmdCA8IDApIHtcbiAgICAgIF9hID0gMDtcbiAgICB9IGVsc2UgaWYgKGxlZnQgPiBjb250YWluZXJXaWR0aCkge1xuICAgICAgX2EgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBfYSA9IE1hdGgucm91bmQobGVmdCAqIDEwMCAvIGNvbnRhaW5lcldpZHRoKSAvIDEwMDtcbiAgICB9XG5cbiAgICBpZiAoaW5pdGlhbEEgIT09IF9hKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoOiBoc2wuaCxcbiAgICAgICAgczogaHNsLnMsXG4gICAgICAgIGw6IGhzbC5sLFxuICAgICAgICBhOiBfYSxcbiAgICAgICAgc291cmNlOiAncmdiJ1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBjaGVja2JvYXJkQ2FjaGUgPSB7fTtcblxudmFyIHJlbmRlciA9IGV4cG9ydHMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGMxLCBjMiwgc2l6ZSwgc2VydmVyQ2FudmFzKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnICYmICFzZXJ2ZXJDYW52YXMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgY2FudmFzID0gc2VydmVyQ2FudmFzID8gbmV3IHNlcnZlckNhbnZhcygpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGNhbnZhcy53aWR0aCA9IHNpemUgKiAyO1xuICBjYW52YXMuaGVpZ2h0ID0gc2l6ZSAqIDI7XG4gIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgaWYgKCFjdHgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBJZiBubyBjb250ZXh0IGNhbiBiZSBmb3VuZCwgcmV0dXJuIGVhcmx5LlxuICBjdHguZmlsbFN0eWxlID0gYzE7XG4gIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICBjdHguZmlsbFN0eWxlID0gYzI7XG4gIGN0eC5maWxsUmVjdCgwLCAwLCBzaXplLCBzaXplKTtcbiAgY3R4LnRyYW5zbGF0ZShzaXplLCBzaXplKTtcbiAgY3R4LmZpbGxSZWN0KDAsIDAsIHNpemUsIHNpemUpO1xuICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgpO1xufTtcblxudmFyIGdldCA9IGV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24gZ2V0KGMxLCBjMiwgc2l6ZSwgc2VydmVyQ2FudmFzKSB7XG4gIHZhciBrZXkgPSBjMSArICctJyArIGMyICsgJy0nICsgc2l6ZSArIChzZXJ2ZXJDYW52YXMgPyAnLXNlcnZlcicgOiAnJyk7XG5cbiAgaWYgKGNoZWNrYm9hcmRDYWNoZVtrZXldKSB7XG4gICAgcmV0dXJuIGNoZWNrYm9hcmRDYWNoZVtrZXldO1xuICB9XG5cbiAgdmFyIGNoZWNrYm9hcmQgPSByZW5kZXIoYzEsIGMyLCBzaXplLCBzZXJ2ZXJDYW52YXMpO1xuICBjaGVja2JvYXJkQ2FjaGVba2V5XSA9IGNoZWNrYm9hcmQ7XG4gIHJldHVybiBjaGVja2JvYXJkO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzdmFsaWRDb2xvclN0cmluZyA9IGV4cG9ydHMucmVkID0gZXhwb3J0cy5nZXRDb250cmFzdGluZ0NvbG9yID0gZXhwb3J0cy5pc1ZhbGlkSGV4ID0gZXhwb3J0cy50b1N0YXRlID0gZXhwb3J0cy5zaW1wbGVDaGVja0ZvclZhbGlkQ29sb3IgPSB1bmRlZmluZWQ7XG5cbnZhciBfZWFjaCA9IHJlcXVpcmUoJ2xvZGFzaC9lYWNoJyk7XG5cbnZhciBfZWFjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lYWNoKTtcblxudmFyIF90aW55Y29sb3IgPSByZXF1aXJlKCd0aW55Y29sb3IyJyk7XG5cbnZhciBfdGlueWNvbG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Rpbnljb2xvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzaW1wbGVDaGVja0ZvclZhbGlkQ29sb3IgPSBleHBvcnRzLnNpbXBsZUNoZWNrRm9yVmFsaWRDb2xvciA9IGZ1bmN0aW9uIHNpbXBsZUNoZWNrRm9yVmFsaWRDb2xvcihkYXRhKSB7XG4gIHZhciBrZXlzVG9DaGVjayA9IFsncicsICdnJywgJ2InLCAnYScsICdoJywgJ3MnLCAnbCcsICd2J107XG4gIHZhciBjaGVja2VkID0gMDtcbiAgdmFyIHBhc3NlZCA9IDA7XG4gICgwLCBfZWFjaDIuZGVmYXVsdCkoa2V5c1RvQ2hlY2ssIGZ1bmN0aW9uIChsZXR0ZXIpIHtcbiAgICBpZiAoZGF0YVtsZXR0ZXJdKSB7XG4gICAgICBjaGVja2VkICs9IDE7XG4gICAgICBpZiAoIWlzTmFOKGRhdGFbbGV0dGVyXSkpIHtcbiAgICAgICAgcGFzc2VkICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAobGV0dGVyID09PSAncycgfHwgbGV0dGVyID09PSAnbCcpIHtcbiAgICAgICAgdmFyIHBlcmNlbnRQYXR0ID0gL15cXGQrJSQvO1xuICAgICAgICBpZiAocGVyY2VudFBhdHQudGVzdChkYXRhW2xldHRlcl0pKSB7XG4gICAgICAgICAgcGFzc2VkICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hlY2tlZCA9PT0gcGFzc2VkID8gZGF0YSA6IGZhbHNlO1xufTtcblxudmFyIHRvU3RhdGUgPSBleHBvcnRzLnRvU3RhdGUgPSBmdW5jdGlvbiB0b1N0YXRlKGRhdGEsIG9sZEh1ZSkge1xuICB2YXIgY29sb3IgPSBkYXRhLmhleCA/ICgwLCBfdGlueWNvbG9yMi5kZWZhdWx0KShkYXRhLmhleCkgOiAoMCwgX3Rpbnljb2xvcjIuZGVmYXVsdCkoZGF0YSk7XG4gIHZhciBoc2wgPSBjb2xvci50b0hzbCgpO1xuICB2YXIgaHN2ID0gY29sb3IudG9Ic3YoKTtcbiAgdmFyIHJnYiA9IGNvbG9yLnRvUmdiKCk7XG4gIHZhciBoZXggPSBjb2xvci50b0hleCgpO1xuICBpZiAoaHNsLnMgPT09IDApIHtcbiAgICBoc2wuaCA9IG9sZEh1ZSB8fCAwO1xuICAgIGhzdi5oID0gb2xkSHVlIHx8IDA7XG4gIH1cbiAgdmFyIHRyYW5zcGFyZW50ID0gaGV4ID09PSAnMDAwMDAwJyAmJiByZ2IuYSA9PT0gMDtcblxuICByZXR1cm4ge1xuICAgIGhzbDogaHNsLFxuICAgIGhleDogdHJhbnNwYXJlbnQgPyAndHJhbnNwYXJlbnQnIDogJyMnICsgaGV4LFxuICAgIHJnYjogcmdiLFxuICAgIGhzdjogaHN2LFxuICAgIG9sZEh1ZTogZGF0YS5oIHx8IG9sZEh1ZSB8fCBoc2wuaCxcbiAgICBzb3VyY2U6IGRhdGEuc291cmNlXG4gIH07XG59O1xuXG52YXIgaXNWYWxpZEhleCA9IGV4cG9ydHMuaXNWYWxpZEhleCA9IGZ1bmN0aW9uIGlzVmFsaWRIZXgoaGV4KSB7XG4gIGlmIChoZXggPT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBkaXNhYmxlIGhleDQgYW5kIGhleDhcbiAgdmFyIGxoID0gU3RyaW5nKGhleCkuY2hhckF0KDApID09PSAnIycgPyAxIDogMDtcbiAgcmV0dXJuIGhleC5sZW5ndGggIT09IDQgKyBsaCAmJiBoZXgubGVuZ3RoIDwgNyArIGxoICYmICgwLCBfdGlueWNvbG9yMi5kZWZhdWx0KShoZXgpLmlzVmFsaWQoKTtcbn07XG5cbnZhciBnZXRDb250cmFzdGluZ0NvbG9yID0gZXhwb3J0cy5nZXRDb250cmFzdGluZ0NvbG9yID0gZnVuY3Rpb24gZ2V0Q29udHJhc3RpbmdDb2xvcihkYXRhKSB7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiAnI2ZmZic7XG4gIH1cbiAgdmFyIGNvbCA9IHRvU3RhdGUoZGF0YSk7XG4gIGlmIChjb2wuaGV4ID09PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgcmV0dXJuICdyZ2JhKDAsMCwwLDAuNCknO1xuICB9XG4gIHZhciB5aXEgPSAoY29sLnJnYi5yICogMjk5ICsgY29sLnJnYi5nICogNTg3ICsgY29sLnJnYi5iICogMTE0KSAvIDEwMDA7XG4gIHJldHVybiB5aXEgPj0gMTI4ID8gJyMwMDAnIDogJyNmZmYnO1xufTtcblxudmFyIHJlZCA9IGV4cG9ydHMucmVkID0ge1xuICBoc2w6IHsgYTogMSwgaDogMCwgbDogMC41LCBzOiAxIH0sXG4gIGhleDogJyNmZjAwMDAnLFxuICByZ2I6IHsgcjogMjU1LCBnOiAwLCBiOiAwLCBhOiAxIH0sXG4gIGhzdjogeyBoOiAwLCBzOiAxLCB2OiAxLCBhOiAxIH1cbn07XG5cbnZhciBpc3ZhbGlkQ29sb3JTdHJpbmcgPSBleHBvcnRzLmlzdmFsaWRDb2xvclN0cmluZyA9IGZ1bmN0aW9uIGlzdmFsaWRDb2xvclN0cmluZyhzdHJpbmcsIHR5cGUpIHtcbiAgdmFyIHN0cmluZ1dpdGhvdXREZWdyZWUgPSBzdHJpbmcucmVwbGFjZSgnwrAnLCAnJyk7XG4gIHJldHVybiAoMCwgX3Rpbnljb2xvcjIuZGVmYXVsdCkodHlwZSArICcgKCcgKyBzdHJpbmdXaXRob3V0RGVncmVlICsgJyknKS5fb2s7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBjYWxjdWxhdGVDaGFuZ2UgPSBleHBvcnRzLmNhbGN1bGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIGNhbGN1bGF0ZUNoYW5nZShlLCBkaXJlY3Rpb24sIGhzbCwgY29udGFpbmVyKSB7XG4gIHZhciBjb250YWluZXJXaWR0aCA9IGNvbnRhaW5lci5jbGllbnRXaWR0aDtcbiAgdmFyIGNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gdHlwZW9mIGUucGFnZVggPT09ICdudW1iZXInID8gZS5wYWdlWCA6IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgdmFyIHkgPSB0eXBlb2YgZS5wYWdlWSA9PT0gJ251bWJlcicgPyBlLnBhZ2VZIDogZS50b3VjaGVzWzBdLnBhZ2VZO1xuICB2YXIgbGVmdCA9IHggLSAoY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQpO1xuICB2YXIgdG9wID0geSAtIChjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0KTtcblxuICBpZiAoZGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgdmFyIGggPSB2b2lkIDA7XG4gICAgaWYgKHRvcCA8IDApIHtcbiAgICAgIGggPSAzNTk7XG4gICAgfSBlbHNlIGlmICh0b3AgPiBjb250YWluZXJIZWlnaHQpIHtcbiAgICAgIGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGVyY2VudCA9IC0odG9wICogMTAwIC8gY29udGFpbmVySGVpZ2h0KSArIDEwMDtcbiAgICAgIGggPSAzNjAgKiBwZXJjZW50IC8gMTAwO1xuICAgIH1cblxuICAgIGlmIChoc2wuaCAhPT0gaCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaDogaCxcbiAgICAgICAgczogaHNsLnMsXG4gICAgICAgIGw6IGhzbC5sLFxuICAgICAgICBhOiBoc2wuYSxcbiAgICAgICAgc291cmNlOiAnaHNsJ1xuICAgICAgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9oID0gdm9pZCAwO1xuICAgIGlmIChsZWZ0IDwgMCkge1xuICAgICAgX2ggPSAwO1xuICAgIH0gZWxzZSBpZiAobGVmdCA+IGNvbnRhaW5lcldpZHRoKSB7XG4gICAgICBfaCA9IDM1OTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9wZXJjZW50ID0gbGVmdCAqIDEwMCAvIGNvbnRhaW5lcldpZHRoO1xuICAgICAgX2ggPSAzNjAgKiBfcGVyY2VudCAvIDEwMDtcbiAgICB9XG5cbiAgICBpZiAoaHNsLmggIT09IF9oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoOiBfaCxcbiAgICAgICAgczogaHNsLnMsXG4gICAgICAgIGw6IGhzbC5sLFxuICAgICAgICBhOiBoc2wuYSxcbiAgICAgICAgc291cmNlOiAnaHNsJ1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaGFuZGxlRm9jdXMgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfSAvKiBlc2xpbnQtZGlzYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuXG52YXIgaGFuZGxlRm9jdXMgPSBleHBvcnRzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoQ29tcG9uZW50KSB7XG4gIHZhciBTcGFuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnc3Bhbic7XG4gIHJldHVybiBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhGb2N1cywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBGb2N1cygpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9jdXMpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gRm9jdXMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGb2N1cykpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0geyBmb2N1czogZmFsc2UgfSwgX3RoaXMuaGFuZGxlRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGZvY3VzOiB0cnVlIH0pO1xuICAgICAgfSwgX3RoaXMuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKHsgZm9jdXM6IGZhbHNlIH0pO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEZvY3VzLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBTcGFuLFxuICAgICAgICAgIHsgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cywgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlKSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRm9jdXM7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBjYWxjdWxhdGVDaGFuZ2UgPSBleHBvcnRzLmNhbGN1bGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIGNhbGN1bGF0ZUNoYW5nZShlLCBoc2wsIGNvbnRhaW5lcikge1xuICB2YXIgX2NvbnRhaW5lciRnZXRCb3VuZGluID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgY29udGFpbmVyV2lkdGggPSBfY29udGFpbmVyJGdldEJvdW5kaW4ud2lkdGgsXG4gICAgICBjb250YWluZXJIZWlnaHQgPSBfY29udGFpbmVyJGdldEJvdW5kaW4uaGVpZ2h0O1xuXG4gIHZhciB4ID0gdHlwZW9mIGUucGFnZVggPT09ICdudW1iZXInID8gZS5wYWdlWCA6IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgdmFyIHkgPSB0eXBlb2YgZS5wYWdlWSA9PT0gJ251bWJlcicgPyBlLnBhZ2VZIDogZS50b3VjaGVzWzBdLnBhZ2VZO1xuICB2YXIgbGVmdCA9IHggLSAoY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyB3aW5kb3cucGFnZVhPZmZzZXQpO1xuICB2YXIgdG9wID0geSAtIChjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0KTtcblxuICBpZiAobGVmdCA8IDApIHtcbiAgICBsZWZ0ID0gMDtcbiAgfSBlbHNlIGlmIChsZWZ0ID4gY29udGFpbmVyV2lkdGgpIHtcbiAgICBsZWZ0ID0gY29udGFpbmVyV2lkdGg7XG4gIH1cblxuICBpZiAodG9wIDwgMCkge1xuICAgIHRvcCA9IDA7XG4gIH0gZWxzZSBpZiAodG9wID4gY29udGFpbmVySGVpZ2h0KSB7XG4gICAgdG9wID0gY29udGFpbmVySGVpZ2h0O1xuICB9XG5cbiAgdmFyIHNhdHVyYXRpb24gPSBsZWZ0IC8gY29udGFpbmVyV2lkdGg7XG4gIHZhciBicmlnaHQgPSAxIC0gdG9wIC8gY29udGFpbmVySGVpZ2h0O1xuXG4gIHJldHVybiB7XG4gICAgaDogaHNsLmgsXG4gICAgczogc2F0dXJhdGlvbixcbiAgICB2OiBicmlnaHQsXG4gICAgYTogaHNsLmEsXG4gICAgc291cmNlOiAnaHN2J1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkN1c3RvbVBpY2tlciA9IGV4cG9ydHMuR29vZ2xlUGlja2VyID0gZXhwb3J0cy5Ud2l0dGVyUGlja2VyID0gZXhwb3J0cy5Td2F0Y2hlc1BpY2tlciA9IGV4cG9ydHMuU2xpZGVyUGlja2VyID0gZXhwb3J0cy5Ta2V0Y2hQaWNrZXIgPSBleHBvcnRzLlBob3Rvc2hvcFBpY2tlciA9IGV4cG9ydHMuTWF0ZXJpYWxQaWNrZXIgPSBleHBvcnRzLkh1ZVBpY2tlciA9IGV4cG9ydHMuR2l0aHViUGlja2VyID0gZXhwb3J0cy5Db21wYWN0UGlja2VyID0gZXhwb3J0cy5DaHJvbWVQaWNrZXIgPSBleHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkNpcmNsZVBpY2tlciA9IGV4cG9ydHMuQmxvY2tQaWNrZXIgPSBleHBvcnRzLkFscGhhUGlja2VyID0gdW5kZWZpbmVkO1xuXG52YXIgX0FscGhhID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2FscGhhL0FscGhhJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQWxwaGFQaWNrZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BbHBoYSkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQmxvY2sgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvYmxvY2svQmxvY2snKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdCbG9ja1BpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jsb2NrKS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9DaXJjbGUgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvY2lyY2xlL0NpcmNsZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0NpcmNsZVBpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NpcmNsZSkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2hyb21lID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL2Nocm9tZS9DaHJvbWUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdDaHJvbWVQaWNrZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DaHJvbWUpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0NvbXBhY3QgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvY29tcGFjdC9Db21wYWN0Jyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnQ29tcGFjdFBpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbXBhY3QpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0dpdGh1YiA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9naXRodWIvR2l0aHViJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnR2l0aHViUGlja2VyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR2l0aHViKS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9IdWUgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvaHVlL0h1ZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0h1ZVBpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0h1ZSkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTWF0ZXJpYWwgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvbWF0ZXJpYWwvTWF0ZXJpYWwnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdNYXRlcmlhbFBpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01hdGVyaWFsKS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9QaG90b3Nob3AgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvcGhvdG9zaG9wL1Bob3Rvc2hvcCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1Bob3Rvc2hvcFBpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Bob3Rvc2hvcCkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU2tldGNoID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL3NrZXRjaC9Ta2V0Y2gnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTa2V0Y2hQaWNrZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ta2V0Y2gpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1NsaWRlciA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9zbGlkZXIvU2xpZGVyJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU2xpZGVyUGlja2VyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2xpZGVyKS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Td2F0Y2hlcyA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9zd2F0Y2hlcy9Td2F0Y2hlcycpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1N3YXRjaGVzUGlja2VyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3dhdGNoZXMpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1R3aXR0ZXIgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvdHdpdHRlci9Ud2l0dGVyJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnVHdpdHRlclBpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1R3aXR0ZXIpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0dvb2dsZSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9nb29nbGUvR29vZ2xlJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnR29vZ2xlUGlja2VyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR29vZ2xlKS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Db2xvcldyYXAgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvY29tbW9uL0NvbG9yV3JhcCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ0N1c3RvbVBpY2tlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbG9yV3JhcCkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2hyb21lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Nocm9tZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9DaHJvbWUyLmRlZmF1bHQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxudmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5wb3J0YWwnKSA6IDB4ZWFjYTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZnJhZ21lbnQnKSA6IDB4ZWFjYjtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKSA6IDB4ZWFjYztcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucHJvZmlsZXInKSA6IDB4ZWFkMjtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QucHJvdmlkZXInKSA6IDB4ZWFjZDtcbnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb250ZXh0JykgOiAweGVhY2U7IC8vIFRPRE86IFdlIGRvbid0IHVzZSBBc3luY01vZGUgb3IgQ29uY3VycmVudE1vZGUgYW55bW9yZS4gVGhleSB3ZXJlIHRlbXBvcmFyeVxuLy8gKHVuc3RhYmxlKSBBUElzIHRoYXQgaGF2ZSBiZWVuIHJlbW92ZWQuIENhbiB3ZSByZW1vdmUgdGhlIHN5bWJvbHM/XG5cbnZhciBSRUFDVF9BU1lOQ19NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5hc3luY19tb2RlJykgOiAweGVhY2Y7XG52YXIgUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5jb25jdXJyZW50X21vZGUnKSA6IDB4ZWFjZjtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKSA6IDB4ZWFkMDtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKSA6IDB4ZWFkMTtcbnZhciBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0JykgOiAweGVhZDg7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QubWVtbycpIDogMHhlYWQzO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKSA6IDB4ZWFkNDtcbnZhciBSRUFDVF9CTE9DS19UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuYmxvY2snKSA6IDB4ZWFkOTtcbnZhciBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gaGFzU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZnVuZGFtZW50YWwnKSA6IDB4ZWFkNTtcbnZhciBSRUFDVF9SRVNQT05ERVJfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LnJlc3BvbmRlcicpIDogMHhlYWQ2O1xudmFyIFJFQUNUX1NDT1BFX1RZUEUgPSBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5zY29wZScpIDogMHhlYWQ3O1xuXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkge1xuICByZXR1cm4gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nIHx8IC8vIE5vdGU6IGl0cyB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyBpZiBpdCdzIGEgcG9seWZpbGwuXG4gIHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRlVOREFNRU5UQUxfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9SRVNQT05ERVJfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9TQ09QRV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0JMT0NLX1RZUEUpO1xufVxuXG5mdW5jdGlvbiB0eXBlT2Yob2JqZWN0KSB7XG4gIGlmICh0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwpIHtcbiAgICB2YXIgJCR0eXBlb2YgPSBvYmplY3QuJCR0eXBlb2Y7XG5cbiAgICBzd2l0Y2ggKCQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgdmFyIHR5cGUgPSBvYmplY3QudHlwZTtcblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0FTWU5DX01PREVfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX0NPTkNVUlJFTlRfTU9ERV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhciAkJHR5cGVvZlR5cGUgPSB0eXBlICYmIHR5cGUuJCR0eXBlb2Y7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoJCR0eXBlb2ZUeXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICAgICAgICAgIHJldHVybiAkJHR5cGVvZlR5cGU7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICByZXR1cm4gJCR0eXBlb2Y7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0gLy8gQXN5bmNNb2RlIGlzIGRlcHJlY2F0ZWQgYWxvbmcgd2l0aCBpc0FzeW5jTW9kZVxuXG52YXIgQXN5bmNNb2RlID0gUkVBQ1RfQVNZTkNfTU9ERV9UWVBFO1xudmFyIENvbmN1cnJlbnRNb2RlID0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7XG52YXIgQ29udGV4dENvbnN1bWVyID0gUkVBQ1RfQ09OVEVYVF9UWVBFO1xudmFyIENvbnRleHRQcm92aWRlciA9IFJFQUNUX1BST1ZJREVSX1RZUEU7XG52YXIgRWxlbWVudCA9IFJFQUNUX0VMRU1FTlRfVFlQRTtcbnZhciBGb3J3YXJkUmVmID0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTtcbnZhciBGcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG52YXIgTGF6eSA9IFJFQUNUX0xBWllfVFlQRTtcbnZhciBNZW1vID0gUkVBQ1RfTUVNT19UWVBFO1xudmFyIFBvcnRhbCA9IFJFQUNUX1BPUlRBTF9UWVBFO1xudmFyIFByb2ZpbGVyID0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbnZhciBTdHJpY3RNb2RlID0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbnZhciBTdXNwZW5zZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG52YXIgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSBmYWxzZTsgLy8gQXN5bmNNb2RlIHNob3VsZCBiZSBkZXByZWNhdGVkXG5cbmZ1bmN0aW9uIGlzQXN5bmNNb2RlKG9iamVjdCkge1xuICB7XG4gICAgaWYgKCFoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRJc0FzeW5jTW9kZSkge1xuICAgICAgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkSXNBc3luY01vZGUgPSB0cnVlOyAvLyBVc2luZyBjb25zb2xlWyd3YXJuJ10gdG8gZXZhZGUgQmFiZWwgYW5kIEVTTGludFxuXG4gICAgICBjb25zb2xlWyd3YXJuJ10oJ1RoZSBSZWFjdElzLmlzQXN5bmNNb2RlKCkgYWxpYXMgaGFzIGJlZW4gZGVwcmVjYXRlZCwgJyArICdhbmQgd2lsbCBiZSByZW1vdmVkIGluIFJlYWN0IDE3Ky4gVXBkYXRlIHlvdXIgY29kZSB0byB1c2UgJyArICdSZWFjdElzLmlzQ29uY3VycmVudE1vZGUoKSBpbnN0ZWFkLiBJdCBoYXMgdGhlIGV4YWN0IHNhbWUgQVBJLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpc0NvbmN1cnJlbnRNb2RlKG9iamVjdCkgfHwgdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0FTWU5DX01PREVfVFlQRTtcbn1cbmZ1bmN0aW9uIGlzQ29uY3VycmVudE1vZGUob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfQ09OQ1VSUkVOVF9NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRDb25zdW1lcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9DT05URVhUX1RZUEU7XG59XG5mdW5jdGlvbiBpc0NvbnRleHRQcm92aWRlcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9WSURFUl9UWVBFO1xufVxuZnVuY3Rpb24gaXNFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xufVxuZnVuY3Rpb24gaXNGb3J3YXJkUmVmKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU7XG59XG5mdW5jdGlvbiBpc0ZyYWdtZW50KG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG59XG5mdW5jdGlvbiBpc0xhenkob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlT2Yob2JqZWN0KSA9PT0gUkVBQ1RfTEFaWV9UWVBFO1xufVxuZnVuY3Rpb24gaXNNZW1vKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX01FTU9fVFlQRTtcbn1cbmZ1bmN0aW9uIGlzUG9ydGFsKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1BPUlRBTF9UWVBFO1xufVxuZnVuY3Rpb24gaXNQcm9maWxlcihvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVPZihvYmplY3QpID09PSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xufVxuZnVuY3Rpb24gaXNTdHJpY3RNb2RlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG59XG5mdW5jdGlvbiBpc1N1c3BlbnNlKG9iamVjdCkge1xuICByZXR1cm4gdHlwZU9mKG9iamVjdCkgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG59XG5cbmV4cG9ydHMuQXN5bmNNb2RlID0gQXN5bmNNb2RlO1xuZXhwb3J0cy5Db25jdXJyZW50TW9kZSA9IENvbmN1cnJlbnRNb2RlO1xuZXhwb3J0cy5Db250ZXh0Q29uc3VtZXIgPSBDb250ZXh0Q29uc3VtZXI7XG5leHBvcnRzLkNvbnRleHRQcm92aWRlciA9IENvbnRleHRQcm92aWRlcjtcbmV4cG9ydHMuRWxlbWVudCA9IEVsZW1lbnQ7XG5leHBvcnRzLkZvcndhcmRSZWYgPSBGb3J3YXJkUmVmO1xuZXhwb3J0cy5GcmFnbWVudCA9IEZyYWdtZW50O1xuZXhwb3J0cy5MYXp5ID0gTGF6eTtcbmV4cG9ydHMuTWVtbyA9IE1lbW87XG5leHBvcnRzLlBvcnRhbCA9IFBvcnRhbDtcbmV4cG9ydHMuUHJvZmlsZXIgPSBQcm9maWxlcjtcbmV4cG9ydHMuU3RyaWN0TW9kZSA9IFN0cmljdE1vZGU7XG5leHBvcnRzLlN1c3BlbnNlID0gU3VzcGVuc2U7XG5leHBvcnRzLmlzQXN5bmNNb2RlID0gaXNBc3luY01vZGU7XG5leHBvcnRzLmlzQ29uY3VycmVudE1vZGUgPSBpc0NvbmN1cnJlbnRNb2RlO1xuZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lciA9IGlzQ29udGV4dENvbnN1bWVyO1xuZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlciA9IGlzQ29udGV4dFByb3ZpZGVyO1xuZXhwb3J0cy5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG5leHBvcnRzLmlzRm9yd2FyZFJlZiA9IGlzRm9yd2FyZFJlZjtcbmV4cG9ydHMuaXNGcmFnbWVudCA9IGlzRnJhZ21lbnQ7XG5leHBvcnRzLmlzTGF6eSA9IGlzTGF6eTtcbmV4cG9ydHMuaXNNZW1vID0gaXNNZW1vO1xuZXhwb3J0cy5pc1BvcnRhbCA9IGlzUG9ydGFsO1xuZXhwb3J0cy5pc1Byb2ZpbGVyID0gaXNQcm9maWxlcjtcbmV4cG9ydHMuaXNTdHJpY3RNb2RlID0gaXNTdHJpY3RNb2RlO1xuZXhwb3J0cy5pc1N1c3BlbnNlID0gaXNTdXNwZW5zZTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlID0gaXNWYWxpZEVsZW1lbnRUeXBlO1xuZXhwb3J0cy50eXBlT2YgPSB0eXBlT2Y7XG4gIH0pKCk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpLHJlcXVpcmUoXCJyZWFjdFwiKSxyZXF1aXJlKFwic2lnbmF0dXJlX3BhZFwiKSxyZXF1aXJlKFwidHJpbS1jYW52YXNcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wicHJvcC10eXBlc1wiLFwicmVhY3RcIixcInNpZ25hdHVyZV9wYWRcIixcInRyaW0tY2FudmFzXCJdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuU2lnbmF0dXJlQ2FudmFzPXQocmVxdWlyZShcInByb3AtdHlwZXNcIikscmVxdWlyZShcInJlYWN0XCIpLHJlcXVpcmUoXCJzaWduYXR1cmVfcGFkXCIpLHJlcXVpcmUoXCJ0cmltLWNhbnZhc1wiKSk6ZS5TaWduYXR1cmVDYW52YXM9dChlW1wicHJvcC10eXBlc1wiXSxlLnJlYWN0LGUuc2lnbmF0dXJlX3BhZCxlW1widHJpbS1jYW52YXNcIl0pfSh0aGlzLGZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgYT1uW3JdPXtleHBvcnRzOnt9LGlkOnIsbG9hZGVkOiExfTtyZXR1cm4gZVtyXS5jYWxsKGEuZXhwb3J0cyxhLGEuZXhwb3J0cyx0KSxhLmxvYWRlZD0hMCxhLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIHQubT1lLHQuYz1uLHQucD1cIlwiLHQoMCl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19ZnVuY3Rpb24gYShlLHQpe3ZhciBuPXt9O2Zvcih2YXIgciBpbiBlKXQuaW5kZXhPZihyKT49MHx8T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJihuW3JdPWVbcl0pO3JldHVybiBufWZ1bmN0aW9uIG8oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGkoZSx0KXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0P2U6dH1mdW5jdGlvbiB1KGUsdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCYmbnVsbCE9PXQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIrdHlwZW9mIHQpO2UucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUsdCk6ZS5fX3Byb3RvX189dCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG49YXJndW1lbnRzW3RdO2Zvcih2YXIgciBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHIpJiYoZVtyXT1uW3JdKX1yZXR1cm4gZX0sYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fXJldHVybiBmdW5jdGlvbih0LG4scil7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksciYmZSh0LHIpLHR9fSgpLGY9bigxKSxwPXIoZiksbD1uKDIpLGQ9cihsKSx2PW4oMyksaD1yKHYpLF89big0KSxnPXIoXyksbT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KCl7dmFyIGUsbixyLHU7byh0aGlzLHQpO2Zvcih2YXIgcz1hcmd1bWVudHMubGVuZ3RoLGM9QXJyYXkocyksZj0wO2Y8cztmKyspY1tmXT1hcmd1bWVudHNbZl07cmV0dXJuIG49cj1pKHRoaXMsKGU9dC5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSkuY2FsbC5hcHBseShlLFt0aGlzXS5jb25jYXQoYykpKSxyLl9zaWdQYWQ9bnVsbCxyLl9leGNsdWRlT3VyUHJvcHM9ZnVuY3Rpb24oKXt2YXIgZT1yLnByb3BzLHQ9KGUuY2FudmFzUHJvcHMsZS5jbGVhck9uUmVzaXplLGEoZSxbXCJjYW52YXNQcm9wc1wiLFwiY2xlYXJPblJlc2l6ZVwiXSkpO3JldHVybiB0fSxyLmdldENhbnZhcz1mdW5jdGlvbigpe3JldHVybiByLl9jYW52YXN9LHIuZ2V0VHJpbW1lZENhbnZhcz1mdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7cmV0dXJuIGUud2lkdGg9ci5fY2FudmFzLndpZHRoLGUuaGVpZ2h0PXIuX2NhbnZhcy5oZWlnaHQsZS5nZXRDb250ZXh0KFwiMmRcIikuZHJhd0ltYWdlKHIuX2NhbnZhcywwLDApLCgwLGcuZGVmYXVsdCkoZSl9LHIuZ2V0U2lnbmF0dXJlUGFkPWZ1bmN0aW9uKCl7cmV0dXJuIHIuX3NpZ1BhZH0sci5fY2hlY2tDbGVhck9uUmVzaXplPWZ1bmN0aW9uKCl7ci5wcm9wcy5jbGVhck9uUmVzaXplJiZyLl9yZXNpemVDYW52YXMoKX0sci5fcmVzaXplQ2FudmFzPWZ1bmN0aW9uKCl7dmFyIGU9ci5wcm9wcy5jYW52YXNQcm9wc3x8e30sdD1lLndpZHRoLG49ZS5oZWlnaHQ7aWYoIXR8fCFuKXt2YXIgYT1yLl9jYW52YXMsbz1NYXRoLm1heCh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb3x8MSwxKTt0fHwoYS53aWR0aD1hLm9mZnNldFdpZHRoKm8pLG58fChhLmhlaWdodD1hLm9mZnNldEhlaWdodCpvKSxhLmdldENvbnRleHQoXCIyZFwiKS5zY2FsZShvLG8pLHIuY2xlYXIoKX19LHIub249ZnVuY3Rpb24oKXtyZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixyLl9jaGVja0NsZWFyT25SZXNpemUpLHIuX3NpZ1BhZC5vbigpfSxyLm9mZj1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHIuX2NoZWNrQ2xlYXJPblJlc2l6ZSksci5fc2lnUGFkLm9mZigpfSxyLmNsZWFyPWZ1bmN0aW9uKCl7cmV0dXJuIHIuX3NpZ1BhZC5jbGVhcigpfSxyLmlzRW1wdHk9ZnVuY3Rpb24oKXtyZXR1cm4gci5fc2lnUGFkLmlzRW1wdHkoKX0sci5mcm9tRGF0YVVSTD1mdW5jdGlvbihlLHQpe3JldHVybiByLl9zaWdQYWQuZnJvbURhdGFVUkwoZSx0KX0sci50b0RhdGFVUkw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gci5fc2lnUGFkLnRvRGF0YVVSTChlLHQpfSxyLmZyb21EYXRhPWZ1bmN0aW9uKGUpe3JldHVybiByLl9zaWdQYWQuZnJvbURhdGEoZSl9LHIudG9EYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHIuX3NpZ1BhZC50b0RhdGEoKX0sdT1uLGkocix1KX1yZXR1cm4gdSh0LGUpLGModCxbe2tleTpcImNvbXBvbmVudERpZE1vdW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9zaWdQYWQ9bmV3IGguZGVmYXVsdCh0aGlzLl9jYW52YXMsdGhpcy5fZXhjbHVkZU91clByb3BzKCkpLHRoaXMuX3Jlc2l6ZUNhbnZhcygpLHRoaXMub24oKX19LHtrZXk6XCJjb21wb25lbnRXaWxsVW5tb3VudFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5vZmYoKX19LHtrZXk6XCJjb21wb25lbnREaWRVcGRhdGVcIix2YWx1ZTpmdW5jdGlvbigpe09iamVjdC5hc3NpZ24odGhpcy5fc2lnUGFkLHRoaXMuX2V4Y2x1ZGVPdXJQcm9wcygpKX19LHtrZXk6XCJyZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLnByb3BzLmNhbnZhc1Byb3BzO3JldHVybiBkLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiLHMoe3JlZjpmdW5jdGlvbih0KXtlLl9jYW52YXM9dH19LHQpKX19XSksdH0obC5Db21wb25lbnQpO20ucHJvcFR5cGVzPXt2ZWxvY2l0eUZpbHRlcldlaWdodDpwLmRlZmF1bHQubnVtYmVyLG1pbldpZHRoOnAuZGVmYXVsdC5udW1iZXIsbWF4V2lkdGg6cC5kZWZhdWx0Lm51bWJlcixtaW5EaXN0YW5jZTpwLmRlZmF1bHQubnVtYmVyLGRvdFNpemU6cC5kZWZhdWx0Lm9uZU9mVHlwZShbcC5kZWZhdWx0Lm51bWJlcixwLmRlZmF1bHQuZnVuY10pLHBlbkNvbG9yOnAuZGVmYXVsdC5zdHJpbmcsdGhyb3R0bGU6cC5kZWZhdWx0Lm51bWJlcixvbkVuZDpwLmRlZmF1bHQuZnVuYyxvbkJlZ2luOnAuZGVmYXVsdC5mdW5jLGNhbnZhc1Byb3BzOnAuZGVmYXVsdC5vYmplY3QsY2xlYXJPblJlc2l6ZTpwLmRlZmF1bHQuYm9vbH0sbS5kZWZhdWx0UHJvcHM9e2NsZWFyT25SZXNpemU6ITB9LHQuZGVmYXVsdD1tfSxmdW5jdGlvbih0LG4pe3QuZXhwb3J0cz1lfSxmdW5jdGlvbihlLG4pe2UuZXhwb3J0cz10fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1yfV0pfSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hdXRvcHJlZml4ID0gdW5kZWZpbmVkO1xuXG52YXIgX2Zvck93bjIgPSByZXF1aXJlKCdsb2Rhc2gvZm9yT3duJyk7XG5cbnZhciBfZm9yT3duMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zvck93bjIpO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdHJhbnNmb3JtcyA9IHtcbiAgYm9yZGVyUmFkaXVzOiBmdW5jdGlvbiBib3JkZXJSYWRpdXModmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbXNCb3JkZXJSYWRpdXM6IHZhbHVlLFxuICAgICAgTW96Qm9yZGVyUmFkaXVzOiB2YWx1ZSxcbiAgICAgIE9Cb3JkZXJSYWRpdXM6IHZhbHVlLFxuICAgICAgV2Via2l0Qm9yZGVyUmFkaXVzOiB2YWx1ZSxcbiAgICAgIGJvcmRlclJhZGl1czogdmFsdWVcbiAgICB9O1xuICB9LFxuICBib3hTaGFkb3c6IGZ1bmN0aW9uIGJveFNoYWRvdyh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBtc0JveFNoYWRvdzogdmFsdWUsXG4gICAgICBNb3pCb3hTaGFkb3c6IHZhbHVlLFxuICAgICAgT0JveFNoYWRvdzogdmFsdWUsXG4gICAgICBXZWJraXRCb3hTaGFkb3c6IHZhbHVlLFxuICAgICAgYm94U2hhZG93OiB2YWx1ZVxuICAgIH07XG4gIH0sXG4gIHVzZXJTZWxlY3Q6IGZ1bmN0aW9uIHVzZXJTZWxlY3QodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgV2Via2l0VG91Y2hDYWxsb3V0OiB2YWx1ZSxcbiAgICAgIEtodG1sVXNlclNlbGVjdDogdmFsdWUsXG4gICAgICBNb3pVc2VyU2VsZWN0OiB2YWx1ZSxcbiAgICAgIG1zVXNlclNlbGVjdDogdmFsdWUsXG4gICAgICBXZWJraXRVc2VyU2VsZWN0OiB2YWx1ZSxcbiAgICAgIHVzZXJTZWxlY3Q6IHZhbHVlXG4gICAgfTtcbiAgfSxcblxuICBmbGV4OiBmdW5jdGlvbiBmbGV4KHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFdlYmtpdEJveEZsZXg6IHZhbHVlLFxuICAgICAgTW96Qm94RmxleDogdmFsdWUsXG4gICAgICBXZWJraXRGbGV4OiB2YWx1ZSxcbiAgICAgIG1zRmxleDogdmFsdWUsXG4gICAgICBmbGV4OiB2YWx1ZVxuICAgIH07XG4gIH0sXG4gIGZsZXhCYXNpczogZnVuY3Rpb24gZmxleEJhc2lzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFdlYmtpdEZsZXhCYXNpczogdmFsdWUsXG4gICAgICBmbGV4QmFzaXM6IHZhbHVlXG4gICAgfTtcbiAgfSxcbiAganVzdGlmeUNvbnRlbnQ6IGZ1bmN0aW9uIGp1c3RpZnlDb250ZW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFdlYmtpdEp1c3RpZnlDb250ZW50OiB2YWx1ZSxcbiAgICAgIGp1c3RpZnlDb250ZW50OiB2YWx1ZVxuICAgIH07XG4gIH0sXG5cbiAgdHJhbnNpdGlvbjogZnVuY3Rpb24gdHJhbnNpdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBtc1RyYW5zaXRpb246IHZhbHVlLFxuICAgICAgTW96VHJhbnNpdGlvbjogdmFsdWUsXG4gICAgICBPVHJhbnNpdGlvbjogdmFsdWUsXG4gICAgICBXZWJraXRUcmFuc2l0aW9uOiB2YWx1ZSxcbiAgICAgIHRyYW5zaXRpb246IHZhbHVlXG4gICAgfTtcbiAgfSxcblxuICB0cmFuc2Zvcm06IGZ1bmN0aW9uIHRyYW5zZm9ybSh2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBtc1RyYW5zZm9ybTogdmFsdWUsXG4gICAgICBNb3pUcmFuc2Zvcm06IHZhbHVlLFxuICAgICAgT1RyYW5zZm9ybTogdmFsdWUsXG4gICAgICBXZWJraXRUcmFuc2Zvcm06IHZhbHVlLFxuICAgICAgdHJhbnNmb3JtOiB2YWx1ZVxuICAgIH07XG4gIH0sXG4gIGFic29sdXRlOiBmdW5jdGlvbiBhYnNvbHV0ZSh2YWx1ZSkge1xuICAgIHZhciBkaXJlY3Rpb24gPSB2YWx1ZSAmJiB2YWx1ZS5zcGxpdCgnICcpO1xuICAgIHJldHVybiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogZGlyZWN0aW9uICYmIGRpcmVjdGlvblswXSxcbiAgICAgIHJpZ2h0OiBkaXJlY3Rpb24gJiYgZGlyZWN0aW9uWzFdLFxuICAgICAgYm90dG9tOiBkaXJlY3Rpb24gJiYgZGlyZWN0aW9uWzJdLFxuICAgICAgbGVmdDogZGlyZWN0aW9uICYmIGRpcmVjdGlvblszXVxuICAgIH07XG4gIH0sXG4gIGV4dGVuZDogZnVuY3Rpb24gZXh0ZW5kKG5hbWUsIG90aGVyRWxlbWVudFN0eWxlcykge1xuICAgIHZhciBvdGhlclN0eWxlID0gb3RoZXJFbGVtZW50U3R5bGVzW25hbWVdO1xuICAgIGlmIChvdGhlclN0eWxlKSB7XG4gICAgICByZXR1cm4gb3RoZXJTdHlsZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICdleHRlbmQnOiBuYW1lXG4gICAgfTtcbiAgfVxufTtcblxudmFyIGF1dG9wcmVmaXggPSBleHBvcnRzLmF1dG9wcmVmaXggPSBmdW5jdGlvbiBhdXRvcHJlZml4KGVsZW1lbnRzKSB7XG4gIHZhciBwcmVmaXhlZCA9IHt9O1xuICAoMCwgX2Zvck93bjMuZGVmYXVsdCkoZWxlbWVudHMsIGZ1bmN0aW9uIChzdHlsZXMsIGVsZW1lbnQpIHtcbiAgICB2YXIgZXhwYW5kZWQgPSB7fTtcbiAgICAoMCwgX2Zvck93bjMuZGVmYXVsdCkoc3R5bGVzLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IHRyYW5zZm9ybXNba2V5XTtcbiAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgZXhwYW5kZWQgPSBfZXh0ZW5kcyh7fSwgZXhwYW5kZWQsIHRyYW5zZm9ybSh2YWx1ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhwYW5kZWRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHByZWZpeGVkW2VsZW1lbnRdID0gZXhwYW5kZWQ7XG4gIH0pO1xuICByZXR1cm4gcHJlZml4ZWQ7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBhdXRvcHJlZml4OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYWN0aXZlID0gdW5kZWZpbmVkO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24gYWN0aXZlKENvbXBvbmVudCkge1xuICB2YXIgU3BhbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3NwYW4nO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhBY3RpdmUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gQWN0aXZlKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBY3RpdmUpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gQWN0aXZlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQWN0aXZlKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7IGFjdGl2ZTogZmFsc2UgfSwgX3RoaXMuaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoeyBhY3RpdmU6IHRydWUgfSk7XG4gICAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoeyBhY3RpdmU6IGZhbHNlIH0pO1xuICAgICAgfSwgX3RoaXMucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgU3BhbixcbiAgICAgICAgICB7IG9uTW91c2VEb3duOiBfdGhpcy5oYW5kbGVNb3VzZURvd24sIG9uTW91c2VVcDogX3RoaXMuaGFuZGxlTW91c2VVcCB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLCBfdGhpcy5zdGF0ZSkpXG4gICAgICAgICk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gQWN0aXZlO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gYWN0aXZlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaG92ZXIgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgaG92ZXIgPSBleHBvcnRzLmhvdmVyID0gZnVuY3Rpb24gaG92ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBTcGFuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnc3Bhbic7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKEhvdmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIEhvdmVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIb3Zlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBIb3Zlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEhvdmVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7IGhvdmVyOiBmYWxzZSB9LCBfdGhpcy5oYW5kbGVNb3VzZU92ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiB0cnVlIH0pO1xuICAgICAgfSwgX3RoaXMuaGFuZGxlTW91c2VPdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiBmYWxzZSB9KTtcbiAgICAgIH0sIF90aGlzLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFNwYW4sXG4gICAgICAgICAgeyBvbk1vdXNlT3ZlcjogX3RoaXMuaGFuZGxlTW91c2VPdmVyLCBvbk1vdXNlT3V0OiBfdGhpcy5oYW5kbGVNb3VzZU91dCB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIF90aGlzLnByb3BzLCBfdGhpcy5zdGF0ZSkpXG4gICAgICAgICk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gSG92ZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBob3ZlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmZsYXR0ZW5OYW1lcyA9IHVuZGVmaW5lZDtcblxudmFyIF9pc1N0cmluZzIgPSByZXF1aXJlKCdsb2Rhc2gvaXNTdHJpbmcnKTtcblxudmFyIF9pc1N0cmluZzMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1N0cmluZzIpO1xuXG52YXIgX2Zvck93bjIgPSByZXF1aXJlKCdsb2Rhc2gvZm9yT3duJyk7XG5cbnZhciBfZm9yT3duMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zvck93bjIpO1xuXG52YXIgX2lzUGxhaW5PYmplY3QyID0gcmVxdWlyZSgnbG9kYXNoL2lzUGxhaW5PYmplY3QnKTtcblxudmFyIF9pc1BsYWluT2JqZWN0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUGxhaW5PYmplY3QyKTtcblxudmFyIF9tYXAyID0gcmVxdWlyZSgnbG9kYXNoL21hcCcpO1xuXG52YXIgX21hcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXAyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGZsYXR0ZW5OYW1lcyA9IGV4cG9ydHMuZmxhdHRlbk5hbWVzID0gZnVuY3Rpb24gZmxhdHRlbk5hbWVzKCkge1xuICB2YXIgdGhpbmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcblxuICB2YXIgbmFtZXMgPSBbXTtcblxuICAoMCwgX21hcDMuZGVmYXVsdCkodGhpbmdzLCBmdW5jdGlvbiAodGhpbmcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGluZykpIHtcbiAgICAgIGZsYXR0ZW5OYW1lcyh0aGluZykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBuYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzUGxhaW5PYmplY3QzLmRlZmF1bHQpKHRoaW5nKSkge1xuICAgICAgKDAsIF9mb3JPd24zLmRlZmF1bHQpKHRoaW5nLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICB2YWx1ZSA9PT0gdHJ1ZSAmJiBuYW1lcy5wdXNoKGtleSk7XG4gICAgICAgIG5hbWVzLnB1c2goa2V5ICsgJy0nICsgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzU3RyaW5nMy5kZWZhdWx0KSh0aGluZykpIHtcbiAgICAgIG5hbWVzLnB1c2godGhpbmcpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5hbWVzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZmxhdHRlbk5hbWVzOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUmVhY3RDU1MgPSBleHBvcnRzLmxvb3AgPSBleHBvcnRzLmhhbmRsZUFjdGl2ZSA9IGV4cG9ydHMuaGFuZGxlSG92ZXIgPSBleHBvcnRzLmhvdmVyID0gdW5kZWZpbmVkO1xuXG52YXIgX2ZsYXR0ZW5OYW1lcyA9IHJlcXVpcmUoJy4vZmxhdHRlbk5hbWVzJyk7XG5cbnZhciBfZmxhdHRlbk5hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsYXR0ZW5OYW1lcyk7XG5cbnZhciBfbWVyZ2VDbGFzc2VzID0gcmVxdWlyZSgnLi9tZXJnZUNsYXNzZXMnKTtcblxudmFyIF9tZXJnZUNsYXNzZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVyZ2VDbGFzc2VzKTtcblxudmFyIF9hdXRvcHJlZml4ID0gcmVxdWlyZSgnLi9hdXRvcHJlZml4Jyk7XG5cbnZhciBfYXV0b3ByZWZpeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdXRvcHJlZml4KTtcblxudmFyIF9ob3ZlcjIgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvaG92ZXInKTtcblxudmFyIF9ob3ZlcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ob3ZlcjIpO1xuXG52YXIgX2FjdGl2ZSA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9hY3RpdmUnKTtcblxudmFyIF9hY3RpdmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWN0aXZlKTtcblxudmFyIF9sb29wMiA9IHJlcXVpcmUoJy4vbG9vcCcpO1xuXG52YXIgX2xvb3AzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9vcDIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmhvdmVyID0gX2hvdmVyMy5kZWZhdWx0O1xuZXhwb3J0cy5oYW5kbGVIb3ZlciA9IF9ob3ZlcjMuZGVmYXVsdDtcbmV4cG9ydHMuaGFuZGxlQWN0aXZlID0gX2FjdGl2ZTIuZGVmYXVsdDtcbmV4cG9ydHMubG9vcCA9IF9sb29wMy5kZWZhdWx0O1xudmFyIFJlYWN0Q1NTID0gZXhwb3J0cy5SZWFjdENTUyA9IGZ1bmN0aW9uIFJlYWN0Q1NTKGNsYXNzZXMpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFjdGl2YXRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFjdGl2YXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBhY3RpdmVOYW1lcyA9ICgwLCBfZmxhdHRlbk5hbWVzMi5kZWZhdWx0KShhY3RpdmF0aW9ucyk7XG4gIHZhciBtZXJnZWQgPSAoMCwgX21lcmdlQ2xhc3NlczIuZGVmYXVsdCkoY2xhc3NlcywgYWN0aXZlTmFtZXMpO1xuICByZXR1cm4gKDAsIF9hdXRvcHJlZml4Mi5kZWZhdWx0KShtZXJnZWQpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gUmVhY3RDU1M7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIGxvb3BhYmxlID0gZnVuY3Rpb24gbG9vcGFibGUoaSwgbGVuZ3RoKSB7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIHNldFByb3AobmFtZSkge1xuICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICAgIHByb3BzW25hbWVdID0gdmFsdWU7XG4gIH07XG5cbiAgaSA9PT0gMCAmJiBzZXRQcm9wKCdmaXJzdC1jaGlsZCcpO1xuICBpID09PSBsZW5ndGggLSAxICYmIHNldFByb3AoJ2xhc3QtY2hpbGQnKTtcbiAgKGkgPT09IDAgfHwgaSAlIDIgPT09IDApICYmIHNldFByb3AoJ2V2ZW4nKTtcbiAgTWF0aC5hYnMoaSAlIDIpID09PSAxICYmIHNldFByb3AoJ29kZCcpO1xuICBzZXRQcm9wKCdudGgtY2hpbGQnLCBpKTtcblxuICByZXR1cm4gcHJvcHM7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBsb29wYWJsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLm1lcmdlQ2xhc3NlcyA9IHVuZGVmaW5lZDtcblxudmFyIF9mb3JPd24yID0gcmVxdWlyZSgnbG9kYXNoL2Zvck93bicpO1xuXG52YXIgX2Zvck93bjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mb3JPd24yKTtcblxudmFyIF9jbG9uZURlZXAyID0gcmVxdWlyZSgnbG9kYXNoL2Nsb25lRGVlcCcpO1xuXG52YXIgX2Nsb25lRGVlcDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9uZURlZXAyKTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG1lcmdlQ2xhc3NlcyA9IGV4cG9ydHMubWVyZ2VDbGFzc2VzID0gZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGNsYXNzZXMpIHtcbiAgdmFyIGFjdGl2ZU5hbWVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcblxuICB2YXIgc3R5bGVzID0gY2xhc3Nlcy5kZWZhdWx0ICYmICgwLCBfY2xvbmVEZWVwMy5kZWZhdWx0KShjbGFzc2VzLmRlZmF1bHQpIHx8IHt9O1xuICBhY3RpdmVOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgdG9NZXJnZSA9IGNsYXNzZXNbbmFtZV07XG4gICAgaWYgKHRvTWVyZ2UpIHtcbiAgICAgICgwLCBfZm9yT3duMy5kZWZhdWx0KSh0b01lcmdlLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoIXN0eWxlc1trZXldKSB7XG4gICAgICAgICAgc3R5bGVzW2tleV0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlc1trZXldID0gX2V4dGVuZHMoe30sIHN0eWxlc1trZXldLCB0b01lcmdlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWU7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbWVyZ2VDbGFzc2VzOyIsIi8qIVxuICogU2lnbmF0dXJlIFBhZCB2Mi4zLjJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvc2lnbmF0dXJlX3BhZFxuICpcbiAqIENvcHlyaWdodCAyMDE3IFN6eW1vbiBOb3dha1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKlxuICogVGhlIG1haW4gaWRlYSBhbmQgc29tZSBwYXJ0cyBvZiB0aGUgY29kZSAoZS5nLiBkcmF3aW5nIHZhcmlhYmxlIHdpZHRoIELDqXppZXIgY3VydmUpIGFyZSB0YWtlbiBmcm9tOlxuICogaHR0cDovL2Nvcm5lci5zcXVhcmV1cC5jb20vMjAxMi8wNy9zbW9vdGhlci1zaWduYXR1cmVzLmh0bWxcbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBvZiBpbnRlcnBvbGF0aW9uIHVzaW5nIGN1YmljIELDqXppZXIgY3VydmVzIGlzIHRha2VuIGZyb206XG4gKiBodHRwOi8vYmVua25vd3Njb2RlLndvcmRwcmVzcy5jb20vMjAxMi8wOS8xNC9wYXRoLWludGVycG9sYXRpb24tdXNpbmctY3ViaWMtYmV6aWVyLWFuZC1jb250cm9sLXBvaW50LWVzdGltYXRpb24taW4tamF2YXNjcmlwdFxuICpcbiAqIEFsZ29yaXRobSBmb3IgYXBwcm94aW1hdGVkIGxlbmd0aCBvZiBhIELDqXppZXIgY3VydmUgaXMgdGFrZW4gZnJvbTpcbiAqIGh0dHA6Ly93d3cubGVtb2RhLm5ldC9tYXRocy9iZXppZXItbGVuZ3RoL2luZGV4Lmh0bWxcbiAqXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLlNpZ25hdHVyZVBhZCA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gUG9pbnQoeCwgeSwgdGltZSkge1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xuICB0aGlzLnRpbWUgPSB0aW1lIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xufVxuXG5Qb2ludC5wcm90b3R5cGUudmVsb2NpdHlGcm9tID0gZnVuY3Rpb24gKHN0YXJ0KSB7XG4gIHJldHVybiB0aGlzLnRpbWUgIT09IHN0YXJ0LnRpbWUgPyB0aGlzLmRpc3RhbmNlVG8oc3RhcnQpIC8gKHRoaXMudGltZSAtIHN0YXJ0LnRpbWUpIDogMTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kaXN0YW5jZVRvID0gZnVuY3Rpb24gKHN0YXJ0KSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codGhpcy54IC0gc3RhcnQueCwgMikgKyBNYXRoLnBvdyh0aGlzLnkgLSBzdGFydC55LCAyKSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLnggPT09IG90aGVyLnggJiYgdGhpcy55ID09PSBvdGhlci55ICYmIHRoaXMudGltZSA9PT0gb3RoZXIudGltZTtcbn07XG5cbmZ1bmN0aW9uIEJlemllcihzdGFydFBvaW50LCBjb250cm9sMSwgY29udHJvbDIsIGVuZFBvaW50KSB7XG4gIHRoaXMuc3RhcnRQb2ludCA9IHN0YXJ0UG9pbnQ7XG4gIHRoaXMuY29udHJvbDEgPSBjb250cm9sMTtcbiAgdGhpcy5jb250cm9sMiA9IGNvbnRyb2wyO1xuICB0aGlzLmVuZFBvaW50ID0gZW5kUG9pbnQ7XG59XG5cbi8vIFJldHVybnMgYXBwcm94aW1hdGVkIGxlbmd0aC5cbkJlemllci5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RlcHMgPSAxMDtcbiAgdmFyIGxlbmd0aCA9IDA7XG4gIHZhciBweCA9IHZvaWQgMDtcbiAgdmFyIHB5ID0gdm9pZCAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IHN0ZXBzOyBpICs9IDEpIHtcbiAgICB2YXIgdCA9IGkgLyBzdGVwcztcbiAgICB2YXIgY3ggPSB0aGlzLl9wb2ludCh0LCB0aGlzLnN0YXJ0UG9pbnQueCwgdGhpcy5jb250cm9sMS54LCB0aGlzLmNvbnRyb2wyLngsIHRoaXMuZW5kUG9pbnQueCk7XG4gICAgdmFyIGN5ID0gdGhpcy5fcG9pbnQodCwgdGhpcy5zdGFydFBvaW50LnksIHRoaXMuY29udHJvbDEueSwgdGhpcy5jb250cm9sMi55LCB0aGlzLmVuZFBvaW50LnkpO1xuICAgIGlmIChpID4gMCkge1xuICAgICAgdmFyIHhkaWZmID0gY3ggLSBweDtcbiAgICAgIHZhciB5ZGlmZiA9IGN5IC0gcHk7XG4gICAgICBsZW5ndGggKz0gTWF0aC5zcXJ0KHhkaWZmICogeGRpZmYgKyB5ZGlmZiAqIHlkaWZmKTtcbiAgICB9XG4gICAgcHggPSBjeDtcbiAgICBweSA9IGN5O1xuICB9XG5cbiAgcmV0dXJuIGxlbmd0aDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLW11bHRpLXNwYWNlcywgc3BhY2UtaW4tcGFyZW5zICovXG5CZXppZXIucHJvdG90eXBlLl9wb2ludCA9IGZ1bmN0aW9uICh0LCBzdGFydCwgYzEsIGMyLCBlbmQpIHtcbiAgcmV0dXJuIHN0YXJ0ICogKDEuMCAtIHQpICogKDEuMCAtIHQpICogKDEuMCAtIHQpICsgMy4wICogYzEgKiAoMS4wIC0gdCkgKiAoMS4wIC0gdCkgKiB0ICsgMy4wICogYzIgKiAoMS4wIC0gdCkgKiB0ICogdCArIGVuZCAqIHQgKiB0ICogdDtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI3MDc4NDAxLzgxNTUwN1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgY29udGV4dCwgYXJncywgcmVzdWx0O1xuICB2YXIgdGltZW91dCA9IG51bGw7XG4gIHZhciBwcmV2aW91cyA9IDA7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogRGF0ZS5ub3coKTtcbiAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XG4gICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgIGNvbnRleHQgPSB0aGlzO1xuICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgaWYgKHJlbWFpbmluZyA8PSAwIHx8IHJlbWFpbmluZyA+IHdhaXQpIHtcbiAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICB9XG4gICAgICBwcmV2aW91cyA9IG5vdztcbiAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gU2lnbmF0dXJlUGFkKGNhbnZhcywgb3B0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcblxuICB0aGlzLnZlbG9jaXR5RmlsdGVyV2VpZ2h0ID0gb3B0cy52ZWxvY2l0eUZpbHRlcldlaWdodCB8fCAwLjc7XG4gIHRoaXMubWluV2lkdGggPSBvcHRzLm1pbldpZHRoIHx8IDAuNTtcbiAgdGhpcy5tYXhXaWR0aCA9IG9wdHMubWF4V2lkdGggfHwgMi41O1xuICB0aGlzLnRocm90dGxlID0gJ3Rocm90dGxlJyBpbiBvcHRzID8gb3B0cy50aHJvdHRsZSA6IDE2OyAvLyBpbiBtaWxpc2Vjb25kc1xuICB0aGlzLm1pbkRpc3RhbmNlID0gJ21pbkRpc3RhbmNlJyBpbiBvcHRzID8gb3B0cy5taW5EaXN0YW5jZSA6IDU7XG5cbiAgaWYgKHRoaXMudGhyb3R0bGUpIHtcbiAgICB0aGlzLl9zdHJva2VNb3ZlVXBkYXRlID0gdGhyb3R0bGUoU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fc3Ryb2tlVXBkYXRlLCB0aGlzLnRocm90dGxlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zdHJva2VNb3ZlVXBkYXRlID0gU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fc3Ryb2tlVXBkYXRlO1xuICB9XG5cbiAgdGhpcy5kb3RTaXplID0gb3B0cy5kb3RTaXplIHx8IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMubWluV2lkdGggKyB0aGlzLm1heFdpZHRoKSAvIDI7XG4gIH07XG4gIHRoaXMucGVuQ29sb3IgPSBvcHRzLnBlbkNvbG9yIHx8ICdibGFjayc7XG4gIHRoaXMuYmFja2dyb3VuZENvbG9yID0gb3B0cy5iYWNrZ3JvdW5kQ29sb3IgfHwgJ3JnYmEoMCwwLDAsMCknO1xuICB0aGlzLm9uQmVnaW4gPSBvcHRzLm9uQmVnaW47XG4gIHRoaXMub25FbmQgPSBvcHRzLm9uRW5kO1xuXG4gIHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcbiAgdGhpcy5fY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIHRoaXMuY2xlYXIoKTtcblxuICAvLyBXZSBuZWVkIGFkZCB0aGVzZSBpbmxpbmUgc28gdGhleSBhcmUgYXZhaWxhYmxlIHRvIHVuYmluZCB3aGlsZSBzdGlsbCBoYXZpbmdcbiAgLy8gYWNjZXNzIHRvICdzZWxmJyB3ZSBjb3VsZCB1c2UgXy5iaW5kIGJ1dCBpdCdzIG5vdCB3b3J0aCBhZGRpbmcgYSBkZXBlbmRlbmN5LlxuICB0aGlzLl9oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEpIHtcbiAgICAgIHNlbGYuX21vdXNlQnV0dG9uRG93biA9IHRydWU7XG4gICAgICBzZWxmLl9zdHJva2VCZWdpbihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuX2hhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChzZWxmLl9tb3VzZUJ1dHRvbkRvd24pIHtcbiAgICAgIHNlbGYuX3N0cm9rZU1vdmVVcGRhdGUoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLl9oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAxICYmIHNlbGYuX21vdXNlQnV0dG9uRG93bikge1xuICAgICAgc2VsZi5fbW91c2VCdXR0b25Eb3duID0gZmFsc2U7XG4gICAgICBzZWxmLl9zdHJva2VFbmQoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLl9oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldFRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICAgIHNlbGYuX3N0cm9rZUJlZ2luKHRvdWNoKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5faGFuZGxlVG91Y2hNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gUHJldmVudCBzY3JvbGxpbmcuXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciB0b3VjaCA9IGV2ZW50LnRhcmdldFRvdWNoZXNbMF07XG4gICAgc2VsZi5fc3Ryb2tlTW92ZVVwZGF0ZSh0b3VjaCk7XG4gIH07XG5cbiAgdGhpcy5faGFuZGxlVG91Y2hFbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgd2FzQ2FudmFzVG91Y2hlZCA9IGV2ZW50LnRhcmdldCA9PT0gc2VsZi5fY2FudmFzO1xuICAgIGlmICh3YXNDYW52YXNUb3VjaGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgc2VsZi5fc3Ryb2tlRW5kKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5hYmxlIG1vdXNlIGFuZCB0b3VjaCBldmVudCBoYW5kbGVyc1xuICB0aGlzLm9uKCk7XG59XG5cbi8vIFB1YmxpYyBtZXRob2RzXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY3R4ID0gdGhpcy5fY3R4O1xuICB2YXIgY2FudmFzID0gdGhpcy5fY2FudmFzO1xuXG4gIGN0eC5maWxsU3R5bGUgPSB0aGlzLmJhY2tncm91bmRDb2xvcjtcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICB0aGlzLl9kYXRhID0gW107XG4gIHRoaXMuX3Jlc2V0KCk7XG4gIHRoaXMuX2lzRW1wdHkgPSB0cnVlO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5mcm9tRGF0YVVSTCA9IGZ1bmN0aW9uIChkYXRhVXJsKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICB2YXIgcmF0aW8gPSBvcHRpb25zLnJhdGlvIHx8IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4gIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgdGhpcy5fY2FudmFzLndpZHRoIC8gcmF0aW87XG4gIHZhciBoZWlnaHQgPSBvcHRpb25zLmhlaWdodCB8fCB0aGlzLl9jYW52YXMuaGVpZ2h0IC8gcmF0aW87XG5cbiAgdGhpcy5fcmVzZXQoKTtcbiAgaW1hZ2Uuc3JjID0gZGF0YVVybDtcbiAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLl9jdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgfTtcbiAgdGhpcy5faXNFbXB0eSA9IGZhbHNlO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS50b0RhdGFVUkwgPSBmdW5jdGlvbiAodHlwZSkge1xuICB2YXIgX2NhbnZhcztcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdpbWFnZS9zdmcreG1sJzpcbiAgICAgIHJldHVybiB0aGlzLl90b1NWRygpO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgb3B0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgb3B0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoX2NhbnZhcyA9IHRoaXMuX2NhbnZhcykudG9EYXRhVVJMLmFwcGx5KF9jYW52YXMsIFt0eXBlXS5jb25jYXQob3B0aW9ucykpO1xuICB9XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9oYW5kbGVNb3VzZUV2ZW50cygpO1xuICB0aGlzLl9oYW5kbGVUb3VjaEV2ZW50cygpO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9oYW5kbGVNb3VzZURvd24pO1xuICB0aGlzLl9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlTW91c2VNb3ZlKTtcbiAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX2hhbmRsZU1vdXNlVXApO1xuXG4gIHRoaXMuX2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5faGFuZGxlVG91Y2hTdGFydCk7XG4gIHRoaXMuX2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVUb3VjaE1vdmUpO1xuICB0aGlzLl9jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLl9oYW5kbGVUb3VjaEVuZCk7XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9pc0VtcHR5O1xufTtcblxuLy8gUHJpdmF0ZSBtZXRob2RzXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9zdHJva2VCZWdpbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICB0aGlzLl9kYXRhLnB1c2goW10pO1xuICB0aGlzLl9yZXNldCgpO1xuICB0aGlzLl9zdHJva2VVcGRhdGUoZXZlbnQpO1xuXG4gIGlmICh0eXBlb2YgdGhpcy5vbkJlZ2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5vbkJlZ2luKGV2ZW50KTtcbiAgfVxufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fc3Ryb2tlVXBkYXRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHZhciB4ID0gZXZlbnQuY2xpZW50WDtcbiAgdmFyIHkgPSBldmVudC5jbGllbnRZO1xuXG4gIHZhciBwb2ludCA9IHRoaXMuX2NyZWF0ZVBvaW50KHgsIHkpO1xuICB2YXIgbGFzdFBvaW50R3JvdXAgPSB0aGlzLl9kYXRhW3RoaXMuX2RhdGEubGVuZ3RoIC0gMV07XG4gIHZhciBsYXN0UG9pbnQgPSBsYXN0UG9pbnRHcm91cCAmJiBsYXN0UG9pbnRHcm91cFtsYXN0UG9pbnRHcm91cC5sZW5ndGggLSAxXTtcbiAgdmFyIGlzTGFzdFBvaW50VG9vQ2xvc2UgPSBsYXN0UG9pbnQgJiYgcG9pbnQuZGlzdGFuY2VUbyhsYXN0UG9pbnQpIDwgdGhpcy5taW5EaXN0YW5jZTtcblxuICAvLyBTa2lwIHRoaXMgcG9pbnQgaWYgaXQncyB0b28gY2xvc2UgdG8gdGhlIHByZXZpb3VzIG9uZVxuICBpZiAoIShsYXN0UG9pbnQgJiYgaXNMYXN0UG9pbnRUb29DbG9zZSkpIHtcbiAgICB2YXIgX2FkZFBvaW50ID0gdGhpcy5fYWRkUG9pbnQocG9pbnQpLFxuICAgICAgICBjdXJ2ZSA9IF9hZGRQb2ludC5jdXJ2ZSxcbiAgICAgICAgd2lkdGhzID0gX2FkZFBvaW50LndpZHRocztcblxuICAgIGlmIChjdXJ2ZSAmJiB3aWR0aHMpIHtcbiAgICAgIHRoaXMuX2RyYXdDdXJ2ZShjdXJ2ZSwgd2lkdGhzLnN0YXJ0LCB3aWR0aHMuZW5kKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kYXRhW3RoaXMuX2RhdGEubGVuZ3RoIC0gMV0ucHVzaCh7XG4gICAgICB4OiBwb2ludC54LFxuICAgICAgeTogcG9pbnQueSxcbiAgICAgIHRpbWU6IHBvaW50LnRpbWUsXG4gICAgICBjb2xvcjogdGhpcy5wZW5Db2xvclxuICAgIH0pO1xuICB9XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9zdHJva2VFbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgdmFyIGNhbkRyYXdDdXJ2ZSA9IHRoaXMucG9pbnRzLmxlbmd0aCA+IDI7XG4gIHZhciBwb2ludCA9IHRoaXMucG9pbnRzWzBdOyAvLyBQb2ludCBpbnN0YW5jZVxuXG4gIGlmICghY2FuRHJhd0N1cnZlICYmIHBvaW50KSB7XG4gICAgdGhpcy5fZHJhd0RvdChwb2ludCk7XG4gIH1cblxuICBpZiAocG9pbnQpIHtcbiAgICB2YXIgbGFzdFBvaW50R3JvdXAgPSB0aGlzLl9kYXRhW3RoaXMuX2RhdGEubGVuZ3RoIC0gMV07XG4gICAgdmFyIGxhc3RQb2ludCA9IGxhc3RQb2ludEdyb3VwW2xhc3RQb2ludEdyb3VwLmxlbmd0aCAtIDFdOyAvLyBwbGFpbiBvYmplY3RcblxuICAgIC8vIFdoZW4gZHJhd2luZyBhIGRvdCwgdGhlcmUncyBvbmx5IG9uZSBwb2ludCBpbiBhIGdyb3VwLCBzbyB3aXRob3V0IHRoaXMgY2hlY2tcbiAgICAvLyBzdWNoIGdyb3VwIHdvdWxkIGVuZCB1cCB3aXRoIGV4YWN0bHkgdGhlIHNhbWUgMiBwb2ludHMuXG4gICAgaWYgKCFwb2ludC5lcXVhbHMobGFzdFBvaW50KSkge1xuICAgICAgbGFzdFBvaW50R3JvdXAucHVzaCh7XG4gICAgICAgIHg6IHBvaW50LngsXG4gICAgICAgIHk6IHBvaW50LnksXG4gICAgICAgIHRpbWU6IHBvaW50LnRpbWUsXG4gICAgICAgIGNvbG9yOiB0aGlzLnBlbkNvbG9yXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHRoaXMub25FbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLm9uRW5kKGV2ZW50KTtcbiAgfVxufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5faGFuZGxlTW91c2VFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX21vdXNlQnV0dG9uRG93biA9IGZhbHNlO1xuXG4gIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLl9oYW5kbGVNb3VzZURvd24pO1xuICB0aGlzLl9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5faGFuZGxlTW91c2VNb3ZlKTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX2hhbmRsZU1vdXNlVXApO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5faGFuZGxlVG91Y2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFBhc3MgdG91Y2ggZXZlbnRzIHRvIGNhbnZhcyBlbGVtZW50IG9uIG1vYmlsZSBJRTExIGFuZCBFZGdlLlxuICB0aGlzLl9jYW52YXMuc3R5bGUubXNUb3VjaEFjdGlvbiA9ICdub25lJztcbiAgdGhpcy5fY2FudmFzLnN0eWxlLnRvdWNoQWN0aW9uID0gJ25vbmUnO1xuXG4gIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5faGFuZGxlVG91Y2hTdGFydCk7XG4gIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGVUb3VjaE1vdmUpO1xuICB0aGlzLl9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLl9oYW5kbGVUb3VjaEVuZCk7XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5wb2ludHMgPSBbXTtcbiAgdGhpcy5fbGFzdFZlbG9jaXR5ID0gMDtcbiAgdGhpcy5fbGFzdFdpZHRoID0gKHRoaXMubWluV2lkdGggKyB0aGlzLm1heFdpZHRoKSAvIDI7XG4gIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLnBlbkNvbG9yO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fY3JlYXRlUG9pbnQgPSBmdW5jdGlvbiAoeCwgeSwgdGltZSkge1xuICB2YXIgcmVjdCA9IHRoaXMuX2NhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICByZXR1cm4gbmV3IFBvaW50KHggLSByZWN0LmxlZnQsIHkgLSByZWN0LnRvcCwgdGltZSB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9hZGRQb2ludCA9IGZ1bmN0aW9uIChwb2ludCkge1xuICB2YXIgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gIHZhciB0bXAgPSB2b2lkIDA7XG5cbiAgcG9pbnRzLnB1c2gocG9pbnQpO1xuXG4gIGlmIChwb2ludHMubGVuZ3RoID4gMikge1xuICAgIC8vIFRvIHJlZHVjZSB0aGUgaW5pdGlhbCBsYWcgbWFrZSBpdCB3b3JrIHdpdGggMyBwb2ludHNcbiAgICAvLyBieSBjb3B5aW5nIHRoZSBmaXJzdCBwb2ludCB0byB0aGUgYmVnaW5uaW5nLlxuICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAzKSBwb2ludHMudW5zaGlmdChwb2ludHNbMF0pO1xuXG4gICAgdG1wID0gdGhpcy5fY2FsY3VsYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCBwb2ludHNbMl0pO1xuICAgIHZhciBjMiA9IHRtcC5jMjtcbiAgICB0bXAgPSB0aGlzLl9jYWxjdWxhdGVDdXJ2ZUNvbnRyb2xQb2ludHMocG9pbnRzWzFdLCBwb2ludHNbMl0sIHBvaW50c1szXSk7XG4gICAgdmFyIGMzID0gdG1wLmMxO1xuICAgIHZhciBjdXJ2ZSA9IG5ldyBCZXppZXIocG9pbnRzWzFdLCBjMiwgYzMsIHBvaW50c1syXSk7XG4gICAgdmFyIHdpZHRocyA9IHRoaXMuX2NhbGN1bGF0ZUN1cnZlV2lkdGhzKGN1cnZlKTtcblxuICAgIC8vIFJlbW92ZSB0aGUgZmlyc3QgZWxlbWVudCBmcm9tIHRoZSBsaXN0LFxuICAgIC8vIHNvIHRoYXQgd2UgYWx3YXlzIGhhdmUgbm8gbW9yZSB0aGFuIDQgcG9pbnRzIGluIHBvaW50cyBhcnJheS5cbiAgICBwb2ludHMuc2hpZnQoKTtcblxuICAgIHJldHVybiB7IGN1cnZlOiBjdXJ2ZSwgd2lkdGhzOiB3aWR0aHMgfTtcbiAgfVxuXG4gIHJldHVybiB7fTtcbn07XG5cblNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX2NhbGN1bGF0ZUN1cnZlQ29udHJvbFBvaW50cyA9IGZ1bmN0aW9uIChzMSwgczIsIHMzKSB7XG4gIHZhciBkeDEgPSBzMS54IC0gczIueDtcbiAgdmFyIGR5MSA9IHMxLnkgLSBzMi55O1xuICB2YXIgZHgyID0gczIueCAtIHMzLng7XG4gIHZhciBkeTIgPSBzMi55IC0gczMueTtcblxuICB2YXIgbTEgPSB7IHg6IChzMS54ICsgczIueCkgLyAyLjAsIHk6IChzMS55ICsgczIueSkgLyAyLjAgfTtcbiAgdmFyIG0yID0geyB4OiAoczIueCArIHMzLngpIC8gMi4wLCB5OiAoczIueSArIHMzLnkpIC8gMi4wIH07XG5cbiAgdmFyIGwxID0gTWF0aC5zcXJ0KGR4MSAqIGR4MSArIGR5MSAqIGR5MSk7XG4gIHZhciBsMiA9IE1hdGguc3FydChkeDIgKiBkeDIgKyBkeTIgKiBkeTIpO1xuXG4gIHZhciBkeG0gPSBtMS54IC0gbTIueDtcbiAgdmFyIGR5bSA9IG0xLnkgLSBtMi55O1xuXG4gIHZhciBrID0gbDIgLyAobDEgKyBsMik7XG4gIHZhciBjbSA9IHsgeDogbTIueCArIGR4bSAqIGssIHk6IG0yLnkgKyBkeW0gKiBrIH07XG5cbiAgdmFyIHR4ID0gczIueCAtIGNtLng7XG4gIHZhciB0eSA9IHMyLnkgLSBjbS55O1xuXG4gIHJldHVybiB7XG4gICAgYzE6IG5ldyBQb2ludChtMS54ICsgdHgsIG0xLnkgKyB0eSksXG4gICAgYzI6IG5ldyBQb2ludChtMi54ICsgdHgsIG0yLnkgKyB0eSlcbiAgfTtcbn07XG5cblNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX2NhbGN1bGF0ZUN1cnZlV2lkdGhzID0gZnVuY3Rpb24gKGN1cnZlKSB7XG4gIHZhciBzdGFydFBvaW50ID0gY3VydmUuc3RhcnRQb2ludDtcbiAgdmFyIGVuZFBvaW50ID0gY3VydmUuZW5kUG9pbnQ7XG4gIHZhciB3aWR0aHMgPSB7IHN0YXJ0OiBudWxsLCBlbmQ6IG51bGwgfTtcblxuICB2YXIgdmVsb2NpdHkgPSB0aGlzLnZlbG9jaXR5RmlsdGVyV2VpZ2h0ICogZW5kUG9pbnQudmVsb2NpdHlGcm9tKHN0YXJ0UG9pbnQpICsgKDEgLSB0aGlzLnZlbG9jaXR5RmlsdGVyV2VpZ2h0KSAqIHRoaXMuX2xhc3RWZWxvY2l0eTtcblxuICB2YXIgbmV3V2lkdGggPSB0aGlzLl9zdHJva2VXaWR0aCh2ZWxvY2l0eSk7XG5cbiAgd2lkdGhzLnN0YXJ0ID0gdGhpcy5fbGFzdFdpZHRoO1xuICB3aWR0aHMuZW5kID0gbmV3V2lkdGg7XG5cbiAgdGhpcy5fbGFzdFZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gIHRoaXMuX2xhc3RXaWR0aCA9IG5ld1dpZHRoO1xuXG4gIHJldHVybiB3aWR0aHM7XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9zdHJva2VXaWR0aCA9IGZ1bmN0aW9uICh2ZWxvY2l0eSkge1xuICByZXR1cm4gTWF0aC5tYXgodGhpcy5tYXhXaWR0aCAvICh2ZWxvY2l0eSArIDEpLCB0aGlzLm1pbldpZHRoKTtcbn07XG5cblNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX2RyYXdQb2ludCA9IGZ1bmN0aW9uICh4LCB5LCBzaXplKSB7XG4gIHZhciBjdHggPSB0aGlzLl9jdHg7XG5cbiAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgY3R4LmFyYyh4LCB5LCBzaXplLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICB0aGlzLl9pc0VtcHR5ID0gZmFsc2U7XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl9kcmF3Q3VydmUgPSBmdW5jdGlvbiAoY3VydmUsIHN0YXJ0V2lkdGgsIGVuZFdpZHRoKSB7XG4gIHZhciBjdHggPSB0aGlzLl9jdHg7XG4gIHZhciB3aWR0aERlbHRhID0gZW5kV2lkdGggLSBzdGFydFdpZHRoO1xuICB2YXIgZHJhd1N0ZXBzID0gTWF0aC5mbG9vcihjdXJ2ZS5sZW5ndGgoKSk7XG5cbiAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZHJhd1N0ZXBzOyBpICs9IDEpIHtcbiAgICAvLyBDYWxjdWxhdGUgdGhlIEJlemllciAoeCwgeSkgY29vcmRpbmF0ZSBmb3IgdGhpcyBzdGVwLlxuICAgIHZhciB0ID0gaSAvIGRyYXdTdGVwcztcbiAgICB2YXIgdHQgPSB0ICogdDtcbiAgICB2YXIgdHR0ID0gdHQgKiB0O1xuICAgIHZhciB1ID0gMSAtIHQ7XG4gICAgdmFyIHV1ID0gdSAqIHU7XG4gICAgdmFyIHV1dSA9IHV1ICogdTtcblxuICAgIHZhciB4ID0gdXV1ICogY3VydmUuc3RhcnRQb2ludC54O1xuICAgIHggKz0gMyAqIHV1ICogdCAqIGN1cnZlLmNvbnRyb2wxLng7XG4gICAgeCArPSAzICogdSAqIHR0ICogY3VydmUuY29udHJvbDIueDtcbiAgICB4ICs9IHR0dCAqIGN1cnZlLmVuZFBvaW50Lng7XG5cbiAgICB2YXIgeSA9IHV1dSAqIGN1cnZlLnN0YXJ0UG9pbnQueTtcbiAgICB5ICs9IDMgKiB1dSAqIHQgKiBjdXJ2ZS5jb250cm9sMS55O1xuICAgIHkgKz0gMyAqIHUgKiB0dCAqIGN1cnZlLmNvbnRyb2wyLnk7XG4gICAgeSArPSB0dHQgKiBjdXJ2ZS5lbmRQb2ludC55O1xuXG4gICAgdmFyIHdpZHRoID0gc3RhcnRXaWR0aCArIHR0dCAqIHdpZHRoRGVsdGE7XG4gICAgdGhpcy5fZHJhd1BvaW50KHgsIHksIHdpZHRoKTtcbiAgfVxuXG4gIGN0eC5jbG9zZVBhdGgoKTtcbiAgY3R4LmZpbGwoKTtcbn07XG5cblNpZ25hdHVyZVBhZC5wcm90b3R5cGUuX2RyYXdEb3QgPSBmdW5jdGlvbiAocG9pbnQpIHtcbiAgdmFyIGN0eCA9IHRoaXMuX2N0eDtcbiAgdmFyIHdpZHRoID0gdHlwZW9mIHRoaXMuZG90U2l6ZSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuZG90U2l6ZSgpIDogdGhpcy5kb3RTaXplO1xuXG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgdGhpcy5fZHJhd1BvaW50KHBvaW50LngsIHBvaW50LnksIHdpZHRoKTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguZmlsbCgpO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5fZnJvbURhdGEgPSBmdW5jdGlvbiAocG9pbnRHcm91cHMsIGRyYXdDdXJ2ZSwgZHJhd0RvdCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50R3JvdXBzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGdyb3VwID0gcG9pbnRHcm91cHNbaV07XG5cbiAgICBpZiAoZ3JvdXAubGVuZ3RoID4gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBncm91cC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB2YXIgcmF3UG9pbnQgPSBncm91cFtqXTtcbiAgICAgICAgdmFyIHBvaW50ID0gbmV3IFBvaW50KHJhd1BvaW50LngsIHJhd1BvaW50LnksIHJhd1BvaW50LnRpbWUpO1xuICAgICAgICB2YXIgY29sb3IgPSByYXdQb2ludC5jb2xvcjtcblxuICAgICAgICBpZiAoaiA9PT0gMCkge1xuICAgICAgICAgIC8vIEZpcnN0IHBvaW50IGluIGEgZ3JvdXAuIE5vdGhpbmcgdG8gZHJhdyB5ZXQuXG5cbiAgICAgICAgICAvLyBBbGwgcG9pbnRzIGluIHRoZSBncm91cCBoYXZlIHRoZSBzYW1lIGNvbG9yLCBzbyBpdCdzIGVub3VnaCB0byBzZXRcbiAgICAgICAgICAvLyBwZW5Db2xvciBqdXN0IGF0IHRoZSBiZWdpbm5pbmcuXG4gICAgICAgICAgdGhpcy5wZW5Db2xvciA9IGNvbG9yO1xuICAgICAgICAgIHRoaXMuX3Jlc2V0KCk7XG5cbiAgICAgICAgICB0aGlzLl9hZGRQb2ludChwb2ludCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaiAhPT0gZ3JvdXAubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIC8vIE1pZGRsZSBwb2ludCBpbiBhIGdyb3VwLlxuICAgICAgICAgIHZhciBfYWRkUG9pbnQyID0gdGhpcy5fYWRkUG9pbnQocG9pbnQpLFxuICAgICAgICAgICAgICBjdXJ2ZSA9IF9hZGRQb2ludDIuY3VydmUsXG4gICAgICAgICAgICAgIHdpZHRocyA9IF9hZGRQb2ludDIud2lkdGhzO1xuXG4gICAgICAgICAgaWYgKGN1cnZlICYmIHdpZHRocykge1xuICAgICAgICAgICAgZHJhd0N1cnZlKGN1cnZlLCB3aWR0aHMsIGNvbG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTGFzdCBwb2ludCBpbiBhIGdyb3VwLiBEbyBub3RoaW5nLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICB2YXIgX3Jhd1BvaW50ID0gZ3JvdXBbMF07XG4gICAgICBkcmF3RG90KF9yYXdQb2ludCk7XG4gICAgfVxuICB9XG59O1xuXG5TaWduYXR1cmVQYWQucHJvdG90eXBlLl90b1NWRyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgdmFyIHBvaW50R3JvdXBzID0gdGhpcy5fZGF0YTtcbiAgdmFyIGNhbnZhcyA9IHRoaXMuX2NhbnZhcztcbiAgdmFyIHJhdGlvID0gTWF0aC5tYXgod2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSwgMSk7XG4gIHZhciBtaW5YID0gMDtcbiAgdmFyIG1pblkgPSAwO1xuICB2YXIgbWF4WCA9IGNhbnZhcy53aWR0aCAvIHJhdGlvO1xuICB2YXIgbWF4WSA9IGNhbnZhcy5oZWlnaHQgLyByYXRpbztcbiAgdmFyIHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG5cbiAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICd3aWR0aCcsIGNhbnZhcy53aWR0aCk7XG4gIHN2Zy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnaGVpZ2h0JywgY2FudmFzLmhlaWdodCk7XG5cbiAgdGhpcy5fZnJvbURhdGEocG9pbnRHcm91cHMsIGZ1bmN0aW9uIChjdXJ2ZSwgd2lkdGhzLCBjb2xvcikge1xuICAgIHZhciBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncGF0aCcpO1xuXG4gICAgLy8gTmVlZCB0byBjaGVjayBjdXJ2ZSBmb3IgTmFOIHZhbHVlcywgdGhlc2UgcG9wIHVwIHdoZW4gZHJhd2luZ1xuICAgIC8vIGxpbmVzIG9uIHRoZSBjYW52YXMgdGhhdCBhcmUgbm90IGNvbnRpbnVvdXMuIEUuZy4gU2hhcnAgY29ybmVyc1xuICAgIC8vIG9yIHN0b3BwaW5nIG1pZC1zdHJva2UgYW5kIHRoYW4gY29udGludWluZyB3aXRob3V0IGxpZnRpbmcgbW91c2UuXG4gICAgaWYgKCFpc05hTihjdXJ2ZS5jb250cm9sMS54KSAmJiAhaXNOYU4oY3VydmUuY29udHJvbDEueSkgJiYgIWlzTmFOKGN1cnZlLmNvbnRyb2wyLngpICYmICFpc05hTihjdXJ2ZS5jb250cm9sMi55KSkge1xuICAgICAgdmFyIGF0dHIgPSAnTSAnICsgY3VydmUuc3RhcnRQb2ludC54LnRvRml4ZWQoMykgKyAnLCcgKyBjdXJ2ZS5zdGFydFBvaW50LnkudG9GaXhlZCgzKSArICcgJyArICgnQyAnICsgY3VydmUuY29udHJvbDEueC50b0ZpeGVkKDMpICsgJywnICsgY3VydmUuY29udHJvbDEueS50b0ZpeGVkKDMpICsgJyAnKSArIChjdXJ2ZS5jb250cm9sMi54LnRvRml4ZWQoMykgKyAnLCcgKyBjdXJ2ZS5jb250cm9sMi55LnRvRml4ZWQoMykgKyAnICcpICsgKGN1cnZlLmVuZFBvaW50LngudG9GaXhlZCgzKSArICcsJyArIGN1cnZlLmVuZFBvaW50LnkudG9GaXhlZCgzKSk7XG5cbiAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdkJywgYXR0cik7XG4gICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgKHdpZHRocy5lbmQgKiAyLjI1KS50b0ZpeGVkKDMpKTtcbiAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UnLCBjb2xvcik7XG4gICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdub25lJyk7XG4gICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCAncm91bmQnKTtcblxuICAgICAgc3ZnLmFwcGVuZENoaWxkKHBhdGgpO1xuICAgIH1cbiAgfSwgZnVuY3Rpb24gKHJhd1BvaW50KSB7XG4gICAgdmFyIGNpcmNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NpcmNsZScpO1xuICAgIHZhciBkb3RTaXplID0gdHlwZW9mIF90aGlzMi5kb3RTaXplID09PSAnZnVuY3Rpb24nID8gX3RoaXMyLmRvdFNpemUoKSA6IF90aGlzMi5kb3RTaXplO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoJ3InLCBkb3RTaXplKTtcbiAgICBjaXJjbGUuc2V0QXR0cmlidXRlKCdjeCcsIHJhd1BvaW50LngpO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoJ2N5JywgcmF3UG9pbnQueSk7XG4gICAgY2lyY2xlLnNldEF0dHJpYnV0ZSgnZmlsbCcsIHJhd1BvaW50LmNvbG9yKTtcblxuICAgIHN2Zy5hcHBlbmRDaGlsZChjaXJjbGUpO1xuICB9KTtcblxuICB2YXIgcHJlZml4ID0gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJztcbiAgdmFyIGhlYWRlciA9ICc8c3ZnJyArICcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiJyArICcgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCInICsgKCcgdmlld0JveD1cIicgKyBtaW5YICsgJyAnICsgbWluWSArICcgJyArIG1heFggKyAnICcgKyBtYXhZICsgJ1wiJykgKyAoJyB3aWR0aD1cIicgKyBtYXhYICsgJ1wiJykgKyAoJyBoZWlnaHQ9XCInICsgbWF4WSArICdcIicpICsgJz4nO1xuICB2YXIgYm9keSA9IHN2Zy5pbm5lckhUTUw7XG5cbiAgLy8gSUUgaGFjayBmb3IgbWlzc2luZyBpbm5lckhUTUwgcHJvcGVydHkgb24gU1ZHRWxlbWVudFxuICBpZiAoYm9keSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGR1bW15ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZHVtbXknKTtcbiAgICB2YXIgbm9kZXMgPSBzdmcuY2hpbGROb2RlcztcbiAgICBkdW1teS5pbm5lckhUTUwgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGR1bW15LmFwcGVuZENoaWxkKG5vZGVzW2ldLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgfVxuXG4gICAgYm9keSA9IGR1bW15LmlubmVySFRNTDtcbiAgfVxuXG4gIHZhciBmb290ZXIgPSAnPC9zdmc+JztcbiAgdmFyIGRhdGEgPSBoZWFkZXIgKyBib2R5ICsgZm9vdGVyO1xuXG4gIHJldHVybiBwcmVmaXggKyBidG9hKGRhdGEpO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS5mcm9tRGF0YSA9IGZ1bmN0aW9uIChwb2ludEdyb3Vwcykge1xuICB2YXIgX3RoaXMzID0gdGhpcztcblxuICB0aGlzLmNsZWFyKCk7XG5cbiAgdGhpcy5fZnJvbURhdGEocG9pbnRHcm91cHMsIGZ1bmN0aW9uIChjdXJ2ZSwgd2lkdGhzKSB7XG4gICAgcmV0dXJuIF90aGlzMy5fZHJhd0N1cnZlKGN1cnZlLCB3aWR0aHMuc3RhcnQsIHdpZHRocy5lbmQpO1xuICB9LCBmdW5jdGlvbiAocmF3UG9pbnQpIHtcbiAgICByZXR1cm4gX3RoaXMzLl9kcmF3RG90KHJhd1BvaW50KTtcbiAgfSk7XG5cbiAgdGhpcy5fZGF0YSA9IHBvaW50R3JvdXBzO1xufTtcblxuU2lnbmF0dXJlUGFkLnByb3RvdHlwZS50b0RhdGEgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9kYXRhO1xufTtcblxucmV0dXJuIFNpZ25hdHVyZVBhZDtcblxufSkpKTtcbiIsIi8vIFRpbnlDb2xvciB2MS40LjJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZ3JpbnMvVGlueUNvbG9yXG4vLyBCcmlhbiBHcmluc3RlYWQsIE1JVCBMaWNlbnNlXG5cbihmdW5jdGlvbihNYXRoKSB7XG5cbnZhciB0cmltTGVmdCA9IC9eXFxzKy8sXG4gICAgdHJpbVJpZ2h0ID0gL1xccyskLyxcbiAgICB0aW55Q291bnRlciA9IDAsXG4gICAgbWF0aFJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICBtYXRoTWluID0gTWF0aC5taW4sXG4gICAgbWF0aE1heCA9IE1hdGgubWF4LFxuICAgIG1hdGhSYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuZnVuY3Rpb24gdGlueWNvbG9yIChjb2xvciwgb3B0cykge1xuXG4gICAgY29sb3IgPSAoY29sb3IpID8gY29sb3IgOiAnJztcbiAgICBvcHRzID0gb3B0cyB8fCB7IH07XG5cbiAgICAvLyBJZiBpbnB1dCBpcyBhbHJlYWR5IGEgdGlueWNvbG9yLCByZXR1cm4gaXRzZWxmXG4gICAgaWYgKGNvbG9yIGluc3RhbmNlb2YgdGlueWNvbG9yKSB7XG4gICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgICAvLyBJZiB3ZSBhcmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGNhbGwgdXNpbmcgbmV3IGluc3RlYWRcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgdGlueWNvbG9yKSkge1xuICAgICAgICByZXR1cm4gbmV3IHRpbnljb2xvcihjb2xvciwgb3B0cyk7XG4gICAgfVxuXG4gICAgdmFyIHJnYiA9IGlucHV0VG9SR0IoY29sb3IpO1xuICAgIHRoaXMuX29yaWdpbmFsSW5wdXQgPSBjb2xvcixcbiAgICB0aGlzLl9yID0gcmdiLnIsXG4gICAgdGhpcy5fZyA9IHJnYi5nLFxuICAgIHRoaXMuX2IgPSByZ2IuYixcbiAgICB0aGlzLl9hID0gcmdiLmEsXG4gICAgdGhpcy5fcm91bmRBID0gbWF0aFJvdW5kKDEwMCp0aGlzLl9hKSAvIDEwMCxcbiAgICB0aGlzLl9mb3JtYXQgPSBvcHRzLmZvcm1hdCB8fCByZ2IuZm9ybWF0O1xuICAgIHRoaXMuX2dyYWRpZW50VHlwZSA9IG9wdHMuZ3JhZGllbnRUeXBlO1xuXG4gICAgLy8gRG9uJ3QgbGV0IHRoZSByYW5nZSBvZiBbMCwyNTVdIGNvbWUgYmFjayBpbiBbMCwxXS5cbiAgICAvLyBQb3RlbnRpYWxseSBsb3NlIGEgbGl0dGxlIGJpdCBvZiBwcmVjaXNpb24gaGVyZSwgYnV0IHdpbGwgZml4IGlzc3VlcyB3aGVyZVxuICAgIC8vIC41IGdldHMgaW50ZXJwcmV0ZWQgYXMgaGFsZiBvZiB0aGUgdG90YWwsIGluc3RlYWQgb2YgaGFsZiBvZiAxXG4gICAgLy8gSWYgaXQgd2FzIHN1cHBvc2VkIHRvIGJlIDEyOCwgdGhpcyB3YXMgYWxyZWFkeSB0YWtlbiBjYXJlIG9mIGJ5IGBpbnB1dFRvUmdiYFxuICAgIGlmICh0aGlzLl9yIDwgMSkgeyB0aGlzLl9yID0gbWF0aFJvdW5kKHRoaXMuX3IpOyB9XG4gICAgaWYgKHRoaXMuX2cgPCAxKSB7IHRoaXMuX2cgPSBtYXRoUm91bmQodGhpcy5fZyk7IH1cbiAgICBpZiAodGhpcy5fYiA8IDEpIHsgdGhpcy5fYiA9IG1hdGhSb3VuZCh0aGlzLl9iKTsgfVxuXG4gICAgdGhpcy5fb2sgPSByZ2Iub2s7XG4gICAgdGhpcy5fdGNfaWQgPSB0aW55Q291bnRlcisrO1xufVxuXG50aW55Y29sb3IucHJvdG90eXBlID0ge1xuICAgIGlzRGFyazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJyaWdodG5lc3MoKSA8IDEyODtcbiAgICB9LFxuICAgIGlzTGlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaXNEYXJrKCk7XG4gICAgfSxcbiAgICBpc1ZhbGlkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29rO1xuICAgIH0sXG4gICAgZ2V0T3JpZ2luYWxJbnB1dDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fb3JpZ2luYWxJbnB1dDtcbiAgICB9LFxuICAgIGdldEZvcm1hdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXQ7XG4gICAgfSxcbiAgICBnZXRBbHBoYTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hO1xuICAgIH0sXG4gICAgZ2V0QnJpZ2h0bmVzczogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vaHR0cDovL3d3dy53My5vcmcvVFIvQUVSVCNjb2xvci1jb250cmFzdFxuICAgICAgICB2YXIgcmdiID0gdGhpcy50b1JnYigpO1xuICAgICAgICByZXR1cm4gKHJnYi5yICogMjk5ICsgcmdiLmcgKiA1ODcgKyByZ2IuYiAqIDExNCkgLyAxMDAwO1xuICAgIH0sXG4gICAgZ2V0THVtaW5hbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy9odHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3JlbGF0aXZlbHVtaW5hbmNlZGVmXG4gICAgICAgIHZhciByZ2IgPSB0aGlzLnRvUmdiKCk7XG4gICAgICAgIHZhciBSc1JHQiwgR3NSR0IsIEJzUkdCLCBSLCBHLCBCO1xuICAgICAgICBSc1JHQiA9IHJnYi5yLzI1NTtcbiAgICAgICAgR3NSR0IgPSByZ2IuZy8yNTU7XG4gICAgICAgIEJzUkdCID0gcmdiLmIvMjU1O1xuXG4gICAgICAgIGlmIChSc1JHQiA8PSAwLjAzOTI4KSB7UiA9IFJzUkdCIC8gMTIuOTI7fSBlbHNlIHtSID0gTWF0aC5wb3coKChSc1JHQiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTt9XG4gICAgICAgIGlmIChHc1JHQiA8PSAwLjAzOTI4KSB7RyA9IEdzUkdCIC8gMTIuOTI7fSBlbHNlIHtHID0gTWF0aC5wb3coKChHc1JHQiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTt9XG4gICAgICAgIGlmIChCc1JHQiA8PSAwLjAzOTI4KSB7QiA9IEJzUkdCIC8gMTIuOTI7fSBlbHNlIHtCID0gTWF0aC5wb3coKChCc1JHQiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTt9XG4gICAgICAgIHJldHVybiAoMC4yMTI2ICogUikgKyAoMC43MTUyICogRykgKyAoMC4wNzIyICogQik7XG4gICAgfSxcbiAgICBzZXRBbHBoYTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYSA9IGJvdW5kQWxwaGEodmFsdWUpO1xuICAgICAgICB0aGlzLl9yb3VuZEEgPSBtYXRoUm91bmQoMTAwKnRoaXMuX2EpIC8gMTAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHRvSHN2OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhzdiA9IHJnYlRvSHN2KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IpO1xuICAgICAgICByZXR1cm4geyBoOiBoc3YuaCAqIDM2MCwgczogaHN2LnMsIHY6IGhzdi52LCBhOiB0aGlzLl9hIH07XG4gICAgfSxcbiAgICB0b0hzdlN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoc3YgPSByZ2JUb0hzdih0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iKTtcbiAgICAgICAgdmFyIGggPSBtYXRoUm91bmQoaHN2LmggKiAzNjApLCBzID0gbWF0aFJvdW5kKGhzdi5zICogMTAwKSwgdiA9IG1hdGhSb3VuZChoc3YudiAqIDEwMCk7XG4gICAgICAgIHJldHVybiAodGhpcy5fYSA9PSAxKSA/XG4gICAgICAgICAgXCJoc3YoXCIgICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgdiArIFwiJSlcIiA6XG4gICAgICAgICAgXCJoc3ZhKFwiICsgaCArIFwiLCBcIiArIHMgKyBcIiUsIFwiICsgdiArIFwiJSwgXCIrIHRoaXMuX3JvdW5kQSArIFwiKVwiO1xuICAgIH0sXG4gICAgdG9Ic2w6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaHNsID0gcmdiVG9Ic2wodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYik7XG4gICAgICAgIHJldHVybiB7IGg6IGhzbC5oICogMzYwLCBzOiBoc2wucywgbDogaHNsLmwsIGE6IHRoaXMuX2EgfTtcbiAgICB9LFxuICAgIHRvSHNsU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGhzbCA9IHJnYlRvSHNsKHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IpO1xuICAgICAgICB2YXIgaCA9IG1hdGhSb3VuZChoc2wuaCAqIDM2MCksIHMgPSBtYXRoUm91bmQoaHNsLnMgKiAxMDApLCBsID0gbWF0aFJvdW5kKGhzbC5sICogMTAwKTtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9hID09IDEpID9cbiAgICAgICAgICBcImhzbChcIiAgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyBsICsgXCIlKVwiIDpcbiAgICAgICAgICBcImhzbGEoXCIgKyBoICsgXCIsIFwiICsgcyArIFwiJSwgXCIgKyBsICsgXCIlLCBcIisgdGhpcy5fcm91bmRBICsgXCIpXCI7XG4gICAgfSxcbiAgICB0b0hleDogZnVuY3Rpb24oYWxsb3czQ2hhcikge1xuICAgICAgICByZXR1cm4gcmdiVG9IZXgodGhpcy5fciwgdGhpcy5fZywgdGhpcy5fYiwgYWxsb3czQ2hhcik7XG4gICAgfSxcbiAgICB0b0hleFN0cmluZzogZnVuY3Rpb24oYWxsb3czQ2hhcikge1xuICAgICAgICByZXR1cm4gJyMnICsgdGhpcy50b0hleChhbGxvdzNDaGFyKTtcbiAgICB9LFxuICAgIHRvSGV4ODogZnVuY3Rpb24oYWxsb3c0Q2hhcikge1xuICAgICAgICByZXR1cm4gcmdiYVRvSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRoaXMuX2EsIGFsbG93NENoYXIpO1xuICAgIH0sXG4gICAgdG9IZXg4U3RyaW5nOiBmdW5jdGlvbihhbGxvdzRDaGFyKSB7XG4gICAgICAgIHJldHVybiAnIycgKyB0aGlzLnRvSGV4OChhbGxvdzRDaGFyKTtcbiAgICB9LFxuICAgIHRvUmdiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHsgcjogbWF0aFJvdW5kKHRoaXMuX3IpLCBnOiBtYXRoUm91bmQodGhpcy5fZyksIGI6IG1hdGhSb3VuZCh0aGlzLl9iKSwgYTogdGhpcy5fYSB9O1xuICAgIH0sXG4gICAgdG9SZ2JTdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2EgPT0gMSkgP1xuICAgICAgICAgIFwicmdiKFwiICArIG1hdGhSb3VuZCh0aGlzLl9yKSArIFwiLCBcIiArIG1hdGhSb3VuZCh0aGlzLl9nKSArIFwiLCBcIiArIG1hdGhSb3VuZCh0aGlzLl9iKSArIFwiKVwiIDpcbiAgICAgICAgICBcInJnYmEoXCIgKyBtYXRoUm91bmQodGhpcy5fcikgKyBcIiwgXCIgKyBtYXRoUm91bmQodGhpcy5fZykgKyBcIiwgXCIgKyBtYXRoUm91bmQodGhpcy5fYikgKyBcIiwgXCIgKyB0aGlzLl9yb3VuZEEgKyBcIilcIjtcbiAgICB9LFxuICAgIHRvUGVyY2VudGFnZVJnYjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX3IsIDI1NSkgKiAxMDApICsgXCIlXCIsIGc6IG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2csIDI1NSkgKiAxMDApICsgXCIlXCIsIGI6IG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2IsIDI1NSkgKiAxMDApICsgXCIlXCIsIGE6IHRoaXMuX2EgfTtcbiAgICB9LFxuICAgIHRvUGVyY2VudGFnZVJnYlN0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fYSA9PSAxKSA/XG4gICAgICAgICAgXCJyZ2IoXCIgICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fciwgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fZywgMjU1KSAqIDEwMCkgKyBcIiUsIFwiICsgbWF0aFJvdW5kKGJvdW5kMDEodGhpcy5fYiwgMjU1KSAqIDEwMCkgKyBcIiUpXCIgOlxuICAgICAgICAgIFwicmdiYShcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX3IsIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2csIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIG1hdGhSb3VuZChib3VuZDAxKHRoaXMuX2IsIDI1NSkgKiAxMDApICsgXCIlLCBcIiArIHRoaXMuX3JvdW5kQSArIFwiKVwiO1xuICAgIH0sXG4gICAgdG9OYW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2EgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBcInRyYW5zcGFyZW50XCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fYSA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoZXhOYW1lc1tyZ2JUb0hleCh0aGlzLl9yLCB0aGlzLl9nLCB0aGlzLl9iLCB0cnVlKV0gfHwgZmFsc2U7XG4gICAgfSxcbiAgICB0b0ZpbHRlcjogZnVuY3Rpb24oc2Vjb25kQ29sb3IpIHtcbiAgICAgICAgdmFyIGhleDhTdHJpbmcgPSAnIycgKyByZ2JhVG9BcmdiSGV4KHRoaXMuX3IsIHRoaXMuX2csIHRoaXMuX2IsIHRoaXMuX2EpO1xuICAgICAgICB2YXIgc2Vjb25kSGV4OFN0cmluZyA9IGhleDhTdHJpbmc7XG4gICAgICAgIHZhciBncmFkaWVudFR5cGUgPSB0aGlzLl9ncmFkaWVudFR5cGUgPyBcIkdyYWRpZW50VHlwZSA9IDEsIFwiIDogXCJcIjtcblxuICAgICAgICBpZiAoc2Vjb25kQ29sb3IpIHtcbiAgICAgICAgICAgIHZhciBzID0gdGlueWNvbG9yKHNlY29uZENvbG9yKTtcbiAgICAgICAgICAgIHNlY29uZEhleDhTdHJpbmcgPSAnIycgKyByZ2JhVG9BcmdiSGV4KHMuX3IsIHMuX2csIHMuX2IsIHMuX2EpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LmdyYWRpZW50KFwiK2dyYWRpZW50VHlwZStcInN0YXJ0Q29sb3JzdHI9XCIraGV4OFN0cmluZytcIixlbmRDb2xvcnN0cj1cIitzZWNvbmRIZXg4U3RyaW5nK1wiKVwiO1xuICAgIH0sXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKGZvcm1hdCkge1xuICAgICAgICB2YXIgZm9ybWF0U2V0ID0gISFmb3JtYXQ7XG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCB0aGlzLl9mb3JtYXQ7XG5cbiAgICAgICAgdmFyIGZvcm1hdHRlZFN0cmluZyA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFzQWxwaGEgPSB0aGlzLl9hIDwgMSAmJiB0aGlzLl9hID49IDA7XG4gICAgICAgIHZhciBuZWVkc0FscGhhRm9ybWF0ID0gIWZvcm1hdFNldCAmJiBoYXNBbHBoYSAmJiAoZm9ybWF0ID09PSBcImhleFwiIHx8IGZvcm1hdCA9PT0gXCJoZXg2XCIgfHwgZm9ybWF0ID09PSBcImhleDNcIiB8fCBmb3JtYXQgPT09IFwiaGV4NFwiIHx8IGZvcm1hdCA9PT0gXCJoZXg4XCIgfHwgZm9ybWF0ID09PSBcIm5hbWVcIik7XG5cbiAgICAgICAgaWYgKG5lZWRzQWxwaGFGb3JtYXQpIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgXCJ0cmFuc3BhcmVudFwiLCBhbGwgb3RoZXIgbm9uLWFscGhhIGZvcm1hdHNcbiAgICAgICAgICAgIC8vIHdpbGwgcmV0dXJuIHJnYmEgd2hlbiB0aGVyZSBpcyB0cmFuc3BhcmVuY3kuXG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSBcIm5hbWVcIiAmJiB0aGlzLl9hID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9OYW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50b1JnYlN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwicmdiXCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9SZ2JTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcInByZ2JcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b1BlcmNlbnRhZ2VSZ2JTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleFwiIHx8IGZvcm1hdCA9PT0gXCJoZXg2XCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXhTdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleDNcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleFN0cmluZyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0ID09PSBcImhleDRcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hleDhTdHJpbmcodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoZXg4XCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9IZXg4U3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJuYW1lXCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9OYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gXCJoc2xcIikge1xuICAgICAgICAgICAgZm9ybWF0dGVkU3RyaW5nID0gdGhpcy50b0hzbFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtYXQgPT09IFwiaHN2XCIpIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0cmluZyA9IHRoaXMudG9Ic3ZTdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXR0ZWRTdHJpbmcgfHwgdGhpcy50b0hleFN0cmluZygpO1xuICAgIH0sXG4gICAgY2xvbmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGlueWNvbG9yKHRoaXMudG9TdHJpbmcoKSk7XG4gICAgfSxcblxuICAgIF9hcHBseU1vZGlmaWNhdGlvbjogZnVuY3Rpb24oZm4sIGFyZ3MpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gZm4uYXBwbHkobnVsbCwgW3RoaXNdLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3MpKSk7XG4gICAgICAgIHRoaXMuX3IgPSBjb2xvci5fcjtcbiAgICAgICAgdGhpcy5fZyA9IGNvbG9yLl9nO1xuICAgICAgICB0aGlzLl9iID0gY29sb3IuX2I7XG4gICAgICAgIHRoaXMuc2V0QWxwaGEoY29sb3IuX2EpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGxpZ2h0ZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24obGlnaHRlbiwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGJyaWdodGVuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGJyaWdodGVuLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZGFya2VuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGRhcmtlbiwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGRlc2F0dXJhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oZGVzYXR1cmF0ZSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNhdHVyYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKHNhdHVyYXRlLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZ3JleXNjYWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5TW9kaWZpY2F0aW9uKGdyZXlzY2FsZSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHNwaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlNb2RpZmljYXRpb24oc3BpbiwgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgX2FwcGx5Q29tYmluYXRpb246IGZ1bmN0aW9uKGZuLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBbdGhpc10uY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJncykpKTtcbiAgICB9LFxuICAgIGFuYWxvZ291czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKGFuYWxvZ291cywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGNvbXBsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihjb21wbGVtZW50LCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbW9ub2Nocm9tYXRpYzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKG1vbm9jaHJvbWF0aWMsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBzcGxpdGNvbXBsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlDb21iaW5hdGlvbihzcGxpdGNvbXBsZW1lbnQsIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICB0cmlhZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcHBseUNvbWJpbmF0aW9uKHRyaWFkLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgdGV0cmFkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGx5Q29tYmluYXRpb24odGV0cmFkLCBhcmd1bWVudHMpO1xuICAgIH1cbn07XG5cbi8vIElmIGlucHV0IGlzIGFuIG9iamVjdCwgZm9yY2UgMSBpbnRvIFwiMS4wXCIgdG8gaGFuZGxlIHJhdGlvcyBwcm9wZXJseVxuLy8gU3RyaW5nIGlucHV0IHJlcXVpcmVzIFwiMS4wXCIgYXMgaW5wdXQsIHNvIDEgd2lsbCBiZSB0cmVhdGVkIGFzIDFcbnRpbnljb2xvci5mcm9tUmF0aW8gPSBmdW5jdGlvbihjb2xvciwgb3B0cykge1xuICAgIGlmICh0eXBlb2YgY29sb3IgPT0gXCJvYmplY3RcIikge1xuICAgICAgICB2YXIgbmV3Q29sb3IgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBjb2xvcikge1xuICAgICAgICAgICAgaWYgKGNvbG9yLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IFwiYVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbG9yW2ldID0gY29sb3JbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBuZXdDb2xvcltpXSA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3JbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb2xvciA9IG5ld0NvbG9yO1xuICAgIH1cblxuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IsIG9wdHMpO1xufTtcblxuLy8gR2l2ZW4gYSBzdHJpbmcgb3Igb2JqZWN0LCBjb252ZXJ0IHRoYXQgaW5wdXQgdG8gUkdCXG4vLyBQb3NzaWJsZSBzdHJpbmcgaW5wdXRzOlxuLy9cbi8vICAgICBcInJlZFwiXG4vLyAgICAgXCIjZjAwXCIgb3IgXCJmMDBcIlxuLy8gICAgIFwiI2ZmMDAwMFwiIG9yIFwiZmYwMDAwXCJcbi8vICAgICBcIiNmZjAwMDAwMFwiIG9yIFwiZmYwMDAwMDBcIlxuLy8gICAgIFwicmdiIDI1NSAwIDBcIiBvciBcInJnYiAoMjU1LCAwLCAwKVwiXG4vLyAgICAgXCJyZ2IgMS4wIDAgMFwiIG9yIFwicmdiICgxLCAwLCAwKVwiXG4vLyAgICAgXCJyZ2JhICgyNTUsIDAsIDAsIDEpXCIgb3IgXCJyZ2JhIDI1NSwgMCwgMCwgMVwiXG4vLyAgICAgXCJyZ2JhICgxLjAsIDAsIDAsIDEpXCIgb3IgXCJyZ2JhIDEuMCwgMCwgMCwgMVwiXG4vLyAgICAgXCJoc2woMCwgMTAwJSwgNTAlKVwiIG9yIFwiaHNsIDAgMTAwJSA1MCVcIlxuLy8gICAgIFwiaHNsYSgwLCAxMDAlLCA1MCUsIDEpXCIgb3IgXCJoc2xhIDAgMTAwJSA1MCUsIDFcIlxuLy8gICAgIFwiaHN2KDAsIDEwMCUsIDEwMCUpXCIgb3IgXCJoc3YgMCAxMDAlIDEwMCVcIlxuLy9cbmZ1bmN0aW9uIGlucHV0VG9SR0IoY29sb3IpIHtcblxuICAgIHZhciByZ2IgPSB7IHI6IDAsIGc6IDAsIGI6IDAgfTtcbiAgICB2YXIgYSA9IDE7XG4gICAgdmFyIHMgPSBudWxsO1xuICAgIHZhciB2ID0gbnVsbDtcbiAgICB2YXIgbCA9IG51bGw7XG4gICAgdmFyIG9rID0gZmFsc2U7XG4gICAgdmFyIGZvcm1hdCA9IGZhbHNlO1xuXG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbG9yID0gc3RyaW5nSW5wdXRUb09iamVjdChjb2xvcik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChpc1ZhbGlkQ1NTVW5pdChjb2xvci5yKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5nKSAmJiBpc1ZhbGlkQ1NTVW5pdChjb2xvci5iKSkge1xuICAgICAgICAgICAgcmdiID0gcmdiVG9SZ2IoY29sb3IuciwgY29sb3IuZywgY29sb3IuYik7XG4gICAgICAgICAgICBvayA9IHRydWU7XG4gICAgICAgICAgICBmb3JtYXQgPSBTdHJpbmcoY29sb3Iucikuc3Vic3RyKC0xKSA9PT0gXCIlXCIgPyBcInByZ2JcIiA6IFwicmdiXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IuaCkgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IucykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IudikpIHtcbiAgICAgICAgICAgIHMgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnMpO1xuICAgICAgICAgICAgdiA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3Iudik7XG4gICAgICAgICAgICByZ2IgPSBoc3ZUb1JnYihjb2xvci5oLCBzLCB2KTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFwiaHN2XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNWYWxpZENTU1VuaXQoY29sb3IuaCkgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IucykgJiYgaXNWYWxpZENTU1VuaXQoY29sb3IubCkpIHtcbiAgICAgICAgICAgIHMgPSBjb252ZXJ0VG9QZXJjZW50YWdlKGNvbG9yLnMpO1xuICAgICAgICAgICAgbCA9IGNvbnZlcnRUb1BlcmNlbnRhZ2UoY29sb3IubCk7XG4gICAgICAgICAgICByZ2IgPSBoc2xUb1JnYihjb2xvci5oLCBzLCBsKTtcbiAgICAgICAgICAgIG9rID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvcm1hdCA9IFwiaHNsXCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29sb3IuaGFzT3duUHJvcGVydHkoXCJhXCIpKSB7XG4gICAgICAgICAgICBhID0gY29sb3IuYTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGEgPSBib3VuZEFscGhhKGEpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgb2s6IG9rLFxuICAgICAgICBmb3JtYXQ6IGNvbG9yLmZvcm1hdCB8fCBmb3JtYXQsXG4gICAgICAgIHI6IG1hdGhNaW4oMjU1LCBtYXRoTWF4KHJnYi5yLCAwKSksXG4gICAgICAgIGc6IG1hdGhNaW4oMjU1LCBtYXRoTWF4KHJnYi5nLCAwKSksXG4gICAgICAgIGI6IG1hdGhNaW4oMjU1LCBtYXRoTWF4KHJnYi5iLCAwKSksXG4gICAgICAgIGE6IGFcbiAgICB9O1xufVxuXG5cbi8vIENvbnZlcnNpb24gRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBgcmdiVG9Ic2xgLCBgcmdiVG9Ic3ZgLCBgaHNsVG9SZ2JgLCBgaHN2VG9SZ2JgIG1vZGlmaWVkIGZyb206XG4vLyA8aHR0cDovL21qaWphY2tzb24uY29tLzIwMDgvMDIvcmdiLXRvLWhzbC1hbmQtcmdiLXRvLWhzdi1jb2xvci1tb2RlbC1jb252ZXJzaW9uLWFsZ29yaXRobXMtaW4tamF2YXNjcmlwdD5cblxuLy8gYHJnYlRvUmdiYFxuLy8gSGFuZGxlIGJvdW5kcyAvIHBlcmNlbnRhZ2UgY2hlY2tpbmcgdG8gY29uZm9ybSB0byBDU1MgY29sb3Igc3BlY1xuLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtY29sb3IvPlxuLy8gKkFzc3VtZXM6KiByLCBnLCBiIGluIFswLCAyNTVdIG9yIFswLCAxXVxuLy8gKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiBbMCwgMjU1XVxuZnVuY3Rpb24gcmdiVG9SZ2IociwgZywgYil7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcjogYm91bmQwMShyLCAyNTUpICogMjU1LFxuICAgICAgICBnOiBib3VuZDAxKGcsIDI1NSkgKiAyNTUsXG4gICAgICAgIGI6IGJvdW5kMDEoYiwgMjU1KSAqIDI1NVxuICAgIH07XG59XG5cbi8vIGByZ2JUb0hzbGBcbi8vIENvbnZlcnRzIGFuIFJHQiBjb2xvciB2YWx1ZSB0byBIU0wuXG4vLyAqQXNzdW1lczoqIHIsIGcsIGFuZCBiIGFyZSBjb250YWluZWQgaW4gWzAsIDI1NV0gb3IgWzAsIDFdXG4vLyAqUmV0dXJuczoqIHsgaCwgcywgbCB9IGluIFswLDFdXG5mdW5jdGlvbiByZ2JUb0hzbChyLCBnLCBiKSB7XG5cbiAgICByID0gYm91bmQwMShyLCAyNTUpO1xuICAgIGcgPSBib3VuZDAxKGcsIDI1NSk7XG4gICAgYiA9IGJvdW5kMDEoYiwgMjU1KTtcblxuICAgIHZhciBtYXggPSBtYXRoTWF4KHIsIGcsIGIpLCBtaW4gPSBtYXRoTWluKHIsIGcsIGIpO1xuICAgIHZhciBoLCBzLCBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgaWYobWF4ID09IG1pbikge1xuICAgICAgICBoID0gcyA9IDA7IC8vIGFjaHJvbWF0aWNcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBkID0gbWF4IC0gbWluO1xuICAgICAgICBzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG4gICAgICAgIHN3aXRjaChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjogaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZzogaCA9IChiIC0gcikgLyBkICsgMjsgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGI6IGggPSAociAtIGcpIC8gZCArIDQ7IGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaCAvPSA2O1xuICAgIH1cblxuICAgIHJldHVybiB7IGg6IGgsIHM6IHMsIGw6IGwgfTtcbn1cblxuLy8gYGhzbFRvUmdiYFxuLy8gQ29udmVydHMgYW4gSFNMIGNvbG9yIHZhbHVlIHRvIFJHQi5cbi8vICpBc3N1bWVzOiogaCBpcyBjb250YWluZWQgaW4gWzAsIDFdIG9yIFswLCAzNjBdIGFuZCBzIGFuZCBsIGFyZSBjb250YWluZWQgWzAsIDFdIG9yIFswLCAxMDBdXG4vLyAqUmV0dXJuczoqIHsgciwgZywgYiB9IGluIHRoZSBzZXQgWzAsIDI1NV1cbmZ1bmN0aW9uIGhzbFRvUmdiKGgsIHMsIGwpIHtcbiAgICB2YXIgciwgZywgYjtcblxuICAgIGggPSBib3VuZDAxKGgsIDM2MCk7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICBsID0gYm91bmQwMShsLCAxMDApO1xuXG4gICAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgICAgIGlmKHQgPCAwKSB0ICs9IDE7XG4gICAgICAgIGlmKHQgPiAxKSB0IC09IDE7XG4gICAgICAgIGlmKHQgPCAxLzYpIHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0O1xuICAgICAgICBpZih0IDwgMS8yKSByZXR1cm4gcTtcbiAgICAgICAgaWYodCA8IDIvMykgcmV0dXJuIHAgKyAocSAtIHApICogKDIvMyAtIHQpICogNjtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgfVxuXG4gICAgaWYocyA9PT0gMCkge1xuICAgICAgICByID0gZyA9IGIgPSBsOyAvLyBhY2hyb21hdGljXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgcSA9IGwgPCAwLjUgPyBsICogKDEgKyBzKSA6IGwgKyBzIC0gbCAqIHM7XG4gICAgICAgIHZhciBwID0gMiAqIGwgLSBxO1xuICAgICAgICByID0gaHVlMnJnYihwLCBxLCBoICsgMS8zKTtcbiAgICAgICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxLzMpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHI6IHIgKiAyNTUsIGc6IGcgKiAyNTUsIGI6IGIgKiAyNTUgfTtcbn1cblxuLy8gYHJnYlRvSHN2YFxuLy8gQ29udmVydHMgYW4gUkdCIGNvbG9yIHZhbHVlIHRvIEhTVlxuLy8gKkFzc3VtZXM6KiByLCBnLCBhbmQgYiBhcmUgY29udGFpbmVkIGluIHRoZSBzZXQgWzAsIDI1NV0gb3IgWzAsIDFdXG4vLyAqUmV0dXJuczoqIHsgaCwgcywgdiB9IGluIFswLDFdXG5mdW5jdGlvbiByZ2JUb0hzdihyLCBnLCBiKSB7XG5cbiAgICByID0gYm91bmQwMShyLCAyNTUpO1xuICAgIGcgPSBib3VuZDAxKGcsIDI1NSk7XG4gICAgYiA9IGJvdW5kMDEoYiwgMjU1KTtcblxuICAgIHZhciBtYXggPSBtYXRoTWF4KHIsIGcsIGIpLCBtaW4gPSBtYXRoTWluKHIsIGcsIGIpO1xuICAgIHZhciBoLCBzLCB2ID0gbWF4O1xuXG4gICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgcyA9IG1heCA9PT0gMCA/IDAgOiBkIC8gbWF4O1xuXG4gICAgaWYobWF4ID09IG1pbikge1xuICAgICAgICBoID0gMDsgLy8gYWNocm9tYXRpY1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoKG1heCkge1xuICAgICAgICAgICAgY2FzZSByOiBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBnOiBoID0gKGIgLSByKSAvIGQgKyAyOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjogaCA9IChyIC0gZykgLyBkICsgNDsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaCAvPSA2O1xuICAgIH1cbiAgICByZXR1cm4geyBoOiBoLCBzOiBzLCB2OiB2IH07XG59XG5cbi8vIGBoc3ZUb1JnYmBcbi8vIENvbnZlcnRzIGFuIEhTViBjb2xvciB2YWx1ZSB0byBSR0IuXG4vLyAqQXNzdW1lczoqIGggaXMgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMzYwXSBhbmQgcyBhbmQgdiBhcmUgY29udGFpbmVkIGluIFswLCAxXSBvciBbMCwgMTAwXVxuLy8gKlJldHVybnM6KiB7IHIsIGcsIGIgfSBpbiB0aGUgc2V0IFswLCAyNTVdXG4gZnVuY3Rpb24gaHN2VG9SZ2IoaCwgcywgdikge1xuXG4gICAgaCA9IGJvdW5kMDEoaCwgMzYwKSAqIDY7XG4gICAgcyA9IGJvdW5kMDEocywgMTAwKTtcbiAgICB2ID0gYm91bmQwMSh2LCAxMDApO1xuXG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKGgpLFxuICAgICAgICBmID0gaCAtIGksXG4gICAgICAgIHAgPSB2ICogKDEgLSBzKSxcbiAgICAgICAgcSA9IHYgKiAoMSAtIGYgKiBzKSxcbiAgICAgICAgdCA9IHYgKiAoMSAtICgxIC0gZikgKiBzKSxcbiAgICAgICAgbW9kID0gaSAlIDYsXG4gICAgICAgIHIgPSBbdiwgcSwgcCwgcCwgdCwgdl1bbW9kXSxcbiAgICAgICAgZyA9IFt0LCB2LCB2LCBxLCBwLCBwXVttb2RdLFxuICAgICAgICBiID0gW3AsIHAsIHQsIHYsIHYsIHFdW21vZF07XG5cbiAgICByZXR1cm4geyByOiByICogMjU1LCBnOiBnICogMjU1LCBiOiBiICogMjU1IH07XG59XG5cbi8vIGByZ2JUb0hleGBcbi8vIENvbnZlcnRzIGFuIFJHQiBjb2xvciB0byBoZXhcbi8vIEFzc3VtZXMgciwgZywgYW5kIGIgYXJlIGNvbnRhaW5lZCBpbiB0aGUgc2V0IFswLCAyNTVdXG4vLyBSZXR1cm5zIGEgMyBvciA2IGNoYXJhY3RlciBoZXhcbmZ1bmN0aW9uIHJnYlRvSGV4KHIsIGcsIGIsIGFsbG93M0NoYXIpIHtcblxuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGIpLnRvU3RyaW5nKDE2KSlcbiAgICBdO1xuXG4gICAgLy8gUmV0dXJuIGEgMyBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93M0NoYXIgJiYgaGV4WzBdLmNoYXJBdCgwKSA9PSBoZXhbMF0uY2hhckF0KDEpICYmIGhleFsxXS5jaGFyQXQoMCkgPT0gaGV4WzFdLmNoYXJBdCgxKSAmJiBoZXhbMl0uY2hhckF0KDApID09IGhleFsyXS5jaGFyQXQoMSkpIHtcbiAgICAgICAgcmV0dXJuIGhleFswXS5jaGFyQXQoMCkgKyBoZXhbMV0uY2hhckF0KDApICsgaGV4WzJdLmNoYXJBdCgwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGV4LmpvaW4oXCJcIik7XG59XG5cbi8vIGByZ2JhVG9IZXhgXG4vLyBDb252ZXJ0cyBhbiBSR0JBIGNvbG9yIHBsdXMgYWxwaGEgdHJhbnNwYXJlbmN5IHRvIGhleFxuLy8gQXNzdW1lcyByLCBnLCBiIGFyZSBjb250YWluZWQgaW4gdGhlIHNldCBbMCwgMjU1XSBhbmRcbi8vIGEgaW4gWzAsIDFdLiBSZXR1cm5zIGEgNCBvciA4IGNoYXJhY3RlciByZ2JhIGhleFxuZnVuY3Rpb24gcmdiYVRvSGV4KHIsIGcsIGIsIGEsIGFsbG93NENoYXIpIHtcblxuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIoY29udmVydERlY2ltYWxUb0hleChhKSlcbiAgICBdO1xuXG4gICAgLy8gUmV0dXJuIGEgNCBjaGFyYWN0ZXIgaGV4IGlmIHBvc3NpYmxlXG4gICAgaWYgKGFsbG93NENoYXIgJiYgaGV4WzBdLmNoYXJBdCgwKSA9PSBoZXhbMF0uY2hhckF0KDEpICYmIGhleFsxXS5jaGFyQXQoMCkgPT0gaGV4WzFdLmNoYXJBdCgxKSAmJiBoZXhbMl0uY2hhckF0KDApID09IGhleFsyXS5jaGFyQXQoMSkgJiYgaGV4WzNdLmNoYXJBdCgwKSA9PSBoZXhbM10uY2hhckF0KDEpKSB7XG4gICAgICAgIHJldHVybiBoZXhbMF0uY2hhckF0KDApICsgaGV4WzFdLmNoYXJBdCgwKSArIGhleFsyXS5jaGFyQXQoMCkgKyBoZXhbM10uY2hhckF0KDApO1xuICAgIH1cblxuICAgIHJldHVybiBoZXguam9pbihcIlwiKTtcbn1cblxuLy8gYHJnYmFUb0FyZ2JIZXhgXG4vLyBDb252ZXJ0cyBhbiBSR0JBIGNvbG9yIHRvIGFuIEFSR0IgSGV4OCBzdHJpbmdcbi8vIFJhcmVseSB1c2VkLCBidXQgcmVxdWlyZWQgZm9yIFwidG9GaWx0ZXIoKVwiXG5mdW5jdGlvbiByZ2JhVG9BcmdiSGV4KHIsIGcsIGIsIGEpIHtcblxuICAgIHZhciBoZXggPSBbXG4gICAgICAgIHBhZDIoY29udmVydERlY2ltYWxUb0hleChhKSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKHIpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGcpLnRvU3RyaW5nKDE2KSksXG4gICAgICAgIHBhZDIobWF0aFJvdW5kKGIpLnRvU3RyaW5nKDE2KSlcbiAgICBdO1xuXG4gICAgcmV0dXJuIGhleC5qb2luKFwiXCIpO1xufVxuXG4vLyBgZXF1YWxzYFxuLy8gQ2FuIGJlIGNhbGxlZCB3aXRoIGFueSB0aW55Y29sb3IgaW5wdXRcbnRpbnljb2xvci5lcXVhbHMgPSBmdW5jdGlvbiAoY29sb3IxLCBjb2xvcjIpIHtcbiAgICBpZiAoIWNvbG9yMSB8fCAhY29sb3IyKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IxKS50b1JnYlN0cmluZygpID09IHRpbnljb2xvcihjb2xvcjIpLnRvUmdiU3RyaW5nKCk7XG59O1xuXG50aW55Y29sb3IucmFuZG9tID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpbnljb2xvci5mcm9tUmF0aW8oe1xuICAgICAgICByOiBtYXRoUmFuZG9tKCksXG4gICAgICAgIGc6IG1hdGhSYW5kb20oKSxcbiAgICAgICAgYjogbWF0aFJhbmRvbSgpXG4gICAgfSk7XG59O1xuXG5cbi8vIE1vZGlmaWNhdGlvbiBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRoYW5rcyB0byBsZXNzLmpzIGZvciBzb21lIG9mIHRoZSBiYXNpY3MgaGVyZVxuLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGhlYWQvbGVzcy5qcy9ibG9iL21hc3Rlci9saWIvbGVzcy9mdW5jdGlvbnMuanM+XG5cbmZ1bmN0aW9uIGRlc2F0dXJhdGUoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLnMgLT0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5zID0gY2xhbXAwMShoc2wucyk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG5mdW5jdGlvbiBzYXR1cmF0ZShjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICBoc2wucyArPSBhbW91bnQgLyAxMDA7XG4gICAgaHNsLnMgPSBjbGFtcDAxKGhzbC5zKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIGdyZXlzY2FsZShjb2xvcikge1xuICAgIHJldHVybiB0aW55Y29sb3IoY29sb3IpLmRlc2F0dXJhdGUoMTAwKTtcbn1cblxuZnVuY3Rpb24gbGlnaHRlbiAoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmwgKz0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5sID0gY2xhbXAwMShoc2wubCk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG5mdW5jdGlvbiBicmlnaHRlbihjb2xvciwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCAxMCk7XG4gICAgdmFyIHJnYiA9IHRpbnljb2xvcihjb2xvcikudG9SZ2IoKTtcbiAgICByZ2IuciA9IG1hdGhNYXgoMCwgbWF0aE1pbigyNTUsIHJnYi5yIC0gbWF0aFJvdW5kKDI1NSAqIC0gKGFtb3VudCAvIDEwMCkpKSk7XG4gICAgcmdiLmcgPSBtYXRoTWF4KDAsIG1hdGhNaW4oMjU1LCByZ2IuZyAtIG1hdGhSb3VuZCgyNTUgKiAtIChhbW91bnQgLyAxMDApKSkpO1xuICAgIHJnYi5iID0gbWF0aE1heCgwLCBtYXRoTWluKDI1NSwgcmdiLmIgLSBtYXRoUm91bmQoMjU1ICogLSAoYW1vdW50IC8gMTAwKSkpKTtcbiAgICByZXR1cm4gdGlueWNvbG9yKHJnYik7XG59XG5cbmZ1bmN0aW9uIGRhcmtlbiAoY29sb3IsIGFtb3VudCkge1xuICAgIGFtb3VudCA9IChhbW91bnQgPT09IDApID8gMCA6IChhbW91bnQgfHwgMTApO1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgaHNsLmwgLT0gYW1vdW50IC8gMTAwO1xuICAgIGhzbC5sID0gY2xhbXAwMShoc2wubCk7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG4vLyBTcGluIHRha2VzIGEgcG9zaXRpdmUgb3IgbmVnYXRpdmUgYW1vdW50IHdpdGhpbiBbLTM2MCwgMzYwXSBpbmRpY2F0aW5nIHRoZSBjaGFuZ2Ugb2YgaHVlLlxuLy8gVmFsdWVzIG91dHNpZGUgb2YgdGhpcyByYW5nZSB3aWxsIGJlIHdyYXBwZWQgaW50byB0aGlzIHJhbmdlLlxuZnVuY3Rpb24gc3Bpbihjb2xvciwgYW1vdW50KSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaHVlID0gKGhzbC5oICsgYW1vdW50KSAlIDM2MDtcbiAgICBoc2wuaCA9IGh1ZSA8IDAgPyAzNjAgKyBodWUgOiBodWU7XG4gICAgcmV0dXJuIHRpbnljb2xvcihoc2wpO1xufVxuXG4vLyBDb21iaW5hdGlvbiBGdW5jdGlvbnNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gVGhhbmtzIHRvIGpRdWVyeSB4Q29sb3IgZm9yIHNvbWUgb2YgdGhlIGlkZWFzIGJlaGluZCB0aGVzZVxuLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9pbmZ1c2lvbi9qUXVlcnkteGNvbG9yL2Jsb2IvbWFzdGVyL2pxdWVyeS54Y29sb3IuanM+XG5cbmZ1bmN0aW9uIGNvbXBsZW1lbnQoY29sb3IpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIGhzbC5oID0gKGhzbC5oICsgMTgwKSAlIDM2MDtcbiAgICByZXR1cm4gdGlueWNvbG9yKGhzbCk7XG59XG5cbmZ1bmN0aW9uIHRyaWFkKGNvbG9yKSB7XG4gICAgdmFyIGhzbCA9IHRpbnljb2xvcihjb2xvcikudG9Ic2woKTtcbiAgICB2YXIgaCA9IGhzbC5oO1xuICAgIHJldHVybiBbXG4gICAgICAgIHRpbnljb2xvcihjb2xvciksXG4gICAgICAgIHRpbnljb2xvcih7IGg6IChoICsgMTIwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDI0MCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KVxuICAgIF07XG59XG5cbmZ1bmN0aW9uIHRldHJhZChjb2xvcikge1xuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIGggPSBoc2wuaDtcbiAgICByZXR1cm4gW1xuICAgICAgICB0aW55Y29sb3IoY29sb3IpLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDkwKSAlIDM2MCwgczogaHNsLnMsIGw6IGhzbC5sIH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDE4MCkgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubCB9KSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyAyNzApICUgMzYwLCBzOiBoc2wucywgbDogaHNsLmwgfSlcbiAgICBdO1xufVxuXG5mdW5jdGlvbiBzcGxpdGNvbXBsZW1lbnQoY29sb3IpIHtcbiAgICB2YXIgaHNsID0gdGlueWNvbG9yKGNvbG9yKS50b0hzbCgpO1xuICAgIHZhciBoID0gaHNsLmg7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdGlueWNvbG9yKGNvbG9yKSxcbiAgICAgICAgdGlueWNvbG9yKHsgaDogKGggKyA3MikgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubH0pLFxuICAgICAgICB0aW55Y29sb3IoeyBoOiAoaCArIDIxNikgJSAzNjAsIHM6IGhzbC5zLCBsOiBoc2wubH0pXG4gICAgXTtcbn1cblxuZnVuY3Rpb24gYW5hbG9nb3VzKGNvbG9yLCByZXN1bHRzLCBzbGljZXMpIHtcbiAgICByZXN1bHRzID0gcmVzdWx0cyB8fCA2O1xuICAgIHNsaWNlcyA9IHNsaWNlcyB8fCAzMDtcblxuICAgIHZhciBoc2wgPSB0aW55Y29sb3IoY29sb3IpLnRvSHNsKCk7XG4gICAgdmFyIHBhcnQgPSAzNjAgLyBzbGljZXM7XG4gICAgdmFyIHJldCA9IFt0aW55Y29sb3IoY29sb3IpXTtcblxuICAgIGZvciAoaHNsLmggPSAoKGhzbC5oIC0gKHBhcnQgKiByZXN1bHRzID4+IDEpKSArIDcyMCkgJSAzNjA7IC0tcmVzdWx0czsgKSB7XG4gICAgICAgIGhzbC5oID0gKGhzbC5oICsgcGFydCkgJSAzNjA7XG4gICAgICAgIHJldC5wdXNoKHRpbnljb2xvcihoc2wpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gbW9ub2Nocm9tYXRpYyhjb2xvciwgcmVzdWx0cykge1xuICAgIHJlc3VsdHMgPSByZXN1bHRzIHx8IDY7XG4gICAgdmFyIGhzdiA9IHRpbnljb2xvcihjb2xvcikudG9Ic3YoKTtcbiAgICB2YXIgaCA9IGhzdi5oLCBzID0gaHN2LnMsIHYgPSBoc3YudjtcbiAgICB2YXIgcmV0ID0gW107XG4gICAgdmFyIG1vZGlmaWNhdGlvbiA9IDEgLyByZXN1bHRzO1xuXG4gICAgd2hpbGUgKHJlc3VsdHMtLSkge1xuICAgICAgICByZXQucHVzaCh0aW55Y29sb3IoeyBoOiBoLCBzOiBzLCB2OiB2fSkpO1xuICAgICAgICB2ID0gKHYgKyBtb2RpZmljYXRpb24pICUgMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xufVxuXG4vLyBVdGlsaXR5IEZ1bmN0aW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnRpbnljb2xvci5taXggPSBmdW5jdGlvbihjb2xvcjEsIGNvbG9yMiwgYW1vdW50KSB7XG4gICAgYW1vdW50ID0gKGFtb3VudCA9PT0gMCkgPyAwIDogKGFtb3VudCB8fCA1MCk7XG5cbiAgICB2YXIgcmdiMSA9IHRpbnljb2xvcihjb2xvcjEpLnRvUmdiKCk7XG4gICAgdmFyIHJnYjIgPSB0aW55Y29sb3IoY29sb3IyKS50b1JnYigpO1xuXG4gICAgdmFyIHAgPSBhbW91bnQgLyAxMDA7XG5cbiAgICB2YXIgcmdiYSA9IHtcbiAgICAgICAgcjogKChyZ2IyLnIgLSByZ2IxLnIpICogcCkgKyByZ2IxLnIsXG4gICAgICAgIGc6ICgocmdiMi5nIC0gcmdiMS5nKSAqIHApICsgcmdiMS5nLFxuICAgICAgICBiOiAoKHJnYjIuYiAtIHJnYjEuYikgKiBwKSArIHJnYjEuYixcbiAgICAgICAgYTogKChyZ2IyLmEgLSByZ2IxLmEpICogcCkgKyByZ2IxLmFcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRpbnljb2xvcihyZ2JhKTtcbn07XG5cblxuLy8gUmVhZGFiaWxpdHkgRnVuY3Rpb25zXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIDxodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI2NvbnRyYXN0LXJhdGlvZGVmIChXQ0FHIFZlcnNpb24gMilcblxuLy8gYGNvbnRyYXN0YFxuLy8gQW5hbHl6ZSB0aGUgMiBjb2xvcnMgYW5kIHJldHVybnMgdGhlIGNvbG9yIGNvbnRyYXN0IGRlZmluZWQgYnkgKFdDQUcgVmVyc2lvbiAyKVxudGlueWNvbG9yLnJlYWRhYmlsaXR5ID0gZnVuY3Rpb24oY29sb3IxLCBjb2xvcjIpIHtcbiAgICB2YXIgYzEgPSB0aW55Y29sb3IoY29sb3IxKTtcbiAgICB2YXIgYzIgPSB0aW55Y29sb3IoY29sb3IyKTtcbiAgICByZXR1cm4gKE1hdGgubWF4KGMxLmdldEx1bWluYW5jZSgpLGMyLmdldEx1bWluYW5jZSgpKSswLjA1KSAvIChNYXRoLm1pbihjMS5nZXRMdW1pbmFuY2UoKSxjMi5nZXRMdW1pbmFuY2UoKSkrMC4wNSk7XG59O1xuXG4vLyBgaXNSZWFkYWJsZWBcbi8vIEVuc3VyZSB0aGF0IGZvcmVncm91bmQgYW5kIGJhY2tncm91bmQgY29sb3IgY29tYmluYXRpb25zIG1lZXQgV0NBRzIgZ3VpZGVsaW5lcy5cbi8vIFRoZSB0aGlyZCBhcmd1bWVudCBpcyBhbiBvcHRpb25hbCBPYmplY3QuXG4vLyAgICAgIHRoZSAnbGV2ZWwnIHByb3BlcnR5IHN0YXRlcyAnQUEnIG9yICdBQUEnIC0gaWYgbWlzc2luZyBvciBpbnZhbGlkLCBpdCBkZWZhdWx0cyB0byAnQUEnO1xuLy8gICAgICB0aGUgJ3NpemUnIHByb3BlcnR5IHN0YXRlcyAnbGFyZ2UnIG9yICdzbWFsbCcgLSBpZiBtaXNzaW5nIG9yIGludmFsaWQsIGl0IGRlZmF1bHRzIHRvICdzbWFsbCcuXG4vLyBJZiB0aGUgZW50aXJlIG9iamVjdCBpcyBhYnNlbnQsIGlzUmVhZGFibGUgZGVmYXVsdHMgdG8ge2xldmVsOlwiQUFcIixzaXplOlwic21hbGxcIn0uXG5cbi8vICpFeGFtcGxlKlxuLy8gICAgdGlueWNvbG9yLmlzUmVhZGFibGUoXCIjMDAwXCIsIFwiIzExMVwiKSA9PiBmYWxzZVxuLy8gICAgdGlueWNvbG9yLmlzUmVhZGFibGUoXCIjMDAwXCIsIFwiIzExMVwiLHtsZXZlbDpcIkFBXCIsc2l6ZTpcImxhcmdlXCJ9KSA9PiBmYWxzZVxudGlueWNvbG9yLmlzUmVhZGFibGUgPSBmdW5jdGlvbihjb2xvcjEsIGNvbG9yMiwgd2NhZzIpIHtcbiAgICB2YXIgcmVhZGFiaWxpdHkgPSB0aW55Y29sb3IucmVhZGFiaWxpdHkoY29sb3IxLCBjb2xvcjIpO1xuICAgIHZhciB3Y2FnMlBhcm1zLCBvdXQ7XG5cbiAgICBvdXQgPSBmYWxzZTtcblxuICAgIHdjYWcyUGFybXMgPSB2YWxpZGF0ZVdDQUcyUGFybXMod2NhZzIpO1xuICAgIHN3aXRjaCAod2NhZzJQYXJtcy5sZXZlbCArIHdjYWcyUGFybXMuc2l6ZSkge1xuICAgICAgICBjYXNlIFwiQUFzbWFsbFwiOlxuICAgICAgICBjYXNlIFwiQUFBbGFyZ2VcIjpcbiAgICAgICAgICAgIG91dCA9IHJlYWRhYmlsaXR5ID49IDQuNTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQUFsYXJnZVwiOlxuICAgICAgICAgICAgb3V0ID0gcmVhZGFiaWxpdHkgPj0gMztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiQUFBc21hbGxcIjpcbiAgICAgICAgICAgIG91dCA9IHJlYWRhYmlsaXR5ID49IDc7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcblxufTtcblxuLy8gYG1vc3RSZWFkYWJsZWBcbi8vIEdpdmVuIGEgYmFzZSBjb2xvciBhbmQgYSBsaXN0IG9mIHBvc3NpYmxlIGZvcmVncm91bmQgb3IgYmFja2dyb3VuZFxuLy8gY29sb3JzIGZvciB0aGF0IGJhc2UsIHJldHVybnMgdGhlIG1vc3QgcmVhZGFibGUgY29sb3IuXG4vLyBPcHRpb25hbGx5IHJldHVybnMgQmxhY2sgb3IgV2hpdGUgaWYgdGhlIG1vc3QgcmVhZGFibGUgY29sb3IgaXMgdW5yZWFkYWJsZS5cbi8vICpFeGFtcGxlKlxuLy8gICAgdGlueWNvbG9yLm1vc3RSZWFkYWJsZSh0aW55Y29sb3IubW9zdFJlYWRhYmxlKFwiIzEyM1wiLCBbXCIjMTI0XCIsIFwiIzEyNVwiXSx7aW5jbHVkZUZhbGxiYWNrQ29sb3JzOmZhbHNlfSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjMTEyMjU1XCJcbi8vICAgIHRpbnljb2xvci5tb3N0UmVhZGFibGUodGlueWNvbG9yLm1vc3RSZWFkYWJsZShcIiMxMjNcIiwgW1wiIzEyNFwiLCBcIiMxMjVcIl0se2luY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlfSkudG9IZXhTdHJpbmcoKTsgIC8vIFwiI2ZmZmZmZlwiXG4vLyAgICB0aW55Y29sb3IubW9zdFJlYWRhYmxlKFwiI2E4MDE1YVwiLCBbXCIjZmFmM2YzXCJdLHtpbmNsdWRlRmFsbGJhY2tDb2xvcnM6dHJ1ZSxsZXZlbDpcIkFBQVwiLHNpemU6XCJsYXJnZVwifSkudG9IZXhTdHJpbmcoKTsgLy8gXCIjZmFmM2YzXCJcbi8vICAgIHRpbnljb2xvci5tb3N0UmVhZGFibGUoXCIjYTgwMTVhXCIsIFtcIiNmYWYzZjNcIl0se2luY2x1ZGVGYWxsYmFja0NvbG9yczp0cnVlLGxldmVsOlwiQUFBXCIsc2l6ZTpcInNtYWxsXCJ9KS50b0hleFN0cmluZygpOyAvLyBcIiNmZmZmZmZcIlxudGlueWNvbG9yLm1vc3RSZWFkYWJsZSA9IGZ1bmN0aW9uKGJhc2VDb2xvciwgY29sb3JMaXN0LCBhcmdzKSB7XG4gICAgdmFyIGJlc3RDb2xvciA9IG51bGw7XG4gICAgdmFyIGJlc3RTY29yZSA9IDA7XG4gICAgdmFyIHJlYWRhYmlsaXR5O1xuICAgIHZhciBpbmNsdWRlRmFsbGJhY2tDb2xvcnMsIGxldmVsLCBzaXplIDtcbiAgICBhcmdzID0gYXJncyB8fCB7fTtcbiAgICBpbmNsdWRlRmFsbGJhY2tDb2xvcnMgPSBhcmdzLmluY2x1ZGVGYWxsYmFja0NvbG9ycyA7XG4gICAgbGV2ZWwgPSBhcmdzLmxldmVsO1xuICAgIHNpemUgPSBhcmdzLnNpemU7XG5cbiAgICBmb3IgKHZhciBpPSAwOyBpIDwgY29sb3JMaXN0Lmxlbmd0aCA7IGkrKykge1xuICAgICAgICByZWFkYWJpbGl0eSA9IHRpbnljb2xvci5yZWFkYWJpbGl0eShiYXNlQ29sb3IsIGNvbG9yTGlzdFtpXSk7XG4gICAgICAgIGlmIChyZWFkYWJpbGl0eSA+IGJlc3RTY29yZSkge1xuICAgICAgICAgICAgYmVzdFNjb3JlID0gcmVhZGFiaWxpdHk7XG4gICAgICAgICAgICBiZXN0Q29sb3IgPSB0aW55Y29sb3IoY29sb3JMaXN0W2ldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aW55Y29sb3IuaXNSZWFkYWJsZShiYXNlQ29sb3IsIGJlc3RDb2xvciwge1wibGV2ZWxcIjpsZXZlbCxcInNpemVcIjpzaXplfSkgfHwgIWluY2x1ZGVGYWxsYmFja0NvbG9ycykge1xuICAgICAgICByZXR1cm4gYmVzdENvbG9yO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXJncy5pbmNsdWRlRmFsbGJhY2tDb2xvcnM9ZmFsc2U7XG4gICAgICAgIHJldHVybiB0aW55Y29sb3IubW9zdFJlYWRhYmxlKGJhc2VDb2xvcixbXCIjZmZmXCIsIFwiIzAwMFwiXSxhcmdzKTtcbiAgICB9XG59O1xuXG5cbi8vIEJpZyBMaXN0IG9mIENvbG9yc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1jb2xvci8jc3ZnLWNvbG9yPlxudmFyIG5hbWVzID0gdGlueWNvbG9yLm5hbWVzID0ge1xuICAgIGFsaWNlYmx1ZTogXCJmMGY4ZmZcIixcbiAgICBhbnRpcXVld2hpdGU6IFwiZmFlYmQ3XCIsXG4gICAgYXF1YTogXCIwZmZcIixcbiAgICBhcXVhbWFyaW5lOiBcIjdmZmZkNFwiLFxuICAgIGF6dXJlOiBcImYwZmZmZlwiLFxuICAgIGJlaWdlOiBcImY1ZjVkY1wiLFxuICAgIGJpc3F1ZTogXCJmZmU0YzRcIixcbiAgICBibGFjazogXCIwMDBcIixcbiAgICBibGFuY2hlZGFsbW9uZDogXCJmZmViY2RcIixcbiAgICBibHVlOiBcIjAwZlwiLFxuICAgIGJsdWV2aW9sZXQ6IFwiOGEyYmUyXCIsXG4gICAgYnJvd246IFwiYTUyYTJhXCIsXG4gICAgYnVybHl3b29kOiBcImRlYjg4N1wiLFxuICAgIGJ1cm50c2llbm5hOiBcImVhN2U1ZFwiLFxuICAgIGNhZGV0Ymx1ZTogXCI1ZjllYTBcIixcbiAgICBjaGFydHJldXNlOiBcIjdmZmYwMFwiLFxuICAgIGNob2NvbGF0ZTogXCJkMjY5MWVcIixcbiAgICBjb3JhbDogXCJmZjdmNTBcIixcbiAgICBjb3JuZmxvd2VyYmx1ZTogXCI2NDk1ZWRcIixcbiAgICBjb3Juc2lsazogXCJmZmY4ZGNcIixcbiAgICBjcmltc29uOiBcImRjMTQzY1wiLFxuICAgIGN5YW46IFwiMGZmXCIsXG4gICAgZGFya2JsdWU6IFwiMDAwMDhiXCIsXG4gICAgZGFya2N5YW46IFwiMDA4YjhiXCIsXG4gICAgZGFya2dvbGRlbnJvZDogXCJiODg2MGJcIixcbiAgICBkYXJrZ3JheTogXCJhOWE5YTlcIixcbiAgICBkYXJrZ3JlZW46IFwiMDA2NDAwXCIsXG4gICAgZGFya2dyZXk6IFwiYTlhOWE5XCIsXG4gICAgZGFya2toYWtpOiBcImJkYjc2YlwiLFxuICAgIGRhcmttYWdlbnRhOiBcIjhiMDA4YlwiLFxuICAgIGRhcmtvbGl2ZWdyZWVuOiBcIjU1NmIyZlwiLFxuICAgIGRhcmtvcmFuZ2U6IFwiZmY4YzAwXCIsXG4gICAgZGFya29yY2hpZDogXCI5OTMyY2NcIixcbiAgICBkYXJrcmVkOiBcIjhiMDAwMFwiLFxuICAgIGRhcmtzYWxtb246IFwiZTk5NjdhXCIsXG4gICAgZGFya3NlYWdyZWVuOiBcIjhmYmM4ZlwiLFxuICAgIGRhcmtzbGF0ZWJsdWU6IFwiNDgzZDhiXCIsXG4gICAgZGFya3NsYXRlZ3JheTogXCIyZjRmNGZcIixcbiAgICBkYXJrc2xhdGVncmV5OiBcIjJmNGY0ZlwiLFxuICAgIGRhcmt0dXJxdW9pc2U6IFwiMDBjZWQxXCIsXG4gICAgZGFya3Zpb2xldDogXCI5NDAwZDNcIixcbiAgICBkZWVwcGluazogXCJmZjE0OTNcIixcbiAgICBkZWVwc2t5Ymx1ZTogXCIwMGJmZmZcIixcbiAgICBkaW1ncmF5OiBcIjY5Njk2OVwiLFxuICAgIGRpbWdyZXk6IFwiNjk2OTY5XCIsXG4gICAgZG9kZ2VyYmx1ZTogXCIxZTkwZmZcIixcbiAgICBmaXJlYnJpY2s6IFwiYjIyMjIyXCIsXG4gICAgZmxvcmFsd2hpdGU6IFwiZmZmYWYwXCIsXG4gICAgZm9yZXN0Z3JlZW46IFwiMjI4YjIyXCIsXG4gICAgZnVjaHNpYTogXCJmMGZcIixcbiAgICBnYWluc2Jvcm86IFwiZGNkY2RjXCIsXG4gICAgZ2hvc3R3aGl0ZTogXCJmOGY4ZmZcIixcbiAgICBnb2xkOiBcImZmZDcwMFwiLFxuICAgIGdvbGRlbnJvZDogXCJkYWE1MjBcIixcbiAgICBncmF5OiBcIjgwODA4MFwiLFxuICAgIGdyZWVuOiBcIjAwODAwMFwiLFxuICAgIGdyZWVueWVsbG93OiBcImFkZmYyZlwiLFxuICAgIGdyZXk6IFwiODA4MDgwXCIsXG4gICAgaG9uZXlkZXc6IFwiZjBmZmYwXCIsXG4gICAgaG90cGluazogXCJmZjY5YjRcIixcbiAgICBpbmRpYW5yZWQ6IFwiY2Q1YzVjXCIsXG4gICAgaW5kaWdvOiBcIjRiMDA4MlwiLFxuICAgIGl2b3J5OiBcImZmZmZmMFwiLFxuICAgIGtoYWtpOiBcImYwZTY4Y1wiLFxuICAgIGxhdmVuZGVyOiBcImU2ZTZmYVwiLFxuICAgIGxhdmVuZGVyYmx1c2g6IFwiZmZmMGY1XCIsXG4gICAgbGF3bmdyZWVuOiBcIjdjZmMwMFwiLFxuICAgIGxlbW9uY2hpZmZvbjogXCJmZmZhY2RcIixcbiAgICBsaWdodGJsdWU6IFwiYWRkOGU2XCIsXG4gICAgbGlnaHRjb3JhbDogXCJmMDgwODBcIixcbiAgICBsaWdodGN5YW46IFwiZTBmZmZmXCIsXG4gICAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IFwiZmFmYWQyXCIsXG4gICAgbGlnaHRncmF5OiBcImQzZDNkM1wiLFxuICAgIGxpZ2h0Z3JlZW46IFwiOTBlZTkwXCIsXG4gICAgbGlnaHRncmV5OiBcImQzZDNkM1wiLFxuICAgIGxpZ2h0cGluazogXCJmZmI2YzFcIixcbiAgICBsaWdodHNhbG1vbjogXCJmZmEwN2FcIixcbiAgICBsaWdodHNlYWdyZWVuOiBcIjIwYjJhYVwiLFxuICAgIGxpZ2h0c2t5Ymx1ZTogXCI4N2NlZmFcIixcbiAgICBsaWdodHNsYXRlZ3JheTogXCI3ODlcIixcbiAgICBsaWdodHNsYXRlZ3JleTogXCI3ODlcIixcbiAgICBsaWdodHN0ZWVsYmx1ZTogXCJiMGM0ZGVcIixcbiAgICBsaWdodHllbGxvdzogXCJmZmZmZTBcIixcbiAgICBsaW1lOiBcIjBmMFwiLFxuICAgIGxpbWVncmVlbjogXCIzMmNkMzJcIixcbiAgICBsaW5lbjogXCJmYWYwZTZcIixcbiAgICBtYWdlbnRhOiBcImYwZlwiLFxuICAgIG1hcm9vbjogXCI4MDAwMDBcIixcbiAgICBtZWRpdW1hcXVhbWFyaW5lOiBcIjY2Y2RhYVwiLFxuICAgIG1lZGl1bWJsdWU6IFwiMDAwMGNkXCIsXG4gICAgbWVkaXVtb3JjaGlkOiBcImJhNTVkM1wiLFxuICAgIG1lZGl1bXB1cnBsZTogXCI5MzcwZGJcIixcbiAgICBtZWRpdW1zZWFncmVlbjogXCIzY2IzNzFcIixcbiAgICBtZWRpdW1zbGF0ZWJsdWU6IFwiN2I2OGVlXCIsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46IFwiMDBmYTlhXCIsXG4gICAgbWVkaXVtdHVycXVvaXNlOiBcIjQ4ZDFjY1wiLFxuICAgIG1lZGl1bXZpb2xldHJlZDogXCJjNzE1ODVcIixcbiAgICBtaWRuaWdodGJsdWU6IFwiMTkxOTcwXCIsXG4gICAgbWludGNyZWFtOiBcImY1ZmZmYVwiLFxuICAgIG1pc3R5cm9zZTogXCJmZmU0ZTFcIixcbiAgICBtb2NjYXNpbjogXCJmZmU0YjVcIixcbiAgICBuYXZham93aGl0ZTogXCJmZmRlYWRcIixcbiAgICBuYXZ5OiBcIjAwMDA4MFwiLFxuICAgIG9sZGxhY2U6IFwiZmRmNWU2XCIsXG4gICAgb2xpdmU6IFwiODA4MDAwXCIsXG4gICAgb2xpdmVkcmFiOiBcIjZiOGUyM1wiLFxuICAgIG9yYW5nZTogXCJmZmE1MDBcIixcbiAgICBvcmFuZ2VyZWQ6IFwiZmY0NTAwXCIsXG4gICAgb3JjaGlkOiBcImRhNzBkNlwiLFxuICAgIHBhbGVnb2xkZW5yb2Q6IFwiZWVlOGFhXCIsXG4gICAgcGFsZWdyZWVuOiBcIjk4ZmI5OFwiLFxuICAgIHBhbGV0dXJxdW9pc2U6IFwiYWZlZWVlXCIsXG4gICAgcGFsZXZpb2xldHJlZDogXCJkYjcwOTNcIixcbiAgICBwYXBheWF3aGlwOiBcImZmZWZkNVwiLFxuICAgIHBlYWNocHVmZjogXCJmZmRhYjlcIixcbiAgICBwZXJ1OiBcImNkODUzZlwiLFxuICAgIHBpbms6IFwiZmZjMGNiXCIsXG4gICAgcGx1bTogXCJkZGEwZGRcIixcbiAgICBwb3dkZXJibHVlOiBcImIwZTBlNlwiLFxuICAgIHB1cnBsZTogXCI4MDAwODBcIixcbiAgICByZWJlY2NhcHVycGxlOiBcIjY2MzM5OVwiLFxuICAgIHJlZDogXCJmMDBcIixcbiAgICByb3N5YnJvd246IFwiYmM4ZjhmXCIsXG4gICAgcm95YWxibHVlOiBcIjQxNjllMVwiLFxuICAgIHNhZGRsZWJyb3duOiBcIjhiNDUxM1wiLFxuICAgIHNhbG1vbjogXCJmYTgwNzJcIixcbiAgICBzYW5keWJyb3duOiBcImY0YTQ2MFwiLFxuICAgIHNlYWdyZWVuOiBcIjJlOGI1N1wiLFxuICAgIHNlYXNoZWxsOiBcImZmZjVlZVwiLFxuICAgIHNpZW5uYTogXCJhMDUyMmRcIixcbiAgICBzaWx2ZXI6IFwiYzBjMGMwXCIsXG4gICAgc2t5Ymx1ZTogXCI4N2NlZWJcIixcbiAgICBzbGF0ZWJsdWU6IFwiNmE1YWNkXCIsXG4gICAgc2xhdGVncmF5OiBcIjcwODA5MFwiLFxuICAgIHNsYXRlZ3JleTogXCI3MDgwOTBcIixcbiAgICBzbm93OiBcImZmZmFmYVwiLFxuICAgIHNwcmluZ2dyZWVuOiBcIjAwZmY3ZlwiLFxuICAgIHN0ZWVsYmx1ZTogXCI0NjgyYjRcIixcbiAgICB0YW46IFwiZDJiNDhjXCIsXG4gICAgdGVhbDogXCIwMDgwODBcIixcbiAgICB0aGlzdGxlOiBcImQ4YmZkOFwiLFxuICAgIHRvbWF0bzogXCJmZjYzNDdcIixcbiAgICB0dXJxdW9pc2U6IFwiNDBlMGQwXCIsXG4gICAgdmlvbGV0OiBcImVlODJlZVwiLFxuICAgIHdoZWF0OiBcImY1ZGViM1wiLFxuICAgIHdoaXRlOiBcImZmZlwiLFxuICAgIHdoaXRlc21va2U6IFwiZjVmNWY1XCIsXG4gICAgeWVsbG93OiBcImZmMFwiLFxuICAgIHllbGxvd2dyZWVuOiBcIjlhY2QzMlwiXG59O1xuXG4vLyBNYWtlIGl0IGVhc3kgdG8gYWNjZXNzIGNvbG9ycyB2aWEgYGhleE5hbWVzW2hleF1gXG52YXIgaGV4TmFtZXMgPSB0aW55Y29sb3IuaGV4TmFtZXMgPSBmbGlwKG5hbWVzKTtcblxuXG4vLyBVdGlsaXRpZXNcbi8vIC0tLS0tLS0tLVxuXG4vLyBgeyAnbmFtZTEnOiAndmFsMScgfWAgYmVjb21lcyBgeyAndmFsMSc6ICduYW1lMScgfWBcbmZ1bmN0aW9uIGZsaXAobykge1xuICAgIHZhciBmbGlwcGVkID0geyB9O1xuICAgIGZvciAodmFyIGkgaW4gbykge1xuICAgICAgICBpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgZmxpcHBlZFtvW2ldXSA9IGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZsaXBwZWQ7XG59XG5cbi8vIFJldHVybiBhIHZhbGlkIGFscGhhIHZhbHVlIFswLDFdIHdpdGggYWxsIGludmFsaWQgdmFsdWVzIGJlaW5nIHNldCB0byAxXG5mdW5jdGlvbiBib3VuZEFscGhhKGEpIHtcbiAgICBhID0gcGFyc2VGbG9hdChhKTtcblxuICAgIGlmIChpc05hTihhKSB8fCBhIDwgMCB8fCBhID4gMSkge1xuICAgICAgICBhID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbn1cblxuLy8gVGFrZSBpbnB1dCBmcm9tIFswLCBuXSBhbmQgcmV0dXJuIGl0IGFzIFswLCAxXVxuZnVuY3Rpb24gYm91bmQwMShuLCBtYXgpIHtcbiAgICBpZiAoaXNPbmVQb2ludFplcm8obikpIHsgbiA9IFwiMTAwJVwiOyB9XG5cbiAgICB2YXIgcHJvY2Vzc1BlcmNlbnQgPSBpc1BlcmNlbnRhZ2Uobik7XG4gICAgbiA9IG1hdGhNaW4obWF4LCBtYXRoTWF4KDAsIHBhcnNlRmxvYXQobikpKTtcblxuICAgIC8vIEF1dG9tYXRpY2FsbHkgY29udmVydCBwZXJjZW50YWdlIGludG8gbnVtYmVyXG4gICAgaWYgKHByb2Nlc3NQZXJjZW50KSB7XG4gICAgICAgIG4gPSBwYXJzZUludChuICogbWF4LCAxMCkgLyAxMDA7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9yc1xuICAgIGlmICgoTWF0aC5hYnMobiAtIG1heCkgPCAwLjAwMDAwMSkpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBpbnRvIFswLCAxXSByYW5nZSBpZiBpdCBpc24ndCBhbHJlYWR5XG4gICAgcmV0dXJuIChuICUgbWF4KSAvIHBhcnNlRmxvYXQobWF4KTtcbn1cblxuLy8gRm9yY2UgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxXG5mdW5jdGlvbiBjbGFtcDAxKHZhbCkge1xuICAgIHJldHVybiBtYXRoTWluKDEsIG1hdGhNYXgoMCwgdmFsKSk7XG59XG5cbi8vIFBhcnNlIGEgYmFzZS0xNiBoZXggdmFsdWUgaW50byBhIGJhc2UtMTAgaW50ZWdlclxuZnVuY3Rpb24gcGFyc2VJbnRGcm9tSGV4KHZhbCkge1xuICAgIHJldHVybiBwYXJzZUludCh2YWwsIDE2KTtcbn1cblxuLy8gTmVlZCB0byBoYW5kbGUgMS4wIGFzIDEwMCUsIHNpbmNlIG9uY2UgaXQgaXMgYSBudW1iZXIsIHRoZXJlIGlzIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiBpdCBhbmQgMVxuLy8gPGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzQyMjA3Mi9qYXZhc2NyaXB0LWhvdy10by1kZXRlY3QtbnVtYmVyLWFzLWEtZGVjaW1hbC1pbmNsdWRpbmctMS0wPlxuZnVuY3Rpb24gaXNPbmVQb2ludFplcm8obikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PSBcInN0cmluZ1wiICYmIG4uaW5kZXhPZignLicpICE9IC0xICYmIHBhcnNlRmxvYXQobikgPT09IDE7XG59XG5cbi8vIENoZWNrIHRvIHNlZSBpZiBzdHJpbmcgcGFzc2VkIGluIGlzIGEgcGVyY2VudGFnZVxuZnVuY3Rpb24gaXNQZXJjZW50YWdlKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09IFwic3RyaW5nXCIgJiYgbi5pbmRleE9mKCclJykgIT0gLTE7XG59XG5cbi8vIEZvcmNlIGEgaGV4IHZhbHVlIHRvIGhhdmUgMiBjaGFyYWN0ZXJzXG5mdW5jdGlvbiBwYWQyKGMpIHtcbiAgICByZXR1cm4gYy5sZW5ndGggPT0gMSA/ICcwJyArIGMgOiAnJyArIGM7XG59XG5cbi8vIFJlcGxhY2UgYSBkZWNpbWFsIHdpdGggaXQncyBwZXJjZW50YWdlIHZhbHVlXG5mdW5jdGlvbiBjb252ZXJ0VG9QZXJjZW50YWdlKG4pIHtcbiAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgIG4gPSAobiAqIDEwMCkgKyBcIiVcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gbjtcbn1cblxuLy8gQ29udmVydHMgYSBkZWNpbWFsIHRvIGEgaGV4IHZhbHVlXG5mdW5jdGlvbiBjb252ZXJ0RGVjaW1hbFRvSGV4KGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGQpICogMjU1KS50b1N0cmluZygxNik7XG59XG4vLyBDb252ZXJ0cyBhIGhleCB2YWx1ZSB0byBhIGRlY2ltYWxcbmZ1bmN0aW9uIGNvbnZlcnRIZXhUb0RlY2ltYWwoaCkge1xuICAgIHJldHVybiAocGFyc2VJbnRGcm9tSGV4KGgpIC8gMjU1KTtcbn1cblxudmFyIG1hdGNoZXJzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gPGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtdmFsdWVzLyNpbnRlZ2Vycz5cbiAgICB2YXIgQ1NTX0lOVEVHRVIgPSBcIlstXFxcXCtdP1xcXFxkKyU/XCI7XG5cbiAgICAvLyA8aHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy12YWx1ZXMvI251bWJlci12YWx1ZT5cbiAgICB2YXIgQ1NTX05VTUJFUiA9IFwiWy1cXFxcK10/XFxcXGQqXFxcXC5cXFxcZCslP1wiO1xuXG4gICAgLy8gQWxsb3cgcG9zaXRpdmUvbmVnYXRpdmUgaW50ZWdlci9udW1iZXIuICBEb24ndCBjYXB0dXJlIHRoZSBlaXRoZXIvb3IsIGp1c3QgdGhlIGVudGlyZSBvdXRjb21lLlxuICAgIHZhciBDU1NfVU5JVCA9IFwiKD86XCIgKyBDU1NfTlVNQkVSICsgXCIpfCg/OlwiICsgQ1NTX0lOVEVHRVIgKyBcIilcIjtcblxuICAgIC8vIEFjdHVhbCBtYXRjaGluZy5cbiAgICAvLyBQYXJlbnRoZXNlcyBhbmQgY29tbWFzIGFyZSBvcHRpb25hbCwgYnV0IG5vdCByZXF1aXJlZC5cbiAgICAvLyBXaGl0ZXNwYWNlIGNhbiB0YWtlIHRoZSBwbGFjZSBvZiBjb21tYXMgb3Igb3BlbmluZyBwYXJlblxuICAgIHZhciBQRVJNSVNTSVZFX01BVENIMyA9IFwiW1xcXFxzfFxcXFwoXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVxcXFxzKlxcXFwpP1wiO1xuICAgIHZhciBQRVJNSVNTSVZFX01BVENINCA9IFwiW1xcXFxzfFxcXFwoXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVssfFxcXFxzXSsoXCIgKyBDU1NfVU5JVCArIFwiKVxcXFxzKlxcXFwpP1wiO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgQ1NTX1VOSVQ6IG5ldyBSZWdFeHAoQ1NTX1VOSVQpLFxuICAgICAgICByZ2I6IG5ldyBSZWdFeHAoXCJyZ2JcIiArIFBFUk1JU1NJVkVfTUFUQ0gzKSxcbiAgICAgICAgcmdiYTogbmV3IFJlZ0V4cChcInJnYmFcIiArIFBFUk1JU1NJVkVfTUFUQ0g0KSxcbiAgICAgICAgaHNsOiBuZXcgUmVnRXhwKFwiaHNsXCIgKyBQRVJNSVNTSVZFX01BVENIMyksXG4gICAgICAgIGhzbGE6IG5ldyBSZWdFeHAoXCJoc2xhXCIgKyBQRVJNSVNTSVZFX01BVENINCksXG4gICAgICAgIGhzdjogbmV3IFJlZ0V4cChcImhzdlwiICsgUEVSTUlTU0lWRV9NQVRDSDMpLFxuICAgICAgICBoc3ZhOiBuZXcgUmVnRXhwKFwiaHN2YVwiICsgUEVSTUlTU0lWRV9NQVRDSDQpLFxuICAgICAgICBoZXgzOiAvXiM/KFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pJC8sXG4gICAgICAgIGhleDY6IC9eIz8oWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkLyxcbiAgICAgICAgaGV4NDogL14jPyhbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLyxcbiAgICAgICAgaGV4ODogL14jPyhbMC05YS1mQS1GXXsyfSkoWzAtOWEtZkEtRl17Mn0pKFswLTlhLWZBLUZdezJ9KShbMC05YS1mQS1GXXsyfSkkL1xuICAgIH07XG59KSgpO1xuXG4vLyBgaXNWYWxpZENTU1VuaXRgXG4vLyBUYWtlIGluIGEgc2luZ2xlIHN0cmluZyAvIG51bWJlciBhbmQgY2hlY2sgdG8gc2VlIGlmIGl0IGxvb2tzIGxpa2UgYSBDU1MgdW5pdFxuLy8gKHNlZSBgbWF0Y2hlcnNgIGFib3ZlIGZvciBkZWZpbml0aW9uKS5cbmZ1bmN0aW9uIGlzVmFsaWRDU1NVbml0KGNvbG9yKSB7XG4gICAgcmV0dXJuICEhbWF0Y2hlcnMuQ1NTX1VOSVQuZXhlYyhjb2xvcik7XG59XG5cbi8vIGBzdHJpbmdJbnB1dFRvT2JqZWN0YFxuLy8gUGVybWlzc2l2ZSBzdHJpbmcgcGFyc2luZy4gIFRha2UgaW4gYSBudW1iZXIgb2YgZm9ybWF0cywgYW5kIG91dHB1dCBhbiBvYmplY3Rcbi8vIGJhc2VkIG9uIGRldGVjdGVkIGZvcm1hdC4gIFJldHVybnMgYHsgciwgZywgYiB9YCBvciBgeyBoLCBzLCBsIH1gIG9yIGB7IGgsIHMsIHZ9YFxuZnVuY3Rpb24gc3RyaW5nSW5wdXRUb09iamVjdChjb2xvcikge1xuXG4gICAgY29sb3IgPSBjb2xvci5yZXBsYWNlKHRyaW1MZWZ0LCcnKS5yZXBsYWNlKHRyaW1SaWdodCwgJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIG5hbWVkID0gZmFsc2U7XG4gICAgaWYgKG5hbWVzW2NvbG9yXSkge1xuICAgICAgICBjb2xvciA9IG5hbWVzW2NvbG9yXTtcbiAgICAgICAgbmFtZWQgPSB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb2xvciA9PSAndHJhbnNwYXJlbnQnKSB7XG4gICAgICAgIHJldHVybiB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDAsIGZvcm1hdDogXCJuYW1lXCIgfTtcbiAgICB9XG5cbiAgICAvLyBUcnkgdG8gbWF0Y2ggc3RyaW5nIGlucHV0IHVzaW5nIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gICAgLy8gS2VlcCBtb3N0IG9mIHRoZSBudW1iZXIgYm91bmRpbmcgb3V0IG9mIHRoaXMgZnVuY3Rpb24gLSBkb24ndCB3b3JyeSBhYm91dCBbMCwxXSBvciBbMCwxMDBdIG9yIFswLDM2MF1cbiAgICAvLyBKdXN0IHJldHVybiBhbiBvYmplY3QgYW5kIGxldCB0aGUgY29udmVyc2lvbiBmdW5jdGlvbnMgaGFuZGxlIHRoYXQuXG4gICAgLy8gVGhpcyB3YXkgdGhlIHJlc3VsdCB3aWxsIGJlIHRoZSBzYW1lIHdoZXRoZXIgdGhlIHRpbnljb2xvciBpcyBpbml0aWFsaXplZCB3aXRoIHN0cmluZyBvciBvYmplY3QuXG4gICAgdmFyIG1hdGNoO1xuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5yZ2IuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLnJnYmEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IHI6IG1hdGNoWzFdLCBnOiBtYXRjaFsyXSwgYjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc2wuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzbGEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgbDogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oc3YuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10gfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhzdmEuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7IGg6IG1hdGNoWzFdLCBzOiBtYXRjaFsyXSwgdjogbWF0Y2hbM10sIGE6IG1hdGNoWzRdIH07XG4gICAgfVxuICAgIGlmICgobWF0Y2ggPSBtYXRjaGVycy5oZXg4LmV4ZWMoY29sb3IpKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10pLFxuICAgICAgICAgICAgYTogY29udmVydEhleFRvRGVjaW1hbChtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gXCJuYW1lXCIgOiBcImhleDhcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaGV4Ni5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSksXG4gICAgICAgICAgICBnOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4XCJcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKChtYXRjaCA9IG1hdGNoZXJzLmhleDQuZXhlYyhjb2xvcikpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByOiBwYXJzZUludEZyb21IZXgobWF0Y2hbMV0gKyAnJyArIG1hdGNoWzFdKSxcbiAgICAgICAgICAgIGc6IHBhcnNlSW50RnJvbUhleChtYXRjaFsyXSArICcnICsgbWF0Y2hbMl0pLFxuICAgICAgICAgICAgYjogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzNdICsgJycgKyBtYXRjaFszXSksXG4gICAgICAgICAgICBhOiBjb252ZXJ0SGV4VG9EZWNpbWFsKG1hdGNoWzRdICsgJycgKyBtYXRjaFs0XSksXG4gICAgICAgICAgICBmb3JtYXQ6IG5hbWVkID8gXCJuYW1lXCIgOiBcImhleDhcIlxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoKG1hdGNoID0gbWF0Y2hlcnMuaGV4My5leGVjKGNvbG9yKSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHI6IHBhcnNlSW50RnJvbUhleChtYXRjaFsxXSArICcnICsgbWF0Y2hbMV0pLFxuICAgICAgICAgICAgZzogcGFyc2VJbnRGcm9tSGV4KG1hdGNoWzJdICsgJycgKyBtYXRjaFsyXSksXG4gICAgICAgICAgICBiOiBwYXJzZUludEZyb21IZXgobWF0Y2hbM10gKyAnJyArIG1hdGNoWzNdKSxcbiAgICAgICAgICAgIGZvcm1hdDogbmFtZWQgPyBcIm5hbWVcIiA6IFwiaGV4XCJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlV0NBRzJQYXJtcyhwYXJtcykge1xuICAgIC8vIHJldHVybiB2YWxpZCBXQ0FHMiBwYXJtcyBmb3IgaXNSZWFkYWJsZS5cbiAgICAvLyBJZiBpbnB1dCBwYXJtcyBhcmUgaW52YWxpZCwgcmV0dXJuIHtcImxldmVsXCI6XCJBQVwiLCBcInNpemVcIjpcInNtYWxsXCJ9XG4gICAgdmFyIGxldmVsLCBzaXplO1xuICAgIHBhcm1zID0gcGFybXMgfHwge1wibGV2ZWxcIjpcIkFBXCIsIFwic2l6ZVwiOlwic21hbGxcIn07XG4gICAgbGV2ZWwgPSAocGFybXMubGV2ZWwgfHwgXCJBQVwiKS50b1VwcGVyQ2FzZSgpO1xuICAgIHNpemUgPSAocGFybXMuc2l6ZSB8fCBcInNtYWxsXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxldmVsICE9PSBcIkFBXCIgJiYgbGV2ZWwgIT09IFwiQUFBXCIpIHtcbiAgICAgICAgbGV2ZWwgPSBcIkFBXCI7XG4gICAgfVxuICAgIGlmIChzaXplICE9PSBcInNtYWxsXCIgJiYgc2l6ZSAhPT0gXCJsYXJnZVwiKSB7XG4gICAgICAgIHNpemUgPSBcInNtYWxsXCI7XG4gICAgfVxuICAgIHJldHVybiB7XCJsZXZlbFwiOmxldmVsLCBcInNpemVcIjpzaXplfTtcbn1cblxuLy8gTm9kZTogRXhwb3J0IGZ1bmN0aW9uXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gdGlueWNvbG9yO1xufVxuLy8gQU1EL3JlcXVpcmVqczogRGVmaW5lIHRoZSBtb2R1bGVcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7cmV0dXJuIHRpbnljb2xvcjt9KTtcbn1cbi8vIEJyb3dzZXI6IEV4cG9zZSB0byB3aW5kb3dcbmVsc2Uge1xuICAgIHdpbmRvdy50aW55Y29sb3IgPSB0aW55Y29sb3I7XG59XG5cbn0pKE1hdGgpO1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy50cmltQ2FudmFzPXQoKTplLnRyaW1DYW52YXM9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQobil7aWYocltuXSlyZXR1cm4gcltuXS5leHBvcnRzO3ZhciBvPXJbbl09e2V4cG9ydHM6e30saWQ6bixsb2FkZWQ6ITF9O3JldHVybiBlW25dLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHQpLG8ubG9hZGVkPSEwLG8uZXhwb3J0c312YXIgcj17fTtyZXR1cm4gdC5tPWUsdC5jPXIsdC5wPVwiXCIsdCgwKX0oW2Z1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXt2YXIgdD1lLmdldENvbnRleHQoXCIyZFwiKSxyPWUud2lkdGgsbj1lLmhlaWdodCxvPXQuZ2V0SW1hZ2VEYXRhKDAsMCxyLG4pLmRhdGEsZj1hKCEwLHIsbixvKSxpPWEoITEscixuLG8pLGM9dSghMCxyLG4sbyksZD11KCExLHIsbixvKSxwPWQtYysxLGw9aS1mKzEscz10LmdldEltYWdlRGF0YShjLGYscCxsKTtyZXR1cm4gZS53aWR0aD1wLGUuaGVpZ2h0PWwsdC5jbGVhclJlY3QoMCwwLHAsbCksdC5wdXRJbWFnZURhdGEocywwLDApLGV9ZnVuY3Rpb24gbihlLHQscixuKXtyZXR1cm57cmVkOm5bNCoocip0K2UpXSxncmVlbjpuWzQqKHIqdCtlKSsxXSxibHVlOm5bNCoocip0K2UpKzJdLGFscGhhOm5bNCoocip0K2UpKzNdfX1mdW5jdGlvbiBvKGUsdCxyLG8pe3JldHVybiBuKGUsdCxyLG8pLmFscGhhfWZ1bmN0aW9uIGEoZSx0LHIsbil7Zm9yKHZhciBhPWU/MTotMSx1PWU/MDpyLTEsZj11O2U/ZjxyOmY+LTE7Zis9YSlmb3IodmFyIGk9MDtpPHQ7aSsrKWlmKG8oaSxmLHQsbikpcmV0dXJuIGY7cmV0dXJuIG51bGx9ZnVuY3Rpb24gdShlLHQscixuKXtmb3IodmFyIGE9ZT8xOi0xLHU9ZT8wOnQtMSxmPXU7ZT9mPHQ6Zj4tMTtmKz1hKWZvcih2YXIgaT0wO2k8cjtpKyspaWYobyhmLGksdCxuKSlyZXR1cm4gZjtyZXR1cm4gbnVsbH1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9cn1dKX0pOyJdfQ=="}